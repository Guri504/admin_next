{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js.map","sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/dist/index.js","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/utils/listwalker.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/utils/model.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/listindentcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/listcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/listmergecommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/listsplitcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/listutils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/utils/view.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/utils/postfixers.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/converters.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/listediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/utils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/listui.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/liststartcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/utils/style.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/liststylecommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/listreversedcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/converters.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/listpropertiesutils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/utils/config.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/listpropertiesediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/ui/listpropertiesview.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties/listpropertiesui.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/listproperties.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/todolist/checktodolistcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/todolist/todocheckboxchangeobserver.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/todolist/todolistediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/todolist/todolistui.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/todolist.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacylistcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacyindentcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacyutils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacylistutils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacyconverters.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylist/legacylistediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylist.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties/legacyliststylecommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties/legacylistreversedcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties/legacyliststartcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties/legacylistpropertiesediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacylistproperties.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacytodolist/legacychecktodolistcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacytodolist/legacytodolistconverters.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacytodolist/legacytodolistediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/legacytodolist.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/list/adjacentlistssupport.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/documentlist.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/documentlistproperties.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-list/src/tododocumentlist.ts"],"sourcesContent":["import { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { toArray, first, uid, CKEditorError, FocusTracker, KeystrokeHandler, global, getCode, parseKeystroke, getLocalizedArrowKeyCodeDirection, createElement, logWarning } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView, View, ViewCollection, FocusCycler, addKeyboardHandlingForGrid, CollapsibleView, LabeledFieldView, createLabeledInputNumber, SwitchButtonView, createDropdown, SplitButtonView, MenuBarMenuView, focusChildOnDropdownOpen } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { DomEventObserver, Matcher, TreeWalker, getFillerOffset } from '@ckeditor/ckeditor5-engine/dist/index.js';\n\n/**\n * Document list blocks iterator.\n */ class ListWalker {\n    /**\n\t * The start list item block element.\n\t */ _startElement;\n    /**\n\t * The reference indent. Initialized by the indent of the start block.\n\t */ _referenceIndent;\n    /**\n\t * The iterating direction.\n\t */ _isForward;\n    /**\n\t * Whether start block should be included in the result (if it's matching other criteria).\n\t */ _includeSelf;\n    /**\n\t * Additional attributes that must be the same for each block.\n\t */ _sameAttributes;\n    /**\n\t * Whether blocks with the same indent level as the start block should be included in the result.\n\t */ _sameIndent;\n    /**\n\t * Whether blocks with a lower indent level than the start block should be included in the result.\n\t */ _lowerIndent;\n    /**\n\t * Whether blocks with a higher indent level than the start block should be included in the result.\n\t */ _higherIndent;\n    /**\n\t * Creates a document list iterator.\n\t *\n\t * @param startElement The start list item block element.\n\t * @param options.direction The iterating direction.\n\t * @param options.includeSelf Whether start block should be included in the result (if it's matching other criteria).\n\t * @param options.sameAttributes Additional attributes that must be the same for each block.\n\t * @param options.sameIndent Whether blocks with the same indent level as the start block should be included\n\t * in the result.\n\t * @param options.lowerIndent Whether blocks with a lower indent level than the start block should be included\n\t * in the result.\n\t * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n\t * in the result.\n\t */ constructor(startElement, options){\n        this._startElement = startElement;\n        this._referenceIndent = startElement.getAttribute('listIndent');\n        this._isForward = options.direction == 'forward';\n        this._includeSelf = !!options.includeSelf;\n        this._sameAttributes = toArray(options.sameAttributes || []);\n        this._sameIndent = !!options.sameIndent;\n        this._lowerIndent = !!options.lowerIndent;\n        this._higherIndent = !!options.higherIndent;\n    }\n    /**\n\t * Performs only first step of iteration and returns the result.\n\t *\n\t * @param startElement The start list item block element.\n\t * @param options.direction The iterating direction.\n\t * @param options.includeSelf Whether start block should be included in the result (if it's matching other criteria).\n\t * @param options.sameAttributes Additional attributes that must be the same for each block.\n\t * @param options.sameIndent Whether blocks with the same indent level as the start block should be included\n\t * in the result.\n\t * @param options.lowerIndent Whether blocks with a lower indent level than the start block should be included\n\t * in the result.\n\t * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n\t * in the result.\n\t */ static first(startElement, options) {\n        const walker = new this(startElement, options);\n        const iterator = walker[Symbol.iterator]();\n        return first(iterator);\n    }\n    /**\n\t * Iterable interface.\n\t */ *[Symbol.iterator]() {\n        const nestedItems = [];\n        for (const { node } of new SiblingListBlocksIterator(this._getStartNode(), this._isForward ? 'forward' : 'backward')){\n            const indent = node.getAttribute('listIndent');\n            // Leaving a nested list.\n            if (indent < this._referenceIndent) {\n                // Abort searching blocks.\n                if (!this._lowerIndent) {\n                    break;\n                }\n                // While searching for lower indents, update the reference indent to find another parent in the next step.\n                this._referenceIndent = indent;\n            } else if (indent > this._referenceIndent) {\n                // Ignore nested blocks.\n                if (!this._higherIndent) {\n                    continue;\n                }\n                // Collect nested blocks to verify if they are really nested, or it's a different item.\n                if (!this._isForward) {\n                    nestedItems.push(node);\n                    continue;\n                }\n            } else {\n                // Ignore same indent block.\n                if (!this._sameIndent) {\n                    // While looking for nested blocks, stop iterating while encountering first same indent block.\n                    if (this._higherIndent) {\n                        // No more nested blocks so yield nested items.\n                        if (nestedItems.length) {\n                            yield* nestedItems;\n                            nestedItems.length = 0;\n                        }\n                        break;\n                    }\n                    continue;\n                }\n                // Abort if item has any additionally specified attribute different.\n                if (this._sameAttributes.some((attr)=>node.getAttribute(attr) !== this._startElement.getAttribute(attr))) {\n                    break;\n                }\n            }\n            // There is another block for the same list item so the nested items were in the same list item.\n            if (nestedItems.length) {\n                yield* nestedItems;\n                nestedItems.length = 0;\n            }\n            yield node;\n        }\n    }\n    /**\n\t * Returns the model element to start iterating.\n\t */ _getStartNode() {\n        if (this._includeSelf) {\n            return this._startElement;\n        }\n        return this._isForward ? this._startElement.nextSibling : this._startElement.previousSibling;\n    }\n}\n/**\n * Iterates sibling list blocks starting from the given node.\n */ class SiblingListBlocksIterator {\n    _node;\n    _isForward;\n    _previousNodesByIndent = [];\n    _previous = null;\n    _previousNodeIndent = null;\n    /**\n\t * @param node The model node.\n\t * @param direction Iteration direction.\n\t */ constructor(node, direction = 'forward'){\n        this._node = node;\n        this._isForward = direction === 'forward';\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        if (!isListItemBlock(this._node)) {\n            return {\n                done: true,\n                value: undefined\n            };\n        }\n        const nodeIndent = this._node.getAttribute('listIndent');\n        let previousNodeInList = null;\n        if (this._previous) {\n            const previousNodeIndent = this._previousNodeIndent;\n            // Let's find previous node for the same indent.\n            // We're going to need that when we get back to previous indent.\n            if (nodeIndent > previousNodeIndent) {\n                this._previousNodesByIndent[previousNodeIndent] = this._previous;\n            } else if (nodeIndent < previousNodeIndent) {\n                previousNodeInList = this._previousNodesByIndent[nodeIndent] || null;\n                this._previousNodesByIndent.length = nodeIndent;\n            } else {\n                previousNodeInList = this._previous;\n            }\n        }\n        const value = {\n            node: this._node,\n            previous: this._previous,\n            previousNodeInList\n        };\n        this._previous = this._node;\n        this._previousNodeIndent = nodeIndent;\n        this._node = this._isForward ? this._node.nextSibling : this._node.previousSibling;\n        return {\n            value,\n            done: false\n        };\n    }\n}\n/**\n * The iterable protocol over the list elements.\n *\n * @internal\n */ class ListBlocksIterable {\n    _listHead;\n    /**\n\t * @param listHead The head element of a list.\n\t */ constructor(listHead){\n        this._listHead = listHead;\n    }\n    /**\n\t * List blocks iterator.\n\t *\n\t * Iterates over all blocks of a list.\n\t */ [Symbol.iterator]() {\n        return new SiblingListBlocksIterator(this._listHead);\n    }\n}\n\n/**\n * The list item ID generator.\n *\n * @internal\n */ class ListItemUid {\n    /**\n\t * Returns the next ID.\n\t *\n\t * @internal\n\t */ /* istanbul ignore next: static function definition -- @preserve */ static next() {\n        return uid();\n    }\n}\n/**\n * Returns true if the given model node is a list item block.\n *\n * @internal\n */ function isListItemBlock(node) {\n    return !!node && node.is('element') && node.hasAttribute('listItemId');\n}\n/**\n * Returns an array with all elements that represents the same list item.\n *\n * It means that values for `listIndent`, and `listItemId` for all items are equal.\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n * in the result.\n */ function getAllListItemBlocks(listItem, options = {}) {\n    return [\n        ...getListItemBlocks(listItem, {\n            ...options,\n            direction: 'backward'\n        }),\n        ...getListItemBlocks(listItem, {\n            ...options,\n            direction: 'forward'\n        })\n    ];\n}\n/**\n * Returns an array with elements that represents the same list item in the specified direction.\n *\n * It means that values for `listIndent` and `listItemId` for all items are equal.\n *\n * **Note**: For backward search the provided item is not included, but for forward search it is included in the result.\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options.direction Walking direction.\n * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included in the result.\n */ function getListItemBlocks(listItem, options = {}) {\n    const isForward = options.direction == 'forward';\n    const items = Array.from(new ListWalker(listItem, {\n        ...options,\n        includeSelf: isForward,\n        sameIndent: true,\n        sameAttributes: 'listItemId'\n    }));\n    return isForward ? items : items.reverse();\n}\n/**\n * Returns a list items nested inside the given list item.\n *\n * @internal\n */ function getNestedListBlocks(listItem) {\n    return Array.from(new ListWalker(listItem, {\n        direction: 'forward',\n        higherIndent: true\n    }));\n}\n/**\n * Returns array of all blocks/items of the same list as given block (same indent, same type and properties).\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options Additional list walker options to modify the range of returned list items.\n */ function getListItems(listItem, options) {\n    const backwardBlocks = new ListWalker(listItem, {\n        sameIndent: true,\n        sameAttributes: 'listType',\n        ...options\n    });\n    const forwardBlocks = new ListWalker(listItem, {\n        sameIndent: true,\n        sameAttributes: 'listType',\n        includeSelf: true,\n        direction: 'forward',\n        ...options\n    });\n    return [\n        ...Array.from(backwardBlocks).reverse(),\n        ...forwardBlocks\n    ];\n}\n/**\n * Check if the given block is the first in the list item.\n *\n * @internal\n * @param listBlock The list block element.\n */ function isFirstBlockOfListItem(listBlock) {\n    const previousSibling = ListWalker.first(listBlock, {\n        sameIndent: true,\n        sameAttributes: 'listItemId'\n    });\n    if (!previousSibling) {\n        return true;\n    }\n    return false;\n}\n/**\n * Check if the given block is the last in the list item.\n *\n * @internal\n */ function isLastBlockOfListItem(listBlock) {\n    const nextSibling = ListWalker.first(listBlock, {\n        direction: 'forward',\n        sameIndent: true,\n        sameAttributes: 'listItemId'\n    });\n    if (!nextSibling) {\n        return true;\n    }\n    return false;\n}\n/**\n * Expands the given list of selected blocks to include the leading and tailing blocks of partially selected list items.\n *\n * @internal\n * @param blocks The list of selected blocks.\n * @param options.withNested Whether should include nested list items.\n */ function expandListBlocksToCompleteItems(blocks, options = {}) {\n    blocks = toArray(blocks);\n    const higherIndent = options.withNested !== false;\n    const allBlocks = new Set();\n    for (const block of blocks){\n        for (const itemBlock of getAllListItemBlocks(block, {\n            higherIndent\n        })){\n            allBlocks.add(itemBlock);\n        }\n    }\n    return sortBlocks(allBlocks);\n}\n/**\n * Expands the given list of selected blocks to include all the items of the lists they're in.\n *\n * @internal\n * @param blocks The list of selected blocks.\n */ function expandListBlocksToCompleteList(blocks) {\n    blocks = toArray(blocks);\n    const allBlocks = new Set();\n    for (const block of blocks){\n        for (const itemBlock of getListItems(block)){\n            allBlocks.add(itemBlock);\n        }\n    }\n    return sortBlocks(allBlocks);\n}\n/**\n * Splits the list item just before the provided list block.\n *\n * @internal\n * @param listBlock The list block element.\n * @param writer The model writer.\n * @returns The array of updated blocks.\n */ function splitListItemBefore(listBlock, writer) {\n    const blocks = getListItemBlocks(listBlock, {\n        direction: 'forward'\n    });\n    const id = ListItemUid.next();\n    for (const block of blocks){\n        writer.setAttribute('listItemId', id, block);\n    }\n    return blocks;\n}\n/**\n * Merges the list item with the parent list item.\n *\n * @internal\n * @param listBlock The list block element.\n * @param parentBlock The list block element to merge with.\n * @param writer The model writer.\n * @returns The array of updated blocks.\n */ function mergeListItemBefore(listBlock, parentBlock, writer) {\n    const attributes = {};\n    for (const [key, value] of parentBlock.getAttributes()){\n        if (key.startsWith('list')) {\n            attributes[key] = value;\n        }\n    }\n    const blocks = getListItemBlocks(listBlock, {\n        direction: 'forward'\n    });\n    for (const block of blocks){\n        writer.setAttributes(attributes, block);\n    }\n    return blocks;\n}\n/**\n * Increases indentation of given list blocks.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n * @param options.expand Whether should expand the list of blocks to include complete list items.\n * @param options.indentBy The number of levels the indentation should change (could be negative).\n */ function indentBlocks(blocks, writer, { expand, indentBy = 1 } = {}) {\n    blocks = toArray(blocks);\n    // Expand the selected blocks to contain the whole list items.\n    const allBlocks = expand ? expandListBlocksToCompleteItems(blocks) : blocks;\n    for (const block of allBlocks){\n        const blockIndent = block.getAttribute('listIndent') + indentBy;\n        if (blockIndent < 0) {\n            removeListAttributes(block, writer);\n        } else {\n            writer.setAttribute('listIndent', blockIndent, block);\n        }\n    }\n    return allBlocks;\n}\n/**\n * Decreases indentation of given list of blocks. If the indentation of some blocks matches the indentation\n * of surrounding blocks, they get merged together.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n */ function outdentBlocksWithMerge(blocks, writer) {\n    blocks = toArray(blocks);\n    // Expand the selected blocks to contain the whole list items.\n    const allBlocks = expandListBlocksToCompleteItems(blocks);\n    const visited = new Set();\n    const referenceIndent = Math.min(...allBlocks.map((block)=>block.getAttribute('listIndent')));\n    const parentBlocks = new Map();\n    // Collect parent blocks before the list structure gets altered.\n    for (const block of allBlocks){\n        parentBlocks.set(block, ListWalker.first(block, {\n            lowerIndent: true\n        }));\n    }\n    for (const block of allBlocks){\n        if (visited.has(block)) {\n            continue;\n        }\n        visited.add(block);\n        const blockIndent = block.getAttribute('listIndent') - 1;\n        if (blockIndent < 0) {\n            removeListAttributes(block, writer);\n            continue;\n        }\n        // Merge with parent list item while outdenting and indent matches reference indent.\n        if (block.getAttribute('listIndent') == referenceIndent) {\n            const mergedBlocks = mergeListItemIfNotLast(block, parentBlocks.get(block), writer);\n            // All list item blocks are updated while merging so add those to visited set.\n            for (const mergedBlock of mergedBlocks){\n                visited.add(mergedBlock);\n            }\n            // The indent level was updated while merging so continue to next block.\n            if (mergedBlocks.length) {\n                continue;\n            }\n        }\n        writer.setAttribute('listIndent', blockIndent, block);\n    }\n    return sortBlocks(visited);\n}\n/**\n * Removes all list attributes from the given blocks.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n * @returns Array of altered blocks.\n */ function removeListAttributes(blocks, writer) {\n    blocks = toArray(blocks);\n    // Convert simple list items to plain paragraphs.\n    for (const block of blocks){\n        if (block.is('element', 'listItem')) {\n            writer.rename(block, 'paragraph');\n        }\n    }\n    // Remove list attributes.\n    for (const block of blocks){\n        for (const attributeKey of block.getAttributeKeys()){\n            if (attributeKey.startsWith('list')) {\n                writer.removeAttribute(attributeKey, block);\n            }\n        }\n    }\n    return blocks;\n}\n/**\n * Checks whether the given blocks are related to a single list item.\n *\n * @internal\n * @param blocks The list block elements.\n */ function isSingleListItem(blocks) {\n    if (!blocks.length) {\n        return false;\n    }\n    const firstItemId = blocks[0].getAttribute('listItemId');\n    if (!firstItemId) {\n        return false;\n    }\n    return !blocks.some((item)=>item.getAttribute('listItemId') != firstItemId);\n}\n/**\n * Modifies the indents of list blocks following the given list block so the indentation is valid after\n * the given block is no longer a list item.\n *\n * @internal\n * @param lastBlock The last list block that has become a non-list element.\n * @param writer The model writer.\n * @returns Array of altered blocks.\n */ function outdentFollowingItems(lastBlock, writer) {\n    const changedBlocks = [];\n    // Start from the model item that is just after the last turned-off item.\n    let currentIndent = Number.POSITIVE_INFINITY;\n    // Correct indent of all items after the last turned off item.\n    // Rules that should be followed:\n    // 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n    //    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n    // 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n    //    should not end up as a child of any of list items that they were not children of before.\n    // 3. All other items should have their indent changed relatively to it's parent.\n    //\n    // For example:\n    // 1  * --------\n    // 2     * --------\n    // 3        * --------\t\t\t<-- this is turned off.\n    // 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n    // 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n    // 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n    // 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n    // 8     * --------\t\t\t\t<-- this has to become indent = 0.\n    // 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n    // 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n    // 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n    // 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n    // 13    * --------\n    // 14       * --------\n    //\n    // After turning off 3 the list becomes:\n    //\n    // 1  * --------\n    // 2     * --------\n    //\n    // 3  --------\n    //\n    // 4  * --------\n    // 5     * --------\n    // 6  * --------\n    // 7     * --------\n    // 8  * --------\n    // 9     * --------\n    // 10       * --------\n    // 11       * --------\n    // 12 * --------\n    // 13    * --------\n    // 14       * --------\n    //\n    // Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n    // those parent-child connection which are possible to maintain are still maintained. It's worth noting\n    // that this is the same effect that we would be get by multiple use of outdent command. However doing\n    // it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n    // less conversion (faster).\n    for (const { node } of new SiblingListBlocksIterator(lastBlock.nextSibling)){\n        // Check each next list item, as long as its indent is higher than 0.\n        const indent = node.getAttribute('listIndent');\n        // If the indent is 0 we are not going to change anything anyway.\n        if (indent == 0) {\n            break;\n        }\n        // We check if that's item indent is lower than current relative indent.\n        if (indent < currentIndent) {\n            // If it is, current relative indent becomes that indent.\n            currentIndent = indent;\n        }\n        // Fix indent relatively to current relative indent.\n        // Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n        const newIndent = indent - currentIndent;\n        writer.setAttribute('listIndent', newIndent, node);\n        changedBlocks.push(node);\n    }\n    return changedBlocks;\n}\n/**\n * Returns the array of given blocks sorted by model indexes (document order).\n *\n * @internal\n */ function sortBlocks(blocks) {\n    return Array.from(blocks).filter((block)=>block.root.rootName !== '$graveyard').sort((a, b)=>a.index - b.index);\n}\n/**\n * Returns a selected block object. If a selected object is inline or when there is no selected\n * object, `null` is returned.\n *\n * @internal\n * @param model The instance of editor model.\n * @returns Selected block object or `null`.\n */ function getSelectedBlockObject(model) {\n    const selectedElement = model.document.selection.getSelectedElement();\n    if (!selectedElement) {\n        return null;\n    }\n    if (model.schema.isObject(selectedElement) && model.schema.isBlock(selectedElement)) {\n        return selectedElement;\n    }\n    return null;\n}\n/**\n * Checks whether the given block can be replaced by a listItem.\n *\n * Note that this is possible only when multiBlock = false option is set in feature config.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */ function canBecomeSimpleListItem(block, schema) {\n    return schema.checkChild(block.parent, 'listItem') && schema.checkChild(block, '$text') && !schema.isObject(block);\n}\n/**\n * Returns true if listType is of type `numbered` or `customNumbered`.\n */ function isNumberedListType(listType) {\n    return listType == 'numbered' || listType == 'customNumbered';\n}\n/**\n * Merges a given block to the given parent block if parent is a list item and there is no more blocks in the same item.\n */ function mergeListItemIfNotLast(block, parentBlock, writer) {\n    const parentItemBlocks = getListItemBlocks(parentBlock, {\n        direction: 'forward'\n    });\n    // Merge with parent only if outdented item wasn't the last one in its parent.\n    // Merge:\n    // * a\t\t\t->\t\t* a\n    //   * [b]\t\t->\t\t  b\n    //   c\t\t\t->\t\t  c\n    // Don't merge:\n    // * a\t\t\t->\t\t* a\n    //   * [b]\t\t-> \t\t* b\n    // * c\t\t\t->\t\t* c\n    if (parentItemBlocks.pop().index > block.index) {\n        return mergeListItemBefore(block, parentBlock, writer);\n    }\n    return [];\n}\n\n/**\n * The document list indent command. It is used by the {@link module:list/list~List list feature}.\n */ class ListIndentCommand extends Command {\n    /**\n\t * Determines by how much the command will change the list item's indent attribute.\n\t */ _direction;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */ constructor(editor, indentDirection){\n        super(editor);\n        this._direction = indentDirection;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t */ execute() {\n        const model = this.editor.model;\n        const blocks = getSelectedListBlocks(model.document.selection);\n        model.change((writer)=>{\n            const changedBlocks = [];\n            // Handle selection contained in the single list item and starting in the following blocks.\n            if (isSingleListItem(blocks) && !isFirstBlockOfListItem(blocks[0])) {\n                // Allow increasing indent of following list item blocks.\n                if (this._direction == 'forward') {\n                    changedBlocks.push(...indentBlocks(blocks, writer));\n                }\n                // For indent make sure that indented blocks have a new ID.\n                // For outdent just split blocks from the list item (give them a new IDs).\n                changedBlocks.push(...splitListItemBefore(blocks[0], writer));\n            } else {\n                // Now just update the attributes of blocks.\n                if (this._direction == 'forward') {\n                    changedBlocks.push(...indentBlocks(blocks, writer, {\n                        expand: true\n                    }));\n                } else {\n                    changedBlocks.push(...outdentBlocksWithMerge(blocks, writer));\n                }\n            }\n            // Align the list item type to match the previous list item (from the same list).\n            for (const block of changedBlocks){\n                // This block become a plain block (for example a paragraph).\n                if (!block.hasAttribute('listType')) {\n                    continue;\n                }\n                const previousItemBlock = ListWalker.first(block, {\n                    sameIndent: true\n                });\n                if (previousItemBlock) {\n                    writer.setAttribute('listType', previousItemBlock.getAttribute('listType'), block);\n                }\n            }\n            this._fireAfterExecute(changedBlocks);\n        });\n    }\n    /**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */ _fireAfterExecute(changedBlocks) {\n        this.fire('afterExecute', sortBlocks(new Set(changedBlocks)));\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        // Check whether any of position's ancestor is a list item.\n        let blocks = getSelectedListBlocks(this.editor.model.document.selection);\n        let firstBlock = blocks[0];\n        // If selection is not in a list item, the command is disabled.\n        if (!firstBlock) {\n            return false;\n        }\n        // If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n        if (this._direction == 'backward') {\n            return true;\n        }\n        // A single block of a list item is selected, so it could be indented as a sublist.\n        if (isSingleListItem(blocks) && !isFirstBlockOfListItem(blocks[0])) {\n            return true;\n        }\n        blocks = expandListBlocksToCompleteItems(blocks);\n        firstBlock = blocks[0];\n        // Check if there is any list item before selected items that could become a parent of selected items.\n        const siblingItem = ListWalker.first(firstBlock, {\n            sameIndent: true\n        });\n        if (!siblingItem) {\n            return false;\n        }\n        if (siblingItem.getAttribute('listType') == firstBlock.getAttribute('listType')) {\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Returns an array of selected blocks truncated to the first non list block element.\n */ function getSelectedListBlocks(selection) {\n    const blocks = Array.from(selection.getSelectedBlocks());\n    const firstNonListBlockIndex = blocks.findIndex((block)=>!isListItemBlock(block));\n    if (firstNonListBlockIndex != -1) {\n        blocks.length = firstNonListBlockIndex;\n    }\n    return blocks;\n}\n\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n */ class ListCommand extends Command {\n    /**\n\t * The type of the list created by the command.\n\t */ type;\n    /**\n\t * List Walker options that change the range of the list items to be changed when the selection is collapsed within a list item.\n\t *\n\t * In a multi-level list, when the selection is collapsed within a list item, instead of changing only the list items of the same list\n\t * type and current indent level, the entire list structure is changed (all list items at all indent levels of any list type).\n\t */ _listWalkerOptions;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param type List type that will be handled by this command.\n\t */ constructor(editor, type, options = {}){\n        super(editor);\n        this.type = type;\n        this._listWalkerOptions = options.multiLevel ? {\n            higherIndent: true,\n            lowerIndent: true,\n            sameAttributes: []\n        } : undefined;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the list command.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the\n\t * selected items and potentially the neighbor elements to the proper list items. If set to `false` it will convert selected elements\n\t * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.\n\t * @param options.additionalAttributes Additional attributes that are set for list items when the command is executed.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selectedBlockObject = getSelectedBlockObject(model);\n        const blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>model.schema.checkAttribute(block, 'listType') || canBecomeSimpleListItem(block, model.schema));\n        // Whether we are turning off some items.\n        const turnOff = options.forceValue !== undefined ? !options.forceValue : this.value;\n        model.change((writer)=>{\n            if (turnOff) {\n                const lastBlock = blocks[blocks.length - 1];\n                // Split the first block from the list item.\n                const itemBlocks = getListItemBlocks(lastBlock, {\n                    direction: 'forward'\n                });\n                const changedBlocks = [];\n                if (itemBlocks.length > 1) {\n                    changedBlocks.push(...splitListItemBefore(itemBlocks[1], writer));\n                }\n                // Strip list attributes.\n                changedBlocks.push(...removeListAttributes(blocks, writer));\n                // Outdent items following the selected list item.\n                changedBlocks.push(...outdentFollowingItems(lastBlock, writer));\n                this._fireAfterExecute(changedBlocks);\n            } else if ((selectedBlockObject || document.selection.isCollapsed) && isListItemBlock(blocks[0])) {\n                const changedBlocks = getListItems(selectedBlockObject || blocks[0], this._listWalkerOptions);\n                for (const block of changedBlocks){\n                    writer.setAttributes({\n                        ...options.additionalAttributes,\n                        listType: this.type\n                    }, block);\n                }\n                this._fireAfterExecute(changedBlocks);\n            } else {\n                const changedBlocks = [];\n                for (const block of blocks){\n                    // Promote the given block to the list item.\n                    if (!block.hasAttribute('listType')) {\n                        // Rename block to a simple list item if this option is enabled.\n                        if (!block.is('element', 'listItem') && canBecomeSimpleListItem(block, model.schema)) {\n                            writer.rename(block, 'listItem');\n                        }\n                        writer.setAttributes({\n                            ...options.additionalAttributes,\n                            listIndent: 0,\n                            listItemId: ListItemUid.next(),\n                            listType: this.type\n                        }, block);\n                        changedBlocks.push(block);\n                    } else {\n                        for (const node of expandListBlocksToCompleteItems(block, {\n                            withNested: false\n                        })){\n                            if (node.getAttribute('listType') != this.type) {\n                                writer.setAttributes({\n                                    ...options.additionalAttributes,\n                                    listType: this.type\n                                }, node);\n                                changedBlocks.push(node);\n                            }\n                        }\n                    }\n                }\n                this._fireAfterExecute(changedBlocks);\n            }\n        });\n    }\n    /**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */ _fireAfterExecute(changedBlocks) {\n        this.fire('afterExecute', sortBlocks(new Set(changedBlocks)));\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const selection = this.editor.model.document.selection;\n        const blocks = Array.from(selection.getSelectedBlocks());\n        if (!blocks.length) {\n            return false;\n        }\n        for (const block of blocks){\n            if (block.getAttribute('listType') != this.type) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        const blocks = Array.from(selection.getSelectedBlocks());\n        if (!blocks.length) {\n            return false;\n        }\n        // If command value is true it means that we are in list item, so the command should be enabled.\n        if (this.value) {\n            return true;\n        }\n        for (const block of blocks){\n            if (schema.checkAttribute(block, 'listType') || canBecomeSimpleListItem(block, schema)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * The document list merge command. It is used by the {@link module:list/list~List list feature}.\n */ class ListMergeCommand extends Command {\n    /**\n\t * Whether list item should be merged before or after the selected block.\n\t */ _direction;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction Whether list item should be merged before or after the selected block.\n\t */ constructor(editor, direction){\n        super(editor);\n        this._direction = direction;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Merges list blocks together (depending on the {@link #constructor}'s `direction` parameter).\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t * @param options Command options.\n\t * @param options.shouldMergeOnBlocksContentLevel When set `true`, merging will be performed together\n\t * with {@link module:engine/model/model~Model#deleteContent} to get rid of the inline content in the selection or take advantage\n\t * of the heuristics in `deleteContent()` that helps convert lists into paragraphs in certain cases.\n\t */ execute({ shouldMergeOnBlocksContentLevel = false } = {}) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const changedBlocks = [];\n        model.change((writer)=>{\n            const { firstElement, lastElement } = this._getMergeSubjectElements(selection, shouldMergeOnBlocksContentLevel);\n            const firstIndent = firstElement.getAttribute('listIndent') || 0;\n            const lastIndent = lastElement.getAttribute('listIndent');\n            const lastElementId = lastElement.getAttribute('listItemId');\n            if (firstIndent != lastIndent) {\n                const nestedLastElementBlocks = getNestedListBlocks(lastElement);\n                changedBlocks.push(...indentBlocks([\n                    lastElement,\n                    ...nestedLastElementBlocks\n                ], writer, {\n                    indentBy: firstIndent - lastIndent,\n                    // If outdenting, the entire sub-tree that follows must be included.\n                    expand: firstIndent < lastIndent\n                }));\n            }\n            if (shouldMergeOnBlocksContentLevel) {\n                let sel = selection;\n                if (selection.isCollapsed) {\n                    sel = writer.createSelection(writer.createRange(writer.createPositionAt(firstElement, 'end'), writer.createPositionAt(lastElement, 0)));\n                }\n                // Delete selected content. Replace entire content only for non-collapsed selection.\n                model.deleteContent(sel, {\n                    doNotResetEntireContent: selection.isCollapsed\n                });\n                // Get the last \"touched\" element after deleteContent call (can't use the lastElement because\n                // it could get merged into the firstElement while deleting content).\n                const lastElementAfterDelete = sel.getLastPosition().parent;\n                // Check if the element after it was in the same list item and adjust it if needed.\n                const nextSibling = lastElementAfterDelete.nextSibling;\n                changedBlocks.push(lastElementAfterDelete);\n                if (nextSibling && nextSibling !== lastElement && nextSibling.getAttribute('listItemId') == lastElementId) {\n                    changedBlocks.push(...mergeListItemBefore(nextSibling, lastElementAfterDelete, writer));\n                }\n            } else {\n                changedBlocks.push(...mergeListItemBefore(lastElement, firstElement, writer));\n            }\n            this._fireAfterExecute(changedBlocks);\n        });\n    }\n    /**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */ _fireAfterExecute(changedBlocks) {\n        this.fire('afterExecute', sortBlocks(new Set(changedBlocks)));\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedBlockObject = getSelectedBlockObject(model);\n        if (selection.isCollapsed || selectedBlockObject) {\n            const positionParent = selectedBlockObject || selection.getFirstPosition().parent;\n            if (!isListItemBlock(positionParent)) {\n                return false;\n            }\n            const siblingNode = this._direction == 'backward' ? positionParent.previousSibling : positionParent.nextSibling;\n            if (!siblingNode) {\n                return false;\n            }\n            if (isSingleListItem([\n                positionParent,\n                siblingNode\n            ])) {\n                return false;\n            }\n        } else {\n            const lastPosition = selection.getLastPosition();\n            const firstPosition = selection.getFirstPosition();\n            // If deleting within a single block of a list item, there's no need to merge anything.\n            // The default delete should be executed instead.\n            if (lastPosition.parent === firstPosition.parent) {\n                return false;\n            }\n            if (!isListItemBlock(lastPosition.parent)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Returns the boundary elements the merge should be executed for. These are not necessarily selection's first\n\t * and last position parents but sometimes sibling or even further blocks depending on the context.\n\t *\n\t * @param selection The selection the merge is executed for.\n\t * @param shouldMergeOnBlocksContentLevel When `true`, merge is performed together with\n\t * {@link module:engine/model/model~Model#deleteContent} to remove the inline content within the selection.\n\t */ _getMergeSubjectElements(selection, shouldMergeOnBlocksContentLevel) {\n        const model = this.editor.model;\n        const selectedBlockObject = getSelectedBlockObject(model);\n        let firstElement, lastElement;\n        if (selection.isCollapsed || selectedBlockObject) {\n            const positionParent = selectedBlockObject || selection.getFirstPosition().parent;\n            const isFirstBlock = isFirstBlockOfListItem(positionParent);\n            if (this._direction == 'backward') {\n                lastElement = positionParent;\n                if (isFirstBlock && !shouldMergeOnBlocksContentLevel) {\n                    // For the \"c\" as an anchorElement:\n                    //  * a\n                    //    * b\n                    //  * [c]  <-- this block should be merged with \"a\"\n                    // It should find \"a\" element to merge with:\n                    //  * a\n                    //    * b\n                    //    c\n                    firstElement = ListWalker.first(positionParent, {\n                        sameIndent: true,\n                        lowerIndent: true\n                    });\n                } else {\n                    firstElement = positionParent.previousSibling;\n                }\n            } else {\n                // In case of the forward merge there is no case as above, just merge with next sibling.\n                firstElement = positionParent;\n                lastElement = positionParent.nextSibling;\n            }\n        } else {\n            firstElement = selection.getFirstPosition().parent;\n            lastElement = selection.getLastPosition().parent;\n        }\n        return {\n            firstElement: firstElement,\n            lastElement: lastElement\n        };\n    }\n}\n\n/**\n * The document list split command that splits the list item at the selection.\n *\n * It is used by the {@link module:list/list~List list feature}.\n */ class ListSplitCommand extends Command {\n    /**\n\t * Whether list item should be split before or after the selected block.\n\t */ _direction;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction Whether list item should be split before or after the selected block.\n\t */ constructor(editor, direction){\n        super(editor);\n        this._direction = direction;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Splits the list item at the selection.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t */ execute() {\n        const editor = this.editor;\n        editor.model.change((writer)=>{\n            const changedBlocks = splitListItemBefore(this._getStartBlock(), writer);\n            this._fireAfterExecute(changedBlocks);\n        });\n    }\n    /**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */ _fireAfterExecute(changedBlocks) {\n        this.fire('afterExecute', sortBlocks(new Set(changedBlocks)));\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const selection = this.editor.model.document.selection;\n        const block = this._getStartBlock();\n        return selection.isCollapsed && isListItemBlock(block) && !isFirstBlockOfListItem(block);\n    }\n    /**\n\t * Returns the model element that is the main focus of the command (according to the current selection and command direction).\n\t */ _getStartBlock() {\n        const doc = this.editor.model.document;\n        const positionParent = doc.selection.getFirstPosition().parent;\n        return this._direction == 'before' ? positionParent : positionParent.nextSibling;\n    }\n}\n\n/**\n * A set of helpers related to document lists.\n */ class ListUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Expands the given list of selected blocks to include all the items of the lists they're in.\n\t *\n\t * @param blocks The list of selected blocks.\n\t */ expandListBlocksToCompleteList(blocks) {\n        return expandListBlocksToCompleteList(blocks);\n    }\n    /**\n\t * Check if the given block is the first in the list item.\n\t *\n\t * @param listBlock The list block element.\n\t */ isFirstBlockOfListItem(listBlock) {\n        return isFirstBlockOfListItem(listBlock);\n    }\n    /**\n\t * Returns true if the given model node is a list item block.\n\t *\n\t * @param node A model node.\n\t */ isListItemBlock(node) {\n        return isListItemBlock(node);\n    }\n    /**\n\t * Expands the given list of selected blocks to include the leading and tailing blocks of partially selected list items.\n\t *\n\t * @param blocks The list of selected blocks.\n\t * @param options.withNested Whether should include nested list items.\n\t */ expandListBlocksToCompleteItems(blocks, options = {}) {\n        return expandListBlocksToCompleteItems(blocks, options);\n    }\n    /**\n\t * Returns true if listType is of type `numbered` or `customNumbered`.\n\t */ isNumberedListType(listType) {\n        return isNumberedListType(listType);\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module list/list/utils/view\n */ /**\n * Checks if view element is a list type (ul or ol).\n *\n * @internal\n */ function isListView(viewElement) {\n    return viewElement.is('element', 'ol') || viewElement.is('element', 'ul');\n}\n/**\n * Checks if view element is a list item (li).\n *\n * @internal\n */ function isListItemView(viewElement) {\n    return viewElement.is('element', 'li');\n}\n/**\n * Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n *\n * Also, fixes non HTML compliant lists indents:\n *\n * ```\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n *     |-> OL                                  |-> OL\n *         |-> OL                                  |\n *         |   |-> OL                              |\n *         |       |-> OL                          |\n *         |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n *         |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> OL                                      |\n *     |-> OL                                  |\n *          |-> OL                             |\n *              |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n * |-> OL                                          |-> OL\n *     |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n * ```\n *\n * @internal\n */ function getIndent$1(listItem) {\n    let indent = 0;\n    let parent = listItem.parent;\n    while(parent){\n        // Each LI in the tree will result in an increased indent for HTML compliant lists.\n        if (isListItemView(parent)) {\n            indent++;\n        } else {\n            // If however the list is nested in other list we should check previous sibling of any of the list elements...\n            const previousSibling = parent.previousSibling;\n            // ...because the we might need increase its indent:\n            //\t\tbefore:                           fixed list:\n            //\t\tOL                                OL\n            //\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n            //\t\t|-> OL                                |-> OL\n            //\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n            if (previousSibling && isListItemView(previousSibling)) {\n                indent++;\n            }\n        }\n        parent = parent.parent;\n    }\n    return indent;\n}\n/**\n * Creates a list attribute element (ol or ul).\n *\n * @internal\n */ function createListElement(writer, indent, type, id = getViewElementIdForListType(type, indent)) {\n    // Negative priorities so that restricted editing attribute won't wrap lists.\n    return writer.createAttributeElement(getViewElementNameForListType(type), null, {\n        priority: 2 * indent / 100 - 100,\n        id\n    });\n}\n/**\n * Creates a list item attribute element (li).\n *\n * @internal\n */ function createListItemElement(writer, indent, id) {\n    // Negative priorities so that restricted editing attribute won't wrap list items.\n    return writer.createAttributeElement('li', null, {\n        priority: (2 * indent + 1) / 100 - 100,\n        id\n    });\n}\n/**\n * Returns a view element name for the given list type.\n *\n * @internal\n */ function getViewElementNameForListType(type) {\n    return type == 'numbered' || type == 'customNumbered' ? 'ol' : 'ul';\n}\n/**\n * Returns a view element ID for the given list type and indent.\n *\n * @internal\n */ function getViewElementIdForListType(type, indent) {\n    return `list-${type}-${indent}`;\n}\n\n/**\n * Based on the provided positions looks for the list head and stores it in the provided map.\n *\n * @internal\n * @param position The search starting position.\n * @param itemToListHead The map from list item element to the list head element.\n * @param visited A set of elements that were already visited.\n */ function findAndAddListHeadToMap(position, itemToListHead, visited) {\n    const previousNode = position.nodeBefore;\n    if (!isListItemBlock(previousNode)) {\n        const item = position.nodeAfter;\n        if (isListItemBlock(item)) {\n            itemToListHead.add(item);\n        }\n    } else {\n        let listHead = previousNode;\n        // Previously, the loop below was defined like this:\n        //\n        // \t\tfor ( { node: listHead } of new SiblingListBlocksIterator( listHead, 'backward' ) )\n        //\n        // Unfortunately, such a destructuring is incorrectly transpiled by Babel and the loop never ends.\n        // See: https://github.com/ckeditor/ckeditor5-react/issues/345.\n        for (const { node } of new SiblingListBlocksIterator(listHead, 'backward')){\n            listHead = node;\n            if (visited.has(listHead)) {\n                return;\n            }\n            visited.add(listHead);\n            if (itemToListHead.has(previousNode)) {\n                return;\n            }\n        }\n        itemToListHead.add(listHead);\n    }\n}\n/**\n * Scans the list starting from the given list head element and fixes items' indentation.\n *\n * @internal\n * @param listNodes The iterable of list nodes.\n * @param writer The model writer.\n * @returns Whether the model was modified.\n */ function fixListIndents(listNodes, writer) {\n    let maxIndent = 0; // Guards local sublist max indents that need fixing.\n    let prevIndent = -1; // Previous item indent.\n    let fixBy = null;\n    let applied = false;\n    for (const { node } of listNodes){\n        const itemIndent = node.getAttribute('listIndent');\n        if (itemIndent > maxIndent) {\n            let newIndent;\n            if (fixBy === null) {\n                fixBy = itemIndent - maxIndent;\n                newIndent = maxIndent;\n            } else {\n                if (fixBy > itemIndent) {\n                    fixBy = itemIndent;\n                }\n                newIndent = itemIndent - fixBy;\n            }\n            if (newIndent > prevIndent + 1) {\n                newIndent = prevIndent + 1;\n            }\n            writer.setAttribute('listIndent', newIndent, node);\n            applied = true;\n            prevIndent = newIndent;\n        } else {\n            fixBy = null;\n            maxIndent = itemIndent + 1;\n            prevIndent = itemIndent;\n        }\n    }\n    return applied;\n}\n/**\n * Scans the list starting from the given list head element and fixes items' types.\n *\n * @internal\n * @param listNodes The iterable of list nodes.\n * @param seenIds The set of already known IDs.\n * @param writer The model writer.\n * @returns Whether the model was modified.\n */ function fixListItemIds(listNodes, seenIds, writer) {\n    const visited = new Set();\n    let applied = false;\n    for (const { node } of listNodes){\n        if (visited.has(node)) {\n            continue;\n        }\n        let listType = node.getAttribute('listType');\n        let listItemId = node.getAttribute('listItemId');\n        // Use a new ID if this one was spot earlier (even in other list).\n        if (seenIds.has(listItemId)) {\n            listItemId = ListItemUid.next();\n        }\n        seenIds.add(listItemId);\n        // Make sure that all items in a simple list have unique IDs.\n        if (node.is('element', 'listItem')) {\n            if (node.getAttribute('listItemId') != listItemId) {\n                writer.setAttribute('listItemId', listItemId, node);\n                applied = true;\n            }\n            continue;\n        }\n        for (const block of getListItemBlocks(node, {\n            direction: 'forward'\n        })){\n            visited.add(block);\n            // Use a new ID if a block of a bigger list item has different type.\n            if (block.getAttribute('listType') != listType) {\n                listItemId = ListItemUid.next();\n                listType = block.getAttribute('listType');\n            }\n            if (block.getAttribute('listItemId') != listItemId) {\n                writer.setAttribute('listItemId', listItemId, block);\n                applied = true;\n            }\n        }\n    }\n    return applied;\n}\n\n/**\n * Returns the upcast converter for list items. It's supposed to work after the block converters (content inside list items) are converted.\n *\n * @internal\n */ function listItemUpcastConverter() {\n    return (evt, data, conversionApi)=>{\n        const { writer, schema } = conversionApi;\n        if (!data.modelRange) {\n            return;\n        }\n        const items = Array.from(data.modelRange.getItems({\n            shallow: true\n        })).filter((item)=>schema.checkAttribute(item, 'listItemId'));\n        if (!items.length) {\n            return;\n        }\n        const listItemId = ListItemUid.next();\n        const listIndent = getIndent$1(data.viewItem);\n        let listType = data.viewItem.parent && data.viewItem.parent.is('element', 'ol') ? 'numbered' : 'bulleted';\n        // Preserve list type if was already set (for example by to-do list feature).\n        const firstItemListType = items[0].getAttribute('listType');\n        if (firstItemListType) {\n            listType = firstItemListType;\n        }\n        const attributes = {\n            listItemId,\n            listIndent,\n            listType\n        };\n        for (const item of items){\n            // Set list attributes only on same level items, those nested deeper are already handled by the recursive conversion.\n            if (!item.hasAttribute('listItemId')) {\n                writer.setAttributes(attributes, item);\n            }\n        }\n        if (items.length > 1) {\n            // Make sure that list item that contain only nested list will preserve paragraph for itself:\n            //\t<ul>\n            //\t\t<li>\n            //\t\t\t<p></p>  <-- this one must be kept\n            //\t\t\t<ul>\n            //\t\t\t\t<li></li>\n            //\t\t\t</ul>\n            //\t\t</li>\n            //\t</ul>\n            if (items[1].getAttribute('listItemId') != attributes.listItemId) {\n                conversionApi.keepEmptyElement(items[0]);\n            }\n        }\n    };\n}\n/**\n * Returns a model document change:data event listener that triggers conversion of related items if needed.\n *\n * @internal\n * @param model The editor model.\n * @param editing The editing controller.\n * @param attributeNames The list of all model list attributes (including registered strategies).\n * @param listEditing The document list editing plugin.\n */ function reconvertItemsOnDataChange(model, editing, attributeNames, listEditing) {\n    return ()=>{\n        const changes = model.document.differ.getChanges();\n        const itemsToRefresh = [];\n        const itemToListHead = new Set();\n        const changedItems = new Set();\n        const visited = new Set();\n        for (const entry of changes){\n            if (entry.type == 'insert' && entry.name != '$text') {\n                findAndAddListHeadToMap(entry.position, itemToListHead, visited);\n                // Insert of a non-list item.\n                if (!entry.attributes.has('listItemId')) {\n                    findAndAddListHeadToMap(entry.position.getShiftedBy(entry.length), itemToListHead, visited);\n                } else {\n                    changedItems.add(entry.position.nodeAfter);\n                }\n            } else if (entry.type == 'remove' && entry.attributes.has('listItemId')) {\n                findAndAddListHeadToMap(entry.position, itemToListHead, visited);\n            } else if (entry.type == 'attribute') {\n                const item = entry.range.start.nodeAfter;\n                if (attributeNames.includes(entry.attributeKey)) {\n                    findAndAddListHeadToMap(entry.range.start, itemToListHead, visited);\n                    if (entry.attributeNewValue === null) {\n                        findAndAddListHeadToMap(entry.range.start.getShiftedBy(1), itemToListHead, visited);\n                        // Check if paragraph should be converted from bogus to plain paragraph.\n                        if (doesItemBlockRequiresRefresh(item)) {\n                            itemsToRefresh.push(item);\n                        }\n                    } else {\n                        changedItems.add(item);\n                    }\n                } else if (isListItemBlock(item)) {\n                    // Some other attribute was changed on the list item,\n                    // check if paragraph does not need to be converted to bogus or back.\n                    if (doesItemBlockRequiresRefresh(item)) {\n                        itemsToRefresh.push(item);\n                    }\n                }\n            }\n        }\n        for (const listHead of itemToListHead.values()){\n            itemsToRefresh.push(...collectListItemsToRefresh(listHead, changedItems));\n        }\n        for (const item of new Set(itemsToRefresh)){\n            editing.reconvertItem(item);\n        }\n    };\n    function collectListItemsToRefresh(listHead, changedItems) {\n        const itemsToRefresh = [];\n        const visited = new Set();\n        const stack = [];\n        for (const { node, previous } of new SiblingListBlocksIterator(listHead)){\n            if (visited.has(node)) {\n                continue;\n            }\n            const itemIndent = node.getAttribute('listIndent');\n            // Current node is at the lower indent so trim the stack.\n            if (previous && itemIndent < previous.getAttribute('listIndent')) {\n                stack.length = itemIndent + 1;\n            }\n            // Update the stack for the current indent level.\n            stack[itemIndent] = Object.fromEntries(Array.from(node.getAttributes()).filter(([key])=>attributeNames.includes(key)));\n            // Find all blocks of the current node.\n            const blocks = getListItemBlocks(node, {\n                direction: 'forward'\n            });\n            for (const block of blocks){\n                visited.add(block);\n                // Check if bogus vs plain paragraph needs refresh.\n                if (doesItemBlockRequiresRefresh(block, blocks)) {\n                    itemsToRefresh.push(block);\n                } else if (doesItemWrappingRequiresRefresh(block, stack, changedItems)) {\n                    itemsToRefresh.push(block);\n                }\n            }\n        }\n        return itemsToRefresh;\n    }\n    function doesItemBlockRequiresRefresh(item, blocks) {\n        const viewElement = editing.mapper.toViewElement(item);\n        if (!viewElement) {\n            return false;\n        }\n        const needsRefresh = listEditing.fire('checkElement', {\n            modelElement: item,\n            viewElement\n        });\n        if (needsRefresh) {\n            return true;\n        }\n        if (!item.is('element', 'paragraph') && !item.is('element', 'listItem')) {\n            return false;\n        }\n        const useBogus = shouldUseBogusParagraph(item, attributeNames, blocks);\n        if (useBogus && viewElement.is('element', 'p')) {\n            return true;\n        } else if (!useBogus && viewElement.is('element', 'span')) {\n            return true;\n        }\n        return false;\n    }\n    function doesItemWrappingRequiresRefresh(item, stack, changedItems) {\n        // Items directly affected by some \"change\" don't need a refresh, they will be converted by their own changes.\n        if (changedItems.has(item)) {\n            return false;\n        }\n        const viewElement = editing.mapper.toViewElement(item);\n        let indent = stack.length - 1;\n        // Traverse down the stack to the root to verify if all ULs, OLs, and LIs are as expected.\n        for(let element = viewElement.parent; !element.is('editableElement'); element = element.parent){\n            const isListItemElement = isListItemView(element);\n            const isListElement = isListView(element);\n            if (!isListElement && !isListItemElement) {\n                continue;\n            }\n            const eventName = `checkAttributes:${isListItemElement ? 'item' : 'list'}`;\n            const needsRefresh = listEditing.fire(eventName, {\n                viewElement: element,\n                modelAttributes: stack[indent]\n            });\n            if (needsRefresh) {\n                break;\n            }\n            if (isListElement) {\n                indent--;\n                // Don't need to iterate further if we already know that the item is wrapped appropriately.\n                if (indent < 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n/**\n * Returns the list item downcast converter.\n *\n * @internal\n * @param attributeNames A list of attribute names that should be converted if they are set.\n * @param strategies The strategies.\n * @param model The model.\n */ function listItemDowncastConverter(attributeNames, strategies, model, { dataPipeline } = {}) {\n    const consumer = createAttributesConsumer(attributeNames);\n    return (evt, data, conversionApi)=>{\n        const { writer, mapper, consumable } = conversionApi;\n        const listItem = data.item;\n        if (!attributeNames.includes(data.attributeKey)) {\n            return;\n        }\n        // Test if attributes on the converted items are not consumed.\n        if (!consumer(listItem, consumable)) {\n            return;\n        }\n        // Use positions mapping instead of mapper.toViewElement( listItem ) to find outermost view element.\n        // This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n        const viewElement = findMappedViewElement(listItem, mapper, model);\n        // Remove custom item marker.\n        removeCustomMarkerElements(viewElement, writer, mapper);\n        // Unwrap element from current list wrappers.\n        unwrapListItemBlock(viewElement, writer);\n        // Insert custom item marker.\n        const viewRange = insertCustomMarkerElements(listItem, viewElement, strategies, writer, {\n            dataPipeline\n        });\n        // Then wrap them with the new list wrappers (UL, OL, LI).\n        wrapListItemBlock(listItem, viewRange, strategies, writer);\n    };\n}\n/**\n * The 'remove' downcast converter for custom markers.\n */ function listItemDowncastRemoveConverter(schema) {\n    return (evt, data, conversionApi)=>{\n        const { writer, mapper } = conversionApi;\n        const elementName = evt.name.split(':')[1];\n        // Do not remove marker if the deleted element is some inline object inside paragraph.\n        // See https://github.com/cksource/ckeditor5-internal/issues/3680.\n        if (!schema.checkAttribute(elementName, 'listItemId')) {\n            return;\n        }\n        // Find the view range start position by mapping the model position at which the remove happened.\n        const viewStart = mapper.toViewPosition(data.position);\n        const modelEnd = data.position.getShiftedBy(data.length);\n        const viewEnd = mapper.toViewPosition(modelEnd, {\n            isPhantom: true\n        });\n        // Trim the range to remove in case some UI elements are on the view range boundaries.\n        const viewRange = writer.createRange(viewStart, viewEnd).getTrimmed();\n        // Use positions mapping instead of mapper.toViewElement( listItem ) to find outermost view element.\n        // This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n        const viewElement = viewRange.end.nodeBefore;\n        /* istanbul ignore next -- @preserve */ if (!viewElement) {\n            return;\n        }\n        // Remove custom item marker.\n        removeCustomMarkerElements(viewElement, writer, mapper);\n    };\n}\n/**\n * Returns the bogus paragraph view element creator. A bogus paragraph is used if a list item contains only a single block or nested list.\n *\n * @internal\n * @param attributeNames The list of all model list attributes (including registered strategies).\n */ function bogusParagraphCreator(attributeNames, { dataPipeline } = {}) {\n    return (modelElement, { writer })=>{\n        // Convert only if a bogus paragraph should be used.\n        if (!shouldUseBogusParagraph(modelElement, attributeNames)) {\n            return null;\n        }\n        if (!dataPipeline) {\n            return writer.createContainerElement('span', {\n                class: 'ck-list-bogus-paragraph'\n            });\n        }\n        // Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n        const viewElement = writer.createContainerElement('p');\n        writer.setCustomProperty('dataPipeline:transparentRendering', true, viewElement);\n        return viewElement;\n    };\n}\n/**\n * Helper for mapping mode to view elements. It's using positions mapping instead of mapper.toViewElement( element )\n * to find outermost view element. This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n *\n * @internal\n * @param element The model element.\n * @param mapper The mapper instance.\n * @param model The model.\n */ function findMappedViewElement(element, mapper, model) {\n    const modelRange = model.createRangeOn(element);\n    const viewRange = mapper.toViewRange(modelRange).getTrimmed();\n    return viewRange.end.nodeBefore;\n}\n/**\n * The model to view custom position mapping for cases when marker is injected at the beginning of a block.\n */ function createModelToViewPositionMapper(strategies, view) {\n    return (evt, data)=>{\n        if (data.modelPosition.offset > 0) {\n            return;\n        }\n        const positionParent = data.modelPosition.parent;\n        if (!isListItemBlock(positionParent)) {\n            return;\n        }\n        if (!strategies.some((strategy)=>strategy.scope == 'itemMarker' && strategy.canInjectMarkerIntoElement && strategy.canInjectMarkerIntoElement(positionParent))) {\n            return;\n        }\n        const viewElement = data.mapper.toViewElement(positionParent);\n        const viewRange = view.createRangeIn(viewElement);\n        const viewWalker = viewRange.getWalker();\n        let positionAfterLastMarker = viewRange.start;\n        for (const { item } of viewWalker){\n            // Walk only over the non-mapped elements (UIElements, AttributeElements, $text, or any other element without mapping).\n            if (item.is('element') && data.mapper.toModelElement(item) || item.is('$textProxy')) {\n                break;\n            }\n            if (item.is('element') && item.getCustomProperty('listItemMarker')) {\n                positionAfterLastMarker = view.createPositionAfter(item);\n                // Jump over the content of the marker (this is not needed for UIElement but required for other element types).\n                viewWalker.skip(({ previousPosition })=>!previousPosition.isEqual(positionAfterLastMarker));\n            }\n        }\n        data.viewPosition = positionAfterLastMarker;\n    };\n}\n/**\n * Removes a custom marker elements and item wrappers related to that marker.\n */ function removeCustomMarkerElements(viewElement, viewWriter, mapper) {\n    // Remove item wrapper.\n    while(viewElement.parent.is('attributeElement') && viewElement.parent.getCustomProperty('listItemWrapper')){\n        viewWriter.unwrap(viewWriter.createRangeOn(viewElement), viewElement.parent);\n    }\n    // Remove custom item markers.\n    const markersToRemove = [];\n    // Markers before a block.\n    collectMarkersToRemove(viewWriter.createPositionBefore(viewElement).getWalker({\n        direction: 'backward'\n    }));\n    // Markers inside a block.\n    collectMarkersToRemove(viewWriter.createRangeIn(viewElement).getWalker());\n    for (const marker of markersToRemove){\n        viewWriter.remove(marker);\n    }\n    function collectMarkersToRemove(viewWalker) {\n        for (const { item } of viewWalker){\n            // Walk only over the non-mapped elements (UIElements, AttributeElements, $text, or any other element without mapping).\n            if (item.is('element') && mapper.toModelElement(item)) {\n                break;\n            }\n            if (item.is('element') && item.getCustomProperty('listItemMarker')) {\n                markersToRemove.push(item);\n            }\n        }\n    }\n}\n/**\n * Inserts a custom marker elements and wraps first block of a list item if marker requires it.\n */ function insertCustomMarkerElements(listItem, viewElement, strategies, writer, { dataPipeline }) {\n    let viewRange = writer.createRangeOn(viewElement);\n    // Marker can be inserted only before the first block of a list item.\n    if (!isFirstBlockOfListItem(listItem)) {\n        return viewRange;\n    }\n    for (const strategy of strategies){\n        if (strategy.scope != 'itemMarker') {\n            continue;\n        }\n        // Create the custom marker element and inject it before the first block of the list item.\n        const markerElement = strategy.createElement(writer, listItem, {\n            dataPipeline\n        });\n        if (!markerElement) {\n            continue;\n        }\n        writer.setCustomProperty('listItemMarker', true, markerElement);\n        if (strategy.canInjectMarkerIntoElement && strategy.canInjectMarkerIntoElement(listItem)) {\n            writer.insert(writer.createPositionAt(viewElement, 0), markerElement);\n        } else {\n            writer.insert(viewRange.start, markerElement);\n            viewRange = writer.createRange(writer.createPositionBefore(markerElement), writer.createPositionAfter(viewElement));\n        }\n        // Wrap the marker and optionally the first block with an attribute element (label for to-do lists).\n        if (!strategy.createWrapperElement || !strategy.canWrapElement) {\n            continue;\n        }\n        const wrapper = strategy.createWrapperElement(writer, listItem, {\n            dataPipeline\n        });\n        writer.setCustomProperty('listItemWrapper', true, wrapper);\n        // The whole block can be wrapped...\n        if (strategy.canWrapElement(listItem)) {\n            viewRange = writer.wrap(viewRange, wrapper);\n        } else {\n            // ... or only the marker element (if the block is downcasted to heading or block widget).\n            viewRange = writer.wrap(writer.createRangeOn(markerElement), wrapper);\n            viewRange = writer.createRange(viewRange.start, writer.createPositionAfter(viewElement));\n        }\n    }\n    return viewRange;\n}\n/**\n * Unwraps all ol, ul, and li attribute elements that are wrapping the provided view element.\n */ function unwrapListItemBlock(viewElement, viewWriter) {\n    let attributeElement = viewElement.parent;\n    while(attributeElement.is('attributeElement') && [\n        'ul',\n        'ol',\n        'li'\n    ].includes(attributeElement.name)){\n        const parentElement = attributeElement.parent;\n        viewWriter.unwrap(viewWriter.createRangeOn(viewElement), attributeElement);\n        attributeElement = parentElement;\n    }\n}\n/**\n * Wraps the given list item with appropriate attribute elements for ul, ol, and li.\n */ function wrapListItemBlock(listItem, viewRange, strategies, writer) {\n    if (!listItem.hasAttribute('listIndent')) {\n        return;\n    }\n    const listItemIndent = listItem.getAttribute('listIndent');\n    let currentListItem = listItem;\n    for(let indent = listItemIndent; indent >= 0; indent--){\n        const listItemViewElement = createListItemElement(writer, indent, currentListItem.getAttribute('listItemId'));\n        const listViewElement = createListElement(writer, indent, currentListItem.getAttribute('listType'));\n        for (const strategy of strategies){\n            if ((strategy.scope == 'list' || strategy.scope == 'item') && currentListItem.hasAttribute(strategy.attributeName)) {\n                strategy.setAttributeOnDowncast(writer, currentListItem.getAttribute(strategy.attributeName), strategy.scope == 'list' ? listViewElement : listItemViewElement);\n            }\n        }\n        viewRange = writer.wrap(viewRange, listItemViewElement);\n        viewRange = writer.wrap(viewRange, listViewElement);\n        if (indent == 0) {\n            break;\n        }\n        currentListItem = ListWalker.first(currentListItem, {\n            lowerIndent: true\n        });\n        // There is no list item with lower indent, this means this is a document fragment containing\n        // only a part of nested list (like copy to clipboard) so we don't need to try to wrap it further.\n        if (!currentListItem) {\n            break;\n        }\n    }\n}\n// Returns the function that is responsible for consuming attributes that are set on the model node.\nfunction createAttributesConsumer(attributeNames) {\n    return (node, consumable)=>{\n        const events = [];\n        // Collect all set attributes that are triggering conversion.\n        for (const attributeName of attributeNames){\n            if (node.hasAttribute(attributeName)) {\n                events.push(`attribute:${attributeName}`);\n            }\n        }\n        if (!events.every((event)=>consumable.test(node, event) !== false)) {\n            return false;\n        }\n        events.forEach((event)=>consumable.consume(node, event));\n        return true;\n    };\n}\n// Whether the given item should be rendered as a bogus paragraph.\nfunction shouldUseBogusParagraph(item, attributeNames, blocks = getAllListItemBlocks(item)) {\n    if (!isListItemBlock(item)) {\n        return false;\n    }\n    for (const attributeKey of item.getAttributeKeys()){\n        // Ignore selection attributes stored on block elements.\n        if (attributeKey.startsWith('selection:') || attributeKey == 'htmlEmptyBlock') {\n            continue;\n        }\n        // Don't use bogus paragraph if there are attributes from other features.\n        if (!attributeNames.includes(attributeKey)) {\n            return false;\n        }\n    }\n    return blocks.length < 2;\n}\n\n/**\n * A list of base list model attributes.\n */ const LIST_BASE_ATTRIBUTES = [\n    'listType',\n    'listIndent',\n    'listItemId'\n];\n/**\n * The editing part of the document-list feature. It handles creating, editing and removing lists and list items.\n */ class ListEditing extends Plugin {\n    /**\n\t * The list of registered downcast strategies.\n\t */ _downcastStrategies = [];\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Enter,\n            Delete,\n            ListUtils,\n            ClipboardPipeline\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('list.multiBlock', true);\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const multiBlock = editor.config.get('list.multiBlock');\n        if (editor.plugins.has('LegacyListEditing')) {\n            /**\n\t\t\t * The `List` feature can not be loaded together with the `LegacyList` plugin.\n\t\t\t *\n\t\t\t * @error list-feature-conflict\n\t\t\t * @param conflictPlugin Name of the plugin.\n\t\t\t */ throw new CKEditorError('list-feature-conflict', this, {\n                conflictPlugin: 'LegacyListEditing'\n            });\n        }\n        model.schema.register('$listItem', {\n            allowAttributes: LIST_BASE_ATTRIBUTES\n        });\n        if (multiBlock) {\n            model.schema.extend('$container', {\n                allowAttributesOf: '$listItem'\n            });\n            model.schema.extend('$block', {\n                allowAttributesOf: '$listItem'\n            });\n            model.schema.extend('$blockObject', {\n                allowAttributesOf: '$listItem'\n            });\n        } else {\n            model.schema.register('listItem', {\n                inheritAllFrom: '$block',\n                allowAttributesOf: '$listItem'\n            });\n        }\n        for (const attribute of LIST_BASE_ATTRIBUTES){\n            model.schema.setAttributeProperties(attribute, {\n                copyOnReplace: true\n            });\n        }\n        // Register commands.\n        editor.commands.add('numberedList', new ListCommand(editor, 'numbered'));\n        editor.commands.add('bulletedList', new ListCommand(editor, 'bulleted'));\n        editor.commands.add('customNumberedList', new ListCommand(editor, 'customNumbered', {\n            multiLevel: true\n        }));\n        editor.commands.add('customBulletedList', new ListCommand(editor, 'customBulleted', {\n            multiLevel: true\n        }));\n        editor.commands.add('indentList', new ListIndentCommand(editor, 'forward'));\n        editor.commands.add('outdentList', new ListIndentCommand(editor, 'backward'));\n        editor.commands.add('splitListItemBefore', new ListSplitCommand(editor, 'before'));\n        editor.commands.add('splitListItemAfter', new ListSplitCommand(editor, 'after'));\n        if (multiBlock) {\n            editor.commands.add('mergeListItemBackward', new ListMergeCommand(editor, 'backward'));\n            editor.commands.add('mergeListItemForward', new ListMergeCommand(editor, 'forward'));\n        }\n        this._setupDeleteIntegration();\n        this._setupEnterIntegration();\n        this._setupTabIntegration();\n        this._setupClipboardIntegration();\n        this._setupAccessibilityIntegration();\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const commands = editor.commands;\n        const indent = commands.get('indent');\n        const outdent = commands.get('outdent');\n        if (indent) {\n            // Priority is high due to integration with `IndentBlock` plugin. We want to indent list first and if it's not possible\n            // user can indent content with `IndentBlock` plugin.\n            indent.registerChildCommand(commands.get('indentList'), {\n                priority: 'high'\n            });\n        }\n        if (outdent) {\n            // Priority is lowest due to integration with `IndentBlock` and `IndentCode` plugins.\n            // First we want to allow user to outdent all indendations from other features then he can oudent list item.\n            outdent.registerChildCommand(commands.get('outdentList'), {\n                priority: 'lowest'\n            });\n        }\n        // Register conversion and model post-fixer after other plugins had a chance to register their attribute strategies.\n        this._setupModelPostFixing();\n        this._setupConversion();\n    }\n    /**\n\t * Registers a downcast strategy.\n\t *\n\t * **Note**: Strategies must be registered in the `Plugin#init()` phase so that it can be applied\n\t * in the `ListEditing#afterInit()`.\n\t *\n\t * @param strategy The downcast strategy to register.\n\t */ registerDowncastStrategy(strategy) {\n        this._downcastStrategies.push(strategy);\n    }\n    /**\n\t * Returns list of model attribute names that should affect downcast conversion.\n\t */ getListAttributeNames() {\n        return [\n            ...LIST_BASE_ATTRIBUTES,\n            ...this._downcastStrategies.map((strategy)=>strategy.attributeName)\n        ];\n    }\n    /**\n\t * Attaches the listener to the {@link module:engine/view/document~Document#event:delete} event and handles backspace/delete\n\t * keys in and around document lists.\n\t */ _setupDeleteIntegration() {\n        const editor = this.editor;\n        const mergeBackwardCommand = editor.commands.get('mergeListItemBackward');\n        const mergeForwardCommand = editor.commands.get('mergeListItemForward');\n        this.listenTo(editor.editing.view.document, 'delete', (evt, data)=>{\n            const selection = editor.model.document.selection;\n            // Let the Widget plugin take care of block widgets while deleting (https://github.com/ckeditor/ckeditor5/issues/11346).\n            if (getSelectedBlockObject(editor.model)) {\n                return;\n            }\n            editor.model.change(()=>{\n                const firstPosition = selection.getFirstPosition();\n                if (selection.isCollapsed && data.direction == 'backward') {\n                    if (!firstPosition.isAtStart) {\n                        return;\n                    }\n                    const positionParent = firstPosition.parent;\n                    if (!isListItemBlock(positionParent)) {\n                        return;\n                    }\n                    const previousBlock = ListWalker.first(positionParent, {\n                        sameAttributes: 'listType',\n                        sameIndent: true\n                    });\n                    // Outdent the first block of a first list item.\n                    if (!previousBlock && positionParent.getAttribute('listIndent') === 0) {\n                        if (!isLastBlockOfListItem(positionParent)) {\n                            editor.execute('splitListItemAfter');\n                        }\n                        editor.execute('outdentList');\n                    } else {\n                        if (!mergeBackwardCommand || !mergeBackwardCommand.isEnabled) {\n                            return;\n                        }\n                        mergeBackwardCommand.execute({\n                            shouldMergeOnBlocksContentLevel: shouldMergeOnBlocksContentLevel(editor.model, 'backward')\n                        });\n                    }\n                    data.preventDefault();\n                    evt.stop();\n                } else {\n                    // Collapsed selection should trigger forward merging only if at the end of a block.\n                    if (selection.isCollapsed && !selection.getLastPosition().isAtEnd) {\n                        return;\n                    }\n                    if (!mergeForwardCommand || !mergeForwardCommand.isEnabled) {\n                        return;\n                    }\n                    mergeForwardCommand.execute({\n                        shouldMergeOnBlocksContentLevel: shouldMergeOnBlocksContentLevel(editor.model, 'forward')\n                    });\n                    data.preventDefault();\n                    evt.stop();\n                }\n            });\n        }, {\n            context: 'li'\n        });\n    }\n    /**\n\t * Attaches a listener to the {@link module:engine/view/document~Document#event:enter} event and handles enter key press\n\t * in document lists.\n\t */ _setupEnterIntegration() {\n        const editor = this.editor;\n        const model = editor.model;\n        const commands = editor.commands;\n        const enterCommand = commands.get('enter');\n        // Overwrite the default Enter key behavior: outdent or split the list in certain cases.\n        this.listenTo(editor.editing.view.document, 'enter', (evt, data)=>{\n            const doc = model.document;\n            const positionParent = doc.selection.getFirstPosition().parent;\n            if (doc.selection.isCollapsed && isListItemBlock(positionParent) && positionParent.isEmpty && !data.isSoft) {\n                const isFirstBlock = isFirstBlockOfListItem(positionParent);\n                const isLastBlock = isLastBlockOfListItem(positionParent);\n                // * a      →      * a\n                // * []     →      []\n                if (isFirstBlock && isLastBlock) {\n                    editor.execute('outdentList');\n                    data.preventDefault();\n                    evt.stop();\n                } else if (isFirstBlock && !isLastBlock) {\n                    editor.execute('splitListItemAfter');\n                    data.preventDefault();\n                    evt.stop();\n                } else if (isLastBlock) {\n                    editor.execute('splitListItemBefore');\n                    data.preventDefault();\n                    evt.stop();\n                }\n            }\n        }, {\n            context: 'li'\n        });\n        // In some cases, after the default block splitting, we want to modify the new block to become a new list item\n        // instead of an additional block in the same list item.\n        this.listenTo(enterCommand, 'afterExecute', ()=>{\n            const splitCommand = commands.get('splitListItemBefore');\n            // The command has not refreshed because the change block related to EnterCommand#execute() is not over yet.\n            // Let's keep it up to date and take advantage of ListSplitCommand#isEnabled.\n            splitCommand.refresh();\n            if (!splitCommand.isEnabled) {\n                return;\n            }\n            const doc = editor.model.document;\n            const positionParent = doc.selection.getLastPosition().parent;\n            const listItemBlocks = getAllListItemBlocks(positionParent);\n            // Keep in mind this split happens after the default enter handler was executed. For instance:\n            //\n            // │       Initial state       │    After default enter    │   Here in #afterExecute   │\n            // ├───────────────────────────┼───────────────────────────┼───────────────────────────┤\n            // │          * a[]            │           * a             │           * a             │\n            // │                           │             []            │           * []            │\n            if (listItemBlocks.length === 2) {\n                splitCommand.execute();\n            }\n        });\n    }\n    /**\n\t * Attaches a listener to the {@link module:engine/view/document~Document#event:tab} event and handles tab key and tab+shift keys\n\t * presses in document lists.\n\t */ _setupTabIntegration() {\n        const editor = this.editor;\n        this.listenTo(editor.editing.view.document, 'tab', (evt, data)=>{\n            const commandName = data.shiftKey ? 'outdentList' : 'indentList';\n            const command = this.editor.commands.get(commandName);\n            if (command.isEnabled) {\n                editor.execute(commandName);\n                data.stopPropagation();\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: 'li'\n        });\n    }\n    /**\n\t * Registers the conversion helpers for the document-list feature.\n\t */ _setupConversion() {\n        const editor = this.editor;\n        const model = editor.model;\n        const attributeNames = this.getListAttributeNames();\n        const multiBlock = editor.config.get('list.multiBlock');\n        const elementName = multiBlock ? 'paragraph' : 'listItem';\n        editor.conversion.for('upcast')// Convert <li> to a generic paragraph (or listItem element) so the content of <li> is always inside a block.\n        // Setting the listType attribute to let other features (to-do list) know that this is part of a list item.\n        // This is also important to properly handle simple lists so that paragraphs inside a list item won't break the list item.\n        // <li>  <-- converted to listItem\n        //   <p></p> <-- should be also converted to listItem, so it won't split and replace the listItem generated from the above li.\n        .elementToElement({\n            view: 'li',\n            model: (viewElement, { writer })=>writer.createElement(elementName, {\n                    listType: ''\n                })\n        })// Convert paragraph to the list block (without list type defined yet).\n        // This is important to properly handle bogus paragraph and to-do lists.\n        // Most of the time the bogus paragraph should not appear in the data of to-do list,\n        // but if there is any marker or an attribute on the paragraph then the bogus paragraph\n        // is preserved in the data, and we need to be able to detect this case.\n        .elementToElement({\n            view: 'p',\n            model: (viewElement, { writer })=>{\n                if (viewElement.parent && viewElement.parent.is('element', 'li')) {\n                    return writer.createElement(elementName, {\n                        listType: ''\n                    });\n                }\n                return null;\n            },\n            converterPriority: 'high'\n        }).add((dispatcher)=>{\n            dispatcher.on('element:li', listItemUpcastConverter());\n        });\n        if (!multiBlock) {\n            editor.conversion.for('downcast').elementToElement({\n                model: 'listItem',\n                view: 'p'\n            });\n        }\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: elementName,\n            view: bogusParagraphCreator(attributeNames),\n            converterPriority: 'high'\n        }).add((dispatcher)=>{\n            dispatcher.on('attribute', listItemDowncastConverter(attributeNames, this._downcastStrategies, model));\n            dispatcher.on('remove', listItemDowncastRemoveConverter(model.schema));\n        });\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: elementName,\n            view: bogusParagraphCreator(attributeNames, {\n                dataPipeline: true\n            }),\n            converterPriority: 'high'\n        }).add((dispatcher)=>{\n            dispatcher.on('attribute', listItemDowncastConverter(attributeNames, this._downcastStrategies, model, {\n                dataPipeline: true\n            }));\n        });\n        const modelToViewPositionMapper = createModelToViewPositionMapper(this._downcastStrategies, editor.editing.view);\n        editor.editing.mapper.on('modelToViewPosition', modelToViewPositionMapper);\n        editor.data.mapper.on('modelToViewPosition', modelToViewPositionMapper);\n        this.listenTo(model.document, 'change:data', reconvertItemsOnDataChange(model, editor.editing, attributeNames, this), {\n            priority: 'high'\n        });\n        // For LI verify if an ID of the attribute element is correct.\n        this.on('checkAttributes:item', (evt, { viewElement, modelAttributes })=>{\n            if (viewElement.id != modelAttributes.listItemId) {\n                evt.return = true;\n                evt.stop();\n            }\n        });\n        // For UL and OL check if the name and ID of element is correct.\n        this.on('checkAttributes:list', (evt, { viewElement, modelAttributes })=>{\n            if (viewElement.name != getViewElementNameForListType(modelAttributes.listType) || viewElement.id != getViewElementIdForListType(modelAttributes.listType, modelAttributes.listIndent)) {\n                evt.return = true;\n                evt.stop();\n            }\n        });\n    }\n    /**\n\t * Registers model post-fixers.\n\t */ _setupModelPostFixing() {\n        const model = this.editor.model;\n        const attributeNames = this.getListAttributeNames();\n        // Register list fixing.\n        // First the low level handler.\n        model.document.registerPostFixer((writer)=>modelChangePostFixer$1(model, writer, attributeNames, this));\n        // Then the callbacks for the specific lists.\n        // The indentation fixing must be the first one...\n        this.on('postFixer', (evt, { listNodes, writer })=>{\n            evt.return = fixListIndents(listNodes, writer) || evt.return;\n        }, {\n            priority: 'high'\n        });\n        // ...then the item ids... and after that other fixers that rely on the correct indentation and ids.\n        this.on('postFixer', (evt, { listNodes, writer, seenIds })=>{\n            evt.return = fixListItemIds(listNodes, seenIds, writer) || evt.return;\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Integrates the feature with the clipboard via {@link module:engine/model/model~Model#insertContent} and\n\t * {@link module:engine/model/model~Model#getSelectedContent}.\n\t */ _setupClipboardIntegration() {\n        const model = this.editor.model;\n        const clipboardPipeline = this.editor.plugins.get('ClipboardPipeline');\n        this.listenTo(model, 'insertContent', createModelIndentPasteFixer(model), {\n            priority: 'high'\n        });\n        // To enhance the UX, the editor should not copy list attributes to the clipboard if the selection\n        // started and ended in the same list item.\n        //\n        // If the selection was enclosed in a single list item, there is a good chance the user did not want it\n        // copied as a list item but plain blocks.\n        //\n        // This avoids pasting orphaned list items instead of paragraphs, for instance, straight into the root.\n        //\n        //\t                       ┌─────────────────────┬───────────────────┐\n        //\t                       │ Selection           │ Clipboard content │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ [* <Widget />]      │ <Widget />        │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ [* Foo]             │ Foo               │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ * Foo [bar] baz     │ bar               │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ * Fo[o              │ o                 │\n        //\t                       │   ba]r              │ ba                │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ * Fo[o              │ * o               │\n        //\t                       │ * ba]r              │ * ba              │\n        //\t                       ├─────────────────────┼───────────────────┤\n        //\t                       │ [* Foo              │ * Foo             │\n        //\t                       │  * bar]             │ * bar             │\n        //\t                       └─────────────────────┴───────────────────┘\n        //\n        // See https://github.com/ckeditor/ckeditor5/issues/11608, https://github.com/ckeditor/ckeditor5/issues/14969\n        this.listenTo(clipboardPipeline, 'outputTransformation', (evt, data)=>{\n            model.change((writer)=>{\n                // Remove last block if it's empty.\n                const allContentChildren = Array.from(data.content.getChildren());\n                const lastItem = allContentChildren[allContentChildren.length - 1];\n                if (allContentChildren.length > 1 && lastItem.is('element') && lastItem.isEmpty) {\n                    const contentChildrenExceptLastItem = allContentChildren.slice(0, -1);\n                    if (contentChildrenExceptLastItem.every(isListItemBlock)) {\n                        writer.remove(lastItem);\n                    }\n                }\n                // Copy/cut only content of a list item (for drag-drop move the whole list item).\n                if (data.method == 'copy' || data.method == 'cut') {\n                    const allChildren = Array.from(data.content.getChildren());\n                    const isSingleListItemSelected = isSingleListItem(allChildren);\n                    if (isSingleListItemSelected) {\n                        removeListAttributes(allChildren, writer);\n                    }\n                }\n            });\n        });\n    }\n    /**\n\t * Informs editor accessibility features about keystrokes brought by the plugin.\n\t */ _setupAccessibilityIntegration() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.accessibility.addKeystrokeInfoGroup({\n            id: 'list',\n            label: t('Keystrokes that can be used in a list'),\n            keystrokes: [\n                {\n                    label: t('Increase list item indent'),\n                    keystroke: 'Tab'\n                },\n                {\n                    label: t('Decrease list item indent'),\n                    keystroke: 'Shift+Tab'\n                }\n            ]\n        });\n    }\n}\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states (invalid `listItemId` and `listIndent` values).\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=1>Item 2</paragraph>   <--- this is removed.\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=2>Item 3</paragraph>\n * ```\n *\n * The list structure after the middle element is removed:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=2>Item 3</paragraph>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=1>Item 3</paragraph>   <--- note that indent got post-fixed.\n * ```\n *\n * @param model The data model.\n * @param writer The writer to do changes with.\n * @param attributeNames The list of all model list attributes (including registered strategies).\n * @param ListEditing The document list editing plugin.\n * @returns `true` if any change has been applied, `false` otherwise.\n */ function modelChangePostFixer$1(model, writer, attributeNames, listEditing) {\n    const changes = model.document.differ.getChanges();\n    const visited = new Set();\n    const itemToListHead = new Set();\n    const multiBlock = listEditing.editor.config.get('list.multiBlock');\n    let applied = false;\n    for (const entry of changes){\n        if (entry.type == 'insert' && entry.name != '$text') {\n            const item = entry.position.nodeAfter;\n            // Remove attributes in case of renamed element.\n            if (!model.schema.checkAttribute(item, 'listItemId')) {\n                for (const attributeName of Array.from(item.getAttributeKeys())){\n                    if (attributeNames.includes(attributeName)) {\n                        writer.removeAttribute(attributeName, item);\n                        applied = true;\n                    }\n                }\n            }\n            findAndAddListHeadToMap(entry.position, itemToListHead, visited);\n            // Insert of a non-list item - check if there is a list after it.\n            if (!entry.attributes.has('listItemId')) {\n                findAndAddListHeadToMap(entry.position.getShiftedBy(entry.length), itemToListHead, visited);\n            }\n            // Check if there is no nested list.\n            for (const { item: innerItem, previousPosition } of model.createRangeIn(item)){\n                if (isListItemBlock(innerItem)) {\n                    findAndAddListHeadToMap(previousPosition, itemToListHead, visited);\n                }\n            }\n        } else if (entry.type == 'remove') {\n            findAndAddListHeadToMap(entry.position, itemToListHead, visited);\n        } else if (entry.type == 'attribute' && attributeNames.includes(entry.attributeKey)) {\n            findAndAddListHeadToMap(entry.range.start, itemToListHead, visited);\n            if (entry.attributeNewValue === null) {\n                findAndAddListHeadToMap(entry.range.start.getShiftedBy(1), itemToListHead, visited);\n            }\n        }\n        // Make sure that there is no left over listItem element without attributes or a block with list attributes that is not a listItem.\n        if (!multiBlock && entry.type == 'attribute' && LIST_BASE_ATTRIBUTES.includes(entry.attributeKey)) {\n            const element = entry.range.start.nodeAfter;\n            if (entry.attributeNewValue === null && element && element.is('element', 'listItem')) {\n                writer.rename(element, 'paragraph');\n                applied = true;\n            } else if (entry.attributeOldValue === null && element && element.is('element') && element.name != 'listItem') {\n                writer.rename(element, 'listItem');\n                applied = true;\n            }\n        }\n    }\n    // Make sure that IDs are not shared by split list.\n    const seenIds = new Set();\n    for (const listHead of itemToListHead.values()){\n        applied = listEditing.fire('postFixer', {\n            listNodes: new ListBlocksIterable(listHead),\n            listHead,\n            writer,\n            seenIds\n        }) || applied;\n    }\n    return applied;\n}\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=\"0\">A</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=\"1\">B^</paragraph>\n * // At ^ paste:  <paragraph listType=\"numbered\" listItemId=\"x\" listIndent=\"0\">X</paragraph>\n * //              <paragraph listType=\"numbered\" listItemId=\"y\" listIndent=\"1\">Y</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=\"2\">C</paragraph>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=\"0\">A</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=\"1\">BX</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"y\" listIndent=\"2\">Y/paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=\"2\">C</paragraph>\n * ```\n */ function createModelIndentPasteFixer(model) {\n    return (evt, [content, selectable])=>{\n        const items = content.is('documentFragment') ? Array.from(content.getChildren()) : [\n            content\n        ];\n        if (!items.length) {\n            return;\n        }\n        const selection = selectable ? model.createSelection(selectable) : model.document.selection;\n        const position = selection.getFirstPosition();\n        // Get a reference list item. Attributes of the inserted list items will be fixed according to that item.\n        let refItem;\n        if (isListItemBlock(position.parent)) {\n            refItem = position.parent;\n        } else if (isListItemBlock(position.nodeBefore) && isListItemBlock(position.nodeAfter)) {\n            refItem = position.nodeBefore;\n        } else {\n            return; // Content is not copied into a list.\n        }\n        model.change((writer)=>{\n            const refType = refItem.getAttribute('listType');\n            const refIndent = refItem.getAttribute('listIndent');\n            const firstElementIndent = items[0].getAttribute('listIndent') || 0;\n            const indentDiff = Math.max(refIndent - firstElementIndent, 0);\n            for (const item of items){\n                const isListItem = isListItemBlock(item);\n                if (refItem.is('element', 'listItem') && item.is('element', 'paragraph')) {\n                    /**\n\t\t\t\t\t * When paragraphs or a plain text list is pasted into a simple list, convert\n\t\t\t\t\t * the `<paragraphs>' to `<listItem>' to avoid breaking the target list.\n\t\t\t\t\t *\n\t\t\t\t\t * See https://github.com/ckeditor/ckeditor5/issues/13826.\n\t\t\t\t\t */ writer.rename(item, 'listItem');\n                }\n                writer.setAttributes({\n                    listIndent: (isListItem ? item.getAttribute('listIndent') : 0) + indentDiff,\n                    listItemId: isListItem ? item.getAttribute('listItemId') : ListItemUid.next(),\n                    listType: refType\n                }, item);\n            }\n        });\n    };\n}\n/**\n * Decides whether the merge should be accompanied by the model's `deleteContent()`, for instance, to get rid of the inline\n * content in the selection or take advantage of the heuristics in `deleteContent()` that helps convert lists into paragraphs\n * in certain cases.\n */ function shouldMergeOnBlocksContentLevel(model, direction) {\n    const selection = model.document.selection;\n    if (!selection.isCollapsed) {\n        return !getSelectedBlockObject(model);\n    }\n    if (direction === 'forward') {\n        return true;\n    }\n    const firstPosition = selection.getFirstPosition();\n    const positionParent = firstPosition.parent;\n    const previousSibling = positionParent.previousSibling;\n    if (model.schema.isObject(previousSibling)) {\n        return false;\n    }\n    if (previousSibling.isEmpty) {\n        return true;\n    }\n    return isSingleListItem([\n        positionParent,\n        previousSibling\n    ]);\n}\n\n/**\n * Helper method for creating toolbar and menu buttons and linking them with an appropriate command.\n *\n * @internal\n * @param editor The editor instance to which the UI component will be added.\n * @param commandName The name of the command.\n * @param label The button label.\n * @param icon The source of the icon.\n */ function createUIComponents(editor, commandName, label, icon) {\n    editor.ui.componentFactory.add(commandName, ()=>{\n        const buttonView = _createButton(ButtonView, editor, commandName, label, icon);\n        buttonView.set({\n            tooltip: true,\n            isToggleable: true\n        });\n        return buttonView;\n    });\n    editor.ui.componentFactory.add(`menuBar:${commandName}`, ()=>{\n        const buttonView = _createButton(MenuBarMenuListItemButtonView, editor, commandName, label, icon);\n        buttonView.set({\n            role: 'menuitemcheckbox',\n            isToggleable: true\n        });\n        return buttonView;\n    });\n}\n/**\n * Creates a button to use either in toolbar or in menu bar.\n */ function _createButton(ButtonClass, editor, commandName, label, icon) {\n    const command = editor.commands.get(commandName);\n    const view = new ButtonClass(editor.locale);\n    view.set({\n        label,\n        icon\n    });\n    // Bind button model to command.\n    view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n    // Execute the command.\n    view.on('execute', ()=>{\n        editor.execute(commandName);\n        editor.editing.view.focus();\n    });\n    return view;\n}\n\n/**\n * The list UI feature. It introduces the `'numberedList'` and `'bulletedList'` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n */ class ListUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const t = this.editor.t;\n        // Create button numberedList.\n        if (!this.editor.ui.componentFactory.has('numberedList')) {\n            createUIComponents(this.editor, 'numberedList', t('Numbered List'), icons.numberedList);\n        }\n        // Create button bulletedList.\n        if (!this.editor.ui.componentFactory.has('bulletedList')) {\n            createUIComponents(this.editor, 'bulletedList', t('Bulleted List'), icons.bulletedList);\n        }\n    }\n}\n\n/**\n * The list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/list/listediting~ListEditing  list\n * editing feature} and {@link module:list/list/listui~ListUI list UI feature}.\n */ class List extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing,\n            ListUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'List';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The list start index command. It changes the `listStart` attribute of the selected list items,\n * letting the user to choose the starting point of an ordered list.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */ class ListStartCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const value = this._getValue();\n        this.value = value;\n        this.isEnabled = value != null;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.startIndex The list start index.\n\t */ execute({ startIndex = 1 } = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        let blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>isListItemBlock(block) && isNumberedListType(block.getAttribute('listType')));\n        blocks = expandListBlocksToCompleteList(blocks);\n        model.change((writer)=>{\n            for (const block of blocks){\n                writer.setAttribute('listStart', startIndex >= 0 ? startIndex : 1, block);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const model = this.editor.model;\n        const document = model.document;\n        const block = first(document.selection.getSelectedBlocks());\n        if (block && isListItemBlock(block) && isNumberedListType(block.getAttribute('listType'))) {\n            return block.getAttribute('listStart');\n        }\n        return null;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n* @module list/listproperties/utils/style\n*/ const LIST_STYLE_TO_LIST_TYPE = {};\nconst LIST_STYLE_TO_TYPE_ATTRIBUTE = {};\nconst TYPE_ATTRIBUTE_TO_LIST_STYLE = {};\nconst LIST_STYLE_TYPES = [\n    {\n        listStyle: 'disc',\n        typeAttribute: 'disc',\n        listType: 'bulleted'\n    },\n    {\n        listStyle: 'circle',\n        typeAttribute: 'circle',\n        listType: 'bulleted'\n    },\n    {\n        listStyle: 'square',\n        typeAttribute: 'square',\n        listType: 'bulleted'\n    },\n    {\n        listStyle: 'decimal',\n        typeAttribute: '1',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'decimal-leading-zero',\n        typeAttribute: null,\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'lower-roman',\n        typeAttribute: 'i',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'upper-roman',\n        typeAttribute: 'I',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'lower-alpha',\n        typeAttribute: 'a',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'upper-alpha',\n        typeAttribute: 'A',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'lower-latin',\n        typeAttribute: 'a',\n        listType: 'numbered'\n    },\n    {\n        listStyle: 'upper-latin',\n        typeAttribute: 'A',\n        listType: 'numbered'\n    }\n];\nfor (const { listStyle, typeAttribute, listType } of LIST_STYLE_TYPES){\n    LIST_STYLE_TO_LIST_TYPE[listStyle] = listType;\n    LIST_STYLE_TO_TYPE_ATTRIBUTE[listStyle] = typeAttribute;\n    if (typeAttribute) {\n        TYPE_ATTRIBUTE_TO_LIST_STYLE[typeAttribute] = listStyle;\n    }\n}\n/**\n * Gets all the style types supported by given list type.\n */ function getAllSupportedStyleTypes() {\n    return LIST_STYLE_TYPES.map((x)=>x.listStyle);\n}\n/**\n * Checks whether the given list-style-type is supported by numbered or bulleted list.\n */ function getListTypeFromListStyleType$1(listStyleType) {\n    return LIST_STYLE_TO_LIST_TYPE[listStyleType] || null;\n}\n/**\n * Converts `type` attribute of `<ul>` or `<ol>` elements to `list-style-type` equivalent.\n */ function getListStyleTypeFromTypeAttribute(value) {\n    return TYPE_ATTRIBUTE_TO_LIST_STYLE[value] || null;\n}\n/**\n * Converts `list-style-type` style to `type` attribute of `<ul>` or `<ol>` elements.\n */ function getTypeAttributeFromListStyleType(value) {\n    return LIST_STYLE_TO_TYPE_ATTRIBUTE[value] || null;\n}\n/**\n * Normalizes list style by converting aliases to their canonical form.\n *\n * @param listStyle The list style value to normalize.\n * @returns The canonical form of the list style.\n *\n * @example\n * normalizeListStyle( 'lower-alpha' ); // Returns 'lower-latin'\n * normalizeListStyle( 'upper-alpha' ); // Returns 'upper-latin'\n * normalizeListStyle( 'disc' ); // Returns 'disc'\n */ function normalizeListStyle(listStyle) {\n    switch(listStyle){\n        case 'lower-alpha':\n            return 'lower-latin';\n        case 'upper-alpha':\n            return 'upper-latin';\n        default:\n            return listStyle;\n    }\n}\n\n/**\n * The list style command. It changes `listStyle` attribute of the selected list items,\n * letting the user choose styles for the list item markers.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */ class ListStyleCommand extends Command {\n    /**\n\t * The default type of the list style.\n\t */ defaultType;\n    /**\n\t * The list of supported style types by this command.\n\t */ _supportedTypes;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t * @param supportedTypes The list of supported style types by this command.\n\t */ constructor(editor, defaultType, supportedTypes){\n        super(editor);\n        this.defaultType = defaultType;\n        this._supportedTypes = supportedTypes;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        model.change((writer)=>{\n            this._tryToConvertItemsToList(options);\n            let blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>block.hasAttribute('listType'));\n            if (!blocks.length) {\n                return;\n            }\n            blocks = expandListBlocksToCompleteList(blocks);\n            for (const block of blocks){\n                writer.setAttribute('listStyle', options.type || this.defaultType, block);\n            }\n        });\n    }\n    /**\n\t * Checks if the given style type is supported by this plugin.\n\t */ isStyleTypeSupported(value) {\n        if (!this._supportedTypes) {\n            return true;\n        }\n        return this._supportedTypes.includes(value);\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const listItem = first(this.editor.model.document.selection.getSelectedBlocks());\n        if (isListItemBlock(listItem)) {\n            return listItem.getAttribute('listStyle');\n        }\n        return null;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const editor = this.editor;\n        const numberedList = editor.commands.get('numberedList');\n        const bulletedList = editor.commands.get('bulletedList');\n        return numberedList.isEnabled || bulletedList.isEnabled;\n    }\n    /**\n\t * Check if the provided list style is valid. Also change the selection to a list if it's not set yet.\n\t *\n\t * @param options.type The type of the list style. If `null` is specified, the function does nothing.\n\t*/ _tryToConvertItemsToList(options) {\n        if (!options.type) {\n            return;\n        }\n        const listType = getListTypeFromListStyleType$1(options.type);\n        if (!listType) {\n            return;\n        }\n        const editor = this.editor;\n        const commandName = `${listType}List`;\n        const command = editor.commands.get(commandName);\n        if (!command.value) {\n            editor.execute(commandName);\n        }\n    }\n}\n\n/**\n * The list reversed command. It changes the `listReversed` attribute of the selected list items,\n * letting the user to choose the order of an ordered list.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */ class ListReversedCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const value = this._getValue();\n        this.value = value;\n        this.isEnabled = value != null;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.reversed Whether the list should be reversed.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        let blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>isListItemBlock(block) && block.getAttribute('listType') == 'numbered');\n        blocks = expandListBlocksToCompleteList(blocks);\n        model.change((writer)=>{\n            for (const block of blocks){\n                writer.setAttribute('listReversed', !!options.reversed, block);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t */ _getValue() {\n        const model = this.editor.model;\n        const document = model.document;\n        const block = first(document.selection.getSelectedBlocks());\n        if (isListItemBlock(block) && block.getAttribute('listType') == 'numbered') {\n            return block.getAttribute('listReversed');\n        }\n        return null;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module list/listproperties/converters\n */ /**\n * Returns a converter that consumes the `style`, `reversed`, and `start` attributes.\n * In `style`, it searches for the `list-style-type` definition.\n * If not found, the `\"default\"` value will be used.\n *\n * @internal\n * @param strategy\n */ function listPropertiesUpcastConverter(strategy) {\n    return (evt, data, conversionApi)=>{\n        const { writer, schema, consumable } = conversionApi;\n        // If there is no view consumable to consume, set the default attribute value to be able to reconvert nested lists on parent change.\n        // So abort converting if attribute was directly consumed.\n        if (consumable.test(data.viewItem, strategy.viewConsumables) === false) {\n            return;\n        }\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        let applied = false;\n        for (const item of data.modelRange.getItems({\n            shallow: true\n        })){\n            if (!schema.checkAttribute(item, strategy.attributeName)) {\n                continue;\n            }\n            if (!strategy.appliesToListItem(item)) {\n                continue;\n            }\n            // Set list attributes only on same level items, those nested deeper are already handled by the recursive conversion.\n            if (item.hasAttribute(strategy.attributeName)) {\n                continue;\n            }\n            writer.setAttribute(strategy.attributeName, strategy.getAttributeOnUpcast(data.viewItem), item);\n            applied = true;\n        }\n        if (applied) {\n            consumable.consume(data.viewItem, strategy.viewConsumables);\n        }\n    };\n}\n\n/**\n * A set of helpers related to document lists.\n */ class ListPropertiesUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListPropertiesUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Gets all the style types supported by given list type.\n\t */ getAllSupportedStyleTypes() {\n        return getAllSupportedStyleTypes();\n    }\n    /**\n\t * Checks whether the given list-style-type is supported by numbered or bulleted list.\n\t */ getListTypeFromListStyleType(listStyleType) {\n        return getListTypeFromListStyleType$1(listStyleType);\n    }\n    /**\n\t * Converts `type` attribute of `<ul>` or `<ol>` elements to `list-style-type` equivalent.\n\t */ getListStyleTypeFromTypeAttribute(value) {\n        return getListStyleTypeFromTypeAttribute(value);\n    }\n    /**\n\t * Converts `list-style-type` style to `type` attribute of `<ul>` or `<ol>` elements.\n\t */ getTypeAttributeFromListStyleType(value) {\n        return getTypeAttributeFromListStyleType(value);\n    }\n}\n\n/**\n * Normalizes {@link module:list/listconfig~ListPropertiesConfig} in the configuration of the list properties feature.\n * The structure of normalized list properties options looks as follows:\n *\n * ```ts\n * {\n * \tstyles: {\n * \t\tlistTypes: [ 'bulleted', 'numbered' ],\n * \t\tuseAttribute: false\n * \t},\n * \tstartIndex: true,\n * \treversed: true\n * }\n * ```\n *\n * @param config The list properties {@link module:list/listconfig~ListPropertiesConfig config}.\n * @returns An object with normalized list properties options.\n */ function getNormalizedConfig(config) {\n    const { startIndex, reversed, styles } = config;\n    return {\n        styles: getNormalizedStylesConfig(styles),\n        startIndex: startIndex || false,\n        reversed: reversed || false\n    };\n}\n/**\n * Normalizes styles in the configuration of the list properties feature.\n * The structure of normalized list properties options looks as follows:\n *\n * ```ts\n * {\n * \tlistTypes: [ 'bulleted', 'numbered' ],\n * \tuseAttribute: false\n * }\n * ```\n *\n * @param styles The list properties styles.\n * @returns An object with normalized list properties styles.\n */ function getNormalizedStylesConfig(styles) {\n    const normalizedConfig = {\n        listTypes: [\n            'bulleted',\n            'numbered'\n        ],\n        useAttribute: false\n    };\n    if (styles === true) {\n        return normalizedConfig;\n    }\n    if (!styles) {\n        normalizedConfig.listTypes = [];\n    } else if (Array.isArray(styles) || typeof styles == 'string') {\n        normalizedConfig.listTypes = toArray(styles);\n    } else {\n        normalizedConfig.listTypes = styles.listTypes ? toArray(styles.listTypes) : normalizedConfig.listTypes;\n        normalizedConfig.useAttribute = !!styles.useAttribute;\n        if (styles.listStyleTypes) {\n            normalizedConfig.listStyleTypes = styles.listStyleTypes;\n        }\n    }\n    return normalizedConfig;\n}\n\nconst DEFAULT_LIST_TYPE$1 = 'default';\n/**\n * The document list properties engine feature.\n *\n * It registers the `'listStyle'`, `'listReversed'` and `'listStart'` commands if they are enabled in the configuration.\n * Read more in {@link module:list/listconfig~ListPropertiesConfig}.\n */ class ListPropertiesEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing,\n            ListPropertiesUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListPropertiesEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('list.properties', {\n            styles: true,\n            startIndex: false,\n            reversed: false\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const listEditing = editor.plugins.get(ListEditing);\n        const enabledProperties = editor.config.get('list.properties');\n        const strategies = createAttributeStrategies$1(enabledProperties);\n        for (const strategy of strategies){\n            strategy.addCommand(editor);\n            model.schema.extend('$listItem', {\n                allowAttributes: strategy.attributeName\n            });\n            // Register downcast strategy.\n            listEditing.registerDowncastStrategy({\n                scope: 'list',\n                attributeName: strategy.attributeName,\n                setAttributeOnDowncast (writer, attributeValue, viewElement) {\n                    strategy.setAttributeOnDowncast(writer, attributeValue, viewElement);\n                }\n            });\n        }\n        // Set up conversion.\n        editor.conversion.for('upcast').add((dispatcher)=>{\n            for (const strategy of strategies){\n                dispatcher.on('element:ol', listPropertiesUpcastConverter(strategy));\n                dispatcher.on('element:ul', listPropertiesUpcastConverter(strategy));\n            }\n        });\n        // Verify if the list view element (ul or ol) requires refreshing.\n        listEditing.on('checkAttributes:list', (evt, { viewElement, modelAttributes })=>{\n            for (const strategy of strategies){\n                if (strategy.getAttributeOnUpcast(viewElement) != modelAttributes[strategy.attributeName]) {\n                    evt.return = true;\n                    evt.stop();\n                }\n            }\n        });\n        // Reset list properties after indenting list items.\n        this.listenTo(editor.commands.get('indentList'), 'afterExecute', (evt, changedBlocks)=>{\n            model.change((writer)=>{\n                for (const node of changedBlocks){\n                    for (const strategy of strategies){\n                        if (strategy.appliesToListItem(node)) {\n                            // Just reset the attribute.\n                            // If there is a previous indented list that this node should be merged into,\n                            // the postfixer will unify all the attributes of both sub-lists.\n                            writer.setAttribute(strategy.attributeName, strategy.defaultValue, node);\n                        }\n                    }\n                }\n            });\n        });\n        // Add or remove list properties attributes depending on the list type.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node } of listNodes){\n                for (const strategy of strategies){\n                    // Check if attribute is valid.\n                    if (strategy.hasValidAttribute(node)) {\n                        continue;\n                    }\n                    // Add missing default property attributes...\n                    if (strategy.appliesToListItem(node)) {\n                        writer.setAttribute(strategy.attributeName, strategy.defaultValue, node);\n                    } else {\n                        writer.removeAttribute(strategy.attributeName, node);\n                    }\n                    evt.return = true;\n                }\n            }\n        });\n        // Make sure that all items in a single list (items at the same level & listType) have the same properties.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node, previousNodeInList } of listNodes){\n                // This is a first item of a nested list.\n                if (!previousNodeInList) {\n                    continue;\n                }\n                // This is a first block of a list of a different type.\n                if (previousNodeInList.getAttribute('listType') != node.getAttribute('listType')) {\n                    continue;\n                }\n                // Copy properties from the previous one.\n                for (const strategy of strategies){\n                    const { attributeName } = strategy;\n                    if (!strategy.appliesToListItem(node)) {\n                        continue;\n                    }\n                    const value = previousNodeInList.getAttribute(attributeName);\n                    if (node.getAttribute(attributeName) != value) {\n                        writer.setAttribute(attributeName, value, node);\n                        evt.return = true;\n                    }\n                }\n            }\n        });\n    }\n}\n/**\n * Creates an array of strategies for dealing with enabled listItem attributes.\n */ function createAttributeStrategies$1(enabledProperties) {\n    const strategies = [];\n    const normalizedConfig = getNormalizedConfig(enabledProperties);\n    if (enabledProperties.styles) {\n        const useAttribute = normalizedConfig.styles.useAttribute;\n        strategies.push({\n            attributeName: 'listStyle',\n            defaultValue: DEFAULT_LIST_TYPE$1,\n            viewConsumables: {\n                styles: 'list-style-type'\n            },\n            addCommand (editor) {\n                let supportedTypes = getAllSupportedStyleTypes();\n                if (useAttribute) {\n                    supportedTypes = supportedTypes.filter((styleType)=>!!getTypeAttributeFromListStyleType(styleType));\n                }\n                editor.commands.add('listStyle', new ListStyleCommand(editor, DEFAULT_LIST_TYPE$1, supportedTypes));\n            },\n            appliesToListItem (item) {\n                return item.getAttribute('listType') == 'numbered' || item.getAttribute('listType') == 'bulleted';\n            },\n            hasValidAttribute (item) {\n                if (!this.appliesToListItem(item)) {\n                    return !item.hasAttribute('listStyle');\n                }\n                if (!item.hasAttribute('listStyle')) {\n                    return false;\n                }\n                const value = item.getAttribute('listStyle');\n                if (value == DEFAULT_LIST_TYPE$1) {\n                    return true;\n                }\n                return getListTypeFromListStyleType$1(value) == item.getAttribute('listType');\n            },\n            setAttributeOnDowncast (writer, listStyle, element) {\n                if (listStyle && listStyle !== DEFAULT_LIST_TYPE$1) {\n                    if (useAttribute) {\n                        const value = getTypeAttributeFromListStyleType(listStyle);\n                        if (value) {\n                            writer.setAttribute('type', value, element);\n                            return;\n                        }\n                    } else {\n                        writer.setStyle('list-style-type', listStyle, element);\n                        return;\n                    }\n                }\n                writer.removeStyle('list-style-type', element);\n                writer.removeAttribute('type', element);\n            },\n            getAttributeOnUpcast (listParent) {\n                const style = listParent.getStyle('list-style-type');\n                if (style) {\n                    return normalizeListStyle(style);\n                }\n                const attribute = listParent.getAttribute('type');\n                if (attribute) {\n                    return getListStyleTypeFromTypeAttribute(attribute);\n                }\n                return DEFAULT_LIST_TYPE$1;\n            }\n        });\n    }\n    if (enabledProperties.reversed) {\n        strategies.push({\n            attributeName: 'listReversed',\n            defaultValue: false,\n            viewConsumables: {\n                attributes: 'reversed'\n            },\n            addCommand (editor) {\n                editor.commands.add('listReversed', new ListReversedCommand(editor));\n            },\n            appliesToListItem (item) {\n                return item.getAttribute('listType') == 'numbered';\n            },\n            hasValidAttribute (item) {\n                return this.appliesToListItem(item) == item.hasAttribute('listReversed');\n            },\n            setAttributeOnDowncast (writer, listReversed, element) {\n                if (listReversed) {\n                    writer.setAttribute('reversed', 'reversed', element);\n                } else {\n                    writer.removeAttribute('reversed', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                return listParent.hasAttribute('reversed');\n            }\n        });\n    }\n    if (enabledProperties.startIndex) {\n        strategies.push({\n            attributeName: 'listStart',\n            defaultValue: 1,\n            viewConsumables: {\n                attributes: 'start'\n            },\n            addCommand (editor) {\n                editor.commands.add('listStart', new ListStartCommand(editor));\n            },\n            appliesToListItem (item) {\n                return isNumberedListType(item.getAttribute('listType'));\n            },\n            hasValidAttribute (item) {\n                return this.appliesToListItem(item) == item.hasAttribute('listStart');\n            },\n            setAttributeOnDowncast (writer, listStart, element) {\n                if (listStart == 0 || listStart > 1) {\n                    writer.setAttribute('start', listStart, element);\n                } else {\n                    writer.removeAttribute('start', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                const startAttributeValue = listParent.getAttribute('start');\n                return startAttributeValue >= 0 ? startAttributeValue : 1;\n            }\n        });\n    }\n    return strategies;\n}\n\n/**\n * The list properties view to be displayed in the list dropdown.\n *\n * Contains a grid of available list styles and, for numbered list, also the list start index and reversed fields.\n *\n * @internal\n */ class ListPropertiesView extends View {\n    /**\n\t * A collection of the child views.\n\t */ children;\n    /**\n\t * A view that renders the grid of list styles.\n\t */ stylesView = null;\n    /**\n\t * A collapsible view that hosts additional list property fields ({@link #startIndexFieldView} and\n\t * {@link #reversedSwitchButtonView}) to visually separate them from the {@link #stylesView grid of styles}.\n\t *\n\t * **Note**: Only present when:\n\t * * the view represents **numbered** list properties,\n\t * * and the {@link #stylesView} is rendered,\n\t * * and either {@link #startIndexFieldView} or {@link #reversedSwitchButtonView} is rendered.\n\t *\n\t * @readonly\n\t */ additionalPropertiesCollapsibleView = null;\n    /**\n\t * A labeled number field allowing the user to set the start index of the list.\n\t *\n\t * **Note**: Only present when the view represents **numbered** list properties.\n\t *\n\t * @readonly\n\t */ startIndexFieldView = null;\n    /**\n\t * A switch button allowing the user to make the edited list reversed.\n\t *\n\t * **Note**: Only present when the view represents **numbered** list properties.\n\t *\n\t * @readonly\n\t */ reversedSwitchButtonView = null;\n    /**\n\t * Tracks information about the DOM focus in the view.\n\t */ focusTracker = new FocusTracker();\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes = new KeystrokeHandler();\n    /**\n\t * A collection of views that can be focused in the properties view.\n\t */ focusables = new ViewCollection();\n    /**\n\t * Helps cycling over {@link #focusables} in the view.\n\t */ focusCycler;\n    /**\n\t * Creates an instance of the list properties view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Options of the view.\n\t * @param options.enabledProperties An object containing the configuration of enabled list property names.\n\t * Allows conditional rendering the sub-components of the properties view.\n\t * @param options.styleButtonViews A list of style buttons to be rendered\n\t * inside the styles grid. The grid will not be rendered when `enabledProperties` does not include the `'styles'` key.\n\t * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).\n\t */ constructor(locale, { enabledProperties, styleButtonViews, styleGridAriaLabel }){\n        super(locale);\n        const elementCssClasses = [\n            'ck',\n            'ck-list-properties'\n        ];\n        this.children = this.createCollection();\n        this.focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate #children backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate #children forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        // The rendering of the styles grid is conditional. When there is no styles grid, the view will render without collapsible\n        // for numbered list properties, hence simplifying the layout.\n        if (styleButtonViews && styleButtonViews.length) {\n            this.stylesView = this._createStylesView(styleButtonViews, styleGridAriaLabel);\n            this.children.add(this.stylesView);\n        } else {\n            elementCssClasses.push('ck-list-properties_without-styles');\n        }\n        // The rendering of the numbered list property views is also conditional. It only makes sense for the numbered list\n        // dropdown. The unordered list does not have such properties.\n        if (enabledProperties.startIndex || enabledProperties.reversed) {\n            this._addNumberedListPropertyViews(enabledProperties);\n            elementCssClasses.push('ck-list-properties_with-numbered-properties');\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: elementCssClasses\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        if (this.stylesView) {\n            this.focusables.add(this.stylesView);\n            this.focusTracker.add(this.stylesView.element);\n            // Register the collapsible toggle button to the focus system.\n            if (this.startIndexFieldView || this.reversedSwitchButtonView) {\n                this.focusables.add(this.children.last.buttonView);\n                this.focusTracker.add(this.children.last.buttonView.element);\n            }\n            for (const item of this.stylesView.children){\n                this.stylesView.focusTracker.add(item.element);\n            }\n            addKeyboardHandlingForGrid({\n                keystrokeHandler: this.stylesView.keystrokes,\n                focusTracker: this.stylesView.focusTracker,\n                gridItems: this.stylesView.children,\n                // Note: The styles view has a different number of columns depending on whether the other properties\n                // are enabled in the dropdown or not (https://github.com/ckeditor/ckeditor5/issues/12340)\n                numberOfColumns: ()=>global.window.getComputedStyle(this.stylesView.element).getPropertyValue('grid-template-columns').split(' ').length,\n                uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n            });\n        }\n        if (this.startIndexFieldView) {\n            this.focusables.add(this.startIndexFieldView);\n            this.focusTracker.add(this.startIndexFieldView.element);\n            const stopPropagation = (data)=>data.stopPropagation();\n            // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n            // keystroke handler would take over the key management in the input. We need to prevent\n            // this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n            this.keystrokes.set('arrowright', stopPropagation);\n            this.keystrokes.set('arrowleft', stopPropagation);\n            this.keystrokes.set('arrowup', stopPropagation);\n            this.keystrokes.set('arrowdown', stopPropagation);\n        }\n        if (this.reversedSwitchButtonView) {\n            this.focusables.add(this.reversedSwitchButtonView);\n            this.focusTracker.add(this.reversedSwitchButtonView.element);\n        }\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ focus() {\n        this.focusCycler.focusFirst();\n    }\n    /**\n\t * @inheritDoc\n\t */ focusLast() {\n        this.focusCycler.focusLast();\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Creates the list styles grid.\n\t *\n\t * @param styleButtons Buttons to be placed in the grid.\n\t * @param styleGridAriaLabel The assistive technology label of the grid.\n\t */ _createStylesView(styleButtons, styleGridAriaLabel) {\n        const stylesView = new View(this.locale);\n        stylesView.children = stylesView.createCollection();\n        stylesView.children.addMany(styleButtons);\n        stylesView.setTemplate({\n            tag: 'div',\n            attributes: {\n                'aria-label': styleGridAriaLabel,\n                class: [\n                    'ck',\n                    'ck-list-styles-list'\n                ]\n            },\n            children: stylesView.children\n        });\n        stylesView.children.delegate('execute').to(this);\n        stylesView.focus = function() {\n            // If there is a button that is already on, focus it.\n            // It's counterintuitive to focus the first button when there is already a button on.\n            for (const child of this.children){\n                if (child instanceof ButtonView && child.isOn) {\n                    child.focus();\n                    return;\n                }\n            }\n            // ... otherwise focus the first button.\n            this.children.first.focus();\n        };\n        stylesView.focusTracker = new FocusTracker();\n        stylesView.keystrokes = new KeystrokeHandler();\n        stylesView.render();\n        stylesView.keystrokes.listenTo(stylesView.element);\n        return stylesView;\n    }\n    /**\n\t * Renders {@link #startIndexFieldView} and/or {@link #reversedSwitchButtonView} depending on the configuration of the properties view.\n\t *\n\t * @param enabledProperties An object containing the configuration of enabled list property names\n\t * (see {@link #constructor}).\n\t */ _addNumberedListPropertyViews(enabledProperties) {\n        const t = this.locale.t;\n        const numberedPropertyViews = [];\n        if (enabledProperties.startIndex) {\n            this.startIndexFieldView = this._createStartIndexField();\n            numberedPropertyViews.push(this.startIndexFieldView);\n        }\n        if (enabledProperties.reversed) {\n            this.reversedSwitchButtonView = this._createReversedSwitchButton();\n            numberedPropertyViews.push(this.reversedSwitchButtonView);\n        }\n        // When there are some style buttons, pack the numbered list properties into a collapsible to separate them.\n        if (this.stylesView) {\n            this.additionalPropertiesCollapsibleView = new CollapsibleView(this.locale, numberedPropertyViews);\n            this.additionalPropertiesCollapsibleView.set({\n                label: t('List properties'),\n                isCollapsed: true\n            });\n            // Don't enable the collapsible view unless either start index or reversed field is enabled (e.g. when no list is selected).\n            this.additionalPropertiesCollapsibleView.buttonView.bind('isEnabled').toMany(numberedPropertyViews, 'isEnabled', (...areEnabled)=>areEnabled.some((isEnabled)=>isEnabled));\n            // Automatically collapse the additional properties collapsible when either start index or reversed field gets disabled.\n            this.additionalPropertiesCollapsibleView.buttonView.on('change:isEnabled', (evt, data, isEnabled)=>{\n                if (!isEnabled) {\n                    this.additionalPropertiesCollapsibleView.isCollapsed = true;\n                }\n            });\n            this.children.add(this.additionalPropertiesCollapsibleView);\n        } else {\n            this.children.addMany(numberedPropertyViews);\n        }\n    }\n    /**\n\t * Creates the list start index labeled field.\n\t */ _createStartIndexField() {\n        const t = this.locale.t;\n        const startIndexFieldView = new LabeledFieldView(this.locale, createLabeledInputNumber);\n        startIndexFieldView.set({\n            label: t('Start at'),\n            class: 'ck-numbered-list-properties__start-index'\n        });\n        startIndexFieldView.fieldView.set({\n            min: 0,\n            step: 1,\n            value: 1,\n            inputMode: 'numeric'\n        });\n        startIndexFieldView.fieldView.on('input', ()=>{\n            const inputElement = startIndexFieldView.fieldView.element;\n            const startIndex = inputElement.valueAsNumber;\n            if (Number.isNaN(startIndex)) {\n                // Number inputs allow for the entry of characters that may result in NaN,\n                // such as 'e', '+', '123e', '2-'.\n                startIndexFieldView.errorText = t('Invalid start index value.');\n                return;\n            }\n            if (!inputElement.checkValidity()) {\n                startIndexFieldView.errorText = t('Start index must be greater than 0.');\n            } else {\n                this.fire('listStart', {\n                    startIndex\n                });\n            }\n        });\n        return startIndexFieldView;\n    }\n    /**\n\t * Creates the reversed list switch button.\n\t */ _createReversedSwitchButton() {\n        const t = this.locale.t;\n        const reversedButtonView = new SwitchButtonView(this.locale);\n        reversedButtonView.set({\n            withText: true,\n            label: t('Reversed order'),\n            class: 'ck-numbered-list-properties__reversed-order'\n        });\n        reversedButtonView.delegate('execute').to(this, 'listReversed');\n        return reversedButtonView;\n    }\n}\n\nvar listStyleDiscIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"M11 27a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0-9a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0-9a3 3 0 1 1 0 6 3 3 0 0 1 0-6z\\\"/></svg>\";\n\nvar listStyleCircleIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"M11 27a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-10a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-10a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4z\\\"/></svg>\";\n\nvar listStyleSquareIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"M14 27v6H8v-6h6zm0-9v6H8v-6h6zm0-9v6H8V9h6z\\\"/></svg>\";\n\nvar listStyleDecimalIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"M10.29 15V8.531H9.286c-.14.393-.4.736-.778 1.03-.378.295-.728.495-1.05.6v1.121a4.257 4.257 0 0 0 1.595-.936V15h1.235zm3.343 0v-1.235h-1.235V15h1.235zM11.3 24v-1.147H8.848c.064-.111.148-.226.252-.343.104-.117.351-.354.74-.712.39-.357.66-.631.81-.821.225-.288.39-.562.494-.824.104-.263.156-.539.156-.829 0-.51-.182-.936-.545-1.279-.363-.342-.863-.514-1.499-.514-.58 0-1.063.148-1.45.444-.387.296-.617.784-.69 1.463l1.23.124c.024-.36.112-.619.264-.774.153-.155.358-.233.616-.233.26 0 .465.074.613.222.148.148.222.36.222.635 0 .25-.085.501-.255.756-.126.185-.468.536-1.024 1.055-.692.641-1.155 1.156-1.389 1.544-.234.389-.375.8-.422 1.233H11.3zm2.333 0v-1.235h-1.235V24h1.235zM9.204 34.11c.615 0 1.129-.2 1.542-.598.413-.398.62-.88.62-1.446 0-.39-.11-.722-.332-.997a1.5 1.5 0 0 0-.886-.532c.619-.337.928-.788.928-1.353 0-.399-.151-.756-.453-1.073-.366-.386-.852-.58-1.459-.58a2.25 2.25 0 0 0-.96.2 1.617 1.617 0 0 0-.668.55c-.16.232-.28.544-.358.933l1.138.194c.032-.282.123-.495.272-.642.15-.146.33-.22.54-.22.215 0 .386.065.515.194s.193.302.193.518c0 .255-.087.46-.263.613-.176.154-.43.227-.765.218l-.136 1.006c.22-.061.409-.092.567-.092.24 0 .444.09.61.272.168.182.251.428.251.739 0 .328-.087.589-.261.782a.833.833 0 0 1-.644.29.841.841 0 0 1-.607-.242c-.167-.16-.27-.394-.307-.698l-1.196.145c.062.542.285.98.668 1.316.384.335.868.503 1.45.503zm4.43-.11v-1.235h-1.236V34h1.235z\\\"/></svg>\";\n\nvar listStyleDecimalWithLeadingZeroIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"M5.714 15.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm6.078.914V8.531H10.79c-.14.393-.4.736-.778 1.03-.378.295-.728.495-1.05.6v1.121a4.257 4.257 0 0 0 1.595-.936V15h1.235zm3.344 0v-1.235h-1.235V15h1.235zm-9.422 9.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm7.088.914v-1.147H10.35c.065-.111.149-.226.253-.343.104-.117.35-.354.74-.712.39-.357.66-.631.81-.821.225-.288.39-.562.493-.824.104-.263.156-.539.156-.829 0-.51-.181-.936-.544-1.279-.364-.342-.863-.514-1.499-.514-.58 0-1.063.148-1.45.444-.387.296-.617.784-.69 1.463l1.23.124c.024-.36.112-.619.264-.774.152-.155.357-.233.615-.233.261 0 .465.074.613.222.148.148.222.36.222.635 0 .25-.085.501-.255.756-.126.185-.467.536-1.024 1.055-.691.641-1.154 1.156-1.388 1.544-.235.389-.375.8-.422 1.233h4.328zm2.334 0v-1.235h-1.235V24h1.235zM5.714 34.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm4.992 1.024c.616 0 1.13-.2 1.543-.598.413-.398.62-.88.62-1.446 0-.39-.111-.722-.332-.997a1.5 1.5 0 0 0-.886-.532c.618-.337.927-.788.927-1.353 0-.399-.15-.756-.452-1.073-.366-.386-.853-.58-1.46-.58a2.25 2.25 0 0 0-.96.2 1.617 1.617 0 0 0-.667.55c-.16.232-.28.544-.359.933l1.139.194c.032-.282.123-.495.272-.642.15-.146.33-.22.54-.22.214 0 .386.065.515.194s.193.302.193.518c0 .255-.088.46-.264.613-.175.154-.43.227-.764.218l-.136 1.006c.22-.061.408-.092.566-.092.24 0 .444.09.611.272.167.182.25.428.25.739 0 .328-.086.589-.26.782a.833.833 0 0 1-.644.29.841.841 0 0 1-.607-.242c-.167-.16-.27-.394-.308-.698l-1.195.145c.062.542.284.98.668 1.316.384.335.867.503 1.45.503zm4.43-.11v-1.235h-1.235V34h1.235z\\\"/></svg>\";\n\nvar listStyleLowerRomanIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"M11.88 8.7V7.558h-1.234V8.7h1.234zm0 5.3V9.333h-1.234V14h1.234zm2.5 0v-1.235h-1.234V14h1.235zm-4.75 4.7v-1.142H8.395V18.7H9.63zm0 5.3v-4.667H8.395V24H9.63zm2.5-5.3v-1.142h-1.234V18.7h1.235zm0 5.3v-4.667h-1.234V24h1.235zm2.501 0v-1.235h-1.235V24h1.235zM7.38 28.7v-1.142H6.145V28.7H7.38zm0 5.3v-4.667H6.145V34H7.38zm2.5-5.3v-1.142H8.646V28.7H9.88zm0 5.3v-4.667H8.646V34H9.88zm2.5-5.3v-1.142h-1.234V28.7h1.235zm0 5.3v-4.667h-1.234V34h1.235zm2.501 0v-1.235h-1.235V34h1.235z\\\"/></svg>\";\n\nvar listStyleUpperRomanIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"M11.916 15V8.558h-1.301V15h1.3zm2.465 0v-1.235h-1.235V15h1.235zM9.665 25v-6.442h-1.3V25h1.3zm2.5 0v-6.442h-1.3V25h1.3zm2.466 0v-1.235h-1.235V25h1.235zm-7.216 9v-6.442h-1.3V34h1.3zm2.5 0v-6.442h-1.3V34h1.3zm2.501 0v-6.442h-1.3V34h1.3zm2.465 0v-1.235h-1.235V34h1.235z\\\"/></svg>\";\n\nvar listStyleLowerLatinIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"M9.62 14.105c.272 0 .528-.05.768-.153s.466-.257.677-.462c.009.024.023.072.044.145.047.161.086.283.119.365h1.221a2.649 2.649 0 0 1-.222-.626c-.04-.195-.059-.498-.059-.908l.013-1.441c0-.536-.055-.905-.165-1.105-.11-.201-.3-.367-.569-.497-.27-.13-.68-.195-1.23-.195-.607 0-1.064.108-1.371.325-.308.217-.525.55-.65 1.002l1.12.202c.076-.217.176-.369.299-.455.123-.086.294-.13.514-.13.325 0 .546.05.663.152.118.101.176.27.176.508v.123c-.222.093-.622.194-1.2.303-.427.082-.755.178-.982.288-.227.11-.403.268-.53.474a1.327 1.327 0 0 0-.188.706c0 .398.138.728.415.988.277.261.656.391 1.136.391zm.368-.87a.675.675 0 0 1-.492-.189.606.606 0 0 1-.193-.448c0-.176.08-.32.241-.435.106-.07.33-.142.673-.215a7.19 7.19 0 0 0 .751-.19v.247c0 .296-.016.496-.048.602a.773.773 0 0 1-.295.409 1.07 1.07 0 0 1-.637.22zm4.645.765v-1.235h-1.235V14h1.235zM10.2 25.105c.542 0 1.003-.215 1.382-.646.38-.43.57-1.044.57-1.84 0-.771-.187-1.362-.559-1.774a1.82 1.82 0 0 0-1.41-.617c-.522 0-.973.216-1.354.65v-2.32H7.594V25h1.147v-.686a1.9 1.9 0 0 0 .67.592c.26.133.523.2.79.2zm-.299-.975c-.354 0-.638-.164-.852-.492-.153-.232-.229-.59-.229-1.073 0-.468.098-.818.295-1.048a.93.93 0 0 1 .738-.345c.302 0 .55.118.743.354.193.236.29.62.29 1.154 0 .5-.096.868-.288 1.1-.192.233-.424.35-.697.35zm4.478.87v-1.235h-1.234V25h1.234zm-4.017 9.105c.6 0 1.08-.142 1.437-.426.357-.284.599-.704.725-1.261l-1.213-.207c-.061.326-.167.555-.316.688a.832.832 0 0 1-.576.2.916.916 0 0 1-.75-.343c-.185-.228-.278-.62-.278-1.173 0-.498.091-.853.274-1.066.183-.212.429-.318.736-.318.232 0 .42.061.565.184.145.123.238.306.28.55l1.216-.22c-.146-.501-.387-.874-.722-1.119-.336-.244-.788-.366-1.356-.366-.695 0-1.245.214-1.653.643-.407.43-.61 1.03-.61 1.8 0 .762.202 1.358.608 1.788.406.431.95.646 1.633.646zM14.633 34v-1.235h-1.235V34h1.235z\\\"/></svg>\";\n\nvar listStyleUpperLatinIcon = \"<svg viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z\\\" fill-opacity=\\\".163\\\"/><path d=\\\"m7.88 15 .532-1.463h2.575L11.549 15h1.415l-2.58-6.442H9.01L6.5 15h1.38zm2.69-2.549H8.811l.87-2.39.887 2.39zM14.88 15v-1.235h-1.234V15h1.234zM9.352 25c.83-.006 1.352-.02 1.569-.044.346-.038.636-.14.872-.305.236-.166.422-.387.558-.664.137-.277.205-.562.205-.855 0-.372-.106-.695-.317-.97-.21-.276-.512-.471-.905-.585a1.51 1.51 0 0 0 .661-.567 1.5 1.5 0 0 0 .244-.83c0-.28-.066-.53-.197-.754a1.654 1.654 0 0 0-.495-.539 1.676 1.676 0 0 0-.672-.266c-.25-.042-.63-.063-1.14-.063H7.158V25h2.193zm.142-3.88H8.46v-1.49h.747c.612 0 .983.007 1.112.022.217.026.38.102.49.226.11.125.165.287.165.486a.68.68 0 0 1-.192.503.86.86 0 0 1-.525.23 11.47 11.47 0 0 1-.944.023h.18zm.17 2.795H8.46v-1.723h1.05c.592 0 .977.03 1.154.092.177.062.313.16.406.295a.84.84 0 0 1 .14.492c0 .228-.06.41-.181.547a.806.806 0 0 1-.473.257c-.126.026-.423.04-.892.04zM14.88 25v-1.235h-1.234V25h1.234zm-5.018 9.11c.691 0 1.262-.17 1.711-.512.45-.341.772-.864.965-1.567l-1.261-.4c-.109.472-.287.818-.536 1.037-.25.22-.547.33-.892.33-.47 0-.85-.173-1.143-.519-.293-.345-.44-.925-.44-1.74 0-.767.15-1.322.447-1.665.297-.343.684-.514 1.162-.514.346 0 .64.096.881.29.242.193.4.457.477.79l1.288-.307c-.147-.516-.367-.911-.66-1.187-.492-.465-1.132-.698-1.92-.698-.902 0-1.63.296-2.184.89-.554.593-.83 1.426-.83 2.498 0 1.014.275 1.813.825 2.397.551.585 1.254.877 2.11.877zM14.88 34v-1.235h-1.234V34h1.234z\\\"/></svg>\";\n\n/**\n * The list properties UI plugin. It introduces the extended `'bulletedList'` and `'numberedList'` toolbar\n * buttons that allow users to control such aspects of list as the marker, start index or order.\n *\n * **Note**: Buttons introduced by this plugin override implementations from the {@link module:list/list/listui~ListUI}\n * (because they share the same names).\n */ class ListPropertiesUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListPropertiesUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const propertiesConfig = editor.config.get('list.properties');\n        const normalizedConfig = getNormalizedConfig(propertiesConfig);\n        const stylesListTypes = normalizedConfig.styles.listTypes;\n        // Note: When this plugin does not register the \"bulletedList\" dropdown due to properties configuration,\n        // a simple button will be still registered under the same name by ListUI as a fallback. This should happen\n        // in most editor configuration because the List plugin automatically requires ListUI.\n        if (stylesListTypes.includes('bulleted')) {\n            const styleDefinitions = [\n                {\n                    label: t('Toggle the disc list style'),\n                    tooltip: t('Disc'),\n                    type: 'disc',\n                    icon: listStyleDiscIcon\n                },\n                {\n                    label: t('Toggle the circle list style'),\n                    tooltip: t('Circle'),\n                    type: 'circle',\n                    icon: listStyleCircleIcon\n                },\n                {\n                    label: t('Toggle the square list style'),\n                    tooltip: t('Square'),\n                    type: 'square',\n                    icon: listStyleSquareIcon\n                }\n            ];\n            const buttonLabel = t('Bulleted List');\n            const styleGridAriaLabel = t('Bulleted list styles toolbar');\n            const commandName = 'bulletedList';\n            editor.ui.componentFactory.add(commandName, getDropdownViewCreator({\n                editor,\n                normalizedConfig,\n                parentCommandName: commandName,\n                buttonLabel,\n                buttonIcon: icons.bulletedList,\n                styleGridAriaLabel,\n                styleDefinitions\n            }));\n            // Add the menu bar item for bulleted list.\n            editor.ui.componentFactory.add(`menuBar:${commandName}`, getMenuBarStylesMenuCreator({\n                editor,\n                normalizedConfig,\n                parentCommandName: commandName,\n                buttonLabel,\n                styleGridAriaLabel,\n                styleDefinitions\n            }));\n        }\n        // Note: When this plugin does not register the \"numberedList\" dropdown due to properties configuration,\n        // a simple button will be still registered under the same name by ListUI as a fallback. This should happen\n        // in most editor configuration because the List plugin automatically requires ListUI.\n        if (stylesListTypes.includes('numbered') || propertiesConfig.startIndex || propertiesConfig.reversed) {\n            const styleDefinitions = [\n                {\n                    label: t('Toggle the decimal list style'),\n                    tooltip: t('Decimal'),\n                    type: 'decimal',\n                    icon: listStyleDecimalIcon\n                },\n                {\n                    label: t('Toggle the decimal with leading zero list style'),\n                    tooltip: t('Decimal with leading zero'),\n                    type: 'decimal-leading-zero',\n                    icon: listStyleDecimalWithLeadingZeroIcon\n                },\n                {\n                    label: t('Toggle the lower–roman list style'),\n                    tooltip: t('Lower–roman'),\n                    type: 'lower-roman',\n                    icon: listStyleLowerRomanIcon\n                },\n                {\n                    label: t('Toggle the upper–roman list style'),\n                    tooltip: t('Upper-roman'),\n                    type: 'upper-roman',\n                    icon: listStyleUpperRomanIcon\n                },\n                {\n                    label: t('Toggle the lower–latin list style'),\n                    tooltip: t('Lower-latin'),\n                    type: 'lower-latin',\n                    icon: listStyleLowerLatinIcon\n                },\n                {\n                    label: t('Toggle the upper–latin list style'),\n                    tooltip: t('Upper-latin'),\n                    type: 'upper-latin',\n                    icon: listStyleUpperLatinIcon\n                }\n            ];\n            const buttonLabel = t('Numbered List');\n            const styleGridAriaLabel = t('Numbered list styles toolbar');\n            const commandName = 'numberedList';\n            editor.ui.componentFactory.add(commandName, getDropdownViewCreator({\n                editor,\n                normalizedConfig,\n                parentCommandName: commandName,\n                buttonLabel,\n                buttonIcon: icons.numberedList,\n                styleGridAriaLabel,\n                styleDefinitions\n            }));\n            // Menu bar menu does not display list start index or reverse UI. If there are no styles enabled,\n            // the menu makes no sense and should be omitted.\n            if (stylesListTypes.includes('numbered')) {\n                editor.ui.componentFactory.add(`menuBar:${commandName}`, getMenuBarStylesMenuCreator({\n                    editor,\n                    normalizedConfig,\n                    parentCommandName: commandName,\n                    buttonLabel,\n                    styleGridAriaLabel,\n                    styleDefinitions\n                }));\n            }\n        }\n    }\n}\n/**\n * A helper that returns a function that creates a split button with a toolbar in the dropdown,\n * which in turn contains buttons allowing users to change list styles in the context of the current selection.\n *\n * @param options.editor\n * @param options.normalizedConfig List properties configuration.\n * @param options.parentCommandName The name of the higher-order editor command associated with\n * the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n * @param options.buttonLabel Label of the main part of the split button.\n * @param options.buttonIcon The SVG string of an icon for the main part of the split button.\n * @param options.styleGridAriaLabel The ARIA label for the styles grid in the split button dropdown.\n * @param options.styleDefinitions Definitions of the style buttons.\n * @returns A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n */ function getDropdownViewCreator({ editor, normalizedConfig, parentCommandName, buttonLabel, buttonIcon, styleGridAriaLabel, styleDefinitions }) {\n    const parentCommand = editor.commands.get(parentCommandName);\n    return (locale)=>{\n        const dropdownView = createDropdown(locale, SplitButtonView);\n        const mainButtonView = dropdownView.buttonView;\n        dropdownView.bind('isEnabled').to(parentCommand);\n        dropdownView.class = 'ck-list-styles-dropdown';\n        // Main button was clicked.\n        mainButtonView.on('execute', ()=>{\n            editor.execute(parentCommandName);\n            editor.editing.view.focus();\n        });\n        mainButtonView.set({\n            label: buttonLabel,\n            icon: buttonIcon,\n            tooltip: true,\n            isToggleable: true\n        });\n        mainButtonView.bind('isOn').to(parentCommand, 'value', (value)=>!!value);\n        dropdownView.once('change:isOpen', ()=>{\n            const listPropertiesView = createListPropertiesView({\n                editor,\n                normalizedConfig,\n                dropdownView,\n                parentCommandName,\n                styleGridAriaLabel,\n                styleDefinitions\n            });\n            dropdownView.panelView.children.add(listPropertiesView);\n        });\n        // Focus the editable after executing the command.\n        // Overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n        dropdownView.on('execute', ()=>{\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    };\n}\n/**\n * A helper that returns a function (factory) that creates individual buttons used by users to change styles\n * of lists.\n *\n * @param options.editor\n * @param options.listStyleCommand The instance of the `ListStylesCommand` class.\n * @param options.parentCommandName The name of the higher-order command associated with a\n * particular list style (e.g. \"bulletedList\" is associated with \"square\" and \"numberedList\" is associated with \"roman\").\n * @returns A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n */ function getStyleButtonCreator({ editor, listStyleCommand, parentCommandName }) {\n    const locale = editor.locale;\n    const parentCommand = editor.commands.get(parentCommandName);\n    return ({ label, type, icon, tooltip })=>{\n        const button = new ButtonView(locale);\n        button.set({\n            label,\n            icon,\n            tooltip\n        });\n        button.bind('isOn').to(listStyleCommand, 'value', (value)=>value === type);\n        button.on('execute', ()=>{\n            // If the content the selection is anchored to is a list, let's change its style.\n            if (parentCommand.value) {\n                // Remove the list when the current list style is the same as the one that would normally be applied.\n                if (listStyleCommand.value === type) {\n                    editor.execute(parentCommandName);\n                } else if (listStyleCommand.value !== type) {\n                    editor.execute('listStyle', {\n                        type\n                    });\n                }\n            } else {\n                editor.model.change(()=>{\n                    editor.execute('listStyle', {\n                        type\n                    });\n                });\n            }\n        });\n        return button;\n    };\n}\n/**\n * A helper that creates the properties view for the individual style dropdown.\n *\n * @param options.editor Editor instance.\n * @param options.normalizedConfig List properties configuration.\n * @param options.dropdownView Styles dropdown view that hosts the properties view.\n * @param options.parentCommandName The name of the higher-order editor command associated with\n * the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n * @param options.styleDefinitions Definitions of the style buttons.\n * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).\n */ function createListPropertiesView({ editor, normalizedConfig, dropdownView, parentCommandName, styleDefinitions, styleGridAriaLabel }) {\n    const locale = editor.locale;\n    const enabledProperties = {\n        ...normalizedConfig,\n        ...parentCommandName != 'numberedList' ? {\n            startIndex: false,\n            reversed: false\n        } : null\n    };\n    const listType = parentCommandName.replace('List', '');\n    let styleButtonViews = null;\n    if (normalizedConfig.styles.listTypes.includes(listType)) {\n        const listStyleCommand = editor.commands.get('listStyle');\n        const styleButtonCreator = getStyleButtonCreator({\n            editor,\n            parentCommandName,\n            listStyleCommand\n        });\n        const configuredListStylesTypes = normalizedConfig.styles.listStyleTypes;\n        let filteredDefinitions = styleDefinitions;\n        if (configuredListStylesTypes) {\n            const allowedTypes = configuredListStylesTypes[listType];\n            if (allowedTypes) {\n                filteredDefinitions = styleDefinitions.filter((def)=>allowedTypes.includes(def.type));\n            }\n        }\n        const isStyleTypeSupported = getStyleTypeSupportChecker(listStyleCommand);\n        styleButtonViews = filteredDefinitions.filter(isStyleTypeSupported).map(styleButtonCreator);\n    }\n    const listPropertiesView = new ListPropertiesView(locale, {\n        styleGridAriaLabel,\n        enabledProperties,\n        styleButtonViews\n    });\n    if (normalizedConfig.styles.listTypes.includes(listType)) {\n        // Accessibility: focus the first active style when opening the dropdown.\n        focusChildOnDropdownOpen(dropdownView, ()=>{\n            return listPropertiesView.stylesView.children.find((child)=>child.isOn);\n        });\n    }\n    if (enabledProperties.startIndex) {\n        const listStartCommand = editor.commands.get('listStart');\n        listPropertiesView.startIndexFieldView.bind('isEnabled').to(listStartCommand);\n        listPropertiesView.startIndexFieldView.fieldView.bind('value').to(listStartCommand);\n        listPropertiesView.on('listStart', (evt, data)=>editor.execute('listStart', data));\n    }\n    if (enabledProperties.reversed) {\n        const listReversedCommand = editor.commands.get('listReversed');\n        listPropertiesView.reversedSwitchButtonView.bind('isEnabled').to(listReversedCommand);\n        listPropertiesView.reversedSwitchButtonView.bind('isOn').to(listReversedCommand, 'value', (value)=>!!value);\n        listPropertiesView.on('listReversed', ()=>{\n            const isReversed = listReversedCommand.value;\n            editor.execute('listReversed', {\n                reversed: !isReversed\n            });\n        });\n    }\n    // Make sure applying styles closes the dropdown.\n    listPropertiesView.delegate('execute').to(dropdownView);\n    return listPropertiesView;\n}\n/**\n * A helper that creates the list style submenu for menu bar.\n *\n * @param editor Editor instance.\n * @param normalizedConfig List properties configuration.\n * @param parentCommandName Name of the list command.\n * @param buttonLabel Label of the menu button.\n * @param styleGridAriaLabel ARIA label of the styles grid.\n */ function getMenuBarStylesMenuCreator({ editor, normalizedConfig, parentCommandName, buttonLabel, styleGridAriaLabel, styleDefinitions }) {\n    return (locale)=>{\n        const menuView = new MenuBarMenuView(locale);\n        const listCommand = editor.commands.get(parentCommandName);\n        const listStyleCommand = editor.commands.get('listStyle');\n        const isStyleTypeSupported = getStyleTypeSupportChecker(listStyleCommand);\n        const styleButtonCreator = getStyleButtonCreator({\n            editor,\n            parentCommandName,\n            listStyleCommand\n        });\n        const configuredListStylesTypes = normalizedConfig.styles.listStyleTypes;\n        let filteredDefinitions = styleDefinitions;\n        if (configuredListStylesTypes) {\n            const listType = listCommand.type;\n            const allowedTypes = configuredListStylesTypes[listType];\n            if (allowedTypes) {\n                filteredDefinitions = styleDefinitions.filter((def)=>allowedTypes.includes(def.type));\n            }\n        }\n        const styleButtonViews = filteredDefinitions.filter(isStyleTypeSupported).map(styleButtonCreator);\n        const listPropertiesView = new ListPropertiesView(locale, {\n            styleGridAriaLabel,\n            enabledProperties: {\n                ...normalizedConfig,\n                // Disable list start index and reversed in the menu bar.\n                startIndex: false,\n                reversed: false\n            },\n            styleButtonViews\n        });\n        listPropertiesView.delegate('execute').to(menuView);\n        menuView.buttonView.set({\n            label: buttonLabel,\n            icon: icons[parentCommandName]\n        });\n        menuView.panelView.children.add(listPropertiesView);\n        menuView.bind('isEnabled').to(listCommand, 'isEnabled');\n        menuView.on('execute', ()=>{\n            editor.editing.view.focus();\n        });\n        return menuView;\n    };\n}\nfunction getStyleTypeSupportChecker(listStyleCommand) {\n    if (typeof listStyleCommand.isStyleTypeSupported == 'function') {\n        return (styleDefinition)=>listStyleCommand.isStyleTypeSupported(styleDefinition.type);\n    } else {\n        return ()=>true;\n    }\n}\n\n/**\n * The list properties feature.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:list/listproperties/listpropertiesediting~ListPropertiesEditing list properties\n * editing feature} and the {@link module:list/listproperties/listpropertiesui~ListPropertiesUI list properties UI feature}.\n */ class ListProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListPropertiesEditing,\n            ListPropertiesUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/todolist/todolistediting~TodoListEditing} as\n * the `checkTodoList` editor command.\n */ class CheckTodoListCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // Refresh command before executing to be sure all values are up to date.\n        // It is needed when selection has changed before command execution, in the same change block.\n        this.on('execute', ()=>{\n            this.refresh();\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */ refresh() {\n        const selectedElements = this._getSelectedItems();\n        this.value = this._getValue(selectedElements);\n        this.isEnabled = !!selectedElements.length;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */ execute(options = {}) {\n        this.editor.model.change((writer)=>{\n            const selectedElements = this._getSelectedItems();\n            const value = options.forceValue === undefined ? !this._getValue(selectedElements) : options.forceValue;\n            for (const element of selectedElements){\n                if (value) {\n                    writer.setAttribute('todoListChecked', true, element);\n                } else {\n                    writer.removeAttribute('todoListChecked', element);\n                }\n            }\n        });\n    }\n    /**\n\t * Returns a value for the command.\n\t */ _getValue(selectedElements) {\n        return selectedElements.every((element)=>element.getAttribute('todoListChecked'));\n    }\n    /**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t */ _getSelectedItems() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selectionRange = model.document.selection.getFirstRange();\n        const startElement = selectionRange.start.parent;\n        const elements = [];\n        if (schema.checkAttribute(startElement, 'todoListChecked')) {\n            elements.push(...getAllListItemBlocks(startElement));\n        }\n        for (const item of selectionRange.getItems({\n            shallow: true\n        })){\n            if (schema.checkAttribute(item, 'todoListChecked') && !elements.includes(item)) {\n                elements.push(...getAllListItemBlocks(item));\n            }\n        }\n        return elements;\n    }\n}\n\n/**\n * Observes all to-do list checkboxes state changes.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n */ class TodoCheckboxChangeObserver extends DomEventObserver {\n    /**\n\t * @inheritDoc\n\t */ domEventType = [\n        'change'\n    ];\n    /**\n\t * @inheritDoc\n\t */ onDomEvent(domEvent) {\n        if (domEvent.target) {\n            const viewTarget = this.view.domConverter.mapDomToView(domEvent.target);\n            if (viewTarget && viewTarget.is('element', 'input') && viewTarget.getAttribute('type') == 'checkbox' && viewTarget.findAncestor({\n                classes: 'todo-list__label'\n            })) {\n                this.fire('todoCheckboxChange', domEvent);\n            }\n        }\n    }\n}\n\nconst ITEM_TOGGLE_KEYSTROKE$1 = /* #__PURE__ */ parseKeystroke('Ctrl+Enter');\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/list/listediting~ListEditing list editing plugin}\n * and extends it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n */ class TodoListEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TodoListEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const editing = editor.editing;\n        const listEditing = editor.plugins.get(ListEditing);\n        const multiBlock = editor.config.get('list.multiBlock');\n        const elementName = multiBlock ? 'paragraph' : 'listItem';\n        editor.commands.add('todoList', new ListCommand(editor, 'todo'));\n        editor.commands.add('checkTodoList', new CheckTodoListCommand(editor));\n        editing.view.addObserver(TodoCheckboxChangeObserver);\n        model.schema.extend('$listItem', {\n            allowAttributes: 'todoListChecked'\n        });\n        model.schema.addAttributeCheck((context)=>{\n            const item = context.last;\n            // Don't allow `todoListChecked` attribute on elements which are not todo list items.\n            if (!item.getAttribute('listItemId') || item.getAttribute('listType') != 'todo') {\n                return false;\n            }\n        }, 'todoListChecked');\n        editor.conversion.for('upcast').add((dispatcher)=>{\n            // Upcast of to-do list item is based on a checkbox at the beginning of a <li> to keep compatibility with markdown input.\n            dispatcher.on('element:input', todoItemInputConverter());\n            // Priority is set to low to allow generic list item converter to run first.\n            dispatcher.on('element:li', todoListItemUpcastConverter(), {\n                priority: 'low'\n            });\n            // Consume other elements that are normally generated in data downcast, so they won't get captured by GHS.\n            dispatcher.on('element:label', elementUpcastConsumingConverter({\n                name: 'label',\n                classes: 'todo-list__label'\n            }));\n            dispatcher.on('element:label', elementUpcastConsumingConverter({\n                name: 'label',\n                classes: [\n                    'todo-list__label',\n                    'todo-list__label_without-description'\n                ]\n            }));\n            dispatcher.on('element:span', elementUpcastConsumingConverter({\n                name: 'span',\n                classes: 'todo-list__label__description'\n            }));\n            dispatcher.on('element:ul', attributeUpcastConsumingConverter({\n                name: 'ul',\n                classes: 'todo-list'\n            }));\n        });\n        editor.conversion.for('downcast').elementToElement({\n            model: elementName,\n            view: (element, { writer })=>{\n                if (isDescriptionBlock(element, listEditing.getListAttributeNames())) {\n                    return writer.createContainerElement('span', {\n                        class: 'todo-list__label__description'\n                    });\n                }\n            },\n            converterPriority: 'highest'\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'listType',\n            setAttributeOnDowncast (writer, value, element) {\n                if (value == 'todo') {\n                    writer.addClass('todo-list', element);\n                } else {\n                    writer.removeClass('todo-list', element);\n                }\n            }\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'itemMarker',\n            attributeName: 'todoListChecked',\n            createElement (writer, modelElement, { dataPipeline }) {\n                if (modelElement.getAttribute('listType') != 'todo') {\n                    return null;\n                }\n                const viewElement = writer.createUIElement('input', {\n                    type: 'checkbox',\n                    ...modelElement.getAttribute('todoListChecked') ? {\n                        checked: 'checked'\n                    } : null,\n                    ...dataPipeline ? {\n                        disabled: 'disabled'\n                    } : {\n                        tabindex: '-1'\n                    }\n                });\n                if (dataPipeline) {\n                    return viewElement;\n                }\n                const wrapper = writer.createContainerElement('span', {\n                    contenteditable: 'false'\n                }, viewElement);\n                wrapper.getFillerOffset = ()=>null;\n                return wrapper;\n            },\n            canWrapElement (modelElement) {\n                return isDescriptionBlock(modelElement, listEditing.getListAttributeNames());\n            },\n            createWrapperElement (writer, modelElement, { dataPipeline }) {\n                const classes = [\n                    'todo-list__label'\n                ];\n                if (!isDescriptionBlock(modelElement, listEditing.getListAttributeNames())) {\n                    classes.push('todo-list__label_without-description');\n                }\n                return writer.createAttributeElement(dataPipeline ? 'label' : 'span', {\n                    class: classes.join(' ')\n                });\n            }\n        });\n        // Verifies if a to-do list block requires reconversion of a first item downcasted as an item description.\n        listEditing.on('checkElement', (evt, { modelElement, viewElement })=>{\n            const isFirstTodoModelParagraphBlock = isDescriptionBlock(modelElement, listEditing.getListAttributeNames());\n            const hasViewClass = viewElement.hasClass('todo-list__label__description');\n            if (hasViewClass != isFirstTodoModelParagraphBlock) {\n                evt.return = true;\n                evt.stop();\n            }\n        });\n        // Verifies if a to-do list block requires reconversion of a checkbox element\n        // (for example there is a new paragraph inserted as a first block of a list item).\n        listEditing.on('checkElement', (evt, { modelElement, viewElement })=>{\n            const isFirstTodoModelItemBlock = modelElement.getAttribute('listType') == 'todo' && isFirstBlockOfListItem(modelElement);\n            let hasViewItemMarker = false;\n            const viewWalker = editor.editing.view.createPositionBefore(viewElement).getWalker({\n                direction: 'backward'\n            });\n            for (const { item } of viewWalker){\n                if (item.is('element') && editor.editing.mapper.toModelElement(item)) {\n                    break;\n                }\n                if (item.is('element', 'input') && item.getAttribute('type') == 'checkbox') {\n                    hasViewItemMarker = true;\n                }\n            }\n            if (hasViewItemMarker != isFirstTodoModelItemBlock) {\n                evt.return = true;\n                evt.stop();\n            }\n        });\n        // Make sure that all blocks of the same list item have the same todoListChecked attribute.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node, previousNodeInList } of listNodes){\n                // This is a first item of a nested list.\n                if (!previousNodeInList) {\n                    continue;\n                }\n                if (previousNodeInList.getAttribute('listItemId') != node.getAttribute('listItemId')) {\n                    continue;\n                }\n                const previousHasAttribute = previousNodeInList.hasAttribute('todoListChecked');\n                const nodeHasAttribute = node.hasAttribute('todoListChecked');\n                if (nodeHasAttribute && !previousHasAttribute) {\n                    writer.removeAttribute('todoListChecked', node);\n                    evt.return = true;\n                } else if (!nodeHasAttribute && previousHasAttribute) {\n                    writer.setAttribute('todoListChecked', true, node);\n                    evt.return = true;\n                }\n            }\n        });\n        // Make sure that todoListChecked attribute is only present for to-do list items.\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            let wasFixed = false;\n            for (const change of changes){\n                if (change.type == 'attribute' && change.attributeKey == 'listType') {\n                    const element = change.range.start.nodeAfter;\n                    if (change.attributeOldValue == 'todo' && element.hasAttribute('todoListChecked')) {\n                        writer.removeAttribute('todoListChecked', element);\n                        wasFixed = true;\n                    }\n                } else if (change.type == 'insert' && change.name != '$text') {\n                    for (const { item } of writer.createRangeOn(change.position.nodeAfter)){\n                        if (item.is('element') && item.getAttribute('listType') != 'todo' && item.hasAttribute('todoListChecked')) {\n                            writer.removeAttribute('todoListChecked', item);\n                            wasFixed = true;\n                        }\n                    }\n                }\n            }\n            return wasFixed;\n        });\n        // Toggle check state of selected to-do list items on keystroke.\n        this.listenTo(editing.view.document, 'keydown', (evt, data)=>{\n            if (getCode(data) === ITEM_TOGGLE_KEYSTROKE$1) {\n                editor.execute('checkTodoList');\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        // Toggle check state of a to-do list item clicked on the checkbox.\n        this.listenTo(editing.view.document, 'todoCheckboxChange', (evt, data)=>{\n            const viewTarget = data.target;\n            if (!viewTarget || !viewTarget.is('element', 'input')) {\n                return;\n            }\n            const viewPositionAfter = editing.view.createPositionAfter(viewTarget);\n            const modelPositionAfter = editing.mapper.toModelPosition(viewPositionAfter);\n            const modelElement = modelPositionAfter.parent;\n            if (modelElement && isListItemBlock(modelElement) && modelElement.getAttribute('listType') == 'todo') {\n                this._handleCheckmarkChange(modelElement);\n            }\n        });\n        // Jump at the start/end of the next node on right arrow key press, when selection is before the checkbox.\n        //\n        // <blockquote><p>Foo{}</p></blockquote>\n        // <ul><li><checkbox/>Bar</li></ul>\n        //\n        // press: `->`\n        //\n        // <blockquote><p>Foo</p></blockquote>\n        // <ul><li><checkbox/>{}Bar</li></ul>\n        //\n        this.listenTo(editing.view.document, 'arrowKey', jumpOverCheckmarkOnSideArrowKeyPress$1(model, editor.locale), {\n            context: '$text'\n        });\n        // Map view positions inside the checkbox and wrappers to the position in the first block of the list item.\n        this.listenTo(editing.mapper, 'viewToModelPosition', (evt, data)=>{\n            const viewParent = data.viewPosition.parent;\n            const isStartOfListItem = viewParent.is('attributeElement', 'li') && data.viewPosition.offset == 0;\n            const isStartOfListLabel = isLabelElement(viewParent) && data.viewPosition.offset <= 1;\n            const isInInputWrapper = viewParent.is('element', 'span') && viewParent.getAttribute('contenteditable') == 'false' && isLabelElement(viewParent.parent);\n            if (!isStartOfListItem && !isStartOfListLabel && !isInInputWrapper) {\n                return;\n            }\n            const nodeAfter = data.modelPosition.nodeAfter;\n            if (nodeAfter && nodeAfter.getAttribute('listType') == 'todo') {\n                data.modelPosition = model.createPositionAt(nodeAfter, 0);\n            }\n        }, {\n            priority: 'low'\n        });\n        this._initAriaAnnouncements();\n    }\n    /**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t */ _handleCheckmarkChange(listItem) {\n        const editor = this.editor;\n        const model = editor.model;\n        const previousSelectionRanges = Array.from(model.document.selection.getRanges());\n        model.change((writer)=>{\n            writer.setSelection(listItem, 'end');\n            editor.execute('checkTodoList');\n            writer.setSelection(previousSelectionRanges);\n        });\n    }\n    /**\n\t * Observe when user enters or leaves todo list and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified todo list.\n\t *\n\t * @internal\n\t */ _initAriaAnnouncements() {\n        const { model, ui, t } = this.editor;\n        let lastFocusedCodeBlock = null;\n        if (!ui) {\n            return;\n        }\n        model.document.selection.on('change:range', ()=>{\n            const focusParent = model.document.selection.focus.parent;\n            const lastElementIsTodoList = isTodoListItemElement(lastFocusedCodeBlock);\n            const currentElementIsTodoList = isTodoListItemElement(focusParent);\n            if (lastElementIsTodoList && !currentElementIsTodoList) {\n                ui.ariaLiveAnnouncer.announce(t('Leaving a to-do list'));\n            } else if (!lastElementIsTodoList && currentElementIsTodoList) {\n                ui.ariaLiveAnnouncer.announce(t('Entering a to-do list'));\n            }\n            lastFocusedCodeBlock = focusParent;\n        });\n    }\n}\n/**\n * Returns an upcast converter for to-do list items.\n */ function todoListItemUpcastConverter() {\n    return (evt, data, conversionApi)=>{\n        const { writer, schema } = conversionApi;\n        if (!data.modelRange) {\n            return;\n        }\n        // Group to-do list items by their listItemId attribute to ensure that all items of the same list item have the same checked state.\n        const groupedItems = Array.from(data.modelRange.getItems({\n            shallow: true\n        })).filter((item)=>item.getAttribute('listType') === 'todo' && schema.checkAttribute(item, 'listItemId')).reduce((acc, item)=>{\n            const listItemId = item.getAttribute('listItemId');\n            if (!acc.has(listItemId)) {\n                acc.set(listItemId, getAllListItemBlocks(item));\n            }\n            return acc;\n        }, new Map());\n        // During the upcast, we need to ensure that all items of the same list have the same checked state. From time to time\n        // the checked state of the items can be different when the user pastes content from the clipboard with <input type=\"checkbox\">\n        // that has checked state set to true. In such cases, we need to ensure that all items of the same list have the same checked state.\n        // See more: https://github.com/ckeditor/ckeditor5/issues/15602\n        for (const [, items] of groupedItems.entries()){\n            if (items.some((item)=>item.getAttribute('todoListChecked'))) {\n                for (const item of items){\n                    writer.setAttribute('todoListChecked', true, item);\n                }\n            }\n        }\n    };\n}\n/**\n * Returns an upcast converter that detects a to-do list checkbox and marks the list item as a to-do list.\n */ function todoItemInputConverter() {\n    return (evt, data, conversionApi)=>{\n        const modelCursor = data.modelCursor;\n        const modelItem = modelCursor.parent;\n        const viewItem = data.viewItem;\n        if (!conversionApi.consumable.test(viewItem, {\n            name: true\n        })) {\n            return;\n        }\n        if (viewItem.getAttribute('type') != 'checkbox' || !modelCursor.isAtStart || !modelItem.hasAttribute('listType')) {\n            return;\n        }\n        conversionApi.consumable.consume(viewItem, {\n            name: true\n        });\n        const writer = conversionApi.writer;\n        writer.setAttribute('listType', 'todo', modelItem);\n        if (data.viewItem.hasAttribute('checked')) {\n            writer.setAttribute('todoListChecked', true, modelItem);\n        }\n        data.modelRange = writer.createRange(modelCursor);\n    };\n}\n/**\n * Returns an upcast converter that consumes element matching the given matcher pattern.\n */ function elementUpcastConsumingConverter(matcherPattern) {\n    const matcher = new Matcher(matcherPattern);\n    return (evt, data, conversionApi)=>{\n        const matcherResult = matcher.match(data.viewItem);\n        if (!matcherResult) {\n            return;\n        }\n        if (!conversionApi.consumable.consume(data.viewItem, matcherResult.match)) {\n            return;\n        }\n        Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n    };\n}\n/**\n * Returns an upcast converter that consumes attributes matching the given matcher pattern.\n */ function attributeUpcastConsumingConverter(matcherPattern) {\n    const matcher = new Matcher(matcherPattern);\n    return (evt, data, conversionApi)=>{\n        const matcherResult = matcher.match(data.viewItem);\n        if (!matcherResult) {\n            return;\n        }\n        const match = matcherResult.match;\n        match.name = false;\n        conversionApi.consumable.consume(data.viewItem, match);\n    };\n}\n/**\n * Returns true if the given list item block should be converted as a description block of a to-do list item.\n */ function isDescriptionBlock(modelElement, listAttributeNames) {\n    return (modelElement.is('element', 'paragraph') || modelElement.is('element', 'listItem')) && modelElement.getAttribute('listType') == 'todo' && isFirstBlockOfListItem(modelElement) && hasOnlyListAttributes(modelElement, listAttributeNames);\n}\n/**\n * Returns true if only attributes from the given list are present on the model element.\n */ function hasOnlyListAttributes(modelElement, attributeNames) {\n    for (const attributeKey of modelElement.getAttributeKeys()){\n        // Ignore selection attributes stored on block elements.\n        if (attributeKey.startsWith('selection:')) {\n            continue;\n        }\n        if (!attributeNames.includes(attributeKey)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Jump at the start and end of a to-do list item.\n */ function jumpOverCheckmarkOnSideArrowKeyPress$1(model, locale) {\n    return (eventInfo, domEventData)=>{\n        const direction = getLocalizedArrowKeyCodeDirection(domEventData.keyCode, locale.contentLanguageDirection);\n        const schema = model.schema;\n        const selection = model.document.selection;\n        if (!selection.isCollapsed) {\n            return;\n        }\n        const position = selection.getFirstPosition();\n        const parent = position.parent;\n        // Right arrow before a to-do list item.\n        if (direction == 'right' && position.isAtEnd) {\n            const newRange = schema.getNearestSelectionRange(model.createPositionAfter(parent), 'forward');\n            if (!newRange) {\n                return;\n            }\n            const newRangeParent = newRange.start.parent;\n            if (newRangeParent && isListItemBlock(newRangeParent) && newRangeParent.getAttribute('listType') == 'todo') {\n                model.change((writer)=>writer.setSelection(newRange));\n                domEventData.preventDefault();\n                domEventData.stopPropagation();\n                eventInfo.stop();\n            }\n        } else if (direction == 'left' && position.isAtStart && isListItemBlock(parent) && parent.getAttribute('listType') == 'todo') {\n            const newRange = schema.getNearestSelectionRange(model.createPositionBefore(parent), 'backward');\n            if (!newRange) {\n                return;\n            }\n            model.change((writer)=>writer.setSelection(newRange));\n            domEventData.preventDefault();\n            domEventData.stopPropagation();\n            eventInfo.stop();\n        }\n    };\n}\n/**\n * Returns true if the given element is a label element of a to-do list item.\n */ function isLabelElement(viewElement) {\n    return !!viewElement && viewElement.is('attributeElement') && viewElement.hasClass('todo-list__label');\n}\n/**\n * Returns true if the given element is a list item model element of a to-do list.\n */ function isTodoListItemElement(element) {\n    if (!element) {\n        return false;\n    }\n    if (!element.is('element', 'paragraph') && !element.is('element', 'listItem')) {\n        return false;\n    }\n    return element.getAttribute('listType') == 'todo';\n}\n\n/**\n * The to-do list UI feature. It introduces the `'todoList'` button that\n * allows to convert elements to and from to-do list items and to indent or outdent them.\n */ class TodoListUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TodoListUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const t = this.editor.t;\n        createUIComponents(this.editor, 'todoList', t('To-do List'), icons.todoList);\n    }\n}\n\n/**\n * The to-do list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/todolist/todolistediting~TodoListEditing to-do list\n * editing feature} and the {@link module:list/todolist/todolistui~TodoListUI to-do list UI feature}.\n */ class TodoList extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TodoListEditing,\n            TodoListUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TodoList';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The list command. It is used by the {@link module:list/legacylist~LegacyList legacy list feature}.\n */ class LegacyListCommand extends Command {\n    /**\n\t * The type of the list created by the command.\n\t */ type;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param type List type that will be handled by this command.\n\t */ constructor(editor, type){\n        super(editor);\n        this.type = type;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the list command.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the\n\t * selected items and potentially the neighbor elements to the proper list items. If set to `false`, it will convert selected elements\n\t * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>checkCanBecomeListItem(block, model.schema));\n        // Whether we are turning off some items.\n        const turnOff = options.forceValue !== undefined ? !options.forceValue : this.value;\n        // If we are turning off items, we are going to rename them to paragraphs.\n        model.change((writer)=>{\n            // If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n            // To be sure that model is all the time in a good state, we first fix items below turned-off item.\n            if (turnOff) {\n                // Start from the model item that is just after the last turned-off item.\n                let next = blocks[blocks.length - 1].nextSibling;\n                let currentIndent = Number.POSITIVE_INFINITY;\n                let changes = [];\n                // Correct indent of all items after the last turned off item.\n                // Rules that should be followed:\n                // 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n                //    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n                // 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n                //    should not end up as a child of any of list items that they were not children of before.\n                // 3. All other items should have their indent changed relatively to it's parent.\n                //\n                // For example:\n                // 1  * --------\n                // 2     * --------\n                // 3        * --------\t\t\t<-- this is turned off.\n                // 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n                // 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n                // 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n                // 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n                // 8     * --------\t\t\t\t<-- this has to become indent = 0.\n                // 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n                // 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n                // 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n                // 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n                // 13    * --------\n                // 14       * --------\n                //\n                // After turning off 3 the list becomes:\n                //\n                // 1  * --------\n                // 2     * --------\n                //\n                // 3  --------\n                //\n                // 4  * --------\n                // 5     * --------\n                // 6  * --------\n                // 7     * --------\n                // 8  * --------\n                // 9     * --------\n                // 10       * --------\n                // 11       * --------\n                // 12 * --------\n                // 13    * --------\n                // 14       * --------\n                //\n                // Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n                // those parent-child connection which are possible to maintain are still maintained. It's worth noting\n                // that this is the same effect that we would be get by multiple use of outdent command. However doing\n                // it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n                // less conversion (faster).\n                while(next && next.name == 'listItem' && next.getAttribute('listIndent') !== 0){\n                    // Check each next list item, as long as its indent is bigger than 0.\n                    // If the indent is 0 we are not going to change anything anyway.\n                    const indent = next.getAttribute('listIndent');\n                    // We check if that's item indent is lower as current relative indent.\n                    if (indent < currentIndent) {\n                        // If it is, current relative indent becomes that indent.\n                        currentIndent = indent;\n                    }\n                    // Fix indent relatively to current relative indent.\n                    // Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n                    const newIndent = indent - currentIndent;\n                    // Save the entry in changes array. We do not apply it at the moment, because we will need to\n                    // reverse the changes so the last item is changed first.\n                    // This is to keep model in correct state all the time.\n                    changes.push({\n                        element: next,\n                        listIndent: newIndent\n                    });\n                    // Find next item.\n                    next = next.nextSibling;\n                }\n                changes = changes.reverse();\n                for (const item of changes){\n                    writer.setAttribute('listIndent', item.listIndent, item.element);\n                }\n            }\n            // If we are turning on, we might change some items that are already `listItem`s but with different type.\n            // Changing one nested list item to other type should also trigger changing all its siblings so the\n            // whole nested list is of the same type.\n            // Example (assume changing to numbered list):\n            // * ------\t\t\t\t<-- do not fix, top level item\n            //   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n            //      * ------\t\t<-- do not fix, item is not affected (different list)\n            //   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n            //      * ------\t\t<-- fix, because latter list item of this item's list is changed\n            //      * ---[--\t\t<-- already in selection\n            //   * ------\t\t\t<-- already in selection\n            //   * ------\t\t\t<-- already in selection\n            // * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n            //   * ---]--\t\t\t<-- already in selection\n            //   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n            //      * ------\t\t<-- do not fix, item is not affected (different list)\n            // * ------\t\t\t\t<-- do not fix, top level item\n            if (!turnOff) {\n                // Find lowest indent among selected items. This will be indicator what is the indent of\n                // top-most list affected by the command.\n                let lowestIndent = Number.POSITIVE_INFINITY;\n                for (const item of blocks){\n                    if (item.is('element', 'listItem') && item.getAttribute('listIndent') < lowestIndent) {\n                        lowestIndent = item.getAttribute('listIndent');\n                    }\n                }\n                // Do not execute the fix for top-level lists.\n                lowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\n                // Fix types of list items that are \"before\" the selected blocks.\n                _fixType(blocks, true, lowestIndent);\n                // Fix types of list items that are \"after\" the selected blocks.\n                _fixType(blocks, false, lowestIndent);\n            }\n            // Phew! Now it will be easier :).\n            // For each block element that was in the selection, we will either: turn it to list item,\n            // turn it to paragraph, or change it's type. Or leave it as it is.\n            // Do it in reverse as there might be multiple blocks (same as with changing indents).\n            for (const element of blocks.reverse()){\n                if (turnOff && element.name == 'listItem') {\n                    // We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n                    // List item specific attributes are removed by post fixer.\n                    writer.rename(element, 'paragraph');\n                } else if (!turnOff && element.name != 'listItem') {\n                    // We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n                    // The order of operations is important to keep model in correct state.\n                    writer.setAttributes({\n                        listType: this.type,\n                        listIndent: 0\n                    }, element);\n                    writer.rename(element, 'listItem');\n                } else if (!turnOff && element.name == 'listItem' && element.getAttribute('listType') != this.type) {\n                    // We are turning on and the element is a `listItem` but has different type - change it's type and\n                    // type of it's all siblings that have same indent.\n                    writer.setAttribute('listType', this.type, element);\n                }\n            }\n            /**\n\t\t\t * Event fired by the {@link #execute} method.\n\t\t\t *\n\t\t\t * It allows to execute an action after executing the {@link ~ListCommand#execute} method, for example adjusting\n\t\t\t * attributes of changed blocks.\n\t\t\t *\n\t\t\t * @protected\n\t\t\t * @event _executeCleanup\n\t\t\t */ this.fire('_executeCleanup', blocks);\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        // Check whether closest `listItem` ancestor of the position has a correct type.\n        const listItem = first(this.editor.model.document.selection.getSelectedBlocks());\n        return !!listItem && listItem.is('element', 'listItem') && listItem.getAttribute('listType') == this.type;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        // If command value is true it means that we are in list item, so the command should be enabled.\n        if (this.value) {\n            return true;\n        }\n        const selection = this.editor.model.document.selection;\n        const schema = this.editor.model.schema;\n        const firstBlock = first(selection.getSelectedBlocks());\n        if (!firstBlock) {\n            return false;\n        }\n        // Otherwise, check if list item can be inserted at the position start.\n        return checkCanBecomeListItem(firstBlock, schema);\n    }\n}\n/**\n * Helper function used when one or more list item have their type changed. Fixes type of other list items\n * that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n * not to duplicated code, as same fix has to be performed before and after selection.\n *\n * @param blocks Blocks that are in selection.\n * @param isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n * or blocks after last selected block (`false`).\n * @param lowestIndent Lowest indent among selected blocks.\n */ function _fixType(blocks, isBackward, lowestIndent) {\n    // We need to check previous sibling of first changed item and next siblings of last changed item.\n    const startingItem = isBackward ? blocks[0] : blocks[blocks.length - 1];\n    if (startingItem.is('element', 'listItem')) {\n        let item = startingItem[isBackward ? 'previousSibling' : 'nextSibling'];\n        // During processing items, keeps the lowest indent of already processed items.\n        // This saves us from changing too many items.\n        // Following example is for going forward as it is easier to read, however same applies to going backward.\n        // * ------\n        //   * ------\n        //     * --[---\n        //   * ------\t\t<-- `lowestIndent` should be 1\n        //     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n        //     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n        //   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n        //     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n        //   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n        // * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n        let currentIndent = startingItem.getAttribute('listIndent');\n        // Look back until a list item with indent lower than reference `lowestIndent`.\n        // That would be the parent of nested sublist which contains item having `lowestIndent`.\n        while(item && item.is('element', 'listItem') && item.getAttribute('listIndent') >= lowestIndent){\n            if (currentIndent > item.getAttribute('listIndent')) {\n                currentIndent = item.getAttribute('listIndent');\n            }\n            // Found an item that is in the same nested sublist.\n            if (item.getAttribute('listIndent') == currentIndent) {\n                // Just add the item to selected blocks like it was selected by the user.\n                blocks[isBackward ? 'unshift' : 'push'](item);\n            }\n            item = item[isBackward ? 'previousSibling' : 'nextSibling'];\n        }\n    }\n}\n/**\n * Checks whether the given block can be replaced by a listItem.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */ function checkCanBecomeListItem(block, schema) {\n    return schema.checkChild(block.parent, 'listItem') && !schema.isObject(block);\n}\n\n/**\n * The list indent command. It is used by the {@link module:list/legacylist~LegacyList legacy list feature}.\n */ class LegacyIndentCommand extends Command {\n    /**\n\t * Determines by how much the command will change the list item's indent attribute.\n\t */ _indentBy;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param indentDirection The direction of indent. If it is equal to `backward`, the command will outdent a list item.\n\t */ constructor(editor, indentDirection){\n        super(editor);\n        this._indentBy = indentDirection == 'forward' ? 1 : -1;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        let itemsToChange = Array.from(doc.selection.getSelectedBlocks());\n        model.change((writer)=>{\n            const lastItem = itemsToChange[itemsToChange.length - 1];\n            // Indenting a list item should also indent all the items that are already sub-items of indented item.\n            let next = lastItem.nextSibling;\n            // Check all items after last indented item, as long as their indent is bigger than indent of that item.\n            while(next && next.name == 'listItem' && next.getAttribute('listIndent') > lastItem.getAttribute('listIndent')){\n                itemsToChange.push(next);\n                next = next.nextSibling;\n            }\n            // We need to be sure to keep model in correct state after each small change, because converters\n            // bases on that state and assumes that model is correct.\n            // Because of that, if the command outdents items, we will outdent them starting from the last item, as\n            // it is safer.\n            if (this._indentBy < 0) {\n                itemsToChange = itemsToChange.reverse();\n            }\n            for (const item of itemsToChange){\n                const indent = item.getAttribute('listIndent') + this._indentBy;\n                // If indent is lower than 0, it means that the item got outdented when it was not indented.\n                // This means that we need to convert that list item to paragraph.\n                if (indent < 0) {\n                    // To keep the model as correct as possible, first rename listItem, then remove attributes,\n                    // as listItem without attributes is very incorrect and will cause problems in converters.\n                    // No need to remove attributes, will be removed by post fixer.\n                    writer.rename(item, 'paragraph');\n                } else {\n                    writer.setAttribute('listIndent', indent, item);\n                }\n            }\n            // It allows to execute an action after executing the `~IndentCommand#execute` method, for example adjusting\n            // attributes of changed list items.\n            this.fire('_executeCleanup', itemsToChange);\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        // Check whether any of position's ancestor is a list item.\n        const listItem = first(this.editor.model.document.selection.getSelectedBlocks());\n        // If selection is not in a list item, the command is disabled.\n        if (!listItem || !listItem.is('element', 'listItem')) {\n            return false;\n        }\n        if (this._indentBy > 0) {\n            // Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n            // To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n            const indent = listItem.getAttribute('listIndent');\n            const type = listItem.getAttribute('listType');\n            let prev = listItem.previousSibling;\n            while(prev && prev.is('element', 'listItem') && prev.getAttribute('listIndent') >= indent){\n                if (prev.getAttribute('listIndent') == indent) {\n                    // The item is on the same level.\n                    // If it has same type, it means that we found a preceding sibling from the same list.\n                    // If it does not have same type, it means that `listItem` is on different list (this can happen only\n                    // on top level lists, though).\n                    return prev.getAttribute('listType') == type;\n                }\n                prev = prev.previousSibling;\n            }\n            // Could not find similar list item, this means that `listItem` is first in its list.\n            return false;\n        }\n        // If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n        return true;\n    }\n}\n\n/**\n * Creates a list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @param writer The writer instance.\n */ function createViewListItemElement(writer) {\n    const viewItem = writer.createContainerElement('li');\n    viewItem.getFillerOffset = getListItemFillerOffset;\n    return viewItem;\n}\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (`<li>`) with the model `listItem` element.\n * The function then returns the created view list item (`<li>`).\n *\n * @param modelItem Model list item.\n * @param conversionApi Conversion interface.\n * @returns View list element.\n */ function generateLiInUl(modelItem, conversionApi) {\n    const mapper = conversionApi.mapper;\n    const viewWriter = conversionApi.writer;\n    const listType = modelItem.getAttribute('listType') == 'numbered' ? 'ol' : 'ul';\n    const viewItem = createViewListItemElement(viewWriter);\n    const viewList = viewWriter.createContainerElement(listType, null);\n    viewWriter.insert(viewWriter.createPositionAt(viewList, 0), viewItem);\n    mapper.bindElements(modelItem, viewItem);\n    return viewItem;\n}\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @param modelItem Model list item.\n * @param injectedItem\n * @param conversionApi Conversion interface.\n * @param model The model instance.\n */ function injectViewList(modelItem, injectedItem, conversionApi, model) {\n    const injectedList = injectedItem.parent;\n    const mapper = conversionApi.mapper;\n    const viewWriter = conversionApi.writer;\n    // The position where the view list will be inserted.\n    let insertPosition = mapper.toViewPosition(model.createPositionBefore(modelItem));\n    // 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n    // that is a \"parent\" or \"sibling\" of the injected model item.\n    // If there is no such list item, it means that the injected list item is the first item in \"its list\".\n    const refItem = getSiblingListItem(modelItem.previousSibling, {\n        sameIndent: true,\n        smallerIndent: true,\n        listIndent: modelItem.getAttribute('listIndent')\n    });\n    const prevItem = modelItem.previousSibling;\n    if (refItem && refItem.getAttribute('listIndent') == modelItem.getAttribute('listIndent')) {\n        // There is a list item with the same indent - we found the same-level sibling.\n        // Break the list after it. The inserted view item will be added in the broken space.\n        const viewItem = mapper.toViewElement(refItem);\n        insertPosition = viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n    } else {\n        // There is no list item with the same indent. Check the previous model item.\n        if (prevItem && prevItem.name == 'listItem') {\n            // If it is a list item, it has to have a lower indent.\n            // It means that the inserted item should be added to it as its nested item.\n            insertPosition = mapper.toViewPosition(model.createPositionAt(prevItem, 'end'));\n            // There could be some not mapped elements (eg. span in to-do list) but we need to insert\n            // a nested list directly inside the li element.\n            const mappedViewAncestor = mapper.findMappedViewAncestor(insertPosition);\n            const nestedList = findNestedList(mappedViewAncestor);\n            // If there already is some nested list, then use it's position.\n            if (nestedList) {\n                insertPosition = viewWriter.createPositionBefore(nestedList);\n            } else {\n                // Else just put new list on the end of list item content.\n                insertPosition = viewWriter.createPositionAt(mappedViewAncestor, 'end');\n            }\n        } else {\n            // The previous item is not a list item (or does not exist at all).\n            // Just map the position and insert the view item at the mapped position.\n            insertPosition = mapper.toViewPosition(model.createPositionBefore(modelItem));\n        }\n    }\n    insertPosition = positionAfterUiElements(insertPosition);\n    // Insert the view item.\n    viewWriter.insert(insertPosition, injectedList);\n    // 2. Handle possible children of the injected model item.\n    if (prevItem && prevItem.name == 'listItem') {\n        const prevView = mapper.toViewElement(prevItem);\n        const walkerBoundaries = viewWriter.createRange(viewWriter.createPositionAt(prevView, 0), insertPosition);\n        const walker = walkerBoundaries.getWalker({\n            ignoreElementEnd: true\n        });\n        for (const value of walker){\n            if (value.item.is('element', 'li')) {\n                const breakPosition = viewWriter.breakContainer(viewWriter.createPositionBefore(value.item));\n                const viewList = value.item.parent;\n                const targetPosition = viewWriter.createPositionAt(injectedItem, 'end');\n                mergeViewLists(viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter);\n                viewWriter.move(viewWriter.createRangeOn(viewList), targetPosition);\n                // This is bad, but those lists will be removed soon anyway.\n                walker._position = breakPosition;\n            }\n        }\n    } else {\n        const nextViewList = injectedList.nextSibling;\n        if (nextViewList && (nextViewList.is('element', 'ul') || nextViewList.is('element', 'ol'))) {\n            let lastSubChild = null;\n            for (const child of nextViewList.getChildren()){\n                const modelChild = mapper.toModelElement(child);\n                if (modelChild && modelChild.getAttribute('listIndent') > modelItem.getAttribute('listIndent')) {\n                    lastSubChild = child;\n                } else {\n                    break;\n                }\n            }\n            if (lastSubChild) {\n                viewWriter.breakContainer(viewWriter.createPositionAfter(lastSubChild));\n                viewWriter.move(viewWriter.createRangeOn(lastSubChild.parent), viewWriter.createPositionAt(injectedItem, 'end'));\n            }\n        }\n    }\n    // Merge the inserted view list with its possible neighbor lists.\n    mergeViewLists(viewWriter, injectedList, injectedList.nextSibling);\n    mergeViewLists(viewWriter, injectedList.previousSibling, injectedList);\n}\nfunction mergeViewLists(viewWriter, firstList, secondList) {\n    // Check if two lists are going to be merged.\n    if (!firstList || !secondList || firstList.name != 'ul' && firstList.name != 'ol') {\n        return null;\n    }\n    // Both parameters are list elements, so compare types now.\n    if (firstList.name != secondList.name || firstList.getAttribute('class') !== secondList.getAttribute('class')) {\n        return null;\n    }\n    return viewWriter.mergeContainers(viewWriter.createPositionAfter(firstList));\n}\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n */ function positionAfterUiElements(viewPosition) {\n    return viewPosition.getLastMatchingPosition((value)=>value.item.is('uiElement'));\n}\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @param options Search criteria.\n * @param options.sameIndent Whether the sought sibling should have the same indentation.\n * @param options.smallerIndent Whether the sought sibling should have a smaller indentation.\n * @param options.listIndent The reference indentation.\n * @param options.direction Walking direction.\n */ function getSiblingListItem(modelItem, options) {\n    const sameIndent = !!options.sameIndent;\n    const smallerIndent = !!options.smallerIndent;\n    const indent = options.listIndent;\n    let item = modelItem;\n    while(item && item.name == 'listItem'){\n        const itemIndent = item.getAttribute('listIndent');\n        if (sameIndent && indent == itemIndent || smallerIndent && indent > itemIndent) {\n            return item;\n        }\n        if (options.direction === 'forward') {\n            item = item.nextSibling;\n        } else {\n            item = item.previousSibling;\n        }\n    }\n    return null;\n}\n/**\n * Returns a first list view element that is direct child of the given view element.\n */ function findNestedList(viewElement) {\n    for (const node of viewElement.getChildren()){\n        if (node.name == 'ul' || node.name == 'ol') {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Returns an array with all `listItem` elements that represent the same list.\n *\n * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.\n *\n * Additionally, if the `position` is inside a list item, that list item will be returned as well.\n *\n * @param position Starting position.\n * @param direction Walking direction.\n */ function getSiblingNodes(position, direction) {\n    const items = [];\n    const listItem = position.parent;\n    const walkerOptions = {\n        ignoreElementEnd: false,\n        startPosition: position,\n        shallow: true,\n        direction\n    };\n    const limitIndent = listItem.getAttribute('listIndent');\n    const nodes = [\n        ...new TreeWalker(walkerOptions)\n    ].filter((value)=>value.item.is('element')).map((value)=>value.item);\n    for (const element of nodes){\n        // If found something else than `listItem`, we're out of the list scope.\n        if (!element.is('element', 'listItem')) {\n            break;\n        }\n        // If current parsed item has lower indent that element that the element that was a starting point,\n        // it means we left a nested list. Abort searching items.\n        //\n        // ■ List item 1.       [listIndent=0]\n        //     ○ List item 2.[] [listIndent=1], limitIndent = 1,\n        //     ○ List item 3.   [listIndent=1]\n        // ■ List item 4.       [listIndent=0]\n        //\n        // Abort searching when leave nested list.\n        if (element.getAttribute('listIndent') < limitIndent) {\n            break;\n        }\n        // ■ List item 1.[]     [listIndent=0] limitIndent = 0,\n        //     ○ List item 2.   [listIndent=1]\n        //     ○ List item 3.   [listIndent=1]\n        // ■ List item 4.       [listIndent=0]\n        //\n        // Ignore nested lists.\n        if (element.getAttribute('listIndent') > limitIndent) {\n            continue;\n        }\n        // ■ List item 1.[]  [listType=bulleted]\n        // 1. List item 2.   [listType=numbered]\n        // 2.List item 3.    [listType=numbered]\n        //\n        // Abort searching when found a different kind of a list.\n        if (element.getAttribute('listType') !== listItem.getAttribute('listType')) {\n            break;\n        }\n        // ■ List item 1.[]  [listType=bulleted]\n        // ■ List item 2.    [listType=bulleted]\n        // ○ List item 3.    [listType=bulleted]\n        // ○ List item 4.    [listType=bulleted]\n        //\n        // Abort searching when found a different list style,\n        if (element.getAttribute('listStyle') !== listItem.getAttribute('listStyle')) {\n            break;\n        }\n        // ... different direction\n        if (element.getAttribute('listReversed') !== listItem.getAttribute('listReversed')) {\n            break;\n        }\n        // ... and different start index\n        if (element.getAttribute('listStart') !== listItem.getAttribute('listStart')) {\n            break;\n        }\n        if (direction === 'backward') {\n            items.unshift(element);\n        } else {\n            items.push(element);\n        }\n    }\n    return items;\n}\n/**\n * Returns an array with all `listItem` elements in the model selection.\n *\n * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.\n * If no list is selected, it returns an empty array.\n * The order of the elements is not specified.\n *\n * @internal\n */ function getSelectedListItems(model) {\n    const document = model.document;\n    // For all selected blocks find all list items that are being selected\n    // and update the `listStyle` attribute in those lists.\n    let listItems = [\n        ...document.selection.getSelectedBlocks()\n    ].filter((element)=>element.is('element', 'listItem')).map((element)=>{\n        const position = model.change((writer)=>writer.createPositionAt(element, 0));\n        return [\n            ...getSiblingNodes(position, 'backward'),\n            ...getSiblingNodes(position, 'forward')\n        ];\n    }).flat();\n    // Since `getSelectedBlocks()` can return items that belong to the same list, and\n    // `getSiblingNodes()` returns the entire list, we need to remove duplicated items.\n    listItems = [\n        ...new Set(listItems)\n    ];\n    return listItems;\n}\nconst BULLETED_LIST_STYLE_TYPES = [\n    'disc',\n    'circle',\n    'square'\n];\n// There's a lot of them (https://www.w3.org/TR/css-counter-styles-3/#typedef-counter-style).\n// Let's support only those that can be selected by ListPropertiesUI.\nconst NUMBERED_LIST_STYLE_TYPES = [\n    'decimal',\n    'decimal-leading-zero',\n    'lower-roman',\n    'upper-roman',\n    'lower-latin',\n    'upper-latin'\n];\n/**\n * Checks whether the given list-style-type is supported by numbered or bulleted list.\n */ function getListTypeFromListStyleType(listStyleType) {\n    if (BULLETED_LIST_STYLE_TYPES.includes(listStyleType)) {\n        return 'bulleted';\n    }\n    if (NUMBERED_LIST_STYLE_TYPES.includes(listStyleType)) {\n        return 'numbered';\n    }\n    return null;\n}\n/**\n * Implementation of getFillerOffset for view list item element.\n *\n * @returns Block filler offset or `null` if block filler is not needed.\n */ function getListItemFillerOffset() {\n    const hasOnlyLists = !this.isEmpty && (this.getChild(0).name == 'ul' || this.getChild(0).name == 'ol');\n    if (this.isEmpty || hasOnlyLists) {\n        return 0;\n    }\n    return getFillerOffset.call(this);\n}\n\n/**\n * A set of helpers related to legacy lists.\n */ class LegacyListUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyListUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Checks whether the given list-style-type is supported by numbered or bulleted list.\n\t */ getListTypeFromListStyleType(listStyleType) {\n        return getListTypeFromListStyleType(listStyleType);\n    }\n    /**\n\t * Returns an array with all `listItem` elements in the model selection.\n\t *\n\t * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.\n\t * If no list is selected, it returns an empty array.\n\t * The order of the elements is not specified.\n\t */ getSelectedListItems(model) {\n        return getSelectedListItems(model);\n    }\n    /**\n\t * Returns an array with all `listItem` elements that represent the same list.\n\t *\n\t * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.\n\t *\n\t * Additionally, if the `position` is inside a list item, that list item will be returned as well.\n\t *\n\t * @param position Starting position.\n\t * @param direction Walking direction.\n\t */ getSiblingNodes(position, direction) {\n        return getSiblingNodes(position, direction);\n    }\n}\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n */ function modelViewInsertion$1(model) {\n    return (evt, data, conversionApi)=>{\n        const consumable = conversionApi.consumable;\n        if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n            return;\n        }\n        consumable.consume(data.item, 'insert');\n        consumable.consume(data.item, 'attribute:listType');\n        consumable.consume(data.item, 'attribute:listIndent');\n        const modelItem = data.item;\n        const viewItem = generateLiInUl(modelItem, conversionApi);\n        injectViewList(modelItem, viewItem, conversionApi, model);\n    };\n}\n/**\n * A model-to-view converter for the `listItem` model element removal.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */ function modelViewRemove(model) {\n    return (evt, data, conversionApi)=>{\n        const viewPosition = conversionApi.mapper.toViewPosition(data.position);\n        const viewStart = viewPosition.getLastMatchingPosition((value)=>!value.item.is('element', 'li'));\n        const viewItem = viewStart.nodeAfter;\n        const viewWriter = conversionApi.writer;\n        // 1. Break the container after and before the list item.\n        // This will create a view list with one view list item - the one to remove.\n        viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n        viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n        // 2. Remove the list with the item to remove.\n        const viewList = viewItem.parent;\n        const viewListPrev = viewList.previousSibling;\n        const removeRange = viewWriter.createRangeOn(viewList);\n        const removed = viewWriter.remove(removeRange);\n        // 3. Merge the whole created by breaking and removing the list.\n        if (viewListPrev && viewListPrev.nextSibling) {\n            mergeViewLists(viewWriter, viewListPrev, viewListPrev.nextSibling);\n        }\n        // 4. Bring back nested list that was in the removed <li>.\n        const modelItem = conversionApi.mapper.toModelElement(viewItem);\n        hoistNestedLists(modelItem.getAttribute('listIndent') + 1, data.position, removeRange.start, viewItem, conversionApi, model);\n        // 5. Unbind removed view item and all children.\n        for (const child of viewWriter.createRangeIn(removed).getItems()){\n            conversionApi.mapper.unbindViewElement(child);\n        }\n        evt.stop();\n    };\n}\n/**\n * A model-to-view converter for the `type` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements and changing their name. The next {@link module:list/legacylist/legacyconverters~modelViewMergeAfterChangeType}\n * converter will attempt to merge split nodes.\n *\n * Splitting this conversion into 2 steps makes it possible to add an additional conversion in the middle.\n * Check {@link module:list/legacytodolist/legacytodolistconverters~modelViewChangeType} to see an example of it.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n */ const modelViewChangeType$1 = (evt, data, conversionApi)=>{\n    if (!conversionApi.consumable.test(data.item, evt.name)) {\n        return;\n    }\n    const viewItem = conversionApi.mapper.toViewElement(data.item);\n    const viewWriter = conversionApi.writer;\n    // Break the container after and before the list item.\n    // This will create a view list with one view list item -- the one that changed type.\n    viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n    viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n    // Change name of the view list that holds the changed view item.\n    // We cannot just change name property, because that would not render properly.\n    const viewList = viewItem.parent;\n    const listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n    viewWriter.rename(listName, viewList);\n};\n/**\n * A model-to-view converter that attempts to merge nodes split by {@link module:list/legacylist/legacyconverters~modelViewChangeType}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n */ const modelViewMergeAfterChangeType = (evt, data, conversionApi)=>{\n    conversionApi.consumable.consume(data.item, evt.name);\n    const viewItem = conversionApi.mapper.toViewElement(data.item);\n    const viewList = viewItem.parent;\n    const viewWriter = conversionApi.writer;\n    // Merge the changed view list with other lists, if possible.\n    mergeViewLists(viewWriter, viewList, viewList.nextSibling);\n    mergeViewLists(viewWriter, viewList.previousSibling, viewList);\n};\n/**\n * A model-to-view converter for the `listIndent` attribute change on the `listItem` model element.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */ function modelViewChangeIndent(model) {\n    return (evt, data, conversionApi)=>{\n        if (!conversionApi.consumable.consume(data.item, 'attribute:listIndent')) {\n            return;\n        }\n        const viewItem = conversionApi.mapper.toViewElement(data.item);\n        const viewWriter = conversionApi.writer;\n        // 1. Break the container after and before the list item.\n        // This will create a view list with one view list item -- the one that changed type.\n        viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n        viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n        // 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n        const viewList = viewItem.parent;\n        const viewListPrev = viewList.previousSibling;\n        const removeRange = viewWriter.createRangeOn(viewList);\n        viewWriter.remove(removeRange);\n        if (viewListPrev && viewListPrev.nextSibling) {\n            mergeViewLists(viewWriter, viewListPrev, viewListPrev.nextSibling);\n        }\n        // 3. Bring back nested list that was in the removed <li>.\n        hoistNestedLists(data.attributeOldValue + 1, data.range.start, removeRange.start, viewItem, conversionApi, model);\n        // 4. Inject view list like it is newly inserted.\n        injectViewList(data.item, viewItem, conversionApi, model);\n        // 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n        for (const child of data.item.getChildren()){\n            conversionApi.consumable.consume(child, 'insert');\n        }\n    };\n}\n/**\n * A special model-to-view converter introduced by the {@link module:list/legacylist~LegacyList list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n * ```xml\n * // Model:                        // View:\n * <listItem>foo</listItem>         <ul>\n * <listItem>bar</listItem>             <li>foo</li>\n *                                      <li>bar</li>\n *                                  </ul>\n *\n * // After change:                 // Correct view guaranteed by this converter:\n * <listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n * <paragraph>xxx</paragraph>       // Instead of this wrong view state:\n * <listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n * ```\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n */ const modelViewSplitOnInsert = (evt, data, conversionApi)=>{\n    if (!conversionApi.consumable.test(data.item, evt.name)) {\n        return;\n    }\n    if (data.item.name != 'listItem') {\n        let viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n        const viewWriter = conversionApi.writer;\n        const lists = [];\n        // Break multiple ULs/OLs if there are.\n        //\n        // Imagine following list:\n        //\n        // 1 --------\n        //   1.1 --------\n        //     1.1.1 --------\n        //     1.1.2 --------\n        //     1.1.3 --------\n        //       1.1.3.1 --------\n        //   1.2 --------\n        //     1.2.1 --------\n        // 2 --------\n        //\n        // Insert paragraph after item 1.1.1:\n        //\n        // 1 --------\n        //   1.1 --------\n        //     1.1.1 --------\n        //\n        // Lorem ipsum.\n        //\n        //     1.1.2 --------\n        //     1.1.3 --------\n        //       1.1.3.1 --------\n        //   1.2 --------\n        //     1.2.1 --------\n        // 2 --------\n        //\n        // In this case 1.1.2 has to become beginning of a new list.\n        // We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n        // Then we need to move those broken pieces one after another and merge:\n        //\n        // 1 --------\n        //   1.1 --------\n        //     1.1.1 --------\n        //\n        // Lorem ipsum.\n        //\n        // 1.1.2 --------\n        //   1.1.3 --------\n        //     1.1.3.1 --------\n        // 1.2 --------\n        //   1.2.1 --------\n        // 2 --------\n        //\n        while(viewPosition.parent.name == 'ul' || viewPosition.parent.name == 'ol'){\n            viewPosition = viewWriter.breakContainer(viewPosition);\n            if (viewPosition.parent.name != 'li') {\n                break;\n            }\n            // Remove lists that are after inserted element.\n            // They will be brought back later, below the inserted element.\n            const removeStart = viewPosition;\n            const removeEnd = viewWriter.createPositionAt(viewPosition.parent, 'end');\n            // Don't remove if there is nothing to remove.\n            if (!removeStart.isEqual(removeEnd)) {\n                const removed = viewWriter.remove(viewWriter.createRange(removeStart, removeEnd));\n                lists.push(removed);\n            }\n            viewPosition = viewWriter.createPositionAfter(viewPosition.parent);\n        }\n        // Bring back removed lists.\n        if (lists.length > 0) {\n            for(let i = 0; i < lists.length; i++){\n                const previousList = viewPosition.nodeBefore;\n                const insertedRange = viewWriter.insert(viewPosition, lists[i]);\n                viewPosition = insertedRange.end;\n                // Don't merge first list! We want a split in that place (this is why this converter is introduced).\n                if (i > 0) {\n                    const mergePos = mergeViewLists(viewWriter, previousList, previousList.nextSibling);\n                    // If `mergePos` is in `previousList` it means that the lists got merged.\n                    // In this case, we need to fix insert position.\n                    if (mergePos && mergePos.parent == previousList) {\n                        viewPosition.offset--;\n                    }\n                }\n            }\n            // Merge last inserted list with element after it.\n            mergeViewLists(viewWriter, viewPosition.nodeBefore, viewPosition.nodeAfter);\n        }\n    }\n};\n/**\n * A special model-to-view converter introduced by the {@link module:list/legacylist~LegacyList list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n * ```xml\n * // Model:                        // View:\n * <listItem>foo</listItem>         <ul><li>foo</li></ul>\n * <paragraph>xxx</paragraph>       <p>xxx</p>\n * <listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n * // After change:                 // Correct view guaranteed by this converter:\n * <listItem>foo</listItem>         <ul>\n * <listItem>bar</listItem>             <li>foo</li>\n *                                      <li>bar</li>\n *                                  </ul>\n * ```\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n */ const modelViewMergeAfter = (evt, data, conversionApi)=>{\n    const viewPosition = conversionApi.mapper.toViewPosition(data.position);\n    const viewItemPrev = viewPosition.nodeBefore;\n    const viewItemNext = viewPosition.nodeAfter;\n    // Merge lists if something (remove, move) was done from inside of list.\n    // Merging will be done only if both items are view lists of the same type.\n    // The check is done inside the helper function.\n    mergeViewLists(conversionApi.writer, viewItemPrev, viewItemNext);\n};\n/**\n * A view-to-model converter that converts the `<li>` view elements into the `listItem` model elements.\n *\n * To set correct values of the `listType` and `listIndent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */ const viewModelConverter = (evt, data, conversionApi)=>{\n    if (conversionApi.consumable.consume(data.viewItem, {\n        name: true\n    })) {\n        const writer = conversionApi.writer;\n        // 1. Create `listItem` model element.\n        const listItem = writer.createElement('listItem');\n        // 2. Handle `listItem` model element attributes.\n        const indent = getIndent(data.viewItem);\n        writer.setAttribute('listIndent', indent, listItem);\n        // Set 'bulleted' as default. If this item is pasted into a context,\n        const type = data.viewItem.parent && data.viewItem.parent.name == 'ol' ? 'numbered' : 'bulleted';\n        writer.setAttribute('listType', type, listItem);\n        if (!conversionApi.safeInsert(listItem, data.modelCursor)) {\n            return;\n        }\n        const nextPosition = viewToModelListItemChildrenConverter(listItem, data.viewItem.getChildren(), conversionApi);\n        // Result range starts before the first item and ends after the last.\n        data.modelRange = writer.createRange(data.modelCursor, nextPosition);\n        conversionApi.updateConversionResult(listItem, data);\n    }\n};\n/**\n * A view-to-model converter for the `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between the `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */ const cleanList = (evt, data, conversionApi)=>{\n    if (conversionApi.consumable.test(data.viewItem, {\n        name: true\n    })) {\n        // Caching children because when we start removing them iterating fails.\n        const children = Array.from(data.viewItem.getChildren());\n        for (const child of children){\n            const isWrongElement = !(child.is('element', 'li') || isList(child));\n            if (isWrongElement) {\n                child._remove();\n            }\n        }\n    }\n};\n/**\n * A view-to-model converter for the `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */ const cleanListItem = (evt, data, conversionApi)=>{\n    if (conversionApi.consumable.test(data.viewItem, {\n        name: true\n    })) {\n        if (data.viewItem.childCount === 0) {\n            return;\n        }\n        const children = [\n            ...data.viewItem.getChildren()\n        ];\n        let foundList = false;\n        for (const child of children){\n            if (foundList && !isList(child)) {\n                child._remove();\n            }\n            if (isList(child)) {\n                // If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n                foundList = true;\n            }\n        }\n    }\n};\n/**\n * Returns a callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `listItem` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n */ function modelToViewPosition(view) {\n    return (evt, data)=>{\n        if (data.isPhantom) {\n            return;\n        }\n        const modelItem = data.modelPosition.nodeBefore;\n        if (modelItem && modelItem.is('element', 'listItem')) {\n            const viewItem = data.mapper.toViewElement(modelItem);\n            const topmostViewList = viewItem.getAncestors().find(isList);\n            const walker = view.createPositionAt(viewItem, 0).getWalker();\n            for (const value of walker){\n                if (value.type == 'elementStart' && value.item.is('element', 'li')) {\n                    data.viewPosition = value.previousPosition;\n                    break;\n                } else if (value.type == 'elementEnd' && value.item == topmostViewList) {\n                    data.viewPosition = value.nextPosition;\n                    break;\n                }\n            }\n        }\n    };\n}\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `<li>` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */ function viewToModelPosition(model) {\n    return (evt, data)=>{\n        const viewPos = data.viewPosition;\n        const viewParent = viewPos.parent;\n        const mapper = data.mapper;\n        if (viewParent.name == 'ul' || viewParent.name == 'ol') {\n            // Position is directly in <ul> or <ol>.\n            if (!viewPos.isAtEnd) {\n                // If position is not at the end, it must be before <li>.\n                // Get that <li>, map it to `listItem` and set model position before that `listItem`.\n                const modelNode = mapper.toModelElement(viewPos.nodeAfter);\n                data.modelPosition = model.createPositionBefore(modelNode);\n            } else {\n                // Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n                // There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n                // because that <li> may contain nested items.\n                // We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n                const modelNode = mapper.toModelElement(viewPos.nodeBefore);\n                const modelLength = mapper.getModelLength(viewPos.nodeBefore);\n                // Then we get model position before mapped `listItem` and shift it accordingly.\n                data.modelPosition = model.createPositionBefore(modelNode).getShiftedBy(modelLength);\n            }\n            evt.stop();\n        } else if (viewParent.name == 'li' && viewPos.nodeBefore && (viewPos.nodeBefore.name == 'ul' || viewPos.nodeBefore.name == 'ol')) {\n            // In most cases when view position is in <li> it is in text and this is a correct position.\n            // However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n            const modelNode = mapper.toModelElement(viewParent);\n            // Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n            // Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n            let modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n            let viewList = viewPos.nodeBefore;\n            while(viewList && isList(viewList)){\n                modelLength += mapper.getModelLength(viewList);\n                viewList = viewList.previousSibling;\n            }\n            data.modelPosition = model.createPositionBefore(modelNode).getShiftedBy(modelLength);\n            evt.stop();\n        }\n    };\n}\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>Item 2</listItem>   <--- this is removed.\n * <listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n * ```\n *\n * The list structure after the middle element is removed:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n * ```\n *\n * @param model The data model.\n * @param writer The writer to do changes with.\n * @returns `true` if any change has been applied, `false` otherwise.\n */ function modelChangePostFixer(model, writer) {\n    const changes = model.document.differ.getChanges();\n    const itemToListHead = new Map();\n    let applied = false;\n    for (const entry of changes){\n        if (entry.type == 'insert' && entry.name == 'listItem') {\n            _addListToFix(entry.position);\n        } else if (entry.type == 'insert' && entry.name != 'listItem') {\n            if (entry.name != '$text') {\n                // In case of renamed element.\n                const item = entry.position.nodeAfter;\n                if (item.hasAttribute('listIndent')) {\n                    writer.removeAttribute('listIndent', item);\n                    applied = true;\n                }\n                if (item.hasAttribute('listType')) {\n                    writer.removeAttribute('listType', item);\n                    applied = true;\n                }\n                if (item.hasAttribute('listStyle')) {\n                    writer.removeAttribute('listStyle', item);\n                    applied = true;\n                }\n                if (item.hasAttribute('listReversed')) {\n                    writer.removeAttribute('listReversed', item);\n                    applied = true;\n                }\n                if (item.hasAttribute('listStart')) {\n                    writer.removeAttribute('listStart', item);\n                    applied = true;\n                }\n                for (const innerItem of Array.from(model.createRangeIn(item)).filter((e)=>e.item.is('element', 'listItem'))){\n                    _addListToFix(innerItem.previousPosition);\n                }\n            }\n            const posAfter = entry.position.getShiftedBy(entry.length);\n            _addListToFix(posAfter);\n        } else if (entry.type == 'remove' && entry.name == 'listItem') {\n            _addListToFix(entry.position);\n        } else if (entry.type == 'attribute' && entry.attributeKey == 'listIndent') {\n            _addListToFix(entry.range.start);\n        } else if (entry.type == 'attribute' && entry.attributeKey == 'listType') {\n            _addListToFix(entry.range.start);\n        }\n    }\n    for (const listHead of itemToListHead.values()){\n        _fixListIndents(listHead);\n        _fixListTypes(listHead);\n    }\n    return applied;\n    function _addListToFix(position) {\n        const previousNode = position.nodeBefore;\n        if (!previousNode || !previousNode.is('element', 'listItem')) {\n            const item = position.nodeAfter;\n            if (item && item.is('element', 'listItem')) {\n                itemToListHead.set(item, item);\n            }\n        } else {\n            let listHead = previousNode;\n            if (itemToListHead.has(listHead)) {\n                return;\n            }\n            for(// Cache previousSibling and reuse for performance reasons. See #6581.\n            let previousSibling = listHead.previousSibling; previousSibling && previousSibling.is('element', 'listItem'); previousSibling = listHead.previousSibling){\n                listHead = previousSibling;\n                if (itemToListHead.has(listHead)) {\n                    return;\n                }\n            }\n            itemToListHead.set(previousNode, listHead);\n        }\n    }\n    function _fixListIndents(item) {\n        let maxIndent = 0;\n        let fixBy = null;\n        while(item && item.is('element', 'listItem')){\n            const itemIndent = item.getAttribute('listIndent');\n            if (itemIndent > maxIndent) {\n                let newIndent;\n                if (fixBy === null) {\n                    fixBy = itemIndent - maxIndent;\n                    newIndent = maxIndent;\n                } else {\n                    if (fixBy > itemIndent) {\n                        fixBy = itemIndent;\n                    }\n                    newIndent = itemIndent - fixBy;\n                }\n                writer.setAttribute('listIndent', newIndent, item);\n                applied = true;\n            } else {\n                fixBy = null;\n                maxIndent = item.getAttribute('listIndent') + 1;\n            }\n            item = item.nextSibling;\n        }\n    }\n    function _fixListTypes(item) {\n        let typesStack = [];\n        let prev = null;\n        while(item && item.is('element', 'listItem')){\n            const itemIndent = item.getAttribute('listIndent');\n            if (prev && prev.getAttribute('listIndent') > itemIndent) {\n                typesStack = typesStack.slice(0, itemIndent + 1);\n            }\n            if (itemIndent != 0) {\n                if (typesStack[itemIndent]) {\n                    const type = typesStack[itemIndent];\n                    if (item.getAttribute('listType') != type) {\n                        writer.setAttribute('listType', type, item);\n                        applied = true;\n                    }\n                } else {\n                    typesStack[itemIndent] = item.getAttribute('listType');\n                }\n            }\n            prev = item;\n            item = item.nextSibling;\n        }\n    }\n}\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>A</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>B^</listItem>\n * // At ^ paste:  <listItem listType=\"bulleted\" listIndent=4>X</listItem>\n * //              <listItem listType=\"bulleted\" listIndent=5>Y</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>C</listItem>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>A</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>BX</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>Y/listItem>\n * <listItem listType=\"bulleted\" listIndent=2>C</listItem>\n * ```\n */ const modelIndentPasteFixer = function(evt, [content, selectable]) {\n    const model = this;\n    // Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n    // elements before it and there is no need to fix indents, because even if we insert that content into a list,\n    // that list will be broken.\n    // Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n    // would create incorrect model.\n    let item = content.is('documentFragment') ? content.getChild(0) : content;\n    let selection;\n    if (!selectable) {\n        selection = model.document.selection;\n    } else {\n        selection = model.createSelection(selectable);\n    }\n    if (item && item.is('element', 'listItem')) {\n        // Get a reference list item. Inserted list items will be fixed according to that item.\n        const pos = selection.getFirstPosition();\n        let refItem = null;\n        if (pos.parent.is('element', 'listItem')) {\n            refItem = pos.parent;\n        } else if (pos.nodeBefore && pos.nodeBefore.is('element', 'listItem')) {\n            refItem = pos.nodeBefore;\n        }\n        // If there is `refItem` it means that we do insert list items into an existing list.\n        if (refItem) {\n            // First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n            // to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n            // Indent of all those items has to be adjusted to reference item.\n            const indentChange = refItem.getAttribute('listIndent');\n            // Fix only if there is anything to fix.\n            if (indentChange > 0) {\n                // Adjust indent of all \"first\" list items in inserted data.\n                while(item && item.is('element', 'listItem')){\n                    item._setAttribute('listIndent', item.getAttribute('listIndent') + indentChange);\n                    item = item.nextSibling;\n                }\n            }\n        }\n    }\n};\n/**\n * Helper function that converts children of a given `<li>` view element into corresponding model elements.\n * The function maintains proper order of elements if model `listItem` is split during the conversion\n * due to block children conversion.\n *\n * @param listItemModel List item model element to which converted children will be inserted.\n * @param viewChildren View elements which will be converted.\n * @param conversionApi Conversion interface to be used by the callback.\n * @returns Position on which next elements should be inserted after children conversion.\n */ function viewToModelListItemChildrenConverter(listItemModel, viewChildren, conversionApi) {\n    const { writer, schema } = conversionApi;\n    // A position after the last inserted `listItem`.\n    let nextPosition = writer.createPositionAfter(listItemModel);\n    // Check all children of the converted `<li>`. At this point we assume there are no \"whitespace\" view text nodes\n    // in view list, between view list items. This should be handled by `<ul>` and `<ol>` converters.\n    for (const child of viewChildren){\n        if (child.name == 'ul' || child.name == 'ol') {\n            // If the children is a list, we will insert its conversion result after currently handled `listItem`.\n            // Then, next insertion position will be set after all the new list items (and maybe other elements if\n            // something split list item).\n            //\n            // If this is a list, we expect that some `listItem`s and possibly other blocks will be inserted, however `.modelCursor`\n            // should be set after last `listItem` (or block). This is why it feels safe to use it as `nextPosition`\n            nextPosition = conversionApi.convertItem(child, nextPosition).modelCursor;\n        } else {\n            // If this is not a list, try inserting content at the end of the currently handled `listItem`.\n            const result = conversionApi.convertItem(child, writer.createPositionAt(listItemModel, 'end'));\n            // It may end up that the current `listItem` becomes split (if that content cannot be inside `listItem`). For example:\n            //\n            // <li><p>Foo</p></li>\n            //\n            // will be converted to:\n            //\n            // <listItem></listItem><paragraph>Foo</paragraph><listItem></listItem>\n            //\n            const convertedChild = result.modelRange.start.nodeAfter;\n            const wasSplit = convertedChild && convertedChild.is('element') && !schema.checkChild(listItemModel, convertedChild.name);\n            if (wasSplit) {\n                // As `lastListItem` got split, we need to update it to the second part of the split `listItem` element.\n                //\n                // `modelCursor` should be set to a position where the conversion should continue. There are multiple possible scenarios\n                // that may happen. Usually, `modelCursor` (marked as `#` below) would point to the second list item after conversion:\n                //\n                //\t\t`<li><p>Foo</p></li>` -> `<listItem></listItem><paragraph>Foo</paragraph><listItem>#</listItem>`\n                //\n                // However, in some cases, like auto-paragraphing, the position is placed at the end of the block element:\n                //\n                //\t\t`<li><div>Foo</div></li>` -> `<listItem></listItem><paragraph>Foo#</paragraph><listItem></listItem>`\n                //\n                // or after an element if another element broken auto-paragraphed element:\n                //\n                //\t\t`<li><div><h2>Foo</h2></div></li>` -> `<listItem></listItem><heading1>Foo</heading1>#<listItem></listItem>`\n                //\n                // We need to check for such cases and use proper list item and position based on it.\n                //\n                if (result.modelCursor.parent.is('element', 'listItem')) {\n                    // (1).\n                    listItemModel = result.modelCursor.parent;\n                } else {\n                    // (2), (3).\n                    listItemModel = findNextListItem(result.modelCursor);\n                }\n                nextPosition = writer.createPositionAfter(listItemModel);\n            }\n        }\n    }\n    return nextPosition;\n}\n/**\n * Helper function that seeks for a next list item starting from given `startPosition`.\n */ function findNextListItem(startPosition) {\n    const treeWalker = new TreeWalker({\n        startPosition\n    });\n    let value;\n    do {\n        value = treeWalker.next();\n    }while (!value.value.item.is('element', 'listItem'))\n    return value.value.item;\n}\n/**\n * Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n * to other given parameters.\n */ function hoistNestedLists(nextIndent, modelRemoveStartPosition, viewRemoveStartPosition, viewRemovedItem, conversionApi, model) {\n    // Find correct previous model list item element.\n    // The element has to have either same or smaller indent than given reference indent.\n    // This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n    // Keep in mind that such element might not be found, if removed item was the first item.\n    const prevModelItem = getSiblingListItem(modelRemoveStartPosition.nodeBefore, {\n        sameIndent: true,\n        smallerIndent: true,\n        listIndent: nextIndent\n    });\n    const mapper = conversionApi.mapper;\n    const viewWriter = conversionApi.writer;\n    // Indent of found element or `null` if the element has not been found.\n    const prevIndent = prevModelItem ? prevModelItem.getAttribute('listIndent') : null;\n    let insertPosition;\n    if (!prevModelItem) {\n        // If element has not been found, simply insert lists at the position where the removed item was:\n        //\n        // Lorem ipsum.\n        // 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n        //   1.1 --------       <--- this is reference indent.\n        //     1.1.1 --------\n        //     1.1.2 --------\n        //   1.2 --------\n        //\n        // Becomes:\n        //\n        // Lorem ipsum.\n        // 1.1 --------\n        //   1.1.1 --------\n        //   1.1.2 --------\n        // 1.2 --------\n        insertPosition = viewRemoveStartPosition;\n    } else if (prevIndent == nextIndent) {\n        // If element has been found and has same indent as reference indent it means that nested items should\n        // become siblings of found element:\n        //\n        // 1 --------\n        //   1.1 --------\n        //   1.2 --------       <--- this is `prevModelItem`.\n        // 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n        //   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n        //   2.2 --------\n        //\n        // Becomes:\n        //\n        // 1 --------\n        //   1.1 --------\n        //   1.2 --------\n        //   2.1 --------\n        //   2.2 --------\n        const prevViewList = mapper.toViewElement(prevModelItem).parent;\n        insertPosition = viewWriter.createPositionAfter(prevViewList);\n    } else {\n        // If element has been found and has smaller indent as reference indent it means that nested items\n        // should become nested items of found item:\n        //\n        // 1 --------           <--- this is `prevModelItem`.\n        //   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n        //     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n        //     1.1.2 --------\n        //   1.2 --------\n        //\n        // Becomes:\n        //\n        // 1 --------\n        //   1.1.1 --------\n        //   1.1.2 --------\n        //   1.2 --------\n        //\n        // Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n        // because following item may have indent bigger only by one. But this is fixed by postfixer.\n        const modelPosition = model.createPositionAt(prevModelItem, 'end');\n        insertPosition = mapper.toViewPosition(modelPosition);\n    }\n    insertPosition = positionAfterUiElements(insertPosition);\n    // Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n    // are inserted after the first list (no need to recalculate insertion position for them).\n    for (const child of [\n        ...viewRemovedItem.getChildren()\n    ]){\n        if (isList(child)) {\n            insertPosition = viewWriter.move(viewWriter.createRangeOn(child), insertPosition).end;\n            mergeViewLists(viewWriter, child, child.nextSibling);\n            mergeViewLists(viewWriter, child.previousSibling, child);\n        }\n    }\n}\n/**\n * Checks if view element is a list type (ul or ol).\n */ function isList(viewElement) {\n    return viewElement.is('element', 'ol') || viewElement.is('element', 'ul');\n}\n/**\n * Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n *\n * Also, fixes non HTML compliant lists indents:\n *\n * ```\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n *     |-> OL                                  |-> OL\n *         |-> OL                                  |\n *         |   |-> OL                              |\n *         |       |-> OL                          |\n *         |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n *         |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> OL                                      |\n *     |-> OL                                  |\n *          |-> OL                             |\n *              |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n * |-> OL                                          |-> OL\n *     |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n * ```\n */ function getIndent(listItem) {\n    let indent = 0;\n    let parent = listItem.parent;\n    while(parent){\n        // Each LI in the tree will result in an increased indent for HTML compliant lists.\n        if (parent.is('element', 'li')) {\n            indent++;\n        } else {\n            // If however the list is nested in other list we should check previous sibling of any of the list elements...\n            const previousSibling = parent.previousSibling;\n            // ...because the we might need increase its indent:\n            //\t\tbefore:                           fixed list:\n            //\t\tOL                                OL\n            //\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n            //\t\t|-> OL                                |-> OL\n            //\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n            if (previousSibling && previousSibling.is('element', 'li')) {\n                indent++;\n            }\n        }\n        parent = parent.parent;\n    }\n    return indent;\n}\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n */ class LegacyListEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyListEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Enter,\n            Delete,\n            LegacyListUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Schema.\n        // Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n        // uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n        // If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n        editor.model.schema.register('listItem', {\n            inheritAllFrom: '$block',\n            allowAttributes: [\n                'listType',\n                'listIndent'\n            ]\n        });\n        // Converters.\n        const data = editor.data;\n        const editing = editor.editing;\n        editor.model.document.registerPostFixer((writer)=>modelChangePostFixer(editor.model, writer));\n        editing.mapper.registerViewToModelLength('li', getViewListItemLength);\n        data.mapper.registerViewToModelLength('li', getViewListItemLength);\n        editing.mapper.on('modelToViewPosition', modelToViewPosition(editing.view));\n        editing.mapper.on('viewToModelPosition', viewToModelPosition(editor.model));\n        data.mapper.on('modelToViewPosition', modelToViewPosition(editing.view));\n        editor.conversion.for('editingDowncast').add((dispatcher)=>{\n            dispatcher.on('insert', modelViewSplitOnInsert, {\n                priority: 'high'\n            });\n            dispatcher.on('insert:listItem', modelViewInsertion$1(editor.model));\n            dispatcher.on('attribute:listType:listItem', modelViewChangeType$1, {\n                priority: 'high'\n            });\n            dispatcher.on('attribute:listType:listItem', modelViewMergeAfterChangeType, {\n                priority: 'low'\n            });\n            dispatcher.on('attribute:listIndent:listItem', modelViewChangeIndent(editor.model));\n            dispatcher.on('remove:listItem', modelViewRemove(editor.model));\n            dispatcher.on('remove', modelViewMergeAfter, {\n                priority: 'low'\n            });\n        });\n        editor.conversion.for('dataDowncast').add((dispatcher)=>{\n            dispatcher.on('insert', modelViewSplitOnInsert, {\n                priority: 'high'\n            });\n            dispatcher.on('insert:listItem', modelViewInsertion$1(editor.model));\n        });\n        editor.conversion.for('upcast').add((dispatcher)=>{\n            dispatcher.on('element:ul', cleanList, {\n                priority: 'high'\n            });\n            dispatcher.on('element:ol', cleanList, {\n                priority: 'high'\n            });\n            dispatcher.on('element:li', cleanListItem, {\n                priority: 'high'\n            });\n            dispatcher.on('element:li', viewModelConverter);\n        });\n        // Fix indentation of pasted items.\n        editor.model.on('insertContent', modelIndentPasteFixer, {\n            priority: 'high'\n        });\n        // Register commands for numbered and bulleted list.\n        editor.commands.add('numberedList', new LegacyListCommand(editor, 'numbered'));\n        editor.commands.add('bulletedList', new LegacyListCommand(editor, 'bulleted'));\n        // Register commands for indenting.\n        editor.commands.add('indentList', new LegacyIndentCommand(editor, 'forward'));\n        editor.commands.add('outdentList', new LegacyIndentCommand(editor, 'backward'));\n        const viewDocument = editing.view.document;\n        // Overwrite default Enter key behavior.\n        // If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n        this.listenTo(viewDocument, 'enter', (evt, data)=>{\n            const doc = this.editor.model.document;\n            const positionParent = doc.selection.getLastPosition().parent;\n            if (doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty) {\n                this.editor.execute('outdentList');\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: 'li'\n        });\n        // Overwrite default Backspace key behavior.\n        // If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n        this.listenTo(viewDocument, 'delete', (evt, data)=>{\n            // Check conditions from those that require less computations like those immediately available.\n            if (data.direction !== 'backward') {\n                return;\n            }\n            const selection = this.editor.model.document.selection;\n            if (!selection.isCollapsed) {\n                return;\n            }\n            const firstPosition = selection.getFirstPosition();\n            if (!firstPosition.isAtStart) {\n                return;\n            }\n            const positionParent = firstPosition.parent;\n            if (positionParent.name !== 'listItem') {\n                return;\n            }\n            const previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n            if (previousIsAListItem) {\n                return;\n            }\n            this.editor.execute('outdentList');\n            data.preventDefault();\n            evt.stop();\n        }, {\n            context: 'li'\n        });\n        this.listenTo(editor.editing.view.document, 'tab', (evt, data)=>{\n            const commandName = data.shiftKey ? 'outdentList' : 'indentList';\n            const command = this.editor.commands.get(commandName);\n            if (command.isEnabled) {\n                editor.execute(commandName);\n                data.stopPropagation();\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: 'li'\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const commands = this.editor.commands;\n        const indent = commands.get('indent');\n        const outdent = commands.get('outdent');\n        if (indent) {\n            indent.registerChildCommand(commands.get('indentList'));\n        }\n        if (outdent) {\n            outdent.registerChildCommand(commands.get('outdentList'));\n        }\n    }\n}\nfunction getViewListItemLength(element) {\n    let length = 1;\n    for (const child of element.getChildren()){\n        if (child.name == 'ul' || child.name == 'ol') {\n            for (const item of child.getChildren()){\n                length += getViewListItemLength(item);\n            }\n        }\n    }\n    return length;\n}\n\n/**\n * The legacy list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacylist/legacylistediting~LegacyListEditing legacy list editing feature}\n * and {@link module:list/list/listui~ListUI list UI feature}.\n */ class LegacyList extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyListEditing,\n            ListUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyList';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The list style command. It changes the `listStyle` attribute of the selected list items.\n *\n * If the list type (numbered or bulleted) can be inferred from the passed style type,\n * the command tries to convert selected items to a list of that type.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */ class LegacyListStyleCommand extends Command {\n    /**\n\t * The default type of the list style.\n\t */ defaultType;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t */ constructor(editor, defaultType){\n        super(editor);\n        this.defaultType = defaultType;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t */ execute(options = {}) {\n        this._tryToConvertItemsToList(options);\n        const model = this.editor.model;\n        const listItems = getSelectedListItems(model);\n        if (!listItems.length) {\n            return;\n        }\n        model.change((writer)=>{\n            for (const item of listItems){\n                writer.setAttribute('listStyle', options.type || this.defaultType, item);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const listItem = this.editor.model.document.selection.getFirstPosition().parent;\n        if (listItem && listItem.is('element', 'listItem')) {\n            return listItem.getAttribute('listStyle');\n        }\n        return null;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        const editor = this.editor;\n        const numberedList = editor.commands.get('numberedList');\n        const bulletedList = editor.commands.get('bulletedList');\n        return numberedList.isEnabled || bulletedList.isEnabled;\n    }\n    /**\n\t * Checks if the provided list style is valid. Also changes the selection to a list if it's not set yet.\n\t *\n\t * @param The type of the list style. If `null` is specified, the function does nothing.\n\t*/ _tryToConvertItemsToList(options) {\n        if (!options.type) {\n            return;\n        }\n        const listType = getListTypeFromListStyleType(options.type);\n        /* istanbul ignore next -- @preserve */ if (!listType) {\n            return;\n        }\n        const editor = this.editor;\n        const commandName = `${listType}List`;\n        const command = editor.commands.get(commandName);\n        if (!command.value) {\n            editor.execute(commandName);\n        }\n    }\n}\n\n/**\n * The reversed list command. It changes the `listReversed` attribute of the selected list items. As a result, the list order will be\n * reversed.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */ class LegacyListReversedCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const value = this._getValue();\n        this.value = value;\n        this.isEnabled = value != null;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.reversed Whether the list should be reversed.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const listItems = getSelectedListItems(model).filter((item)=>item.getAttribute('listType') == 'numbered');\n        model.change((writer)=>{\n            for (const item of listItems){\n                writer.setAttribute('listReversed', !!options.reversed, item);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const listItem = this.editor.model.document.selection.getFirstPosition().parent;\n        if (listItem && listItem.is('element', 'listItem') && listItem.getAttribute('listType') == 'numbered') {\n            return listItem.getAttribute('listReversed');\n        }\n        return null;\n    }\n}\n\n/**\n * The list start index command. It changes the `listStart` attribute of the selected list items.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */ class LegacyListStartCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const value = this._getValue();\n        this.value = value;\n        this.isEnabled = value != null;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.startIndex The list start index.\n\t */ execute({ startIndex = 1 } = {}) {\n        const model = this.editor.model;\n        const listItems = getSelectedListItems(model).filter((item)=>item.getAttribute('listType') == 'numbered');\n        model.change((writer)=>{\n            for (const item of listItems){\n                writer.setAttribute('listStart', startIndex >= 0 ? startIndex : 1, item);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const listItem = this.editor.model.document.selection.getFirstPosition().parent;\n        if (listItem && listItem.is('element', 'listItem') && listItem.getAttribute('listType') == 'numbered') {\n            return listItem.getAttribute('listStart');\n        }\n        return null;\n    }\n}\n\nconst DEFAULT_LIST_TYPE = 'default';\n/**\n * The engine of the list properties feature.\n *\n * It sets the value for the `listItem` attribute of the {@link module:list/legacylist~LegacyList `<listItem>`} element that\n * allows modifying the list style type.\n *\n * It registers the `'listStyle'`, `'listReversed'` and `'listStart'` commands if they are enabled in the configuration.\n * Read more in {@link module:list/listconfig~ListPropertiesConfig}.\n */ class LegacyListPropertiesEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyListPropertiesEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('list', {\n            properties: {\n                styles: true,\n                startIndex: false,\n                reversed: false\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const enabledProperties = editor.config.get('list.properties');\n        const strategies = createAttributeStrategies(enabledProperties);\n        // Extend schema.\n        model.schema.extend('listItem', {\n            allowAttributes: strategies.map((s)=>s.attributeName)\n        });\n        for (const strategy of strategies){\n            strategy.addCommand(editor);\n        }\n        // Fix list attributes when modifying their nesting levels (the `listIndent` attribute).\n        this.listenTo(editor.commands.get('indentList'), '_executeCleanup', fixListAfterIndentListCommand(editor, strategies));\n        this.listenTo(editor.commands.get('outdentList'), '_executeCleanup', fixListAfterOutdentListCommand(editor, strategies));\n        this.listenTo(editor.commands.get('bulletedList'), '_executeCleanup', restoreDefaultListStyle(editor));\n        this.listenTo(editor.commands.get('numberedList'), '_executeCleanup', restoreDefaultListStyle(editor));\n        // Register a post-fixer that ensures that the attributes is specified in each `listItem` element.\n        model.document.registerPostFixer(fixListAttributesOnListItemElements(editor, strategies));\n        // Set up conversion.\n        editor.conversion.for('upcast').add(upcastListItemAttributes(strategies));\n        editor.conversion.for('downcast').add(downcastListItemAttributes(strategies));\n        // Handle merging two separated lists into the single one.\n        this._mergeListAttributesWhileMergingLists(strategies);\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        // Enable post-fixer that removes the attributes from to-do list items only if the \"TodoList\" plugin is on.\n        // We need to registry the hook here since the `TodoList` plugin can be added after the `ListPropertiesEditing`.\n        if (editor.commands.get('todoList')) {\n            editor.model.document.registerPostFixer(removeListItemAttributesFromTodoList(editor));\n        }\n    }\n    /**\n\t * Starts listening to {@link module:engine/model/model~Model#deleteContent} and checks whether two lists will be merged into a single\n\t * one after deleting the content.\n\t *\n\t * The purpose of this action is to adjust the `listStyle`, `listReversed` and `listStart` values\n\t * for the list that was merged.\n\t *\n\t * Consider the following model's content:\n\t *\n\t * ```xml\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * <paragraph>[A paragraph.]</paragraph>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 2</listItem>\n\t * ```\n\t *\n\t * After removing the paragraph element, the second list will be merged into the first one.\n\t * We want to inherit the `listStyle` attribute for the second list from the first one.\n\t *\n\t * ```xml\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * ```\n\t *\n\t * See https://github.com/ckeditor/ckeditor5/issues/7879.\n\t *\n\t * @param attributeStrategies Strategies for the enabled attributes.\n\t */ _mergeListAttributesWhileMergingLists(attributeStrategies) {\n        const editor = this.editor;\n        const model = editor.model;\n        // First the outer-most`listItem` in the first list reference.\n        // If found, the lists should be merged and this `listItem` provides the attributes\n        // and it is also a starting point when searching for items in the second list.\n        let firstMostOuterItem;\n        // Check whether the removed content is between two lists.\n        this.listenTo(model, 'deleteContent', (evt, [selection])=>{\n            const firstPosition = selection.getFirstPosition();\n            const lastPosition = selection.getLastPosition();\n            // Typing or removing content in a single item. Aborting.\n            if (firstPosition.parent === lastPosition.parent) {\n                return;\n            }\n            // An element before the content that will be removed is not a list.\n            if (!firstPosition.parent.is('element', 'listItem')) {\n                return;\n            }\n            const nextSibling = lastPosition.parent.nextSibling;\n            // An element after the content that will be removed is not a list.\n            if (!nextSibling || !nextSibling.is('element', 'listItem')) {\n                return;\n            }\n            // Find the outermost list item based on the `listIndent` attribute. We can't assume that `listIndent=0`\n            // because the selection can be hooked in nested lists.\n            //\n            // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n            // <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"square\">UL List [item 1.1</listItem>\n            // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">[]UL List item 1.</listItem>\n            // <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"circle\">UL List ]item 1.1</listItem>\n            //\n            // After deleting the content, we would like to inherit the \"square\" attribute for the last element:\n            //\n            // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n            // <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"square\">UL List []item 1.1</listItem>\n            const mostOuterItemList = getSiblingListItem(firstPosition.parent, {\n                sameIndent: true,\n                listIndent: nextSibling.getAttribute('listIndent')\n            });\n            // The outermost list item may not exist while removing elements between lists with different value\n            // of the `listIndent` attribute. In such a case we don't want to update anything. See: #8073.\n            if (!mostOuterItemList) {\n                return;\n            }\n            if (mostOuterItemList.getAttribute('listType') === nextSibling.getAttribute('listType')) {\n                firstMostOuterItem = mostOuterItemList;\n            }\n        }, {\n            priority: 'high'\n        });\n        // If so, update the `listStyle` attribute for the second list.\n        this.listenTo(model, 'deleteContent', ()=>{\n            if (!firstMostOuterItem) {\n                return;\n            }\n            model.change((writer)=>{\n                // Find the first most-outer item list in the merged list.\n                // A case when the first list item in the second list was merged into the last item in the first list.\n                //\n                // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n                // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n                // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">[]UL List item 1</listItem>\n                // <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 2</listItem>\n                const secondListMostOuterItem = getSiblingListItem(firstMostOuterItem.nextSibling, {\n                    sameIndent: true,\n                    listIndent: firstMostOuterItem.getAttribute('listIndent'),\n                    direction: 'forward'\n                });\n                // If the selection ends in a non-list element, there are no <listItem>s that would require adjustments.\n                // See: #8642.\n                if (!secondListMostOuterItem) {\n                    firstMostOuterItem = null;\n                    return;\n                }\n                const items = [\n                    secondListMostOuterItem,\n                    ...getSiblingNodes(writer.createPositionAt(secondListMostOuterItem, 0), 'forward')\n                ];\n                for (const listItem of items){\n                    for (const strategy of attributeStrategies){\n                        if (strategy.appliesToListItem(listItem)) {\n                            const attributeName = strategy.attributeName;\n                            const value = firstMostOuterItem.getAttribute(attributeName);\n                            writer.setAttribute(attributeName, value, listItem);\n                        }\n                    }\n                }\n            });\n            firstMostOuterItem = null;\n        }, {\n            priority: 'low'\n        });\n    }\n}\n/**\n * Creates an array of strategies for dealing with enabled listItem attributes.\n */ function createAttributeStrategies(enabledProperties) {\n    const strategies = [];\n    if (enabledProperties.styles) {\n        strategies.push({\n            attributeName: 'listStyle',\n            defaultValue: DEFAULT_LIST_TYPE,\n            addCommand (editor) {\n                editor.commands.add('listStyle', new LegacyListStyleCommand(editor, DEFAULT_LIST_TYPE));\n            },\n            appliesToListItem () {\n                return true;\n            },\n            setAttributeOnDowncast (writer, listStyle, element) {\n                if (listStyle && listStyle !== DEFAULT_LIST_TYPE) {\n                    writer.setStyle('list-style-type', listStyle, element);\n                } else {\n                    writer.removeStyle('list-style-type', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                return normalizeListStyle(listParent.getStyle('list-style-type')) || DEFAULT_LIST_TYPE;\n            }\n        });\n    }\n    if (enabledProperties.reversed) {\n        strategies.push({\n            attributeName: 'listReversed',\n            defaultValue: false,\n            addCommand (editor) {\n                editor.commands.add('listReversed', new LegacyListReversedCommand(editor));\n            },\n            appliesToListItem (item) {\n                return item.getAttribute('listType') == 'numbered';\n            },\n            setAttributeOnDowncast (writer, listReversed, element) {\n                if (listReversed) {\n                    writer.setAttribute('reversed', 'reversed', element);\n                } else {\n                    writer.removeAttribute('reversed', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                return listParent.hasAttribute('reversed');\n            }\n        });\n    }\n    if (enabledProperties.startIndex) {\n        strategies.push({\n            attributeName: 'listStart',\n            defaultValue: 1,\n            addCommand (editor) {\n                editor.commands.add('listStart', new LegacyListStartCommand(editor));\n            },\n            appliesToListItem (item) {\n                return item.getAttribute('listType') == 'numbered';\n            },\n            setAttributeOnDowncast (writer, listStart, element) {\n                if (listStart == 0 || listStart > 1) {\n                    writer.setAttribute('start', listStart, element);\n                } else {\n                    writer.removeAttribute('start', element);\n                }\n            },\n            getAttributeOnUpcast (listParent) {\n                const startAttributeValue = listParent.getAttribute('start');\n                return startAttributeValue >= 0 ? startAttributeValue : 1;\n            }\n        });\n    }\n    return strategies;\n}\n/**\n * Returns a converter consumes the `style`, `reversed` and `start` attribute.\n * In `style` it searches for the `list-style-type` definition.\n * If not found, the `\"default\"` value will be used.\n */ function upcastListItemAttributes(attributeStrategies) {\n    return (dispatcher)=>{\n        dispatcher.on('element:li', (evt, data, conversionApi)=>{\n            // https://github.com/ckeditor/ckeditor5/issues/13858\n            if (!data.modelRange) {\n                return;\n            }\n            const listParent = data.viewItem.parent;\n            const listItem = data.modelRange.start.nodeAfter || data.modelRange.end.nodeBefore;\n            for (const strategy of attributeStrategies){\n                if (strategy.appliesToListItem(listItem)) {\n                    const listStyle = strategy.getAttributeOnUpcast(listParent);\n                    conversionApi.writer.setAttribute(strategy.attributeName, listStyle, listItem);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Returns a converter that adds `reversed`, `start` attributes and adds `list-style-type` definition as a value for the `style` attribute.\n * The `\"default\"` values are removed and not present in the view/data.\n */ function downcastListItemAttributes(attributeStrategies) {\n    return (dispatcher)=>{\n        for (const strategy of attributeStrategies){\n            dispatcher.on(`attribute:${strategy.attributeName}:listItem`, (evt, data, conversionApi)=>{\n                const viewWriter = conversionApi.writer;\n                const currentElement = data.item;\n                const previousElement = getSiblingListItem(currentElement.previousSibling, {\n                    sameIndent: true,\n                    listIndent: currentElement.getAttribute('listIndent'),\n                    direction: 'backward'\n                });\n                const viewItem = conversionApi.mapper.toViewElement(currentElement);\n                // A case when elements represent different lists. We need to separate their container.\n                if (!areRepresentingSameList(currentElement, previousElement)) {\n                    viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n                }\n                strategy.setAttributeOnDowncast(viewWriter, data.attributeNewValue, viewItem.parent);\n            }, {\n                priority: 'low'\n            });\n        }\n    };\n    /**\n\t * Checks whether specified list items belong to the same list.\n\t */ function areRepresentingSameList(listItem1, listItem2) {\n        return listItem2 && listItem1.getAttribute('listType') === listItem2.getAttribute('listType') && listItem1.getAttribute('listIndent') === listItem2.getAttribute('listIndent') && listItem1.getAttribute('listStyle') === listItem2.getAttribute('listStyle') && listItem1.getAttribute('listReversed') === listItem2.getAttribute('listReversed') && listItem1.getAttribute('listStart') === listItem2.getAttribute('listStart');\n    }\n}\n/**\n * When indenting list, nested list should clear its value for the attributes or inherit from nested lists.\n *\n * ■ List item 1.\n * ■ List item 2.[]\n * ■ List item 3.\n * editor.execute( 'indentList' );\n *\n * ■ List item 1.\n *     ○ List item 2.[]\n * ■ List item 3.\n */ function fixListAfterIndentListCommand(editor, attributeStrategies) {\n    return (evt, changedItems)=>{\n        const root = changedItems[0];\n        const rootIndent = root.getAttribute('listIndent');\n        const itemsToUpdate = changedItems.filter((item)=>item.getAttribute('listIndent') === rootIndent);\n        // A case where a few list items are indented must be checked separately\n        // since `getSiblingListItem()` returns the first changed element.\n        // ■ List item 1.\n        //     ○ [List item 2.\n        //     ○ List item 3.]\n        // ■ List item 4.\n        //\n        // List items: `2` and `3` should be adjusted.\n        let previousSibling = null;\n        if (root.previousSibling.getAttribute('listIndent') + 1 !== rootIndent) {\n            previousSibling = getSiblingListItem(root.previousSibling, {\n                sameIndent: true,\n                direction: 'backward',\n                listIndent: rootIndent\n            });\n        }\n        editor.model.change((writer)=>{\n            for (const item of itemsToUpdate){\n                for (const strategy of attributeStrategies){\n                    if (strategy.appliesToListItem(item)) {\n                        const valueToSet = previousSibling == null ? strategy.defaultValue : previousSibling.getAttribute(strategy.attributeName);\n                        writer.setAttribute(strategy.attributeName, valueToSet, item);\n                    }\n                }\n            }\n        });\n    };\n}\n/**\n * When outdenting a list, a nested list should copy attribute values\n * from the previous sibling list item including the same value for the `listIndent` value.\n *\n * ■ List item 1.\n *     ○ List item 2.[]\n * ■ List item 3.\n *\n * editor.execute( 'outdentList' );\n *\n * ■ List item 1.\n * ■ List item 2.[]\n * ■ List item 3.\n */ function fixListAfterOutdentListCommand(editor, attributeStrategies) {\n    return (evt, changedItems)=>{\n        changedItems = changedItems.reverse().filter((item)=>item.is('element', 'listItem'));\n        if (!changedItems.length) {\n            return;\n        }\n        const indent = changedItems[0].getAttribute('listIndent');\n        const listType = changedItems[0].getAttribute('listType');\n        let listItem = changedItems[0].previousSibling;\n        // ■ List item 1.\n        //     ○ List item 2.\n        //     ○ List item 3.[]\n        // ■ List item 4.\n        //\n        // After outdenting a list, `List item 3` should inherit the `listStyle` attribute from `List item 1`.\n        //\n        // ■ List item 1.\n        //     ○ List item 2.\n        // ■ List item 3.[]\n        // ■ List item 4.\n        if (listItem.is('element', 'listItem')) {\n            while(listItem.getAttribute('listIndent') !== indent){\n                listItem = listItem.previousSibling;\n            }\n        } else {\n            listItem = null;\n        }\n        // Outdenting such a list should restore values based on `List item 4`.\n        // ■ List item 1.[]\n        //     ○ List item 2.\n        //     ○ List item 3.\n        // ■ List item 4.\n        if (!listItem) {\n            listItem = changedItems[changedItems.length - 1].nextSibling;\n        }\n        // And such a list should not modify anything.\n        // However, `listItem` can indicate a node below the list. Be sure that we have the `listItem` element.\n        // ■ List item 1.[]\n        //     ○ List item 2.\n        //     ○ List item 3.\n        // <paragraph>The later if check.</paragraph>\n        if (!listItem || !listItem.is('element', 'listItem')) {\n            return;\n        }\n        // Do not modify the list if found `listItem` represents other type of list than outdented list items.\n        if (listItem.getAttribute('listType') !== listType) {\n            return;\n        }\n        editor.model.change((writer)=>{\n            const itemsToUpdate = changedItems.filter((item)=>item.getAttribute('listIndent') === indent);\n            for (const item of itemsToUpdate){\n                for (const strategy of attributeStrategies){\n                    if (strategy.appliesToListItem(item)) {\n                        const attributeName = strategy.attributeName;\n                        const valueToSet = listItem.getAttribute(attributeName);\n                        writer.setAttribute(attributeName, valueToSet, item);\n                    }\n                }\n            }\n        });\n    };\n}\n/**\n * Each `listItem` element must have specified the `listStyle`, `listReversed` and `listStart` attributes\n * if they are enabled and supported by its `listType`.\n * This post-fixer checks whether inserted elements `listItem` elements should inherit the attribute values from\n * their sibling nodes or should use the default values.\n *\n * Paragraph[]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2. // ...\n * ■ List item 3. // ...\n *\n * editor.execute( 'bulletedList' )\n *\n * ■ Paragraph[]  // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2.\n * ■ List item 3.\n *\n * It also covers a such change:\n *\n * [Paragraph 1\n * Paragraph 2]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2. // ...\n * ■ List item 3. // ...\n *\n * editor.execute( 'numberedList' )\n *\n * 1. [Paragraph 1 // [listStyle=\"default\", listType=\"numbered\"]\n * 2. Paragraph 2] // [listStyle=\"default\", listType=\"numbered\"]\n * ■ List item 1.  // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2.  // ...\n * ■ List item 3.  // ...\n */ function fixListAttributesOnListItemElements(editor, attributeStrategies) {\n    return (writer)=>{\n        let wasFixed = false;\n        const insertedListItems = getChangedListItems(editor.model.document.differ.getChanges()).filter((item)=>{\n            // Don't touch todo lists. They are handled in another post-fixer.\n            return item.getAttribute('listType') !== 'todo';\n        });\n        if (!insertedListItems.length) {\n            return wasFixed;\n        }\n        // Check whether the last inserted element is next to the `listItem` element.\n        //\n        // ■ Paragraph[]  // <-- The inserted item.\n        // ■ List item 1.\n        let existingListItem = insertedListItems[insertedListItems.length - 1].nextSibling;\n        // If it doesn't, maybe the `listItem` was inserted at the end of the list.\n        //\n        // ■ List item 1.\n        // ■ Paragraph[]  // <-- The inserted item.\n        if (!existingListItem || !existingListItem.is('element', 'listItem')) {\n            existingListItem = insertedListItems[0].previousSibling;\n            if (existingListItem) {\n                const indent = insertedListItems[0].getAttribute('listIndent');\n                // But we need to find a `listItem` with the `listIndent=0` attribute.\n                // If doesn't, maybe the `listItem` was inserted at the end of the list.\n                //\n                // ■ List item 1.\n                //     ○ List item 2.\n                // ■ Paragraph[]  // <-- The inserted item.\n                while(existingListItem.is('element', 'listItem') && existingListItem.getAttribute('listIndent') !== indent){\n                    existingListItem = existingListItem.previousSibling;\n                    // If the item does not exist, most probably there is no other content in the editor. See: #8072.\n                    if (!existingListItem) {\n                        break;\n                    }\n                }\n            }\n        }\n        for (const strategy of attributeStrategies){\n            const attributeName = strategy.attributeName;\n            for (const item of insertedListItems){\n                if (!strategy.appliesToListItem(item)) {\n                    writer.removeAttribute(attributeName, item);\n                    continue;\n                }\n                if (!item.hasAttribute(attributeName)) {\n                    if (shouldInheritListType(existingListItem, item, strategy)) {\n                        writer.setAttribute(attributeName, existingListItem.getAttribute(attributeName), item);\n                    } else {\n                        writer.setAttribute(attributeName, strategy.defaultValue, item);\n                    }\n                    wasFixed = true;\n                } else {\n                    // Adjust the `listStyle`, `listReversed` and `listStart`\n                    // attributes for inserted (pasted) items. See #8160.\n                    //\n                    // ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n                    //     ○ List item 1.1. // [listStyle=\"circle\", listType=\"bulleted\"]\n                    //     ○ [] (selection is here)\n                    //\n                    // Then, pasting a list with different attributes (listStyle, listType):\n                    //\n                    // 1. First. // [listStyle=\"decimal\", listType=\"numbered\"]\n                    // 2. Second // [listStyle=\"decimal\", listType=\"numbered\"]\n                    //\n                    // The `listType` attribute will be corrected by the `ListEditing` converters.\n                    // We need to adjust the `listStyle` attribute. Expected structure:\n                    //\n                    // ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n                    //     ○ List item 1.1. // [listStyle=\"circle\", listType=\"bulleted\"]\n                    //     ○ First. // [listStyle=\"circle\", listType=\"bulleted\"]\n                    //     ○ Second // [listStyle=\"circle\", listType=\"bulleted\"]\n                    const previousSibling = item.previousSibling;\n                    if (shouldInheritListTypeFromPreviousItem(previousSibling, item, strategy.attributeName)) {\n                        writer.setAttribute(attributeName, previousSibling.getAttribute(attributeName), item);\n                        wasFixed = true;\n                    }\n                }\n            }\n        }\n        return wasFixed;\n    };\n}\n/**\n * Checks whether the `listStyle`, `listReversed` and `listStart` attributes\n * should be copied from the `baseItem` element.\n *\n * The attribute should be copied if the inserted element does not have defined it and\n * the value for the element is other than default in the base element.\n */ function shouldInheritListType(baseItem, itemToChange, attributeStrategy) {\n    if (!baseItem) {\n        return false;\n    }\n    const baseListAttribute = baseItem.getAttribute(attributeStrategy.attributeName);\n    if (!baseListAttribute) {\n        return false;\n    }\n    if (baseListAttribute == attributeStrategy.defaultValue) {\n        return false;\n    }\n    if (baseItem.getAttribute('listType') !== itemToChange.getAttribute('listType')) {\n        return false;\n    }\n    return true;\n}\n/**\n * Checks whether the `listStyle`, `listReversed` and `listStart` attributes\n * should be copied from previous list item.\n *\n * The attribute should be copied if there's a mismatch of styles of the pasted list into a nested list.\n * Top-level lists are not normalized as we allow side-by-side list of different types.\n */ function shouldInheritListTypeFromPreviousItem(previousItem, itemToChange, attributeName) {\n    if (!previousItem || !previousItem.is('element', 'listItem')) {\n        return false;\n    }\n    if (itemToChange.getAttribute('listType') !== previousItem.getAttribute('listType')) {\n        return false;\n    }\n    const previousItemIndent = previousItem.getAttribute('listIndent');\n    if (previousItemIndent < 1 || previousItemIndent !== itemToChange.getAttribute('listIndent')) {\n        return false;\n    }\n    const previousItemListAttribute = previousItem.getAttribute(attributeName);\n    if (!previousItemListAttribute || previousItemListAttribute === itemToChange.getAttribute(attributeName)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Removes the `listStyle`, `listReversed` and `listStart` attributes from \"todo\" list items.\n */ function removeListItemAttributesFromTodoList(editor) {\n    return (writer)=>{\n        const todoListItems = getChangedListItems(editor.model.document.differ.getChanges()).filter((item)=>{\n            // Handle the todo lists only. The rest is handled in another post-fixer.\n            return item.getAttribute('listType') === 'todo' && (item.hasAttribute('listStyle') || item.hasAttribute('listReversed') || item.hasAttribute('listStart'));\n        });\n        if (!todoListItems.length) {\n            return false;\n        }\n        for (const item of todoListItems){\n            writer.removeAttribute('listStyle', item);\n            writer.removeAttribute('listReversed', item);\n            writer.removeAttribute('listStart', item);\n        }\n        return true;\n    };\n}\n/**\n * Restores the `listStyle` attribute after changing the list type.\n */ function restoreDefaultListStyle(editor) {\n    return (evt, changedItems)=>{\n        changedItems = changedItems.filter((item)=>item.is('element', 'listItem'));\n        editor.model.change((writer)=>{\n            for (const item of changedItems){\n                // Remove the attribute. Post-fixer will restore the proper value.\n                writer.removeAttribute('listStyle', item);\n            }\n        });\n    };\n}\n/**\n * Returns the `listItem` that was inserted or changed.\n *\n * @param changes The changes list returned by the differ.\n */ function getChangedListItems(changes) {\n    const items = [];\n    for (const change of changes){\n        const item = getItemFromChange(change);\n        if (item && item.is('element', 'listItem')) {\n            items.push(item);\n        }\n    }\n    return items;\n}\nfunction getItemFromChange(change) {\n    if (change.type === 'attribute') {\n        return change.range.start.nodeAfter;\n    }\n    if (change.type === 'insert') {\n        return change.position.nodeAfter;\n    }\n    return null;\n}\n\n/**\n * The legacy list properties feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacylistproperties/legacylistpropertiesediting~LegacyListPropertiesEditing\n * legacy list properties editing feature} and the\n * {@link module:list/listproperties/listpropertiesui~ListPropertiesUI list properties UI feature}.\n */ class LegacyListProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyListPropertiesEditing,\n            ListPropertiesUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyListProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst attributeKey = 'todoListChecked';\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/legacytodolist/legacytodolistediting~LegacyTodoListEditing} as\n * the `checkTodoList` editor command and it is also available via aliased `todoListCheck` name.\n */ class LegacyCheckTodoListCommand extends Command {\n    /**\n\t * A list of to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t *\n\t * @internal\n\t */ _selectedElements;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._selectedElements = [];\n        // Refresh command before executing to be sure all values are up to date.\n        // It is needed when selection has changed before command execution, in the same change block.\n        this.on('execute', ()=>{\n            this.refresh();\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */ refresh() {\n        this._selectedElements = this._getSelectedItems();\n        this.value = this._selectedElements.every((element)=>!!element.getAttribute(attributeKey));\n        this.isEnabled = !!this._selectedElements.length;\n    }\n    /**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t */ _getSelectedItems() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selectionRange = model.document.selection.getFirstRange();\n        const startElement = selectionRange.start.parent;\n        const elements = [];\n        if (schema.checkAttribute(startElement, attributeKey)) {\n            elements.push(startElement);\n        }\n        for (const item of selectionRange.getItems()){\n            if (schema.checkAttribute(item, attributeKey) && !elements.includes(item)) {\n                elements.push(item);\n            }\n        }\n        return elements;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */ execute(options = {}) {\n        this.editor.model.change((writer)=>{\n            for (const element of this._selectedElements){\n                const value = options.forceValue === undefined ? !this.value : options.forceValue;\n                if (value) {\n                    writer.setAttribute(attributeKey, true, element);\n                } else {\n                    writer.removeAttribute(attributeKey, element);\n                }\n            }\n        });\n    }\n}\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It converts the `listItem` model element to an unordered list with a {@link module:engine/view/uielement~UIElement checkbox element}\n * at the beginning of each list item. It also merges the list with surrounding lists (if available).\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n * @param onCheckboxChecked Callback function.\n * @returns Returns a conversion callback.\n */ function modelViewInsertion(model, onCheckboxChecked) {\n    return (evt, data, conversionApi)=>{\n        const consumable = conversionApi.consumable;\n        if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n            return;\n        }\n        if (data.item.getAttribute('listType') != 'todo') {\n            return;\n        }\n        const modelItem = data.item;\n        consumable.consume(modelItem, 'insert');\n        consumable.consume(modelItem, 'attribute:listType');\n        consumable.consume(modelItem, 'attribute:listIndent');\n        consumable.consume(modelItem, 'attribute:todoListChecked');\n        const viewWriter = conversionApi.writer;\n        const viewItem = generateLiInUl(modelItem, conversionApi);\n        const isChecked = !!modelItem.getAttribute('todoListChecked');\n        const checkmarkElement = createCheckmarkElement(modelItem, viewWriter, isChecked, onCheckboxChecked);\n        const span = viewWriter.createContainerElement('span', {\n            class: 'todo-list__label__description'\n        });\n        viewWriter.addClass('todo-list', viewItem.parent);\n        viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), checkmarkElement);\n        viewWriter.insert(viewWriter.createPositionAfter(checkmarkElement), span);\n        injectViewList(modelItem, viewItem, conversionApi, model);\n    };\n}\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */ function dataModelViewInsertion(model) {\n    return (evt, data, conversionApi)=>{\n        const consumable = conversionApi.consumable;\n        if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n            return;\n        }\n        if (data.item.getAttribute('listType') != 'todo') {\n            return;\n        }\n        const modelItem = data.item;\n        consumable.consume(modelItem, 'insert');\n        consumable.consume(modelItem, 'attribute:listType');\n        consumable.consume(modelItem, 'attribute:listIndent');\n        consumable.consume(modelItem, 'attribute:todoListChecked');\n        const viewWriter = conversionApi.writer;\n        const viewItem = generateLiInUl(modelItem, conversionApi);\n        viewWriter.addClass('todo-list', viewItem.parent);\n        const label = viewWriter.createContainerElement('label', {\n            class: 'todo-list__label'\n        });\n        const checkbox = viewWriter.createEmptyElement('input', {\n            type: 'checkbox',\n            disabled: 'disabled'\n        });\n        const span = viewWriter.createContainerElement('span', {\n            class: 'todo-list__label__description'\n        });\n        if (modelItem.getAttribute('todoListChecked')) {\n            viewWriter.setAttribute('checked', 'checked', checkbox);\n        }\n        viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), label);\n        viewWriter.insert(viewWriter.createPositionAt(label, 0), checkbox);\n        viewWriter.insert(viewWriter.createPositionAfter(checkbox), span);\n        injectViewList(modelItem, viewItem, conversionApi, model);\n    };\n}\n/**\n * A view-to-model converter for the checkbox element inside a view list item.\n *\n * It changes the `listType` of the model `listItem` to a `todo` value.\n * When a view checkbox element is marked as checked, an additional `todoListChecked=\"true\"` attribute is added to the model item.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */ const dataViewModelCheckmarkInsertion = (evt, data, conversionApi)=>{\n    const modelCursor = data.modelCursor;\n    const modelItem = modelCursor.parent;\n    const viewItem = data.viewItem;\n    if (viewItem.getAttribute('type') != 'checkbox' || modelItem.name != 'listItem' || !modelCursor.isAtStart) {\n        return;\n    }\n    if (!conversionApi.consumable.consume(viewItem, {\n        name: true\n    })) {\n        return;\n    }\n    const writer = conversionApi.writer;\n    writer.setAttribute('listType', 'todo', modelItem);\n    if (data.viewItem.hasAttribute('checked')) {\n        writer.setAttribute('todoListChecked', true, modelItem);\n    }\n    data.modelRange = writer.createRange(modelCursor);\n};\n/**\n * A model-to-view converter for the `listType` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes to `<ul class=\"todo-list\">` and a\n * {@link module:engine/view/uielement~UIElement checkbox UI element} is added at the beginning\n * of the list item element (or vice versa).\n *\n * This converter is preceded by {@link module:list/legacylist/legacyconverters~modelViewChangeType} and followed by\n * {@link module:list/legacylist/legacyconverters~modelViewMergeAfterChangeType} to handle splitting and merging surrounding lists\n * of the same type.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param onCheckedChange Callback fired after clicking the checkbox UI element.\n * @param view Editing view controller.\n * @returns Returns a conversion callback.\n */ function modelViewChangeType(onCheckedChange, view) {\n    return (evt, data, conversionApi)=>{\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const viewItem = conversionApi.mapper.toViewElement(data.item);\n        const viewWriter = conversionApi.writer;\n        const labelElement = findLabel(viewItem, view);\n        if (data.attributeNewValue == 'todo') {\n            const isChecked = !!data.item.getAttribute('todoListChecked');\n            const checkmarkElement = createCheckmarkElement(data.item, viewWriter, isChecked, onCheckedChange);\n            const span = viewWriter.createContainerElement('span', {\n                class: 'todo-list__label__description'\n            });\n            const itemRange = viewWriter.createRangeIn(viewItem);\n            const nestedList = findNestedList(viewItem);\n            const descriptionStart = positionAfterUiElements(itemRange.start);\n            const descriptionEnd = nestedList ? viewWriter.createPositionBefore(nestedList) : itemRange.end;\n            const descriptionRange = viewWriter.createRange(descriptionStart, descriptionEnd);\n            viewWriter.addClass('todo-list', viewItem.parent);\n            viewWriter.move(descriptionRange, viewWriter.createPositionAt(span, 0));\n            viewWriter.insert(viewWriter.createPositionAt(viewItem, 0), checkmarkElement);\n            viewWriter.insert(viewWriter.createPositionAfter(checkmarkElement), span);\n        } else if (data.attributeOldValue == 'todo') {\n            const descriptionSpan = findDescription(viewItem, view);\n            viewWriter.removeClass('todo-list', viewItem.parent);\n            viewWriter.remove(labelElement);\n            viewWriter.move(viewWriter.createRangeIn(descriptionSpan), viewWriter.createPositionBefore(descriptionSpan));\n            viewWriter.remove(descriptionSpan);\n        }\n    };\n}\n/**\n * A model-to-view converter for the `todoListChecked` attribute change on the `listItem` model element.\n *\n * It marks the {@link module:engine/view/uielement~UIElement checkbox UI element} as checked.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param onCheckedChange Callback fired after clicking the checkbox UI element.\n * @returns Returns a conversion callback.\n */ function modelViewChangeChecked(onCheckedChange) {\n    return (evt, data, conversionApi)=>{\n        // Do not convert `todoListChecked` attribute when to-do list item has changed to other list item.\n        // This attribute will be removed by the model post fixer.\n        if (data.item.getAttribute('listType') != 'todo') {\n            return;\n        }\n        if (!conversionApi.consumable.consume(data.item, 'attribute:todoListChecked')) {\n            return;\n        }\n        const { mapper, writer: viewWriter } = conversionApi;\n        const isChecked = !!data.item.getAttribute('todoListChecked');\n        const viewItem = mapper.toViewElement(data.item);\n        // Because of m -> v position mapper we can be sure checkbox is always at the beginning.\n        const oldCheckmarkElement = viewItem.getChild(0);\n        const newCheckmarkElement = createCheckmarkElement(data.item, viewWriter, isChecked, onCheckedChange);\n        viewWriter.insert(viewWriter.createPositionAfter(oldCheckmarkElement), newCheckmarkElement);\n        viewWriter.remove(oldCheckmarkElement);\n    };\n}\n/**\n * A model-to-view position at zero offset mapper.\n *\n * This helper ensures that position inside todo-list in the view is mapped after the checkbox.\n *\n * It only handles the position at the beginning of a list item as other positions are properly mapped be the default mapper.\n */ function mapModelToViewPosition(view) {\n    return (evt, data)=>{\n        const modelPosition = data.modelPosition;\n        const parent = modelPosition.parent;\n        if (!parent.is('element', 'listItem') || parent.getAttribute('listType') != 'todo') {\n            return;\n        }\n        const viewLi = data.mapper.toViewElement(parent);\n        const descSpan = findDescription(viewLi, view);\n        if (descSpan) {\n            data.viewPosition = data.mapper.findPositionIn(descSpan, modelPosition.offset);\n        }\n    };\n}\n/**\n * Creates a checkbox UI element.\n */ function createCheckmarkElement(modelItem, viewWriter, isChecked, onChange) {\n    const uiElement = viewWriter.createUIElement('label', {\n        class: 'todo-list__label',\n        contenteditable: false\n    }, function(domDocument) {\n        const checkbox = createElement(document, 'input', {\n            type: 'checkbox',\n            tabindex: '-1'\n        });\n        if (isChecked) {\n            checkbox.setAttribute('checked', 'checked');\n        }\n        checkbox.addEventListener('change', ()=>onChange(modelItem));\n        const domElement = this.toDomElement(domDocument);\n        domElement.appendChild(checkbox);\n        return domElement;\n    });\n    return uiElement;\n}\n// Helper method to find label element inside li.\nfunction findLabel(viewItem, view) {\n    const range = view.createRangeIn(viewItem);\n    for (const value of range){\n        if (value.item.is('uiElement', 'label')) {\n            return value.item;\n        }\n    }\n}\nfunction findDescription(viewItem, view) {\n    const range = view.createRangeIn(viewItem);\n    for (const value of range){\n        if (value.item.is('containerElement', 'span') && value.item.hasClass('todo-list__label__description')) {\n            return value.item;\n        }\n    }\n}\n\nconst ITEM_TOGGLE_KEYSTROKE = /* #__PURE__ */ parseKeystroke('Ctrl+Enter');\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/legacylist/legacylistediting~LegacyListEditing legacy list editing\n * plugin} and extends it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n * - `'todoListCheck'` as an alias for `checkTodoList` command.\n */ class LegacyTodoListEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyTodoListEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyListEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const { editing, data, model } = editor;\n        // Extend schema.\n        model.schema.extend('listItem', {\n            allowAttributes: [\n                'todoListChecked'\n            ]\n        });\n        // Disallow todoListChecked attribute on other nodes than listItem with to-do listType.\n        model.schema.addAttributeCheck((context, attributeName)=>{\n            const item = context.last;\n            if (attributeName == 'todoListChecked' && item.name == 'listItem' && item.getAttribute('listType') != 'todo') {\n                return false;\n            }\n        });\n        // Register `todoList` command.\n        editor.commands.add('todoList', new LegacyListCommand(editor, 'todo'));\n        const checkTodoListCommand = new LegacyCheckTodoListCommand(editor);\n        // Register `checkTodoList` command and add `todoListCheck` command as an alias for backward compatibility.\n        editor.commands.add('checkTodoList', checkTodoListCommand);\n        editor.commands.add('todoListCheck', checkTodoListCommand);\n        // Define converters.\n        data.downcastDispatcher.on('insert:listItem', dataModelViewInsertion(model), {\n            priority: 'high'\n        });\n        data.upcastDispatcher.on('element:input', dataViewModelCheckmarkInsertion, {\n            priority: 'high'\n        });\n        editing.downcastDispatcher.on('insert:listItem', modelViewInsertion(model, (listItem)=>this._handleCheckmarkChange(listItem)), {\n            priority: 'high'\n        });\n        editing.downcastDispatcher.on('attribute:listType:listItem', modelViewChangeType((listItem)=>this._handleCheckmarkChange(listItem), editing.view));\n        editing.downcastDispatcher.on('attribute:todoListChecked:listItem', modelViewChangeChecked((listItem)=>this._handleCheckmarkChange(listItem)));\n        editing.mapper.on('modelToViewPosition', mapModelToViewPosition(editing.view));\n        data.mapper.on('modelToViewPosition', mapModelToViewPosition(editing.view));\n        // Jump at the end of the previous node on left arrow key press, when selection is after the checkbox.\n        //\n        // <blockquote><p>Foo</p></blockquote>\n        // <ul><li><checkbox/>{}Bar</li></ul>\n        //\n        // press: `<-`\n        //\n        // <blockquote><p>Foo{}</p></blockquote>\n        // <ul><li><checkbox/>Bar</li></ul>\n        //\n        this.listenTo(editing.view.document, 'arrowKey', jumpOverCheckmarkOnSideArrowKeyPress(model, editor.locale), {\n            context: 'li'\n        });\n        // Toggle check state of selected to-do list items on keystroke.\n        this.listenTo(editing.view.document, 'keydown', (evt, data)=>{\n            if (getCode(data) === ITEM_TOGGLE_KEYSTROKE) {\n                editor.execute('checkTodoList');\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        // Remove `todoListChecked` attribute when a host element is no longer a to-do list item.\n        const listItemsToFix = new Set();\n        this.listenTo(model, 'applyOperation', (evt, args)=>{\n            const operation = args[0];\n            if (operation.type == 'rename' && operation.oldName == 'listItem') {\n                const item = operation.position.nodeAfter;\n                if (item.hasAttribute('todoListChecked')) {\n                    listItemsToFix.add(item);\n                }\n            } else if (operation.type == 'changeAttribute' && operation.key == 'listType' && operation.oldValue === 'todo') {\n                for (const item of operation.range.getItems()){\n                    if (item.hasAttribute('todoListChecked') && item.getAttribute('listType') !== 'todo') {\n                        listItemsToFix.add(item);\n                    }\n                }\n            }\n        });\n        model.document.registerPostFixer((writer)=>{\n            let hasChanged = false;\n            for (const listItem of listItemsToFix){\n                writer.removeAttribute('todoListChecked', listItem);\n                hasChanged = true;\n            }\n            listItemsToFix.clear();\n            return hasChanged;\n        });\n        this._initAriaAnnouncements();\n    }\n    /**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t */ _handleCheckmarkChange(listItem) {\n        const editor = this.editor;\n        const model = editor.model;\n        const previousSelectionRanges = Array.from(model.document.selection.getRanges());\n        model.change((writer)=>{\n            writer.setSelection(listItem, 'end');\n            editor.execute('checkTodoList');\n            writer.setSelection(previousSelectionRanges);\n        });\n    }\n    /**\n\t * Observe when user enters or leaves todo list and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified todo list.\n\t *\n\t * @internal\n\t */ _initAriaAnnouncements() {\n        const { model, ui, t } = this.editor;\n        let lastFocusedCodeBlock = null;\n        if (!ui) {\n            return;\n        }\n        model.document.selection.on('change:range', ()=>{\n            const focusParent = model.document.selection.focus.parent;\n            const lastElementIsTodoList = isLegacyTodoListItemElement(lastFocusedCodeBlock);\n            const currentElementIsTodoList = isLegacyTodoListItemElement(focusParent);\n            if (lastElementIsTodoList && !currentElementIsTodoList) {\n                ui.ariaLiveAnnouncer.announce(t('Leaving a to-do list'));\n            } else if (!lastElementIsTodoList && currentElementIsTodoList) {\n                ui.ariaLiveAnnouncer.announce(t('Entering a to-do list'));\n            }\n            lastFocusedCodeBlock = focusParent;\n        });\n    }\n}\n/**\n * Handles the left/right (LTR/RTL content) arrow key and moves the selection at the end of the previous block element\n * if the selection is just after the checkbox element. In other words, it jumps over the checkbox element when\n * moving the selection to the left/right (LTR/RTL).\n *\n * @returns Callback for 'keydown' events.\n */ function jumpOverCheckmarkOnSideArrowKeyPress(model, locale) {\n    return (eventInfo, domEventData)=>{\n        const direction = getLocalizedArrowKeyCodeDirection(domEventData.keyCode, locale.contentLanguageDirection);\n        if (direction != 'left') {\n            return;\n        }\n        const schema = model.schema;\n        const selection = model.document.selection;\n        if (!selection.isCollapsed) {\n            return;\n        }\n        const position = selection.getFirstPosition();\n        const parent = position.parent;\n        if (parent.name === 'listItem' && parent.getAttribute('listType') == 'todo' && position.isAtStart) {\n            const newRange = schema.getNearestSelectionRange(model.createPositionBefore(parent), 'backward');\n            if (newRange) {\n                model.change((writer)=>writer.setSelection(newRange));\n            }\n            domEventData.preventDefault();\n            domEventData.stopPropagation();\n            eventInfo.stop();\n        }\n    };\n}\n/**\n * Returns true if the given element is a list item model element of a to-do list.\n */ function isLegacyTodoListItemElement(element) {\n    return !!element && element.is('element', 'listItem') && element.getAttribute('listType') === 'todo';\n}\n\n/**\n * The legacy to-do list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacytodolist/legacytodolistediting~LegacyTodoListEditing legacy to-do list\n * editing feature} and the {@link module:list/todolist/todolistui~TodoListUI to-do list UI feature}.\n */ class LegacyTodoList extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LegacyTodoListEditing,\n            TodoListUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LegacyTodoList';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nclass AdjacentListsSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'AdjacentListsSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.schema.register('listSeparator', {\n            allowWhere: '$block',\n            isBlock: true\n        });\n        editor.conversion.for('upcast')// Add a list separator element between similar list elements on upcast.\n        .add((dispatcher)=>{\n            dispatcher.on('element:ol', listSeparatorUpcastConverter());\n            dispatcher.on('element:ul', listSeparatorUpcastConverter());\n        })// View-to-model transformation.\n        .elementToElement({\n            model: 'listSeparator',\n            view: 'ck-list-separator'\n        });\n        // The list separator element should exist in the view, but should be invisible (hidden).\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: 'listSeparator',\n            view: {\n                name: 'div',\n                classes: [\n                    'ck-list-separator',\n                    'ck-hidden'\n                ]\n            }\n        });\n        // The list separator element should not exist in the output data.\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'listSeparator',\n            view: (modelElement, conversionApi)=>{\n                const viewElement = conversionApi.writer.createContainerElement('ck-list-separator');\n                conversionApi.writer.setCustomProperty('dataPipeline:transparentRendering', true, viewElement);\n                viewElement.getFillerOffset = ()=>null;\n                return viewElement;\n            }\n        });\n    }\n}\n/**\n * Inserts a list separator element between two lists of the same type (`ol` + `ol` or `ul` + `ul`).\n */ function listSeparatorUpcastConverter() {\n    return (evt, data, conversionApi)=>{\n        const element = data.viewItem;\n        const nextSibling = element.nextSibling;\n        if (!nextSibling) {\n            return;\n        }\n        if (element.name !== nextSibling.name) {\n            return;\n        }\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        const writer = conversionApi.writer;\n        const modelElement = writer.createElement('listSeparator');\n        // Try to insert a list separator element on the current model cursor position.\n        if (!conversionApi.safeInsert(modelElement, data.modelCursor)) {\n            return;\n        }\n        const parts = conversionApi.getSplitParts(modelElement);\n        // Extend the model range with the range of the created list separator element.\n        data.modelRange = writer.createRange(data.modelRange.start, writer.createPositionAfter(parts[parts.length - 1]));\n        conversionApi.updateConversionResult(modelElement, data);\n    };\n}\n\n/**\n * The document list feature.\n *\n * This is an obsolete plugin that exists for backward compatibility only.\n * Use the {@link module:list/list~List `List`} instead.\n *\n * @deprecated\n */ class DocumentList extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            List\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DocumentList';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    constructor(editor){\n        super(editor);\n        /**\n\t\t * The `DocumentList` plugin is obsolete. Use `List` instead.\n\t\t *\n\t\t * @error plugin-obsolete-documentlist\n\t\t */ logWarning('plugin-obsolete-documentlist', {\n            pluginName: 'DocumentList'\n        });\n    }\n}\n\n/**\n * The document list properties feature.\n *\n * This is an obsolete plugin that exists for backward compatibility only.\n * Use the {@link module:list/listproperties~ListProperties `ListProperties`} instead.\n *\n * @deprecated\n */ class DocumentListProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ListProperties\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DocumentListProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    constructor(editor){\n        super(editor);\n        /**\n\t\t * The `DocumentListProperties` plugin is obsolete. Use `ListProperties` instead.\n\t\t *\n\t\t * @error plugin-obsolete-documentlistproperties\n\t\t */ logWarning('plugin-obsolete-documentlistproperties', {\n            pluginName: 'DocumentListProperties'\n        });\n    }\n}\n\n/**\n * The to-do list feature.\n *\n * This is an obsolete plugin that exists for backward compatibility only.\n * Use the {@link module:list/todolist~TodoList `TodoList`} instead.\n *\n * @deprecated\n */ class TodoDocumentList extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TodoList\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TodoDocumentList';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    constructor(editor){\n        super(editor);\n        /**\n\t\t * The `TodoDocumentList` plugin is obsolete. Use `TodoList` instead.\n\t\t *\n\t\t * @error plugin-obsolete-tododocumentlist\n\t\t */ logWarning('plugin-obsolete-tododocumentlist', {\n            pluginName: 'TodoDocumentList'\n        });\n    }\n}\n\nexport { AdjacentListsSupport, DocumentList, DocumentListProperties, LegacyIndentCommand, LegacyList, LegacyListEditing, LegacyListProperties, LegacyListPropertiesEditing, LegacyListUtils, LegacyTodoList, LegacyTodoListEditing, List, ListCommand, ListEditing, ListIndentCommand, ListProperties, ListPropertiesEditing, ListPropertiesUI, ListPropertiesUtils, ListUI, ListUtils, TodoDocumentList, TodoList, TodoListEditing, TodoListUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils/listwalker\n */\n\nimport { first, toArray, type ArrayOrItem } from 'ckeditor5/src/utils.js';\nimport { isListItemBlock, type ListElement } from './model.js';\n\nimport type { Element, Node } from 'ckeditor5/src/engine.js';\n\n/**\n * Document list blocks iterator.\n */\nexport default class ListWalker {\n\t/**\n\t * The start list item block element.\n\t */\n\tprivate _startElement: Node;\n\n\t/**\n\t * The reference indent. Initialized by the indent of the start block.\n\t */\n\tprivate _referenceIndent: number;\n\n\t/**\n\t * The iterating direction.\n\t */\n\tprivate _isForward: boolean;\n\n\t/**\n\t * Whether start block should be included in the result (if it's matching other criteria).\n\t */\n\tprivate _includeSelf: boolean;\n\n\t/**\n\t * Additional attributes that must be the same for each block.\n\t */\n\tprivate _sameAttributes: Array<string>;\n\n\t/**\n\t * Whether blocks with the same indent level as the start block should be included in the result.\n\t */\n\tprivate _sameIndent: boolean;\n\n\t/**\n\t * Whether blocks with a lower indent level than the start block should be included in the result.\n\t */\n\tprivate _lowerIndent: boolean;\n\n\t/**\n\t * Whether blocks with a higher indent level than the start block should be included in the result.\n\t */\n\tprivate _higherIndent: boolean;\n\n\t/**\n\t * Creates a document list iterator.\n\t *\n\t * @param startElement The start list item block element.\n\t * @param options.direction The iterating direction.\n\t * @param options.includeSelf Whether start block should be included in the result (if it's matching other criteria).\n\t * @param options.sameAttributes Additional attributes that must be the same for each block.\n\t * @param options.sameIndent Whether blocks with the same indent level as the start block should be included\n\t * in the result.\n\t * @param options.lowerIndent Whether blocks with a lower indent level than the start block should be included\n\t * in the result.\n\t * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n\t * in the result.\n\t */\n\tconstructor(\n\t\tstartElement: Node,\n\t\toptions: ListWalkerOptions\n\t) {\n\t\tthis._startElement = startElement;\n\t\tthis._referenceIndent = startElement.getAttribute( 'listIndent' ) as number;\n\t\tthis._isForward = options.direction == 'forward';\n\t\tthis._includeSelf = !!options.includeSelf;\n\t\tthis._sameAttributes = toArray( options.sameAttributes || [] );\n\t\tthis._sameIndent = !!options.sameIndent;\n\t\tthis._lowerIndent = !!options.lowerIndent;\n\t\tthis._higherIndent = !!options.higherIndent;\n\t}\n\n\t/**\n\t * Performs only first step of iteration and returns the result.\n\t *\n\t * @param startElement The start list item block element.\n\t * @param options.direction The iterating direction.\n\t * @param options.includeSelf Whether start block should be included in the result (if it's matching other criteria).\n\t * @param options.sameAttributes Additional attributes that must be the same for each block.\n\t * @param options.sameIndent Whether blocks with the same indent level as the start block should be included\n\t * in the result.\n\t * @param options.lowerIndent Whether blocks with a lower indent level than the start block should be included\n\t * in the result.\n\t * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n\t * in the result.\n\t */\n\tpublic static first(\n\t\tstartElement: Node,\n\t\toptions: ListWalkerOptions\n\t): ListElement | null {\n\t\tconst walker = new this( startElement, options );\n\t\tconst iterator = walker[ Symbol.iterator ]();\n\n\t\treturn first( iterator );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t */\n\tpublic* [ Symbol.iterator ](): Iterator<ListElement> {\n\t\tconst nestedItems: Array<ListElement> = [];\n\n\t\tfor ( const { node } of new SiblingListBlocksIterator( this._getStartNode(), this._isForward ? 'forward' : 'backward' ) ) {\n\t\t\tconst indent = node.getAttribute( 'listIndent' );\n\n\t\t\t// Leaving a nested list.\n\t\t\tif ( indent < this._referenceIndent ) {\n\t\t\t\t// Abort searching blocks.\n\t\t\t\tif ( !this._lowerIndent ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// While searching for lower indents, update the reference indent to find another parent in the next step.\n\t\t\t\tthis._referenceIndent = indent;\n\t\t\t}\n\t\t\t// Entering a nested list.\n\t\t\telse if ( indent > this._referenceIndent ) {\n\t\t\t\t// Ignore nested blocks.\n\t\t\t\tif ( !this._higherIndent ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Collect nested blocks to verify if they are really nested, or it's a different item.\n\t\t\t\tif ( !this._isForward ) {\n\t\t\t\t\tnestedItems.push( node );\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Same indent level block.\n\t\t\telse {\n\t\t\t\t// Ignore same indent block.\n\t\t\t\tif ( !this._sameIndent ) {\n\t\t\t\t\t// While looking for nested blocks, stop iterating while encountering first same indent block.\n\t\t\t\t\tif ( this._higherIndent ) {\n\t\t\t\t\t\t// No more nested blocks so yield nested items.\n\t\t\t\t\t\tif ( nestedItems.length ) {\n\t\t\t\t\t\t\tyield* nestedItems;\n\t\t\t\t\t\t\tnestedItems.length = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Abort if item has any additionally specified attribute different.\n\t\t\t\tif ( this._sameAttributes.some( attr => node.getAttribute( attr ) !== this._startElement.getAttribute( attr ) ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// There is another block for the same list item so the nested items were in the same list item.\n\t\t\tif ( nestedItems.length ) {\n\t\t\t\tyield* nestedItems;\n\t\t\t\tnestedItems.length = 0;\n\t\t\t}\n\n\t\t\tyield node;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the model element to start iterating.\n\t */\n\tprivate _getStartNode() {\n\t\tif ( this._includeSelf ) {\n\t\t\treturn this._startElement;\n\t\t}\n\n\t\treturn this._isForward ?\n\t\t\tthis._startElement.nextSibling :\n\t\t\tthis._startElement.previousSibling;\n\t}\n}\n\n/**\n * Iterates sibling list blocks starting from the given node.\n */\nexport class SiblingListBlocksIterator implements IterableIterator<ListIteratorValue> {\n\tprivate _node: Node | null;\n\tprivate _isForward: boolean;\n\tprivate _previousNodesByIndent: Array<ListElement> = [];\n\tprivate _previous: ListElement | null = null;\n\tprivate _previousNodeIndent: number | null = null;\n\n\t/**\n\t * @param node The model node.\n\t * @param direction Iteration direction.\n\t */\n\tconstructor(\n\t\tnode: Node | null,\n\t\tdirection: 'forward' | 'backward' = 'forward'\n\t) {\n\t\tthis._node = node;\n\t\tthis._isForward = direction === 'forward';\n\t}\n\n\tpublic [ Symbol.iterator ](): IterableIterator<ListIteratorValue> {\n\t\treturn this;\n\t}\n\n\tpublic next(): IteratorResult<ListIteratorValue> {\n\t\tif ( !isListItemBlock( this._node ) ) {\n\t\t\treturn { done: true, value: undefined };\n\t\t}\n\n\t\tconst nodeIndent = this._node.getAttribute( 'listIndent' );\n\t\tlet previousNodeInList: ListElement | null = null;\n\n\t\tif ( this._previous ) {\n\t\t\tconst previousNodeIndent = this._previousNodeIndent!;\n\n\t\t\t// Let's find previous node for the same indent.\n\t\t\t// We're going to need that when we get back to previous indent.\n\t\t\tif ( nodeIndent > previousNodeIndent ) {\n\t\t\t\tthis._previousNodesByIndent[ previousNodeIndent ] = this._previous;\n\t\t\t}\n\t\t\t// Restore the one for given indent.\n\t\t\telse if ( nodeIndent < previousNodeIndent ) {\n\t\t\t\tpreviousNodeInList = this._previousNodesByIndent[ nodeIndent ] || null;\n\t\t\t\tthis._previousNodesByIndent.length = nodeIndent;\n\t\t\t}\n\t\t\t// Same indent.\n\t\t\telse {\n\t\t\t\tpreviousNodeInList = this._previous;\n\t\t\t}\n\t\t}\n\n\t\tconst value = {\n\t\t\tnode: this._node,\n\t\t\tprevious: this._previous,\n\t\t\tpreviousNodeInList\n\t\t};\n\n\t\tthis._previous = this._node as ListElement;\n\t\tthis._previousNodeIndent = nodeIndent;\n\t\tthis._node = this._isForward ? this._node.nextSibling : this._node.previousSibling;\n\n\t\treturn { value, done: false };\n\t}\n}\n\n/**\n * The iterable protocol over the list elements.\n *\n * @internal\n */\nexport class ListBlocksIterable {\n\tprivate _listHead: Element;\n\n\t/**\n\t * @param listHead The head element of a list.\n\t */\n\tconstructor( listHead: Element ) {\n\t\tthis._listHead = listHead;\n\t}\n\n\t/**\n\t * List blocks iterator.\n\t *\n\t * Iterates over all blocks of a list.\n\t */\n\tpublic [ Symbol.iterator ](): Iterator<ListIteratorValue> {\n\t\treturn new SiblingListBlocksIterator( this._listHead );\n\t}\n}\n\n/**\n * Object returned by `SiblingListBlocksIterator` when traversing a list.\n *\n * @internal\n */\nexport interface ListIteratorValue {\n\n\t/**\n\t * The current list node.\n\t */\n\tnode: ListElement;\n\n\t/**\n\t * The previous list node.\n\t */\n\tprevious: ListElement | null;\n\n\t/**\n\t * The previous list node at the same indent as current node.\n\t */\n\tpreviousNodeInList: ListElement | null;\n}\n\n/**\n * Document list blocks iterator options.\n */\nexport type ListWalkerOptions = {\n\tdirection?: 'forward' | 'backward';\n\tincludeSelf?: boolean;\n\tsameAttributes?: ArrayOrItem<string>;\n\tsameIndent?: boolean;\n\tlowerIndent?: boolean;\n\thigherIndent?: boolean;\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils/model\n */\n\nimport type {\n\tDocumentFragment,\n\tElement,\n\tModel,\n\tNode,\n\tWriter,\n\tItem,\n\tSchema\n} from 'ckeditor5/src/engine.js';\n\nimport { uid, toArray, type ArrayOrItem } from 'ckeditor5/src/utils.js';\n\nimport ListWalker, { type ListWalkerOptions, SiblingListBlocksIterator } from './listwalker.js';\nimport { type ListType } from '../listediting.js';\n\n/**\n * The list item ID generator.\n *\n * @internal\n */\nexport class ListItemUid {\n\t/**\n\t * Returns the next ID.\n\t *\n\t * @internal\n\t */\n\t/* istanbul ignore next: static function definition -- @preserve */\n\tpublic static next(): string {\n\t\treturn uid();\n\t}\n}\n\n/**\n * An {@link module:engine/model/element~Element} that is known to be a list element.\n *\n * @internal\n */\nexport interface ListElement extends Element {\n\tgetAttribute( key: 'listItemId' ): string;\n\tgetAttribute( key: 'listIndent' ): number;\n\tgetAttribute( key: 'listType' ): ListType;\n\tgetAttribute( key: string ): unknown;\n}\n\n/**\n * Returns true if the given model node is a list item block.\n *\n * @internal\n */\nexport function isListItemBlock( node: Item | DocumentFragment | null ): node is ListElement {\n\treturn !!node && node.is( 'element' ) && node.hasAttribute( 'listItemId' );\n}\n\n/**\n * Returns an array with all elements that represents the same list item.\n *\n * It means that values for `listIndent`, and `listItemId` for all items are equal.\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included\n * in the result.\n */\nexport function getAllListItemBlocks(\n\tlistItem: Node,\n\toptions: {\n\t\thigherIndent?: boolean;\n\t} = {}\n): Array<ListElement> {\n\treturn [\n\t\t...getListItemBlocks( listItem, { ...options, direction: 'backward' } ),\n\t\t...getListItemBlocks( listItem, { ...options, direction: 'forward' } )\n\t];\n}\n\n/**\n * Returns an array with elements that represents the same list item in the specified direction.\n *\n * It means that values for `listIndent` and `listItemId` for all items are equal.\n *\n * **Note**: For backward search the provided item is not included, but for forward search it is included in the result.\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options.direction Walking direction.\n * @param options.higherIndent Whether blocks with a higher indent level than the start block should be included in the result.\n */\nexport function getListItemBlocks(\n\tlistItem: Node,\n\toptions: {\n\t\tdirection?: 'forward' | 'backward';\n\t\thigherIndent?: boolean;\n\t} = {}\n): Array<ListElement> {\n\tconst isForward = options.direction == 'forward';\n\n\tconst items = Array.from( new ListWalker( listItem, {\n\t\t...options,\n\t\tincludeSelf: isForward,\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listItemId'\n\t} ) );\n\n\treturn isForward ? items : items.reverse();\n}\n\n/**\n * Returns a list items nested inside the given list item.\n *\n * @internal\n */\nexport function getNestedListBlocks( listItem: Element ): Array<ListElement> {\n\treturn Array.from( new ListWalker( listItem, {\n\t\tdirection: 'forward',\n\t\thigherIndent: true\n\t} ) );\n}\n\n/**\n * Returns array of all blocks/items of the same list as given block (same indent, same type and properties).\n *\n * @internal\n * @param listItem Starting list item element.\n * @param options Additional list walker options to modify the range of returned list items.\n */\nexport function getListItems( listItem: Element, options?: ListWalkerOptions ): Array<ListElement> {\n\tconst backwardBlocks = new ListWalker( listItem, {\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listType',\n\t\t...options\n\t} );\n\n\tconst forwardBlocks = new ListWalker( listItem, {\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listType',\n\t\tincludeSelf: true,\n\t\tdirection: 'forward',\n\t\t...options\n\t} );\n\n\treturn [\n\t\t...Array.from( backwardBlocks ).reverse(),\n\t\t...forwardBlocks\n\t];\n}\n\n/**\n * Check if the given block is the first in the list item.\n *\n * @internal\n * @param listBlock The list block element.\n */\nexport function isFirstBlockOfListItem( listBlock: Node ): boolean {\n\tconst previousSibling = ListWalker.first( listBlock, {\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listItemId'\n\t} );\n\n\tif ( !previousSibling ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Check if the given block is the last in the list item.\n *\n * @internal\n */\nexport function isLastBlockOfListItem( listBlock: Element ): boolean {\n\tconst nextSibling = ListWalker.first( listBlock, {\n\t\tdirection: 'forward',\n\t\tsameIndent: true,\n\t\tsameAttributes: 'listItemId'\n\t} );\n\n\tif ( !nextSibling ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Expands the given list of selected blocks to include the leading and tailing blocks of partially selected list items.\n *\n * @internal\n * @param blocks The list of selected blocks.\n * @param options.withNested Whether should include nested list items.\n */\nexport function expandListBlocksToCompleteItems(\n\tblocks: ArrayOrItem<Element>,\n\toptions: { withNested?: boolean } = {}\n): Array<ListElement> {\n\tblocks = toArray( blocks );\n\n\tconst higherIndent = options.withNested !== false;\n\tconst allBlocks = new Set<ListElement>();\n\n\tfor ( const block of blocks ) {\n\t\tfor ( const itemBlock of getAllListItemBlocks( block, { higherIndent } ) ) {\n\t\t\tallBlocks.add( itemBlock );\n\t\t}\n\t}\n\n\treturn sortBlocks( allBlocks );\n}\n\n/**\n * Expands the given list of selected blocks to include all the items of the lists they're in.\n *\n * @internal\n * @param blocks The list of selected blocks.\n */\nexport function expandListBlocksToCompleteList( blocks: ArrayOrItem<Element> ): Array<ListElement> {\n\tblocks = toArray( blocks );\n\n\tconst allBlocks = new Set<ListElement>();\n\n\tfor ( const block of blocks ) {\n\t\tfor ( const itemBlock of getListItems( block ) ) {\n\t\t\tallBlocks.add( itemBlock );\n\t\t}\n\t}\n\n\treturn sortBlocks( allBlocks );\n}\n\n/**\n * Splits the list item just before the provided list block.\n *\n * @internal\n * @param listBlock The list block element.\n * @param writer The model writer.\n * @returns The array of updated blocks.\n */\nexport function splitListItemBefore(\n\tlistBlock: Element,\n\twriter: Writer\n): Array<ListElement> {\n\tconst blocks = getListItemBlocks( listBlock, { direction: 'forward' } );\n\tconst id = ListItemUid.next();\n\n\tfor ( const block of blocks ) {\n\t\twriter.setAttribute( 'listItemId', id, block );\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Merges the list item with the parent list item.\n *\n * @internal\n * @param listBlock The list block element.\n * @param parentBlock The list block element to merge with.\n * @param writer The model writer.\n * @returns The array of updated blocks.\n */\nexport function mergeListItemBefore(\n\tlistBlock: Node,\n\tparentBlock: Element,\n\twriter: Writer\n): Array<ListElement> {\n\tconst attributes: Record<string, unknown> = {};\n\n\tfor ( const [ key, value ] of parentBlock.getAttributes() ) {\n\t\tif ( key.startsWith( 'list' ) ) {\n\t\t\tattributes[ key ] = value;\n\t\t}\n\t}\n\n\tconst blocks = getListItemBlocks( listBlock, { direction: 'forward' } );\n\n\tfor ( const block of blocks ) {\n\t\twriter.setAttributes( attributes, block );\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Increases indentation of given list blocks.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n * @param options.expand Whether should expand the list of blocks to include complete list items.\n * @param options.indentBy The number of levels the indentation should change (could be negative).\n */\nexport function indentBlocks(\n\tblocks: ArrayOrItem<ListElement>,\n\twriter: Writer,\n\t{ expand, indentBy = 1 }: { expand?: boolean; indentBy?: number } = {}\n): Array<ListElement> {\n\tblocks = toArray( blocks );\n\n\t// Expand the selected blocks to contain the whole list items.\n\tconst allBlocks = expand ? expandListBlocksToCompleteItems( blocks ) : blocks;\n\n\tfor ( const block of allBlocks ) {\n\t\tconst blockIndent = block.getAttribute( 'listIndent' ) + indentBy;\n\n\t\tif ( blockIndent < 0 ) {\n\t\t\tremoveListAttributes( block, writer );\n\t\t} else {\n\t\t\twriter.setAttribute( 'listIndent', blockIndent, block );\n\t\t}\n\t}\n\n\treturn allBlocks;\n}\n\n/**\n * Decreases indentation of given list of blocks. If the indentation of some blocks matches the indentation\n * of surrounding blocks, they get merged together.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n */\nexport function outdentBlocksWithMerge(\n\tblocks: ArrayOrItem<ListElement>,\n\twriter: Writer\n): Array<ListElement> {\n\tblocks = toArray( blocks );\n\n\t// Expand the selected blocks to contain the whole list items.\n\tconst allBlocks = expandListBlocksToCompleteItems( blocks );\n\tconst visited = new Set<ListElement>();\n\n\tconst referenceIndent = Math.min( ...allBlocks.map( block => block.getAttribute( 'listIndent' ) ) );\n\tconst parentBlocks = new Map();\n\n\t// Collect parent blocks before the list structure gets altered.\n\tfor ( const block of allBlocks ) {\n\t\tparentBlocks.set( block, ListWalker.first( block, { lowerIndent: true } ) );\n\t}\n\n\tfor ( const block of allBlocks ) {\n\t\tif ( visited.has( block ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisited.add( block );\n\n\t\tconst blockIndent = block.getAttribute( 'listIndent' ) - 1;\n\n\t\tif ( blockIndent < 0 ) {\n\t\t\tremoveListAttributes( block, writer );\n\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Merge with parent list item while outdenting and indent matches reference indent.\n\t\tif ( block.getAttribute( 'listIndent' ) == referenceIndent ) {\n\t\t\tconst mergedBlocks = mergeListItemIfNotLast( block, parentBlocks.get( block ), writer );\n\n\t\t\t// All list item blocks are updated while merging so add those to visited set.\n\t\t\tfor ( const mergedBlock of mergedBlocks ) {\n\t\t\t\tvisited.add( mergedBlock );\n\t\t\t}\n\n\t\t\t// The indent level was updated while merging so continue to next block.\n\t\t\tif ( mergedBlocks.length ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\twriter.setAttribute( 'listIndent', blockIndent, block );\n\t}\n\n\treturn sortBlocks( visited );\n}\n\n/**\n * Removes all list attributes from the given blocks.\n *\n * @internal\n * @param blocks The block or iterable of blocks.\n * @param writer The model writer.\n * @returns Array of altered blocks.\n */\nexport function removeListAttributes(\n\tblocks: ArrayOrItem<Element>,\n\twriter: Writer\n): Array<Element> {\n\tblocks = toArray( blocks );\n\n\t// Convert simple list items to plain paragraphs.\n\tfor ( const block of blocks ) {\n\t\tif ( block.is( 'element', 'listItem' ) ) {\n\t\t\twriter.rename( block, 'paragraph' );\n\t\t}\n\t}\n\n\t// Remove list attributes.\n\tfor ( const block of blocks ) {\n\t\tfor ( const attributeKey of block.getAttributeKeys() ) {\n\t\t\tif ( attributeKey.startsWith( 'list' ) ) {\n\t\t\t\twriter.removeAttribute( attributeKey, block );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Checks whether the given blocks are related to a single list item.\n *\n * @internal\n * @param blocks The list block elements.\n */\nexport function isSingleListItem( blocks: Array<Node> ): boolean {\n\tif ( !blocks.length ) {\n\t\treturn false;\n\t}\n\n\tconst firstItemId = blocks[ 0 ].getAttribute( 'listItemId' );\n\n\tif ( !firstItemId ) {\n\t\treturn false;\n\t}\n\n\treturn !blocks.some( item => item.getAttribute( 'listItemId' ) != firstItemId );\n}\n\n/**\n * Modifies the indents of list blocks following the given list block so the indentation is valid after\n * the given block is no longer a list item.\n *\n * @internal\n * @param lastBlock The last list block that has become a non-list element.\n * @param writer The model writer.\n * @returns Array of altered blocks.\n */\nexport function outdentFollowingItems( lastBlock: Element, writer: Writer ): Array<ListElement> {\n\tconst changedBlocks = [];\n\n\t// Start from the model item that is just after the last turned-off item.\n\tlet currentIndent = Number.POSITIVE_INFINITY;\n\n\t// Correct indent of all items after the last turned off item.\n\t// Rules that should be followed:\n\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n\t//    should not end up as a child of any of list items that they were not children of before.\n\t// 3. All other items should have their indent changed relatively to it's parent.\n\t//\n\t// For example:\n\t// 1  * --------\n\t// 2     * --------\n\t// 3        * --------\t\t\t<-- this is turned off.\n\t// 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n\t// 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n\t// 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n\t// 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n\t// 8     * --------\t\t\t\t<-- this has to become indent = 0.\n\t// 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n\t// 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n\t// 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n\t// 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n\t// 13    * --------\n\t// 14       * --------\n\t//\n\t// After turning off 3 the list becomes:\n\t//\n\t// 1  * --------\n\t// 2     * --------\n\t//\n\t// 3  --------\n\t//\n\t// 4  * --------\n\t// 5     * --------\n\t// 6  * --------\n\t// 7     * --------\n\t// 8  * --------\n\t// 9     * --------\n\t// 10       * --------\n\t// 11       * --------\n\t// 12 * --------\n\t// 13    * --------\n\t// 14       * --------\n\t//\n\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\n\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\n\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n\t// less conversion (faster).\n\tfor ( const { node } of new SiblingListBlocksIterator( lastBlock.nextSibling ) ) {\n\t\t// Check each next list item, as long as its indent is higher than 0.\n\t\tconst indent = node.getAttribute( 'listIndent' );\n\n\t\t// If the indent is 0 we are not going to change anything anyway.\n\t\tif ( indent == 0 ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// We check if that's item indent is lower than current relative indent.\n\t\tif ( indent < currentIndent ) {\n\t\t\t// If it is, current relative indent becomes that indent.\n\t\t\tcurrentIndent = indent;\n\t\t}\n\n\t\t// Fix indent relatively to current relative indent.\n\t\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\t\tconst newIndent = indent - currentIndent;\n\n\t\twriter.setAttribute( 'listIndent', newIndent, node );\n\t\tchangedBlocks.push( node );\n\t}\n\n\treturn changedBlocks;\n}\n\n/**\n * Returns the array of given blocks sorted by model indexes (document order).\n *\n * @internal\n */\nexport function sortBlocks<T extends Element>( blocks: Iterable<T> ): Array<T> {\n\treturn Array.from( blocks )\n\t\t.filter( block => block.root.rootName !== '$graveyard' )\n\t\t.sort( ( a, b ) => a.index! - b.index! );\n}\n\n/**\n * Returns a selected block object. If a selected object is inline or when there is no selected\n * object, `null` is returned.\n *\n * @internal\n * @param model The instance of editor model.\n * @returns Selected block object or `null`.\n */\nexport function getSelectedBlockObject( model: Model ): Element | null {\n\tconst selectedElement = model.document.selection.getSelectedElement();\n\n\tif ( !selectedElement ) {\n\t\treturn null;\n\t}\n\n\tif ( model.schema.isObject( selectedElement ) && model.schema.isBlock( selectedElement ) ) {\n\t\treturn selectedElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks whether the given block can be replaced by a listItem.\n *\n * Note that this is possible only when multiBlock = false option is set in feature config.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */\nexport function canBecomeSimpleListItem( block: Element, schema: Schema ): boolean {\n\treturn schema.checkChild( block.parent as Element, 'listItem' ) && schema.checkChild( block, '$text' ) && !schema.isObject( block );\n}\n\n/**\n * Returns true if listType is of type `numbered` or `customNumbered`.\n */\nexport function isNumberedListType( listType: ListType ): boolean {\n\treturn listType == 'numbered' || listType == 'customNumbered';\n}\n\n/**\n * Merges a given block to the given parent block if parent is a list item and there is no more blocks in the same item.\n */\nfunction mergeListItemIfNotLast(\n\tblock: ListElement,\n\tparentBlock: ListElement,\n\twriter: Writer\n) {\n\tconst parentItemBlocks = getListItemBlocks( parentBlock, { direction: 'forward' } );\n\n\t// Merge with parent only if outdented item wasn't the last one in its parent.\n\t// Merge:\n\t// * a\t\t\t->\t\t* a\n\t//   * [b]\t\t->\t\t  b\n\t//   c\t\t\t->\t\t  c\n\t// Don't merge:\n\t// * a\t\t\t->\t\t* a\n\t//   * [b]\t\t-> \t\t* b\n\t// * c\t\t\t->\t\t* c\n\tif ( parentItemBlocks.pop()!.index! > block.index! ) {\n\t\treturn mergeListItemBefore( block, parentBlock, writer );\n\t}\n\n\treturn [];\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listindentcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { DocumentSelection, Element } from 'ckeditor5/src/engine.js';\n\nimport {\n\texpandListBlocksToCompleteItems,\n\tindentBlocks,\n\tisFirstBlockOfListItem,\n\tisListItemBlock,\n\tisSingleListItem,\n\toutdentBlocksWithMerge,\n\tsortBlocks,\n\tsplitListItemBefore,\n\ttype ListElement\n} from './utils/model.js';\nimport ListWalker from './utils/listwalker.js';\n\n/**\n * The document list indent command. It is used by the {@link module:list/list~List list feature}.\n */\nexport default class ListIndentCommand extends Command {\n\t/**\n\t * Determines by how much the command will change the list item's indent attribute.\n\t */\n\tprivate readonly _direction: 'forward' | 'backward';\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */\n\tconstructor( editor: Editor, indentDirection: 'forward' | 'backward' ) {\n\t\tsuper( editor );\n\n\t\tthis._direction = indentDirection;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst blocks = getSelectedListBlocks( model.document.selection );\n\n\t\tmodel.change( writer => {\n\t\t\tconst changedBlocks = [];\n\n\t\t\t// Handle selection contained in the single list item and starting in the following blocks.\n\t\t\tif ( isSingleListItem( blocks ) && !isFirstBlockOfListItem( blocks[ 0 ] ) ) {\n\t\t\t\t// Allow increasing indent of following list item blocks.\n\t\t\t\tif ( this._direction == 'forward' ) {\n\t\t\t\t\tchangedBlocks.push( ...indentBlocks( blocks, writer ) );\n\t\t\t\t}\n\n\t\t\t\t// For indent make sure that indented blocks have a new ID.\n\t\t\t\t// For outdent just split blocks from the list item (give them a new IDs).\n\t\t\t\tchangedBlocks.push( ...splitListItemBefore( blocks[ 0 ], writer ) );\n\t\t\t}\n\t\t\t// More than a single list item is selected, or the first block of list item is selected.\n\t\t\telse {\n\t\t\t\t// Now just update the attributes of blocks.\n\t\t\t\tif ( this._direction == 'forward' ) {\n\t\t\t\t\tchangedBlocks.push( ...indentBlocks( blocks, writer, { expand: true } ) );\n\t\t\t\t} else {\n\t\t\t\t\tchangedBlocks.push( ...outdentBlocksWithMerge( blocks, writer ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Align the list item type to match the previous list item (from the same list).\n\t\t\tfor ( const block of changedBlocks ) {\n\t\t\t\t// This block become a plain block (for example a paragraph).\n\t\t\t\tif ( !block.hasAttribute( 'listType' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst previousItemBlock = ListWalker.first( block, { sameIndent: true } );\n\n\t\t\t\tif ( previousItemBlock ) {\n\t\t\t\t\twriter.setAttribute( 'listType', previousItemBlock.getAttribute( 'listType' ), block );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */\n\tprivate _fireAfterExecute( changedBlocks: Array<Element> ) {\n\t\tthis.fire<ListIndentCommandAfterExecuteEvent>( 'afterExecute', sortBlocks( new Set( changedBlocks ) ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tlet blocks = getSelectedListBlocks( this.editor.model.document.selection );\n\t\tlet firstBlock = blocks[ 0 ];\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\tif ( this._direction == 'backward' ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// A single block of a list item is selected, so it could be indented as a sublist.\n\t\tif ( isSingleListItem( blocks ) && !isFirstBlockOfListItem( blocks[ 0 ] ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tblocks = expandListBlocksToCompleteItems( blocks );\n\t\tfirstBlock = blocks[ 0 ];\n\n\t\t// Check if there is any list item before selected items that could become a parent of selected items.\n\t\tconst siblingItem = ListWalker.first( firstBlock, { sameIndent: true } );\n\n\t\tif ( !siblingItem ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( siblingItem.getAttribute( 'listType' ) == firstBlock.getAttribute( 'listType' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n * Returns an array of selected blocks truncated to the first non list block element.\n */\nfunction getSelectedListBlocks( selection: DocumentSelection ) {\n\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\tconst firstNonListBlockIndex = blocks.findIndex( block => !isListItemBlock( block ) );\n\n\tif ( firstNonListBlockIndex != -1 ) {\n\t\tblocks.length = firstNonListBlockIndex;\n\t}\n\n\treturn blocks as Array<ListElement>;\n}\n\n/**\n * Event fired by the {@link ~ListIndentCommand#execute} method.\n *\n * It allows to execute an action after executing the {@link module:list/list/listcommand~ListCommand#execute}\n * method, for example adjusting attributes of changed list items.\n *\n * @internal\n * @eventName ~ListIndentCommand#afterExecute\n */\nexport type ListIndentCommandAfterExecuteEvent = {\n\tname: 'afterExecute';\n\targs: [ changedBlocks: Array<Element> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listcommand\n */\n\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport {\n\tsplitListItemBefore,\n\texpandListBlocksToCompleteItems,\n\tgetListItemBlocks,\n\tgetListItems,\n\tremoveListAttributes,\n\toutdentFollowingItems,\n\tListItemUid,\n\tsortBlocks,\n\tgetSelectedBlockObject,\n\tisListItemBlock,\n\tcanBecomeSimpleListItem\n} from './utils/model.js';\nimport { type ListType } from './listediting.js';\nimport type { ListWalkerOptions } from './utils/listwalker.js';\n\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n */\nexport default class ListCommand extends Command {\n\t/**\n\t * The type of the list created by the command.\n\t */\n\tpublic readonly type: ListType;\n\n\t/**\n\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n\t *\n\t * @observable\n\t * @readonly\n\t */\n\tpublic declare value: boolean;\n\n\t/**\n\t * List Walker options that change the range of the list items to be changed when the selection is collapsed within a list item.\n\t *\n\t * In a multi-level list, when the selection is collapsed within a list item, instead of changing only the list items of the same list\n\t * type and current indent level, the entire list structure is changed (all list items at all indent levels of any list type).\n\t */\n\tprivate readonly _listWalkerOptions?: ListWalkerOptions;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param type List type that will be handled by this command.\n\t */\n\tconstructor( editor: Editor, type: ListType, options: { multiLevel?: boolean } = {} ) {\n\t\tsuper( editor );\n\n\t\tthis.type = type;\n\n\t\tthis._listWalkerOptions = options.multiLevel ? {\n\t\t\thigherIndent: true,\n\t\t\tlowerIndent: true,\n\t\t\tsameAttributes: []\n\t\t} :\tundefined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the list command.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the\n\t * selected items and potentially the neighbor elements to the proper list items. If set to `false` it will convert selected elements\n\t * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.\n\t * @param options.additionalAttributes Additional attributes that are set for list items when the command is executed.\n\t */\n\tpublic override execute( options: { forceValue?: boolean; additionalAttributes?: Record<string, unknown> } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst selectedBlockObject = getSelectedBlockObject( model );\n\n\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => model.schema.checkAttribute( block, 'listType' ) || canBecomeSimpleListItem( block, model.schema ) );\n\n\t\t// Whether we are turning off some items.\n\t\tconst turnOff = options.forceValue !== undefined ? !options.forceValue : this.value;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( turnOff ) {\n\t\t\t\tconst lastBlock = blocks[ blocks.length - 1 ];\n\n\t\t\t\t// Split the first block from the list item.\n\t\t\t\tconst itemBlocks = getListItemBlocks( lastBlock, { direction: 'forward' } );\n\t\t\t\tconst changedBlocks = [];\n\n\t\t\t\tif ( itemBlocks.length > 1 ) {\n\t\t\t\t\tchangedBlocks.push( ...splitListItemBefore( itemBlocks[ 1 ], writer ) );\n\t\t\t\t}\n\n\t\t\t\t// Strip list attributes.\n\t\t\t\tchangedBlocks.push( ...removeListAttributes( blocks, writer ) );\n\n\t\t\t\t// Outdent items following the selected list item.\n\t\t\t\tchangedBlocks.push( ...outdentFollowingItems( lastBlock, writer ) );\n\n\t\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t\t}\n\t\t\t// Changing type of list items for a collapsed selection inside a list item.\n\t\t\telse if ( ( selectedBlockObject || document.selection.isCollapsed ) && isListItemBlock( blocks[ 0 ] ) ) {\n\t\t\t\tconst changedBlocks = getListItems( selectedBlockObject || blocks[ 0 ], this._listWalkerOptions );\n\n\t\t\t\tfor ( const block of changedBlocks ) {\n\t\t\t\t\twriter.setAttributes( {\n\t\t\t\t\t\t...options.additionalAttributes,\n\t\t\t\t\t\tlistType: this.type\n\t\t\t\t\t}, block );\n\t\t\t\t}\n\n\t\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t\t}\n\t\t\t// Turning on the list items for a non-collapsed selection.\n\t\t\telse {\n\t\t\t\tconst changedBlocks = [];\n\n\t\t\t\tfor ( const block of blocks ) {\n\t\t\t\t\t// Promote the given block to the list item.\n\t\t\t\t\tif ( !block.hasAttribute( 'listType' ) ) {\n\t\t\t\t\t\t// Rename block to a simple list item if this option is enabled.\n\t\t\t\t\t\tif ( !block.is( 'element', 'listItem' ) && canBecomeSimpleListItem( block, model.schema ) ) {\n\t\t\t\t\t\t\twriter.rename( block, 'listItem' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twriter.setAttributes( {\n\t\t\t\t\t\t\t...options.additionalAttributes,\n\t\t\t\t\t\t\tlistIndent: 0,\n\t\t\t\t\t\t\tlistItemId: ListItemUid.next(),\n\t\t\t\t\t\t\tlistType: this.type\n\t\t\t\t\t\t}, block );\n\n\t\t\t\t\t\tchangedBlocks.push( block );\n\t\t\t\t\t}\n\t\t\t\t\t// Change the type of list item.\n\t\t\t\t\telse {\n\t\t\t\t\t\tfor ( const node of expandListBlocksToCompleteItems( block, { withNested: false } ) ) {\n\t\t\t\t\t\t\tif ( node.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\t\t\t\t\twriter.setAttributes( {\n\t\t\t\t\t\t\t\t\t...options.additionalAttributes,\n\t\t\t\t\t\t\t\t\tlistType: this.type\n\t\t\t\t\t\t\t\t}, node );\n\n\t\t\t\t\t\t\t\tchangedBlocks.push( node );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */\n\tprivate _fireAfterExecute( changedBlocks: Array<Element> ) {\n\t\tthis.fire<ListCommandAfterExecuteEvent>( 'afterExecute', sortBlocks( new Set( changedBlocks ) ) );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue(): boolean {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\n\t\tif ( !blocks.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const block of blocks ) {\n\t\t\tif ( block.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tconst blocks = Array.from( selection.getSelectedBlocks() );\n\n\t\tif ( !blocks.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If command value is true it means that we are in list item, so the command should be enabled.\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor ( const block of blocks ) {\n\t\t\tif ( schema.checkAttribute( block, 'listType' ) || canBecomeSimpleListItem( block, schema ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/**\n * Event fired by the {@link ~ListCommand#execute} method.\n *\n * It allows to execute an action after executing the {@link ~ListCommand#execute} method,\n * for example adjusting attributes of changed list items.\n *\n * @internal\n * @eventName ~ListCommand#afterExecute\n */\nexport type ListCommandAfterExecuteEvent = {\n\tname: 'afterExecute';\n\targs: [ changedBlocks: Array<Element> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listmergecommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { DocumentSelection, Element, Node, Selection } from 'ckeditor5/src/engine.js';\n\nimport {\n\tgetNestedListBlocks,\n\tindentBlocks,\n\tsortBlocks,\n\tisFirstBlockOfListItem,\n\tmergeListItemBefore,\n\tisSingleListItem,\n\tgetSelectedBlockObject,\n\tisListItemBlock,\n\ttype ListElement\n} from './utils/model.js';\nimport ListWalker from './utils/listwalker.js';\n\n/**\n * The document list merge command. It is used by the {@link module:list/list~List list feature}.\n */\nexport default class ListMergeCommand extends Command {\n\t/**\n\t * Whether list item should be merged before or after the selected block.\n\t */\n\tprivate readonly _direction: 'forward' | 'backward';\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction Whether list item should be merged before or after the selected block.\n\t */\n\tconstructor( editor: Editor, direction: 'forward' | 'backward' ) {\n\t\tsuper( editor );\n\n\t\tthis._direction = direction;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Merges list blocks together (depending on the {@link #constructor}'s `direction` parameter).\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t * @param options Command options.\n\t * @param options.shouldMergeOnBlocksContentLevel When set `true`, merging will be performed together\n\t * with {@link module:engine/model/model~Model#deleteContent} to get rid of the inline content in the selection or take advantage\n\t * of the heuristics in `deleteContent()` that helps convert lists into paragraphs in certain cases.\n\t */\n\tpublic override execute(\n\t\t{ shouldMergeOnBlocksContentLevel = false }: { shouldMergeOnBlocksContentLevel?: boolean } = {}\n\t): void {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst changedBlocks: Array<Element> = [];\n\n\t\tmodel.change( writer => {\n\t\t\tconst { firstElement, lastElement } = this._getMergeSubjectElements( selection, shouldMergeOnBlocksContentLevel );\n\n\t\t\tconst firstIndent = firstElement.getAttribute( 'listIndent' ) || 0;\n\t\t\tconst lastIndent = lastElement.getAttribute( 'listIndent' );\n\t\t\tconst lastElementId = lastElement.getAttribute( 'listItemId' );\n\n\t\t\tif ( firstIndent != lastIndent ) {\n\t\t\t\tconst nestedLastElementBlocks = getNestedListBlocks( lastElement );\n\n\t\t\t\tchangedBlocks.push( ...indentBlocks( [ lastElement, ...nestedLastElementBlocks ], writer, {\n\t\t\t\t\tindentBy: firstIndent - lastIndent,\n\n\t\t\t\t\t// If outdenting, the entire sub-tree that follows must be included.\n\t\t\t\t\texpand: firstIndent < lastIndent\n\t\t\t\t} ) );\n\t\t\t}\n\n\t\t\tif ( shouldMergeOnBlocksContentLevel ) {\n\t\t\t\tlet sel: Selection | DocumentSelection = selection;\n\n\t\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\t\tsel = writer.createSelection( writer.createRange(\n\t\t\t\t\t\twriter.createPositionAt( firstElement, 'end' ),\n\t\t\t\t\t\twriter.createPositionAt( lastElement, 0 )\n\t\t\t\t\t) );\n\t\t\t\t}\n\n\t\t\t\t// Delete selected content. Replace entire content only for non-collapsed selection.\n\t\t\t\tmodel.deleteContent( sel, { doNotResetEntireContent: selection.isCollapsed } );\n\n\t\t\t\t// Get the last \"touched\" element after deleteContent call (can't use the lastElement because\n\t\t\t\t// it could get merged into the firstElement while deleting content).\n\t\t\t\tconst lastElementAfterDelete = sel.getLastPosition()!.parent;\n\n\t\t\t\t// Check if the element after it was in the same list item and adjust it if needed.\n\t\t\t\tconst nextSibling = lastElementAfterDelete.nextSibling;\n\n\t\t\t\tchangedBlocks.push( lastElementAfterDelete as Element );\n\n\t\t\t\tif ( nextSibling && nextSibling !== lastElement && nextSibling.getAttribute( 'listItemId' ) == lastElementId ) {\n\t\t\t\t\tchangedBlocks.push( ...mergeListItemBefore( nextSibling, lastElementAfterDelete, writer ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tchangedBlocks.push( ...mergeListItemBefore( lastElement, firstElement, writer ) );\n\t\t\t}\n\n\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */\n\tprivate _fireAfterExecute( changedBlocks: Array<Element> ) {\n\t\tthis.fire<ListMergeCommandAfterExecuteEvent>( 'afterExecute', sortBlocks( new Set( changedBlocks ) ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled(): boolean {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst selectedBlockObject = getSelectedBlockObject( model );\n\n\t\tif ( selection.isCollapsed || selectedBlockObject ) {\n\t\t\tconst positionParent = selectedBlockObject || selection.getFirstPosition()!.parent;\n\n\t\t\tif ( !isListItemBlock( positionParent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst siblingNode = this._direction == 'backward' ?\n\t\t\t\tpositionParent.previousSibling :\n\t\t\t\tpositionParent.nextSibling;\n\n\t\t\tif ( !siblingNode ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( isSingleListItem( [ positionParent, siblingNode ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tconst lastPosition = selection.getLastPosition()!;\n\t\t\tconst firstPosition = selection.getFirstPosition()!;\n\n\t\t\t// If deleting within a single block of a list item, there's no need to merge anything.\n\t\t\t// The default delete should be executed instead.\n\t\t\tif ( lastPosition.parent === firstPosition.parent ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( !isListItemBlock( lastPosition.parent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the boundary elements the merge should be executed for. These are not necessarily selection's first\n\t * and last position parents but sometimes sibling or even further blocks depending on the context.\n\t *\n\t * @param selection The selection the merge is executed for.\n\t * @param shouldMergeOnBlocksContentLevel When `true`, merge is performed together with\n\t * {@link module:engine/model/model~Model#deleteContent} to remove the inline content within the selection.\n\t */\n\tprivate _getMergeSubjectElements(\n\t\tselection: Selection | DocumentSelection,\n\t\tshouldMergeOnBlocksContentLevel: boolean\n\t) {\n\t\tconst model = this.editor.model;\n\t\tconst selectedBlockObject = getSelectedBlockObject( model );\n\t\tlet firstElement, lastElement;\n\n\t\tif ( selection.isCollapsed || selectedBlockObject ) {\n\t\t\tconst positionParent = selectedBlockObject || selection.getFirstPosition()!.parent as Node;\n\t\t\tconst isFirstBlock = isFirstBlockOfListItem( positionParent );\n\n\t\t\tif ( this._direction == 'backward' ) {\n\t\t\t\tlastElement = positionParent;\n\n\t\t\t\tif ( isFirstBlock && !shouldMergeOnBlocksContentLevel ) {\n\t\t\t\t\t// For the \"c\" as an anchorElement:\n\t\t\t\t\t//  * a\n\t\t\t\t\t//    * b\n\t\t\t\t\t//  * [c]  <-- this block should be merged with \"a\"\n\t\t\t\t\t// It should find \"a\" element to merge with:\n\t\t\t\t\t//  * a\n\t\t\t\t\t//    * b\n\t\t\t\t\t//    c\n\t\t\t\t\tfirstElement = ListWalker.first( positionParent, { sameIndent: true, lowerIndent: true } );\n\t\t\t\t} else {\n\t\t\t\t\tfirstElement = positionParent.previousSibling;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// In case of the forward merge there is no case as above, just merge with next sibling.\n\t\t\t\tfirstElement = positionParent;\n\t\t\t\tlastElement = positionParent.nextSibling;\n\t\t\t}\n\t\t} else {\n\t\t\tfirstElement = selection.getFirstPosition()!.parent;\n\t\t\tlastElement = selection.getLastPosition()!.parent;\n\t\t}\n\n\t\treturn {\n\t\t\tfirstElement: firstElement as ListElement,\n\t\t\tlastElement: lastElement as ListElement\n\t\t};\n\t}\n}\n\n/**\n * Event fired by the {@link ~ListMergeCommand#execute} method.\n *\n * It allows to execute an action after executing the {@link module:list/list/listcommand~ListCommand#execute}\n * method, for example adjusting attributes of changed list items.\n *\n * @internal\n * @eventName ~ListMergeCommand#afterExecute\n */\nexport type ListMergeCommandAfterExecuteEvent = {\n\tname: 'afterExecute';\n\targs: [ changedBlocks: Array<Element> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listsplitcommand\n */\n\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\n\nimport {\n\tisFirstBlockOfListItem,\n\tisListItemBlock,\n\tsortBlocks,\n\tsplitListItemBefore\n} from './utils/model.js';\n\n/**\n * The document list split command that splits the list item at the selection.\n *\n * It is used by the {@link module:list/list~List list feature}.\n */\nexport default class ListSplitCommand extends Command {\n\t/**\n\t * Whether list item should be split before or after the selected block.\n\t */\n\tprivate readonly _direction: 'before' | 'after';\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction Whether list item should be split before or after the selected block.\n\t */\n\tconstructor( editor: Editor, direction: 'before' | 'after' ) {\n\t\tsuper( editor );\n\n\t\tthis._direction = direction;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Splits the list item at the selection.\n\t *\n\t * @fires execute\n\t * @fires afterExecute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\n\t\teditor.model.change( writer => {\n\t\t\tconst changedBlocks = splitListItemBefore( this._getStartBlock(), writer );\n\n\t\t\tthis._fireAfterExecute( changedBlocks );\n\t\t} );\n\t}\n\n\t/**\n\t * Fires the `afterExecute` event.\n\t *\n\t * @param changedBlocks The changed list elements.\n\t */\n\tprivate _fireAfterExecute( changedBlocks: Array<Element> ) {\n\t\tthis.fire<ListSplitCommandAfterExecuteEvent>( 'afterExecute', sortBlocks( new Set( changedBlocks ) ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst block = this._getStartBlock();\n\n\t\treturn selection.isCollapsed &&\n\t\t\tisListItemBlock( block ) &&\n\t\t\t!isFirstBlockOfListItem( block );\n\t}\n\n\t/**\n\t * Returns the model element that is the main focus of the command (according to the current selection and command direction).\n\t */\n\tprivate _getStartBlock() {\n\t\tconst doc = this.editor.model.document;\n\t\tconst positionParent = doc.selection.getFirstPosition()!.parent;\n\n\t\treturn ( this._direction == 'before' ? positionParent : positionParent.nextSibling ) as Element;\n\t}\n}\n\n/**\n * Event fired by the {@link ~ListSplitCommand#execute} method.\n *\n * It allows to execute an action after executing the {@link module:list/list/listcommand~ListCommand#execute}\n * method, for example adjusting attributes of changed list items.\n *\n * @internal\n * @eventName ~ListSplitCommand#afterExecute\n */\nexport type ListSplitCommandAfterExecuteEvent = {\n\tname: 'afterExecute';\n\targs: [ changedBlocks: Array<Element> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listutils\n */\n\nimport type { Element, Node } from 'ckeditor5/src/engine.js';\nimport type { ArrayOrItem } from 'ckeditor5/src/utils.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\ttype ListElement,\n\texpandListBlocksToCompleteItems,\n\texpandListBlocksToCompleteList,\n\tisFirstBlockOfListItem,\n\tisListItemBlock,\n\tisNumberedListType\n} from './utils/model.js';\nimport type { ListType } from './listediting.js';\n\n/**\n * A set of helpers related to document lists.\n */\nexport default class ListUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListUtils' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Expands the given list of selected blocks to include all the items of the lists they're in.\n\t *\n\t * @param blocks The list of selected blocks.\n\t */\n\tpublic expandListBlocksToCompleteList( blocks: ArrayOrItem<Element> ): Array<Element> {\n\t\treturn expandListBlocksToCompleteList( blocks );\n\t}\n\n\t/**\n\t * Check if the given block is the first in the list item.\n\t *\n\t * @param listBlock The list block element.\n\t */\n\tpublic isFirstBlockOfListItem( listBlock: Element ): boolean {\n\t\treturn isFirstBlockOfListItem( listBlock );\n\t}\n\n\t/**\n\t * Returns true if the given model node is a list item block.\n\t *\n\t * @param node A model node.\n\t */\n\tpublic isListItemBlock( node: Node | null ): node is ListElement {\n\t\treturn isListItemBlock( node );\n\t}\n\n\t/**\n\t * Expands the given list of selected blocks to include the leading and tailing blocks of partially selected list items.\n\t *\n\t * @param blocks The list of selected blocks.\n\t * @param options.withNested Whether should include nested list items.\n\t */\n\tpublic expandListBlocksToCompleteItems( blocks: ArrayOrItem<Element>, options: { withNested?: boolean } = {} ): Array<Element> {\n\t\treturn expandListBlocksToCompleteItems( blocks, options );\n\t}\n\n\t/**\n\t * Returns true if listType is of type `numbered` or `customNumbered`.\n\t */\n\tpublic isNumberedListType( listType: ListType ): boolean {\n\t\treturn isNumberedListType( listType );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils/view\n */\n\nimport type { DowncastWriter, ViewAttributeElement, ViewDocumentFragment, ViewElement, ViewNode } from 'ckeditor5/src/engine.js';\nimport { type ListType } from '../listediting.js';\n\n/**\n * Checks if view element is a list type (ul or ol).\n *\n * @internal\n */\nexport function isListView( viewElement: ViewNode | ViewDocumentFragment ): viewElement is ViewElement & { name: 'ul' | 'ol' } {\n\treturn viewElement.is( 'element', 'ol' ) || viewElement.is( 'element', 'ul' );\n}\n\n/**\n * Checks if view element is a list item (li).\n *\n * @internal\n */\nexport function isListItemView( viewElement: ViewNode | ViewDocumentFragment ): viewElement is ViewElement & { name: 'li' } {\n\treturn viewElement.is( 'element', 'li' );\n}\n\n/**\n * Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n *\n * Also, fixes non HTML compliant lists indents:\n *\n * ```\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n *     |-> OL                                  |-> OL\n *         |-> OL                                  |\n *         |   |-> OL                              |\n *         |       |-> OL                          |\n *         |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n *         |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> OL                                      |\n *     |-> OL                                  |\n *          |-> OL                             |\n *              |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n * |-> OL                                          |-> OL\n *     |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n * ```\n *\n * @internal\n */\nexport function getIndent( listItem: ViewElement ): number {\n\tlet indent = 0;\n\tlet parent = listItem.parent;\n\n\twhile ( parent ) {\n\t\t// Each LI in the tree will result in an increased indent for HTML compliant lists.\n\t\tif ( isListItemView( parent ) ) {\n\t\t\tindent++;\n\t\t} else {\n\t\t\t// If however the list is nested in other list we should check previous sibling of any of the list elements...\n\t\t\tconst previousSibling = ( parent as ViewElement ).previousSibling;\n\n\t\t\t// ...because the we might need increase its indent:\n\t\t\t//\t\tbefore:                           fixed list:\n\t\t\t//\t\tOL                                OL\n\t\t\t//\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n\t\t\t//\t\t|-> OL                                |-> OL\n\t\t\t//\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n\t\t\tif ( previousSibling && isListItemView( previousSibling ) ) {\n\t\t\t\tindent++;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n\n\treturn indent;\n}\n\n/**\n * Creates a list attribute element (ol or ul).\n *\n * @internal\n */\nexport function createListElement(\n\twriter: DowncastWriter,\n\tindent: number,\n\ttype: ListType,\n\tid = getViewElementIdForListType( type, indent )\n): ViewAttributeElement {\n\t// Negative priorities so that restricted editing attribute won't wrap lists.\n\treturn writer.createAttributeElement( getViewElementNameForListType( type ), null, {\n\t\tpriority: 2 * indent / 100 - 100,\n\t\tid\n\t} );\n}\n\n/**\n * Creates a list item attribute element (li).\n *\n * @internal\n */\nexport function createListItemElement(\n\twriter: DowncastWriter,\n\tindent: number,\n\tid: string\n): ViewAttributeElement {\n\t// Negative priorities so that restricted editing attribute won't wrap list items.\n\treturn writer.createAttributeElement( 'li', null, {\n\t\tpriority: ( 2 * indent + 1 ) / 100 - 100,\n\t\tid\n\t} );\n}\n\n/**\n * Returns a view element name for the given list type.\n *\n * @internal\n */\nexport function getViewElementNameForListType( type?: ListType ): 'ol' | 'ul' {\n\treturn type == 'numbered' || type == 'customNumbered' ? 'ol' : 'ul';\n}\n\n/**\n * Returns a view element ID for the given list type and indent.\n *\n * @internal\n */\nexport function getViewElementIdForListType( type?: ListType, indent?: number ): string {\n\treturn `list-${ type }-${ indent }`;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils/postfixers\n */\n\nimport type { Element, Position, Writer } from 'ckeditor5/src/engine.js';\nimport { SiblingListBlocksIterator, type ListIteratorValue } from './listwalker.js';\nimport { getListItemBlocks, isListItemBlock, ListItemUid, type ListElement } from './model.js';\n\n/**\n * Based on the provided positions looks for the list head and stores it in the provided map.\n *\n * @internal\n * @param position The search starting position.\n * @param itemToListHead The map from list item element to the list head element.\n * @param visited A set of elements that were already visited.\n */\nexport function findAndAddListHeadToMap(\n\tposition: Position,\n\titemToListHead: Set<ListElement>,\n\tvisited: Set<Element>\n): void {\n\tconst previousNode = position.nodeBefore;\n\n\tif ( !isListItemBlock( previousNode ) ) {\n\t\tconst item = position.nodeAfter;\n\n\t\tif ( isListItemBlock( item ) ) {\n\t\t\titemToListHead.add( item );\n\t\t}\n\t} else {\n\t\tlet listHead = previousNode;\n\n\t\t// Previously, the loop below was defined like this:\n\t\t//\n\t\t// \t\tfor ( { node: listHead } of new SiblingListBlocksIterator( listHead, 'backward' ) )\n\t\t//\n\t\t// Unfortunately, such a destructuring is incorrectly transpiled by Babel and the loop never ends.\n\t\t// See: https://github.com/ckeditor/ckeditor5-react/issues/345.\n\t\tfor ( const { node } of new SiblingListBlocksIterator( listHead, 'backward' ) ) {\n\t\t\tlistHead = node;\n\n\t\t\tif ( visited.has( listHead ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvisited.add( listHead );\n\n\t\t\tif ( itemToListHead.has( previousNode ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\titemToListHead.add( listHead );\n\t}\n}\n\n/**\n * Scans the list starting from the given list head element and fixes items' indentation.\n *\n * @internal\n * @param listNodes The iterable of list nodes.\n * @param writer The model writer.\n * @returns Whether the model was modified.\n */\nexport function fixListIndents(\n\tlistNodes: Iterable<ListIteratorValue>,\n\twriter: Writer\n): boolean {\n\tlet maxIndent = 0; // Guards local sublist max indents that need fixing.\n\tlet prevIndent = -1; // Previous item indent.\n\tlet fixBy = null;\n\tlet applied = false;\n\n\tfor ( const { node } of listNodes ) {\n\t\tconst itemIndent = node.getAttribute( 'listIndent' );\n\n\t\tif ( itemIndent > maxIndent ) {\n\t\t\tlet newIndent;\n\n\t\t\tif ( fixBy === null ) {\n\t\t\t\tfixBy = itemIndent - maxIndent;\n\t\t\t\tnewIndent = maxIndent;\n\t\t\t} else {\n\t\t\t\tif ( fixBy > itemIndent ) {\n\t\t\t\t\tfixBy = itemIndent;\n\t\t\t\t}\n\n\t\t\t\tnewIndent = itemIndent - fixBy;\n\t\t\t}\n\n\t\t\tif ( newIndent > prevIndent + 1 ) {\n\t\t\t\tnewIndent = prevIndent + 1;\n\t\t\t}\n\n\t\t\twriter.setAttribute( 'listIndent', newIndent, node );\n\n\t\t\tapplied = true;\n\t\t\tprevIndent = newIndent;\n\t\t} else {\n\t\t\tfixBy = null;\n\t\t\tmaxIndent = itemIndent + 1;\n\t\t\tprevIndent = itemIndent;\n\t\t}\n\t}\n\n\treturn applied;\n}\n\n/**\n * Scans the list starting from the given list head element and fixes items' types.\n *\n * @internal\n * @param listNodes The iterable of list nodes.\n * @param seenIds The set of already known IDs.\n * @param writer The model writer.\n * @returns Whether the model was modified.\n */\nexport function fixListItemIds(\n\tlistNodes: Iterable<ListIteratorValue>,\n\tseenIds: Set<string>,\n\twriter: Writer\n): boolean {\n\tconst visited = new Set();\n\tlet applied = false;\n\n\tfor ( const { node } of listNodes ) {\n\t\tif ( visited.has( node ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet listType = node.getAttribute( 'listType' );\n\t\tlet listItemId = node.getAttribute( 'listItemId' );\n\n\t\t// Use a new ID if this one was spot earlier (even in other list).\n\t\tif ( seenIds.has( listItemId ) ) {\n\t\t\tlistItemId = ListItemUid.next();\n\t\t}\n\n\t\tseenIds.add( listItemId );\n\n\t\t// Make sure that all items in a simple list have unique IDs.\n\t\tif ( node.is( 'element', 'listItem' ) ) {\n\t\t\tif ( node.getAttribute( 'listItemId' ) != listItemId ) {\n\t\t\t\twriter.setAttribute( 'listItemId', listItemId, node );\n\n\t\t\t\tapplied = true;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor ( const block of getListItemBlocks( node, { direction: 'forward' } ) ) {\n\t\t\tvisited.add( block );\n\n\t\t\t// Use a new ID if a block of a bigger list item has different type.\n\t\t\tif ( block.getAttribute( 'listType' ) != listType ) {\n\t\t\t\tlistItemId = ListItemUid.next();\n\t\t\t\tlistType = block.getAttribute( 'listType' );\n\t\t\t}\n\n\t\t\tif ( block.getAttribute( 'listItemId' ) != listItemId ) {\n\t\t\t\twriter.setAttribute( 'listItemId', listItemId, block );\n\n\t\t\t\tapplied = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn applied;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/converters\n */\n\nimport {\n\ttype DowncastAttributeEvent,\n\ttype DowncastWriter,\n\ttype EditingController,\n\ttype Element,\n\ttype ElementCreatorFunction,\n\ttype Mapper,\n\ttype Model,\n\ttype ModelConsumable,\n\ttype Node,\n\ttype UpcastElementEvent,\n\ttype ViewDocumentFragment,\n\ttype ViewElement,\n\ttype ViewRange,\n\ttype DowncastRemoveEvent,\n\ttype EditingView,\n\ttype MapperModelToViewPositionEvent,\n\ttype ViewTreeWalker,\n\ttype Schema\n} from 'ckeditor5/src/engine.js';\n\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\n\nimport {\n\tgetAllListItemBlocks,\n\tgetListItemBlocks,\n\tisListItemBlock,\n\tisFirstBlockOfListItem,\n\tListItemUid,\n\ttype ListElement\n} from './utils/model.js';\n\nimport {\n\tcreateListElement,\n\tcreateListItemElement,\n\tgetIndent,\n\tisListView,\n\tisListItemView\n} from './utils/view.js';\n\nimport ListWalker, { SiblingListBlocksIterator } from './utils/listwalker.js';\nimport { findAndAddListHeadToMap } from './utils/postfixers.js';\n\nimport type {\n\tdefault as ListEditing,\n\tListEditingCheckAttributesEvent,\n\tListEditingCheckElementEvent,\n\tListItemAttributesMap,\n\tDowncastStrategy\n} from './listediting.js';\n\n/**\n * Returns the upcast converter for list items. It's supposed to work after the block converters (content inside list items) are converted.\n *\n * @internal\n */\nexport function listItemUpcastConverter(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, schema } = conversionApi;\n\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst items = Array.from( data.modelRange.getItems( { shallow: true } ) )\n\t\t\t.filter( ( item ): item is Element => schema.checkAttribute( item, 'listItemId' ) );\n\n\t\tif ( !items.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst listItemId = ListItemUid.next();\n\t\tconst listIndent = getIndent( data.viewItem );\n\t\tlet listType = data.viewItem.parent && data.viewItem.parent.is( 'element', 'ol' ) ? 'numbered' : 'bulleted';\n\n\t\t// Preserve list type if was already set (for example by to-do list feature).\n\t\tconst firstItemListType = items[ 0 ].getAttribute( 'listType' ) as string;\n\n\t\tif ( firstItemListType ) {\n\t\t\tlistType = firstItemListType;\n\t\t}\n\n\t\tconst attributes = {\n\t\t\tlistItemId,\n\t\t\tlistIndent,\n\t\t\tlistType\n\t\t};\n\n\t\tfor ( const item of items ) {\n\t\t\t// Set list attributes only on same level items, those nested deeper are already handled by the recursive conversion.\n\t\t\tif ( !item.hasAttribute( 'listItemId' ) ) {\n\t\t\t\twriter.setAttributes( attributes, item );\n\t\t\t}\n\t\t}\n\n\t\tif ( items.length > 1 ) {\n\t\t\t// Make sure that list item that contain only nested list will preserve paragraph for itself:\n\t\t\t//\t<ul>\n\t\t\t//\t\t<li>\n\t\t\t//\t\t\t<p></p>  <-- this one must be kept\n\t\t\t//\t\t\t<ul>\n\t\t\t//\t\t\t\t<li></li>\n\t\t\t//\t\t\t</ul>\n\t\t\t//\t\t</li>\n\t\t\t//\t</ul>\n\t\t\tif ( items[ 1 ].getAttribute( 'listItemId' ) != attributes.listItemId ) {\n\t\t\t\tconversionApi.keepEmptyElement( items[ 0 ] );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Returns a model document change:data event listener that triggers conversion of related items if needed.\n *\n * @internal\n * @param model The editor model.\n * @param editing The editing controller.\n * @param attributeNames The list of all model list attributes (including registered strategies).\n * @param listEditing The document list editing plugin.\n */\nexport function reconvertItemsOnDataChange(\n\tmodel: Model,\n\tediting: EditingController,\n\tattributeNames: Array<string>,\n\tlistEditing: ListEditing\n): () => void {\n\treturn () => {\n\t\tconst changes = model.document.differ.getChanges();\n\t\tconst itemsToRefresh = [];\n\t\tconst itemToListHead = new Set<ListElement>();\n\t\tconst changedItems = new Set<Node>();\n\t\tconst visited = new Set<Element>();\n\n\t\tfor ( const entry of changes ) {\n\t\t\tif ( entry.type == 'insert' && entry.name != '$text' ) {\n\t\t\t\tfindAndAddListHeadToMap( entry.position, itemToListHead, visited );\n\n\t\t\t\t// Insert of a non-list item.\n\t\t\t\tif ( !entry.attributes.has( 'listItemId' ) ) {\n\t\t\t\t\tfindAndAddListHeadToMap( entry.position.getShiftedBy( entry.length ), itemToListHead, visited );\n\t\t\t\t} else {\n\t\t\t\t\tchangedItems.add( entry.position.nodeAfter! );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Removed list item.\n\t\t\telse if ( entry.type == 'remove' && entry.attributes.has( 'listItemId' ) ) {\n\t\t\t\tfindAndAddListHeadToMap( entry.position, itemToListHead, visited );\n\t\t\t}\n\t\t\t// Changed list attribute.\n\t\t\telse if ( entry.type == 'attribute' ) {\n\t\t\t\tconst item = entry.range.start.nodeAfter!;\n\n\t\t\t\tif ( attributeNames.includes( entry.attributeKey ) ) {\n\t\t\t\t\tfindAndAddListHeadToMap( entry.range.start, itemToListHead, visited );\n\n\t\t\t\t\tif ( entry.attributeNewValue === null ) {\n\t\t\t\t\t\tfindAndAddListHeadToMap( entry.range.start.getShiftedBy( 1 ), itemToListHead, visited );\n\n\t\t\t\t\t\t// Check if paragraph should be converted from bogus to plain paragraph.\n\t\t\t\t\t\tif ( doesItemBlockRequiresRefresh( item as Element ) ) {\n\t\t\t\t\t\t\titemsToRefresh.push( item );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchangedItems.add( item );\n\t\t\t\t\t}\n\t\t\t\t} else if ( isListItemBlock( item ) ) {\n\t\t\t\t\t// Some other attribute was changed on the list item,\n\t\t\t\t\t// check if paragraph does not need to be converted to bogus or back.\n\t\t\t\t\tif ( doesItemBlockRequiresRefresh( item ) ) {\n\t\t\t\t\t\titemsToRefresh.push( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ( const listHead of itemToListHead.values() ) {\n\t\t\titemsToRefresh.push( ...collectListItemsToRefresh( listHead, changedItems ) );\n\t\t}\n\n\t\tfor ( const item of new Set( itemsToRefresh ) ) {\n\t\t\tediting.reconvertItem( item );\n\t\t}\n\t};\n\n\tfunction collectListItemsToRefresh( listHead: ListElement, changedItems: Set<Node> ) {\n\t\tconst itemsToRefresh = [];\n\t\tconst visited = new Set();\n\t\tconst stack: Array<ListItemAttributesMap> = [];\n\n\t\tfor ( const { node, previous } of new SiblingListBlocksIterator( listHead ) ) {\n\t\t\tif ( visited.has( node ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst itemIndent = node.getAttribute( 'listIndent' );\n\n\t\t\t// Current node is at the lower indent so trim the stack.\n\t\t\tif ( previous && itemIndent < previous.getAttribute( 'listIndent' ) ) {\n\t\t\t\tstack.length = itemIndent + 1;\n\t\t\t}\n\n\t\t\t// Update the stack for the current indent level.\n\t\t\tstack[ itemIndent ] = Object.fromEntries(\n\t\t\t\tArray.from( node.getAttributes() )\n\t\t\t\t\t.filter( ( [ key ] ) => attributeNames.includes( key ) )\n\t\t\t);\n\n\t\t\t// Find all blocks of the current node.\n\t\t\tconst blocks = getListItemBlocks( node, { direction: 'forward' } );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tvisited.add( block );\n\n\t\t\t\t// Check if bogus vs plain paragraph needs refresh.\n\t\t\t\tif ( doesItemBlockRequiresRefresh( block, blocks ) ) {\n\t\t\t\t\titemsToRefresh.push( block );\n\t\t\t\t}\n\t\t\t\t// Check if wrapping with UL, OL, LIs needs refresh.\n\t\t\t\telse if ( doesItemWrappingRequiresRefresh( block, stack, changedItems ) ) {\n\t\t\t\t\titemsToRefresh.push( block );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn itemsToRefresh;\n\t}\n\n\tfunction doesItemBlockRequiresRefresh( item: Element, blocks?: Array<Node> ) {\n\t\tconst viewElement = editing.mapper.toViewElement( item );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst needsRefresh = listEditing.fire<ListEditingCheckElementEvent>( 'checkElement', {\n\t\t\tmodelElement: item,\n\t\t\tviewElement\n\t\t} );\n\n\t\tif ( needsRefresh ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !item.is( 'element', 'paragraph' ) && !item.is( 'element', 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst useBogus = shouldUseBogusParagraph( item, attributeNames, blocks );\n\n\t\tif ( useBogus && viewElement.is( 'element', 'p' ) ) {\n\t\t\treturn true;\n\t\t} else if ( !useBogus && viewElement.is( 'element', 'span' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction doesItemWrappingRequiresRefresh(\n\t\titem: Element,\n\t\tstack: Array<ListItemAttributesMap>,\n\t\tchangedItems: Set<Node>\n\t) {\n\t\t// Items directly affected by some \"change\" don't need a refresh, they will be converted by their own changes.\n\t\tif ( changedItems.has( item ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewElement = editing.mapper.toViewElement( item )!;\n\t\tlet indent = stack.length - 1;\n\n\t\t// Traverse down the stack to the root to verify if all ULs, OLs, and LIs are as expected.\n\t\tfor (\n\t\t\tlet element = viewElement.parent!;\n\t\t\t!element.is( 'editableElement' );\n\t\t\telement = element.parent!\n\t\t) {\n\t\t\tconst isListItemElement = isListItemView( element );\n\t\t\tconst isListElement = isListView( element );\n\n\t\t\tif ( !isListElement && !isListItemElement ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst eventName = `checkAttributes:${ isListItemElement ? 'item' : 'list' }` as const;\n\t\t\tconst needsRefresh = listEditing.fire<ListEditingCheckAttributesEvent>( eventName, {\n\t\t\t\tviewElement: element as ViewElement,\n\t\t\t\tmodelAttributes: stack[ indent ]\n\t\t\t} );\n\n\t\t\tif ( needsRefresh ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( isListElement ) {\n\t\t\t\tindent--;\n\n\t\t\t\t// Don't need to iterate further if we already know that the item is wrapped appropriately.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n/**\n * Returns the list item downcast converter.\n *\n * @internal\n * @param attributeNames A list of attribute names that should be converted if they are set.\n * @param strategies The strategies.\n * @param model The model.\n */\nexport function listItemDowncastConverter(\n\tattributeNames: Array<string>,\n\tstrategies: Array<DowncastStrategy>,\n\tmodel: Model,\n\t{ dataPipeline }: { dataPipeline?: boolean } = {}\n): GetCallback<DowncastAttributeEvent<ListElement>> {\n\tconst consumer = createAttributesConsumer( attributeNames );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, mapper, consumable } = conversionApi;\n\n\t\tconst listItem = data.item;\n\n\t\tif ( !attributeNames.includes( data.attributeKey ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Test if attributes on the converted items are not consumed.\n\t\tif ( !consumer( listItem, consumable ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Use positions mapping instead of mapper.toViewElement( listItem ) to find outermost view element.\n\t\t// This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n\t\tconst viewElement = findMappedViewElement( listItem, mapper, model )!;\n\n\t\t// Remove custom item marker.\n\t\tremoveCustomMarkerElements( viewElement, writer, mapper );\n\n\t\t// Unwrap element from current list wrappers.\n\t\tunwrapListItemBlock( viewElement, writer );\n\n\t\t// Insert custom item marker.\n\t\tconst viewRange = insertCustomMarkerElements( listItem, viewElement, strategies, writer, { dataPipeline } );\n\n\t\t// Then wrap them with the new list wrappers (UL, OL, LI).\n\t\twrapListItemBlock( listItem, viewRange, strategies, writer );\n\t};\n}\n\n/**\n * The 'remove' downcast converter for custom markers.\n */\nexport function listItemDowncastRemoveConverter( schema: Schema ): GetCallback<DowncastRemoveEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, mapper } = conversionApi;\n\t\tconst elementName = evt.name.split( ':' )[ 1 ];\n\n\t\t// Do not remove marker if the deleted element is some inline object inside paragraph.\n\t\t// See https://github.com/cksource/ckeditor5-internal/issues/3680.\n\t\tif ( !schema.checkAttribute( elementName, 'listItemId' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find the view range start position by mapping the model position at which the remove happened.\n\t\tconst viewStart = mapper.toViewPosition( data.position );\n\n\t\tconst modelEnd = data.position.getShiftedBy( data.length );\n\t\tconst viewEnd = mapper.toViewPosition( modelEnd, { isPhantom: true } );\n\n\t\t// Trim the range to remove in case some UI elements are on the view range boundaries.\n\t\tconst viewRange = writer.createRange( viewStart, viewEnd ).getTrimmed();\n\n\t\t// Use positions mapping instead of mapper.toViewElement( listItem ) to find outermost view element.\n\t\t// This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n\t\tconst viewElement = viewRange.end.nodeBefore as ViewElement | null;\n\n\t\t/* istanbul ignore next -- @preserve */\n\t\tif ( !viewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove custom item marker.\n\t\tremoveCustomMarkerElements( viewElement, writer, mapper );\n\t};\n}\n\n/**\n * Returns the bogus paragraph view element creator. A bogus paragraph is used if a list item contains only a single block or nested list.\n *\n * @internal\n * @param attributeNames The list of all model list attributes (including registered strategies).\n */\nexport function bogusParagraphCreator(\n\tattributeNames: Array<string>,\n\t{ dataPipeline }: { dataPipeline?: boolean } = {}\n): ElementCreatorFunction {\n\treturn ( modelElement, { writer } ) => {\n\t\t// Convert only if a bogus paragraph should be used.\n\t\tif ( !shouldUseBogusParagraph( modelElement, attributeNames ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( !dataPipeline ) {\n\t\t\treturn writer.createContainerElement( 'span', { class: 'ck-list-bogus-paragraph' } );\n\t\t}\n\n\t\t// Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n\t\tconst viewElement = writer.createContainerElement( 'p' );\n\n\t\twriter.setCustomProperty( 'dataPipeline:transparentRendering', true, viewElement );\n\n\t\treturn viewElement;\n\t};\n}\n\n/**\n * Helper for mapping mode to view elements. It's using positions mapping instead of mapper.toViewElement( element )\n * to find outermost view element. This is for cases when mapping is using inner view element like in the code blocks (pre > code).\n *\n * @internal\n * @param element The model element.\n * @param mapper The mapper instance.\n * @param model The model.\n */\nexport function findMappedViewElement( element: Element, mapper: Mapper, model: Model ): ViewElement | null {\n\tconst modelRange = model.createRangeOn( element );\n\tconst viewRange = mapper.toViewRange( modelRange ).getTrimmed();\n\n\treturn viewRange.end.nodeBefore as ViewElement | null;\n}\n\n/**\n * The model to view custom position mapping for cases when marker is injected at the beginning of a block.\n */\nexport function createModelToViewPositionMapper(\n\tstrategies: Array<DowncastStrategy>,\n\tview: EditingView\n): GetCallback<MapperModelToViewPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tif ( data.modelPosition.offset > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst positionParent = data.modelPosition.parent;\n\n\t\tif ( !isListItemBlock( positionParent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !strategies.some( strategy => (\n\t\t\tstrategy.scope == 'itemMarker' &&\n\t\t\tstrategy.canInjectMarkerIntoElement &&\n\t\t\tstrategy.canInjectMarkerIntoElement( positionParent )\n\t\t) ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = data.mapper.toViewElement( positionParent )!;\n\t\tconst viewRange = view.createRangeIn( viewElement );\n\n\t\tconst viewWalker = viewRange.getWalker();\n\t\tlet positionAfterLastMarker = viewRange.start;\n\n\t\tfor ( const { item } of viewWalker ) {\n\t\t\t// Walk only over the non-mapped elements (UIElements, AttributeElements, $text, or any other element without mapping).\n\t\t\tif ( item.is( 'element' ) && data.mapper.toModelElement( item ) || item.is( '$textProxy' ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( item.is( 'element' ) && item.getCustomProperty( 'listItemMarker' ) ) {\n\t\t\t\tpositionAfterLastMarker = view.createPositionAfter( item );\n\n\t\t\t\t// Jump over the content of the marker (this is not needed for UIElement but required for other element types).\n\t\t\t\tviewWalker.skip( ( { previousPosition } ) => !previousPosition.isEqual( positionAfterLastMarker ) );\n\t\t\t}\n\t\t}\n\n\t\tdata.viewPosition = positionAfterLastMarker;\n\t};\n}\n\n/**\n * Removes a custom marker elements and item wrappers related to that marker.\n */\nfunction removeCustomMarkerElements( viewElement: ViewElement, viewWriter: DowncastWriter, mapper: Mapper ): void {\n\t// Remove item wrapper.\n\twhile ( viewElement.parent!.is( 'attributeElement' ) && viewElement.parent!.getCustomProperty( 'listItemWrapper' ) ) {\n\t\tviewWriter.unwrap( viewWriter.createRangeOn( viewElement ), viewElement.parent );\n\t}\n\n\t// Remove custom item markers.\n\tconst markersToRemove: Array<ViewElement> = [];\n\n\t// Markers before a block.\n\tcollectMarkersToRemove( viewWriter.createPositionBefore( viewElement ).getWalker( { direction: 'backward' } ) );\n\n\t// Markers inside a block.\n\tcollectMarkersToRemove( viewWriter.createRangeIn( viewElement ).getWalker() );\n\n\tfor ( const marker of markersToRemove ) {\n\t\tviewWriter.remove( marker );\n\t}\n\n\tfunction collectMarkersToRemove( viewWalker: ViewTreeWalker ) {\n\t\tfor ( const { item } of viewWalker ) {\n\t\t\t// Walk only over the non-mapped elements (UIElements, AttributeElements, $text, or any other element without mapping).\n\t\t\tif ( item.is( 'element' ) && mapper.toModelElement( item ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( item.is( 'element' ) && item.getCustomProperty( 'listItemMarker' ) ) {\n\t\t\t\tmarkersToRemove.push( item );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Inserts a custom marker elements and wraps first block of a list item if marker requires it.\n */\nfunction insertCustomMarkerElements(\n\tlistItem: Element,\n\tviewElement: ViewElement,\n\tstrategies: Array<DowncastStrategy>,\n\twriter: DowncastWriter,\n\t{ dataPipeline }: { dataPipeline?: boolean }\n): ViewRange {\n\tlet viewRange = writer.createRangeOn( viewElement );\n\n\t// Marker can be inserted only before the first block of a list item.\n\tif ( !isFirstBlockOfListItem( listItem ) ) {\n\t\treturn viewRange;\n\t}\n\n\tfor ( const strategy of strategies ) {\n\t\tif ( strategy.scope != 'itemMarker' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Create the custom marker element and inject it before the first block of the list item.\n\t\tconst markerElement = strategy.createElement( writer, listItem, { dataPipeline } );\n\n\t\tif ( !markerElement ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\twriter.setCustomProperty( 'listItemMarker', true, markerElement );\n\n\t\tif ( strategy.canInjectMarkerIntoElement && strategy.canInjectMarkerIntoElement( listItem ) ) {\n\t\t\twriter.insert( writer.createPositionAt( viewElement, 0 ), markerElement );\n\t\t} else {\n\t\t\twriter.insert( viewRange.start, markerElement );\n\n\t\t\tviewRange = writer.createRange(\n\t\t\t\twriter.createPositionBefore( markerElement ),\n\t\t\t\twriter.createPositionAfter( viewElement )\n\t\t\t);\n\t\t}\n\n\t\t// Wrap the marker and optionally the first block with an attribute element (label for to-do lists).\n\t\tif ( !strategy.createWrapperElement || !strategy.canWrapElement ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst wrapper = strategy.createWrapperElement( writer, listItem, { dataPipeline } );\n\n\t\twriter.setCustomProperty( 'listItemWrapper', true, wrapper );\n\n\t\t// The whole block can be wrapped...\n\t\tif ( strategy.canWrapElement( listItem ) ) {\n\t\t\tviewRange = writer.wrap( viewRange, wrapper );\n\t\t} else {\n\t\t\t// ... or only the marker element (if the block is downcasted to heading or block widget).\n\t\t\tviewRange = writer.wrap( writer.createRangeOn( markerElement ), wrapper );\n\n\t\t\tviewRange = writer.createRange(\n\t\t\t\tviewRange.start,\n\t\t\t\twriter.createPositionAfter( viewElement )\n\t\t\t);\n\t\t}\n\t}\n\n\treturn viewRange;\n}\n\n/**\n * Unwraps all ol, ul, and li attribute elements that are wrapping the provided view element.\n */\nfunction unwrapListItemBlock( viewElement: ViewElement, viewWriter: DowncastWriter ) {\n\tlet attributeElement: ViewElement | ViewDocumentFragment = viewElement.parent!;\n\n\twhile ( attributeElement.is( 'attributeElement' ) && [ 'ul', 'ol', 'li' ].includes( attributeElement.name ) ) {\n\t\tconst parentElement = attributeElement.parent;\n\n\t\tviewWriter.unwrap( viewWriter.createRangeOn( viewElement ), attributeElement );\n\n\t\tattributeElement = parentElement!;\n\t}\n}\n\n/**\n * Wraps the given list item with appropriate attribute elements for ul, ol, and li.\n */\nfunction wrapListItemBlock(\n\tlistItem: ListElement,\n\tviewRange: ViewRange,\n\tstrategies: Array<DowncastStrategy>,\n\twriter: DowncastWriter\n) {\n\tif ( !listItem.hasAttribute( 'listIndent' ) ) {\n\t\treturn;\n\t}\n\n\tconst listItemIndent = listItem.getAttribute( 'listIndent' );\n\tlet currentListItem: ListElement | null = listItem;\n\n\tfor ( let indent = listItemIndent; indent >= 0; indent-- ) {\n\t\tconst listItemViewElement = createListItemElement( writer, indent, currentListItem.getAttribute( 'listItemId' ) );\n\t\tconst listViewElement = createListElement( writer, indent, currentListItem.getAttribute( 'listType' ) );\n\n\t\tfor ( const strategy of strategies ) {\n\t\t\tif (\n\t\t\t\t( strategy.scope == 'list' || strategy.scope == 'item' ) &&\n\t\t\t\tcurrentListItem.hasAttribute( strategy.attributeName )\n\t\t\t) {\n\t\t\t\tstrategy.setAttributeOnDowncast(\n\t\t\t\t\twriter,\n\t\t\t\t\tcurrentListItem.getAttribute( strategy.attributeName ),\n\t\t\t\t\tstrategy.scope == 'list' ? listViewElement : listItemViewElement\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tviewRange = writer.wrap( viewRange, listItemViewElement );\n\t\tviewRange = writer.wrap( viewRange, listViewElement );\n\n\t\tif ( indent == 0 ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tcurrentListItem = ListWalker.first( currentListItem, { lowerIndent: true } );\n\n\t\t// There is no list item with lower indent, this means this is a document fragment containing\n\t\t// only a part of nested list (like copy to clipboard) so we don't need to try to wrap it further.\n\t\tif ( !currentListItem ) {\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n// Returns the function that is responsible for consuming attributes that are set on the model node.\nfunction createAttributesConsumer( attributeNames: Array<string> ) {\n\treturn ( node: Node, consumable: ModelConsumable ) => {\n\t\tconst events = [];\n\n\t\t// Collect all set attributes that are triggering conversion.\n\t\tfor ( const attributeName of attributeNames ) {\n\t\t\tif ( node.hasAttribute( attributeName ) ) {\n\t\t\t\tevents.push( `attribute:${ attributeName }` );\n\t\t\t}\n\t\t}\n\n\t\tif ( !events.every( event => consumable.test( node, event ) !== false ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tevents.forEach( event => consumable.consume( node, event ) );\n\n\t\treturn true;\n\t};\n}\n\n// Whether the given item should be rendered as a bogus paragraph.\nfunction shouldUseBogusParagraph(\n\titem: Node,\n\tattributeNames: Array<string>,\n\tblocks: Array<Node> = getAllListItemBlocks( item )\n) {\n\tif ( !isListItemBlock( item ) ) {\n\t\treturn false;\n\t}\n\n\tfor ( const attributeKey of item.getAttributeKeys() ) {\n\t\t// Ignore selection attributes stored on block elements.\n\t\tif ( attributeKey.startsWith( 'selection:' ) || attributeKey == 'htmlEmptyBlock' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Don't use bogus paragraph if there are attributes from other features.\n\t\tif ( !attributeNames.includes( attributeKey ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn blocks.length < 2;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listediting\n */\n\nimport {\n\tPlugin,\n\ttype Editor,\n\ttype MultiCommand\n} from 'ckeditor5/src/core.js';\n\nimport type {\n\tDowncastAttributeEvent,\n\tDocumentChangeEvent,\n\tDowncastWriter,\n\tElement,\n\tModel,\n\tModelInsertContentEvent,\n\tUpcastElementEvent,\n\tViewDocumentTabEvent,\n\tViewElement,\n\tViewAttributeElement,\n\tWriter,\n\tDowncastRemoveEvent,\n\tMapperModelToViewPositionEvent\n} from 'ckeditor5/src/engine.js';\n\nimport { Delete, type ViewDocumentDeleteEvent } from 'ckeditor5/src/typing.js';\nimport { Enter, type EnterCommand, type ViewDocumentEnterEvent } from 'ckeditor5/src/enter.js';\nimport { CKEditorError, type GetCallback } from 'ckeditor5/src/utils.js';\n\nimport ListIndentCommand from './listindentcommand.js';\nimport ListCommand from './listcommand.js';\nimport ListMergeCommand from './listmergecommand.js';\nimport ListSplitCommand from './listsplitcommand.js';\nimport ListUtils from './listutils.js';\n\nimport {\n\tbogusParagraphCreator,\n\tcreateModelToViewPositionMapper,\n\tlistItemDowncastConverter,\n\tlistItemDowncastRemoveConverter,\n\tlistItemUpcastConverter,\n\treconvertItemsOnDataChange\n} from './converters.js';\nimport {\n\tfindAndAddListHeadToMap,\n\tfixListIndents,\n\tfixListItemIds\n} from './utils/postfixers.js';\nimport {\n\tgetAllListItemBlocks,\n\tisFirstBlockOfListItem,\n\tisLastBlockOfListItem,\n\tisSingleListItem,\n\tgetSelectedBlockObject,\n\tisListItemBlock,\n\tremoveListAttributes,\n\tListItemUid,\n\ttype ListElement\n} from './utils/model.js';\nimport {\n\tgetViewElementIdForListType,\n\tgetViewElementNameForListType\n} from './utils/view.js';\n\nimport ListWalker, { ListBlocksIterable } from './utils/listwalker.js';\n\nimport {\n\tClipboardPipeline,\n\ttype ClipboardOutputTransformationEvent\n} from 'ckeditor5/src/clipboard.js';\n\nimport '../../theme/documentlist.css';\nimport '../../theme/list.css';\n\n/**\n * A list of base list model attributes.\n */\nconst LIST_BASE_ATTRIBUTES = [ 'listType', 'listIndent', 'listItemId' ];\n\nexport type ListType = 'numbered' | 'bulleted' | 'todo' | 'customNumbered' | 'customBulleted';\n\n/**\n * Map of model attributes applicable to list blocks.\n */\nexport interface ListItemAttributesMap {\n\tlistType?: ListType;\n\tlistIndent?: number;\n\tlistItemId?: string;\n}\n\n/**\n * The editing part of the document-list feature. It handles creating, editing and removing lists and list items.\n */\nexport default class ListEditing extends Plugin {\n\t/**\n\t * The list of registered downcast strategies.\n\t */\n\tprivate readonly _downcastStrategies: Array<DowncastStrategy> = [];\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ Enter, Delete, ListUtils, ClipboardPipeline ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'list.multiBlock', true );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst multiBlock = editor.config.get( 'list.multiBlock' );\n\n\t\tif ( editor.plugins.has( 'LegacyListEditing' ) ) {\n\t\t\t/**\n\t\t\t * The `List` feature can not be loaded together with the `LegacyList` plugin.\n\t\t\t *\n\t\t\t * @error list-feature-conflict\n\t\t\t * @param conflictPlugin Name of the plugin.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'list-feature-conflict', this, { conflictPlugin: 'LegacyListEditing' } );\n\t\t}\n\n\t\tmodel.schema.register( '$listItem', { allowAttributes: LIST_BASE_ATTRIBUTES } );\n\n\t\tif ( multiBlock ) {\n\t\t\tmodel.schema.extend( '$container', { allowAttributesOf: '$listItem' } );\n\t\t\tmodel.schema.extend( '$block', { allowAttributesOf: '$listItem' } );\n\t\t\tmodel.schema.extend( '$blockObject', { allowAttributesOf: '$listItem' } );\n\t\t} else {\n\t\t\tmodel.schema.register( 'listItem', {\n\t\t\t\tinheritAllFrom: '$block',\n\t\t\t\tallowAttributesOf: '$listItem'\n\t\t\t} );\n\t\t}\n\n\t\tfor ( const attribute of LIST_BASE_ATTRIBUTES ) {\n\t\t\tmodel.schema.setAttributeProperties( attribute, {\n\t\t\t\tcopyOnReplace: true\n\t\t\t} );\n\t\t}\n\n\t\t// Register commands.\n\t\teditor.commands.add( 'numberedList', new ListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new ListCommand( editor, 'bulleted' ) );\n\n\t\teditor.commands.add( 'customNumberedList', new ListCommand(\teditor,\t'customNumbered', {\tmultiLevel: true } ) );\n\t\teditor.commands.add( 'customBulletedList', new ListCommand( editor, 'customBulleted', {\tmultiLevel: true } ) );\n\n\t\teditor.commands.add( 'indentList', new ListIndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new ListIndentCommand( editor, 'backward' ) );\n\n\t\teditor.commands.add( 'splitListItemBefore', new ListSplitCommand( editor, 'before' ) );\n\t\teditor.commands.add( 'splitListItemAfter', new ListSplitCommand( editor, 'after' ) );\n\n\t\tif ( multiBlock ) {\n\t\t\teditor.commands.add( 'mergeListItemBackward', new ListMergeCommand( editor, 'backward' ) );\n\t\t\teditor.commands.add( 'mergeListItemForward', new ListMergeCommand( editor, 'forward' ) );\n\t\t}\n\n\t\tthis._setupDeleteIntegration();\n\t\tthis._setupEnterIntegration();\n\t\tthis._setupTabIntegration();\n\t\tthis._setupClipboardIntegration();\n\t\tthis._setupAccessibilityIntegration();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst commands = editor.commands;\n\t\tconst indent = commands.get( 'indent' ) as MultiCommand;\n\t\tconst outdent = commands.get( 'outdent' ) as MultiCommand;\n\n\t\tif ( indent ) {\n\t\t\t// Priority is high due to integration with `IndentBlock` plugin. We want to indent list first and if it's not possible\n\t\t\t// user can indent content with `IndentBlock` plugin.\n\t\t\tindent.registerChildCommand( commands.get( 'indentList' )!, { priority: 'high' } );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\t// Priority is lowest due to integration with `IndentBlock` and `IndentCode` plugins.\n\t\t\t// First we want to allow user to outdent all indendations from other features then he can oudent list item.\n\t\t\toutdent.registerChildCommand( commands.get( 'outdentList' )!, { priority: 'lowest' } );\n\t\t}\n\n\t\t// Register conversion and model post-fixer after other plugins had a chance to register their attribute strategies.\n\t\tthis._setupModelPostFixing();\n\t\tthis._setupConversion();\n\t}\n\n\t/**\n\t * Registers a downcast strategy.\n\t *\n\t * **Note**: Strategies must be registered in the `Plugin#init()` phase so that it can be applied\n\t * in the `ListEditing#afterInit()`.\n\t *\n\t * @param strategy The downcast strategy to register.\n\t */\n\tpublic registerDowncastStrategy( strategy: DowncastStrategy ): void {\n\t\tthis._downcastStrategies.push( strategy );\n\t}\n\n\t/**\n\t * Returns list of model attribute names that should affect downcast conversion.\n\t */\n\tpublic getListAttributeNames(): Array<string> {\n\t\treturn [\n\t\t\t...LIST_BASE_ATTRIBUTES,\n\t\t\t...this._downcastStrategies.map( strategy => strategy.attributeName )\n\t\t];\n\t}\n\n\t/**\n\t * Attaches the listener to the {@link module:engine/view/document~Document#event:delete} event and handles backspace/delete\n\t * keys in and around document lists.\n\t */\n\tprivate _setupDeleteIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst mergeBackwardCommand: ListMergeCommand | undefined = editor.commands.get( 'mergeListItemBackward' );\n\t\tconst mergeForwardCommand: ListMergeCommand | undefined = editor.commands.get( 'mergeListItemForward' );\n\n\t\tthis.listenTo<ViewDocumentDeleteEvent>( editor.editing.view.document, 'delete', ( evt, data ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\t// Let the Widget plugin take care of block widgets while deleting (https://github.com/ckeditor/ckeditor5/issues/11346).\n\t\t\tif ( getSelectedBlockObject( editor.model ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.model.change( () => {\n\t\t\t\tconst firstPosition = selection.getFirstPosition()!;\n\n\t\t\t\tif ( selection.isCollapsed && data.direction == 'backward' ) {\n\t\t\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\t\t\tif ( !isListItemBlock( positionParent ) ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst previousBlock = ListWalker.first( positionParent, {\n\t\t\t\t\t\tsameAttributes: 'listType',\n\t\t\t\t\t\tsameIndent: true\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Outdent the first block of a first list item.\n\t\t\t\t\tif ( !previousBlock && positionParent.getAttribute( 'listIndent' ) === 0 ) {\n\t\t\t\t\t\tif ( !isLastBlockOfListItem( positionParent ) ) {\n\t\t\t\t\t\t\teditor.execute( 'splitListItemAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\teditor.execute( 'outdentList' );\n\t\t\t\t\t}\n\t\t\t\t\t// Merge block with previous one (on the block level or on the content level).\n\t\t\t\t\telse {\n\t\t\t\t\t\tif ( !mergeBackwardCommand || !mergeBackwardCommand.isEnabled ) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmergeBackwardCommand.execute( {\n\t\t\t\t\t\t\tshouldMergeOnBlocksContentLevel: shouldMergeOnBlocksContentLevel( editor.model, 'backward' )\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t\t// Non-collapsed selection or forward delete.\n\t\t\t\telse {\n\t\t\t\t\t// Collapsed selection should trigger forward merging only if at the end of a block.\n\t\t\t\t\tif ( selection.isCollapsed && !selection.getLastPosition()!.isAtEnd ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !mergeForwardCommand || !mergeForwardCommand.isEnabled ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmergeForwardCommand.execute( {\n\t\t\t\t\t\tshouldMergeOnBlocksContentLevel: shouldMergeOnBlocksContentLevel( editor.model, 'forward' )\n\t\t\t\t\t} );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t} );\n\t\t}, { context: 'li' } );\n\t}\n\n\t/**\n\t * Attaches a listener to the {@link module:engine/view/document~Document#event:enter} event and handles enter key press\n\t * in document lists.\n\t */\n\tprivate _setupEnterIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst commands = editor.commands;\n\t\tconst enterCommand: EnterCommand = commands.get( 'enter' )!;\n\n\t\t// Overwrite the default Enter key behavior: outdent or split the list in certain cases.\n\t\tthis.listenTo<ViewDocumentEnterEvent>( editor.editing.view.document, 'enter', ( evt, data ) => {\n\t\t\tconst doc = model.document;\n\t\t\tconst positionParent = doc.selection.getFirstPosition()!.parent;\n\n\t\t\tif (\n\t\t\t\tdoc.selection.isCollapsed &&\n\t\t\t\tisListItemBlock( positionParent ) &&\n\t\t\t\tpositionParent.isEmpty &&\n\t\t\t\t!data.isSoft\n\t\t\t) {\n\t\t\t\tconst isFirstBlock = isFirstBlockOfListItem( positionParent );\n\t\t\t\tconst isLastBlock = isLastBlockOfListItem( positionParent );\n\n\t\t\t\t// * a      →      * a\n\t\t\t\t// * []     →      []\n\t\t\t\tif ( isFirstBlock && isLastBlock ) {\n\t\t\t\t\teditor.execute( 'outdentList' );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t\t// * []     →      * []\n\t\t\t\t//   a      →      * a\n\t\t\t\telse if ( isFirstBlock && !isLastBlock ) {\n\t\t\t\t\teditor.execute( 'splitListItemAfter' );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t\t// * a      →      * a\n\t\t\t\t//   []     →      * []\n\t\t\t\telse if ( isLastBlock ) {\n\t\t\t\t\teditor.execute( 'splitListItemBefore' );\n\n\t\t\t\t\tdata.preventDefault();\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}, { context: 'li' } );\n\n\t\t// In some cases, after the default block splitting, we want to modify the new block to become a new list item\n\t\t// instead of an additional block in the same list item.\n\t\tthis.listenTo( enterCommand, 'afterExecute', () => {\n\t\t\tconst splitCommand: ListSplitCommand = commands.get( 'splitListItemBefore' )!;\n\n\t\t\t// The command has not refreshed because the change block related to EnterCommand#execute() is not over yet.\n\t\t\t// Let's keep it up to date and take advantage of ListSplitCommand#isEnabled.\n\t\t\tsplitCommand.refresh();\n\n\t\t\tif ( !splitCommand.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst doc = editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition()!.parent;\n\t\t\tconst listItemBlocks = getAllListItemBlocks( positionParent as any );\n\n\t\t\t// Keep in mind this split happens after the default enter handler was executed. For instance:\n\t\t\t//\n\t\t\t// │       Initial state       │    After default enter    │   Here in #afterExecute   │\n\t\t\t// ├───────────────────────────┼───────────────────────────┼───────────────────────────┤\n\t\t\t// │          * a[]            │           * a             │           * a             │\n\t\t\t// │                           │             []            │           * []            │\n\t\t\tif ( listItemBlocks.length === 2 ) {\n\t\t\t\tsplitCommand.execute();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches a listener to the {@link module:engine/view/document~Document#event:tab} event and handles tab key and tab+shift keys\n\t * presses in document lists.\n\t */\n\tprivate _setupTabIntegration() {\n\t\tconst editor = this.editor;\n\n\t\tthis.listenTo<ViewDocumentTabEvent>( editor.editing.view.document, 'tab', ( evt, data ) => {\n\t\t\tconst commandName = data.shiftKey ? 'outdentList' : 'indentList';\n\t\t\tconst command = this.editor.commands.get( commandName )!;\n\n\t\t\tif ( command.isEnabled ) {\n\t\t\t\teditor.execute( commandName );\n\n\t\t\t\tdata.stopPropagation();\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'li' } );\n\t}\n\n\t/**\n\t * Registers the conversion helpers for the document-list feature.\n\t */\n\tprivate _setupConversion() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst attributeNames = this.getListAttributeNames();\n\t\tconst multiBlock = editor.config.get( 'list.multiBlock' );\n\t\tconst elementName = multiBlock ? 'paragraph' : 'listItem';\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t// Convert <li> to a generic paragraph (or listItem element) so the content of <li> is always inside a block.\n\t\t\t// Setting the listType attribute to let other features (to-do list) know that this is part of a list item.\n\t\t\t// This is also important to properly handle simple lists so that paragraphs inside a list item won't break the list item.\n\t\t\t// <li>  <-- converted to listItem\n\t\t\t//   <p></p> <-- should be also converted to listItem, so it won't split and replace the listItem generated from the above li.\n\t\t\t.elementToElement( {\n\t\t\t\tview: 'li',\n\t\t\t\tmodel: ( viewElement, { writer } ) => writer.createElement( elementName, { listType: '' } )\n\t\t\t} )\n\t\t\t// Convert paragraph to the list block (without list type defined yet).\n\t\t\t// This is important to properly handle bogus paragraph and to-do lists.\n\t\t\t// Most of the time the bogus paragraph should not appear in the data of to-do list,\n\t\t\t// but if there is any marker or an attribute on the paragraph then the bogus paragraph\n\t\t\t// is preserved in the data, and we need to be able to detect this case.\n\t\t\t.elementToElement( {\n\t\t\t\tview: 'p',\n\t\t\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\t\t\tif ( viewElement.parent && viewElement.parent.is( 'element', 'li' ) ) {\n\t\t\t\t\t\treturn writer.createElement( elementName, { listType: '' } );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t\tconverterPriority: 'high'\n\t\t\t} )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:li', listItemUpcastConverter() );\n\t\t\t} );\n\n\t\tif ( !multiBlock ) {\n\t\t\teditor.conversion.for( 'downcast' )\n\t\t\t\t.elementToElement( {\n\t\t\t\t\tmodel: 'listItem',\n\t\t\t\t\tview: 'p'\n\t\t\t\t} );\n\t\t}\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: elementName,\n\t\t\t\tview: bogusParagraphCreator( attributeNames ),\n\t\t\t\tconverterPriority: 'high'\n\t\t\t} )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<ListElement>>(\n\t\t\t\t\t'attribute',\n\t\t\t\t\tlistItemDowncastConverter( attributeNames, this._downcastStrategies, model )\n\t\t\t\t);\n\n\t\t\t\tdispatcher.on<DowncastRemoveEvent>( 'remove', listItemDowncastRemoveConverter( model.schema ) );\n\t\t\t} );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: elementName,\n\t\t\t\tview: bogusParagraphCreator( attributeNames, { dataPipeline: true } ),\n\t\t\t\tconverterPriority: 'high'\n\t\t\t} )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<ListElement>>(\n\t\t\t\t\t'attribute',\n\t\t\t\t\tlistItemDowncastConverter( attributeNames, this._downcastStrategies, model, { dataPipeline: true } )\n\t\t\t\t);\n\t\t\t} );\n\n\t\tconst modelToViewPositionMapper = createModelToViewPositionMapper( this._downcastStrategies, editor.editing.view );\n\n\t\teditor.editing.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', modelToViewPositionMapper );\n\t\teditor.data.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', modelToViewPositionMapper );\n\n\t\tthis.listenTo<DocumentChangeEvent>(\n\t\t\tmodel.document,\n\t\t\t'change:data',\n\t\t\treconvertItemsOnDataChange( model, editor.editing, attributeNames, this ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\t// For LI verify if an ID of the attribute element is correct.\n\t\tthis.on<ListEditingCheckAttributesEvent>( 'checkAttributes:item', ( evt, { viewElement, modelAttributes } ) => {\n\t\t\tif ( viewElement.id != modelAttributes.listItemId ) {\n\t\t\t\tevt.return = true;\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// For UL and OL check if the name and ID of element is correct.\n\t\tthis.on<ListEditingCheckAttributesEvent>( 'checkAttributes:list', ( evt, { viewElement, modelAttributes } ) => {\n\t\t\tif (\n\t\t\t\tviewElement.name != getViewElementNameForListType( modelAttributes.listType ) ||\n\t\t\t\tviewElement.id != getViewElementIdForListType( modelAttributes.listType, modelAttributes.listIndent )\n\t\t\t) {\n\t\t\t\tevt.return = true;\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Registers model post-fixers.\n\t */\n\tprivate _setupModelPostFixing() {\n\t\tconst model = this.editor.model;\n\t\tconst attributeNames = this.getListAttributeNames();\n\n\t\t// Register list fixing.\n\t\t// First the low level handler.\n\t\tmodel.document.registerPostFixer( writer => modelChangePostFixer( model, writer, attributeNames, this ) );\n\n\t\t// Then the callbacks for the specific lists.\n\t\t// The indentation fixing must be the first one...\n\t\tthis.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tevt.return = fixListIndents( listNodes, writer ) || evt.return;\n\t\t}, { priority: 'high' } );\n\n\t\t// ...then the item ids... and after that other fixers that rely on the correct indentation and ids.\n\t\tthis.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer, seenIds } ) => {\n\t\t\tevt.return = fixListItemIds( listNodes, seenIds, writer ) || evt.return;\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Integrates the feature with the clipboard via {@link module:engine/model/model~Model#insertContent} and\n\t * {@link module:engine/model/model~Model#getSelectedContent}.\n\t */\n\tprivate _setupClipboardIntegration() {\n\t\tconst model = this.editor.model;\n\t\tconst clipboardPipeline: ClipboardPipeline = this.editor.plugins.get( 'ClipboardPipeline' );\n\n\t\tthis.listenTo<ModelInsertContentEvent>( model, 'insertContent', createModelIndentPasteFixer( model ), { priority: 'high' } );\n\n\t\t// To enhance the UX, the editor should not copy list attributes to the clipboard if the selection\n\t\t// started and ended in the same list item.\n\t\t//\n\t\t// If the selection was enclosed in a single list item, there is a good chance the user did not want it\n\t\t// copied as a list item but plain blocks.\n\t\t//\n\t\t// This avoids pasting orphaned list items instead of paragraphs, for instance, straight into the root.\n\t\t//\n\t\t//\t                       ┌─────────────────────┬───────────────────┐\n\t\t//\t                       │ Selection           │ Clipboard content │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ [* <Widget />]      │ <Widget />        │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ [* Foo]             │ Foo               │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ * Foo [bar] baz     │ bar               │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ * Fo[o              │ o                 │\n\t\t//\t                       │   ba]r              │ ba                │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ * Fo[o              │ * o               │\n\t\t//\t                       │ * ba]r              │ * ba              │\n\t\t//\t                       ├─────────────────────┼───────────────────┤\n\t\t//\t                       │ [* Foo              │ * Foo             │\n\t\t//\t                       │  * bar]             │ * bar             │\n\t\t//\t                       └─────────────────────┴───────────────────┘\n\t\t//\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/11608, https://github.com/ckeditor/ckeditor5/issues/14969\n\t\tthis.listenTo<ClipboardOutputTransformationEvent>( clipboardPipeline, 'outputTransformation', ( evt, data ) => {\n\t\t\tmodel.change( writer => {\n\t\t\t\t// Remove last block if it's empty.\n\t\t\t\tconst allContentChildren = Array.from( data.content.getChildren() );\n\t\t\t\tconst lastItem = allContentChildren[ allContentChildren.length - 1 ];\n\n\t\t\t\tif ( allContentChildren.length > 1 && lastItem.is( 'element' ) && lastItem.isEmpty ) {\n\t\t\t\t\tconst contentChildrenExceptLastItem = allContentChildren.slice( 0, -1 );\n\n\t\t\t\t\tif ( contentChildrenExceptLastItem.every( isListItemBlock ) ) {\n\t\t\t\t\t\twriter.remove( lastItem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Copy/cut only content of a list item (for drag-drop move the whole list item).\n\t\t\t\tif ( data.method == 'copy' || data.method == 'cut' ) {\n\t\t\t\t\tconst allChildren = Array.from( data.content.getChildren() );\n\t\t\t\t\tconst isSingleListItemSelected = isSingleListItem( allChildren );\n\n\t\t\t\t\tif ( isSingleListItemSelected ) {\n\t\t\t\t\t\tremoveListAttributes( allChildren as Array<Element>, writer );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Informs editor accessibility features about keystrokes brought by the plugin.\n\t */\n\tprivate _setupAccessibilityIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\teditor.accessibility.addKeystrokeInfoGroup( {\n\t\t\tid: 'list',\n\t\t\tlabel: t( 'Keystrokes that can be used in a list' ),\n\t\t\tkeystrokes: [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Increase list item indent' ),\n\t\t\t\t\tkeystroke: 'Tab'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Decrease list item indent' ),\n\t\t\t\t\tkeystroke: 'Shift+Tab'\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n\n/**\n * The attribute to attribute downcast strategy for UL, OL, LI elements.\n */\nexport interface AttributeDowncastStrategy {\n\n\t/**\n\t * The scope of the downcast (whether it applies to LI or OL/UL).\n\t */\n\tscope: 'list' | 'item';\n\n\t/**\n\t * The model attribute name.\n\t */\n\tattributeName: string;\n\n\t/**\n\t * Sets the property on the view element.\n\t */\n\tsetAttributeOnDowncast( writer: DowncastWriter, value: unknown, element: ViewElement ): void;\n}\n\n/**\n * The custom marker downcast strategy.\n */\nexport interface ItemMarkerDowncastStrategy {\n\n\t/**\n\t * The scope of the downcast.\n\t */\n\tscope: 'itemMarker';\n\n\t/**\n\t * The model attribute name.\n\t */\n\tattributeName: string;\n\n\t/**\n\t * Creates a view element for a custom item marker.\n\t */\n\tcreateElement(\n\t\twriter: DowncastWriter,\n\t\tmodelElement: Element,\n\t\t{ dataPipeline }: { dataPipeline?: boolean }\n\t): ViewElement | null;\n\n\t/**\n\t * Creates an AttributeElement to be used for wrapping a first block of a list item.\n\t */\n\tcreateWrapperElement?(\n\t\twriter: DowncastWriter,\n\t\tmodelElement: Element,\n\t\t{ dataPipeline }: { dataPipeline?: boolean }\n\t): ViewAttributeElement;\n\n\t/**\n\t * Should return true if the given list block can be wrapped with the wrapper created by `createWrapperElement()`\n\t * or only the marker element should be wrapped.\n\t */\n\tcanWrapElement?( modelElement: Element ): boolean;\n\n\t/**\n\t * Should return true if the custom marker can be injected into a given list block.\n\t * Otherwise, custom marker view element is always injected before the block element.\n\t */\n\tcanInjectMarkerIntoElement?( modelElement: Element ): boolean;\n}\n\n/**\n * The downcast strategy.\n */\nexport type DowncastStrategy = AttributeDowncastStrategy | ItemMarkerDowncastStrategy;\n\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states (invalid `listItemId` and `listIndent` values).\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=1>Item 2</paragraph>   <--- this is removed.\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=2>Item 3</paragraph>\n * ```\n *\n * The list structure after the middle element is removed:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=2>Item 3</paragraph>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=0>Item 1</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=1>Item 3</paragraph>   <--- note that indent got post-fixed.\n * ```\n *\n * @param model The data model.\n * @param writer The writer to do changes with.\n * @param attributeNames The list of all model list attributes (including registered strategies).\n * @param ListEditing The document list editing plugin.\n * @returns `true` if any change has been applied, `false` otherwise.\n */\nfunction modelChangePostFixer(\n\tmodel: Model,\n\twriter: Writer,\n\tattributeNames: Array<string>,\n\tlistEditing: ListEditing\n) {\n\tconst changes = model.document.differ.getChanges();\n\tconst visited = new Set<Element>();\n\tconst itemToListHead = new Set<ListElement>();\n\tconst multiBlock = listEditing.editor.config.get( 'list.multiBlock' );\n\n\tlet applied = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name != '$text' ) {\n\t\t\tconst item = entry.position.nodeAfter!;\n\n\t\t\t// Remove attributes in case of renamed element.\n\t\t\tif ( !model.schema.checkAttribute( item, 'listItemId' ) ) {\n\t\t\t\tfor ( const attributeName of Array.from( item.getAttributeKeys() ) ) {\n\t\t\t\t\tif ( attributeNames.includes( attributeName ) ) {\n\t\t\t\t\t\twriter.removeAttribute( attributeName, item );\n\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfindAndAddListHeadToMap( entry.position, itemToListHead, visited );\n\n\t\t\t// Insert of a non-list item - check if there is a list after it.\n\t\t\tif ( !entry.attributes.has( 'listItemId' ) ) {\n\t\t\t\tfindAndAddListHeadToMap( entry.position.getShiftedBy( entry.length ), itemToListHead, visited );\n\t\t\t}\n\n\t\t\t// Check if there is no nested list.\n\t\t\tfor ( const { item: innerItem, previousPosition } of model.createRangeIn( item as Element ) ) {\n\t\t\t\tif ( isListItemBlock( innerItem ) ) {\n\t\t\t\t\tfindAndAddListHeadToMap( previousPosition, itemToListHead, visited );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Removed list item or block adjacent to a list.\n\t\telse if ( entry.type == 'remove' ) {\n\t\t\tfindAndAddListHeadToMap( entry.position, itemToListHead, visited );\n\t\t}\n\t\t// Changed list item indent or type.\n\t\telse if ( entry.type == 'attribute' && attributeNames.includes( entry.attributeKey ) ) {\n\t\t\tfindAndAddListHeadToMap( entry.range.start, itemToListHead, visited );\n\n\t\t\tif ( entry.attributeNewValue === null ) {\n\t\t\t\tfindAndAddListHeadToMap( entry.range.start.getShiftedBy( 1 ), itemToListHead, visited );\n\t\t\t}\n\t\t}\n\n\t\t// Make sure that there is no left over listItem element without attributes or a block with list attributes that is not a listItem.\n\t\tif ( !multiBlock && entry.type == 'attribute' && LIST_BASE_ATTRIBUTES.includes( entry.attributeKey ) ) {\n\t\t\tconst element = entry.range.start.nodeAfter!;\n\n\t\t\tif ( entry.attributeNewValue === null && element && element.is( 'element', 'listItem' ) ) {\n\t\t\t\twriter.rename( element, 'paragraph' );\n\t\t\t\tapplied = true;\n\t\t\t} else if ( entry.attributeOldValue === null && element && element.is( 'element' ) && element.name != 'listItem' ) {\n\t\t\t\twriter.rename( element, 'listItem' );\n\t\t\t\tapplied = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Make sure that IDs are not shared by split list.\n\tconst seenIds = new Set<string>();\n\n\tfor ( const listHead of itemToListHead.values() ) {\n\t\tapplied = listEditing.fire<ListEditingPostFixerEvent>( 'postFixer', {\n\t\t\tlistNodes: new ListBlocksIterable( listHead ),\n\t\t\tlistHead,\n\t\t\twriter,\n\t\t\tseenIds\n\t\t} ) || applied;\n\t}\n\n\treturn applied;\n}\n\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=\"0\">A</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=\"1\">B^</paragraph>\n * // At ^ paste:  <paragraph listType=\"numbered\" listItemId=\"x\" listIndent=\"0\">X</paragraph>\n * //              <paragraph listType=\"numbered\" listItemId=\"y\" listIndent=\"1\">Y</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=\"2\">C</paragraph>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <paragraph listType=\"bulleted\" listItemId=\"a\" listIndent=\"0\">A</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"b\" listIndent=\"1\">BX</paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"y\" listIndent=\"2\">Y/paragraph>\n * <paragraph listType=\"bulleted\" listItemId=\"c\" listIndent=\"2\">C</paragraph>\n * ```\n */\nfunction createModelIndentPasteFixer( model: Model ): GetCallback<ModelInsertContentEvent> {\n\treturn ( evt, [ content, selectable ] ) => {\n\t\tconst items = content.is( 'documentFragment' ) ?\n\t\t\tArray.from( content.getChildren() ) :\n\t\t\t[ content ];\n\n\t\tif ( !items.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = selectable ?\n\t\t\tmodel.createSelection( selectable ) :\n\t\t\tmodel.document.selection;\n\n\t\tconst position = selection.getFirstPosition()!;\n\n\t\t// Get a reference list item. Attributes of the inserted list items will be fixed according to that item.\n\t\tlet refItem: ListElement;\n\n\t\tif ( isListItemBlock( position.parent ) ) {\n\t\t\trefItem = position.parent;\n\t\t} else if ( isListItemBlock( position.nodeBefore ) && isListItemBlock( position.nodeAfter ) ) {\n\t\t\trefItem = position.nodeBefore;\n\t\t} else {\n\t\t\treturn; // Content is not copied into a list.\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst refType = refItem.getAttribute( 'listType' );\n\t\t\tconst refIndent = refItem.getAttribute( 'listIndent' );\n\t\t\tconst firstElementIndent = items[ 0 ].getAttribute( 'listIndent' ) as number || 0;\n\t\t\tconst indentDiff = Math.max( refIndent - firstElementIndent, 0 );\n\n\t\t\tfor ( const item of items ) {\n\t\t\t\tconst isListItem = isListItemBlock( item );\n\n\t\t\t\tif ( refItem.is( 'element', 'listItem' ) && item.is( 'element', 'paragraph' ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * When paragraphs or a plain text list is pasted into a simple list, convert\n\t\t\t\t\t * the `<paragraphs>' to `<listItem>' to avoid breaking the target list.\n\t\t\t\t\t *\n\t\t\t\t\t * See https://github.com/ckeditor/ckeditor5/issues/13826.\n\t\t\t\t\t */\n\t\t\t\t\twriter.rename( item as Element, 'listItem' );\n\t\t\t\t}\n\n\t\t\t\twriter.setAttributes( {\n\t\t\t\t\tlistIndent: ( isListItem ? item.getAttribute( 'listIndent' ) : 0 ) + indentDiff,\n\t\t\t\t\tlistItemId: isListItem ? item.getAttribute( 'listItemId' ) : ListItemUid.next(),\n\t\t\t\t\tlistType: refType\n\t\t\t\t}, item );\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * Decides whether the merge should be accompanied by the model's `deleteContent()`, for instance, to get rid of the inline\n * content in the selection or take advantage of the heuristics in `deleteContent()` that helps convert lists into paragraphs\n * in certain cases.\n */\nfunction shouldMergeOnBlocksContentLevel( model: Model, direction: 'backward' | 'forward' ) {\n\tconst selection = model.document.selection;\n\n\tif ( !selection.isCollapsed ) {\n\t\treturn !getSelectedBlockObject( model );\n\t}\n\n\tif ( direction === 'forward' ) {\n\t\treturn true;\n\t}\n\n\tconst firstPosition = selection.getFirstPosition()!;\n\tconst positionParent = firstPosition.parent;\n\tconst previousSibling = positionParent.previousSibling!;\n\n\tif ( model.schema.isObject( previousSibling ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ( previousSibling as Element ).isEmpty ) {\n\t\treturn true;\n\t}\n\n\treturn isSingleListItem( [ positionParent as Element, previousSibling ] );\n}\n\n/**\n * Event fired on changes detected on the model list element to verify if the view representation of a list element\n * is representing those attributes.\n *\n * It allows triggering a re-wrapping of a list item.\n *\n * @internal\n * @eventName ~ListEditing#postFixer\n * @param listHead The head element of a list.\n * @param writer The writer to do changes with.\n * @param seenIds The set of already known IDs.\n * @returns If a post-fixer made a change of the model tree, it should return `true`.\n */\nexport type ListEditingPostFixerEvent = {\n\tname: 'postFixer';\n\targs: [ {\n\t\tlistNodes: ListBlocksIterable;\n\t\tlistHead: Element;\n\t\twriter: Writer;\n\t\tseenIds: Set<string>;\n\t} ];\n\treturn: boolean;\n};\n\n/**\n * Event fired on changes detected on the model list element to verify if the view representation of a list element\n * is representing those attributes.\n *\n * It allows triggering a re-wrapping of a list item.\n *\n * **Note**: For convenience this event is namespaced and could be captured as `checkAttributes:list` or `checkAttributes:item`.\n *\n * @internal\n * @eventName ~ListEditing#checkAttributes\n */\nexport type ListEditingCheckAttributesEvent = {\n\tname: 'checkAttributes' | 'checkAttributes:list' | 'checkAttributes:item';\n\targs: [ {\n\t\tviewElement: ViewElement & { id?: string };\n\t\tmodelAttributes: ListItemAttributesMap;\n\t} ];\n\treturn: boolean;\n};\n\n/**\n * Event fired on changes detected on the model list element to verify if the view representation of a list block element\n * is representing those attributes.\n *\n * It allows triggering a reconversion of a list item block.\n *\n * @internal\n * @eventName ~ListEditing#checkElement\n */\nexport type ListEditingCheckElementEvent = {\n\tname: 'checkElement';\n\targs: [ {\n\t\tviewElement: ViewElement;\n\t\tmodelElement: Element;\n\t} ];\n\treturn: boolean;\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/utils\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport { ButtonView, MenuBarMenuListItemButtonView, type ButtonExecuteEvent } from 'ckeditor5/src/ui.js';\n\n/**\n * Helper method for creating toolbar and menu buttons and linking them with an appropriate command.\n *\n * @internal\n * @param editor The editor instance to which the UI component will be added.\n * @param commandName The name of the command.\n * @param label The button label.\n * @param icon The source of the icon.\n */\nexport function createUIComponents(\n\teditor: Editor,\n\tcommandName: 'bulletedList' | 'numberedList' | 'todoList',\n\tlabel: string,\n\ticon: string\n): void {\n\teditor.ui.componentFactory.add( commandName, () => {\n\t\tconst buttonView = _createButton( ButtonView, editor, commandName, label, icon );\n\n\t\tbuttonView.set( {\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\treturn buttonView;\n\t} );\n\n\teditor.ui.componentFactory.add( `menuBar:${ commandName }`, () => {\n\t\tconst buttonView = _createButton( MenuBarMenuListItemButtonView, editor, commandName, label, icon );\n\n\t\tbuttonView.set( {\n\t\t\trole: 'menuitemcheckbox',\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\treturn buttonView;\n\t} );\n}\n\n/**\n * Creates a button to use either in toolbar or in menu bar.\n */\nfunction _createButton<T extends typeof ButtonView | typeof MenuBarMenuListItemButtonView>(\n\tButtonClass: T,\n\teditor: Editor,\n\tcommandName: 'bulletedList' | 'numberedList' | 'todoList',\n\tlabel: string,\n\ticon: string\n): InstanceType<T> {\n\tconst command = editor.commands.get( commandName )!;\n\tconst view = new ButtonClass( editor.locale ) as InstanceType<T>;\n\n\tview.set( {\n\t\tlabel,\n\t\ticon\n\t} );\n\n\t// Bind button model to command.\n\tview.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\n\t// Execute the command.\n\tview.on<ButtonExecuteEvent>( 'execute', () => {\n\t\teditor.execute( commandName );\n\t\teditor.editing.view.focus();\n\t} );\n\n\treturn view;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/listui\n */\n\nimport { createUIComponents } from './utils.js';\nimport { icons, Plugin } from 'ckeditor5/src/core.js';\n\n/**\n * The list UI feature. It introduces the `'numberedList'` and `'bulletedList'` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n */\nexport default class ListUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst t = this.editor.t;\n\n\t\t// Create button numberedList.\n\t\tif ( !this.editor.ui.componentFactory.has( 'numberedList' ) ) {\n\t\t\tcreateUIComponents( this.editor, 'numberedList', t( 'Numbered List' ), icons.numberedList );\n\t\t}\n\n\t\t// Create button bulletedList.\n\t\tif ( !this.editor.ui.componentFactory.has( 'bulletedList' ) ) {\n\t\t\tcreateUIComponents( this.editor, 'bulletedList', t( 'Bulleted List' ), icons.bulletedList );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport ListEditing from './list/listediting.js';\nimport ListUI from './list/listui.js';\n\n/**\n * The list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/list/listediting~ListEditing  list\n * editing feature} and {@link module:list/list/listui~ListUI list UI feature}.\n */\nexport default class List extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing, ListUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'List' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/liststartcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\nimport {\n\texpandListBlocksToCompleteList,\n\tisListItemBlock,\n\tisNumberedListType\n} from '../list/utils/model.js';\n\n/**\n * The list start index command. It changes the `listStart` attribute of the selected list items,\n * letting the user to choose the starting point of an ordered list.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */\nexport default class ListStartCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: number | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst value = this._getValue();\n\n\t\tthis.value = value;\n\t\tthis.isEnabled = value != null;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.startIndex The list start index.\n\t */\n\tpublic override execute( { startIndex = 1 }: { startIndex?: number } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tlet blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block =>\n\t\t\t\tisListItemBlock( block ) &&\n\t\t\t\tisNumberedListType( block.getAttribute( 'listType' ) )\n\t\t\t);\n\n\t\tblocks = expandListBlocksToCompleteList( blocks );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\twriter.setAttribute( 'listStart', startIndex >= 0 ? startIndex : 1, block );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tif (\n\t\t\tblock &&\n\t\t\tisListItemBlock( block ) &&\n\t\t\tisNumberedListType( block.getAttribute( 'listType' ) )\n\t\t) {\n\t\t\treturn block.getAttribute( 'listStart' ) as number;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n* @module list/listproperties/utils/style\n*/\n\nconst LIST_STYLE_TO_LIST_TYPE: Record<string, 'bulleted' | 'numbered' | undefined> = {};\nconst LIST_STYLE_TO_TYPE_ATTRIBUTE: Record<string, string | null | undefined> = {};\nconst TYPE_ATTRIBUTE_TO_LIST_STYLE: Record<string, string | undefined> = {};\n\nconst LIST_STYLE_TYPES: Array<{ listStyle: string; typeAttribute: string | null; listType: 'bulleted' | 'numbered' }> = [\n\t{ listStyle: 'disc', typeAttribute: 'disc', listType: 'bulleted' },\n\t{ listStyle: 'circle', typeAttribute: 'circle', listType: 'bulleted' },\n\t{ listStyle: 'square', typeAttribute: 'square', listType: 'bulleted' },\n\t{ listStyle: 'decimal', typeAttribute: '1', listType: 'numbered' },\n\t{ listStyle: 'decimal-leading-zero', typeAttribute: null, listType: 'numbered' },\n\t{ listStyle: 'lower-roman', typeAttribute: 'i', listType: 'numbered' },\n\t{ listStyle: 'upper-roman', typeAttribute: 'I', listType: 'numbered' },\n\t{ listStyle: 'lower-alpha', typeAttribute: 'a', listType: 'numbered' },\n\t{ listStyle: 'upper-alpha', typeAttribute: 'A', listType: 'numbered' },\n\t{ listStyle: 'lower-latin', typeAttribute: 'a', listType: 'numbered' },\n\t{ listStyle: 'upper-latin', typeAttribute: 'A', listType: 'numbered' }\n];\n\nfor ( const { listStyle, typeAttribute, listType } of LIST_STYLE_TYPES ) {\n\tLIST_STYLE_TO_LIST_TYPE[ listStyle ] = listType;\n\tLIST_STYLE_TO_TYPE_ATTRIBUTE[ listStyle ] = typeAttribute;\n\n\tif ( typeAttribute ) {\n\t\tTYPE_ATTRIBUTE_TO_LIST_STYLE[ typeAttribute ] = listStyle;\n\t}\n}\n\n/**\n * Gets all the style types supported by given list type.\n */\nexport function getAllSupportedStyleTypes(): Array<string> {\n\treturn LIST_STYLE_TYPES.map( x => x.listStyle );\n}\n\n/**\n * Checks whether the given list-style-type is supported by numbered or bulleted list.\n */\nexport function getListTypeFromListStyleType( listStyleType: string ): 'bulleted' | 'numbered' | null {\n\treturn LIST_STYLE_TO_LIST_TYPE[ listStyleType ] || null;\n}\n\n/**\n * Converts `type` attribute of `<ul>` or `<ol>` elements to `list-style-type` equivalent.\n */\nexport function getListStyleTypeFromTypeAttribute( value: string ): string | null {\n\treturn TYPE_ATTRIBUTE_TO_LIST_STYLE[ value ] || null;\n}\n\n/**\n * Converts `list-style-type` style to `type` attribute of `<ul>` or `<ol>` elements.\n */\nexport function getTypeAttributeFromListStyleType( value: string ): string | null {\n\treturn LIST_STYLE_TO_TYPE_ATTRIBUTE[ value ] || null;\n}\n\n/**\n * Normalizes list style by converting aliases to their canonical form.\n *\n * @param listStyle The list style value to normalize.\n * @returns The canonical form of the list style.\n *\n * @example\n * normalizeListStyle( 'lower-alpha' ); // Returns 'lower-latin'\n * normalizeListStyle( 'upper-alpha' ); // Returns 'upper-latin'\n * normalizeListStyle( 'disc' ); // Returns 'disc'\n */\nexport function normalizeListStyle( listStyle: string ): string {\n\tswitch ( listStyle ) {\n\t\tcase 'lower-alpha':\n\t\t\treturn 'lower-latin';\n\t\tcase 'upper-alpha':\n\t\t\treturn 'upper-latin';\n\t\tdefault:\n\t\t\treturn listStyle;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/liststylecommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\nimport {\n\texpandListBlocksToCompleteList,\n\tisListItemBlock\n} from '../list/utils/model.js';\nimport { getListTypeFromListStyleType } from './utils/style.js';\n\n/**\n * The list style command. It changes `listStyle` attribute of the selected list items,\n * letting the user choose styles for the list item markers.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */\nexport default class ListStyleCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: string | null;\n\n\t/**\n\t * The default type of the list style.\n\t */\n\tpublic readonly defaultType: string;\n\n\t/**\n\t * The list of supported style types by this command.\n\t */\n\tprivate _supportedTypes: Array<string> | undefined;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t * @param supportedTypes The list of supported style types by this command.\n\t */\n\tconstructor( editor: Editor, defaultType: string, supportedTypes?: Array<string> ) {\n\t\tsuper( editor );\n\n\t\tthis.defaultType = defaultType;\n\t\tthis._supportedTypes = supportedTypes;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t */\n\tpublic override execute( options: { type?: string | null } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tthis._tryToConvertItemsToList( options );\n\n\t\t\tlet blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t\t.filter( block => block.hasAttribute( 'listType' ) );\n\n\t\t\tif ( !blocks.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tblocks = expandListBlocksToCompleteList( blocks );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\twriter.setAttribute( 'listStyle', options.type || this.defaultType, block );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if the given style type is supported by this plugin.\n\t */\n\tpublic isStyleTypeSupported( value: string ): boolean {\n\t\tif ( !this._supportedTypes ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this._supportedTypes.includes( value );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\tif ( isListItemBlock( listItem ) ) {\n\t\t\treturn listItem.getAttribute( 'listStyle' ) as string;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\tconst editor = this.editor;\n\n\t\tconst numberedList = editor.commands.get( 'numberedList' )!;\n\t\tconst bulletedList = editor.commands.get( 'bulletedList' )!;\n\n\t\treturn numberedList.isEnabled || bulletedList.isEnabled;\n\t}\n\n\t/**\n\t * Check if the provided list style is valid. Also change the selection to a list if it's not set yet.\n\t *\n\t * @param options.type The type of the list style. If `null` is specified, the function does nothing.\n\t*/\n\tprivate _tryToConvertItemsToList( options: { type?: string | null } ) {\n\t\tif ( !options.type ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst listType = getListTypeFromListStyleType( options.type );\n\n\t\tif ( !listType ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst commandName = `${ listType }List` as const;\n\t\tconst command = editor.commands.get( commandName )!;\n\n\t\tif ( !command.value ) {\n\t\t\teditor.execute( commandName );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/listreversedcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\nimport {\n\texpandListBlocksToCompleteList,\n\tisListItemBlock\n} from '../list/utils/model.js';\n\n/**\n * The list reversed command. It changes the `listReversed` attribute of the selected list items,\n * letting the user to choose the order of an ordered list.\n * It is used by the {@link module:list/listproperties~ListProperties list properties feature}.\n */\nexport default class ListReversedCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: boolean | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst value = this._getValue();\n\n\t\tthis.value = value;\n\t\tthis.isEnabled = value != null;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.reversed Whether the list should be reversed.\n\t */\n\tpublic override execute( options: { reversed?: boolean } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tlet blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => isListItemBlock( block ) && block.getAttribute( 'listType' ) == 'numbered' );\n\n\t\tblocks = expandListBlocksToCompleteList( blocks );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\twriter.setAttribute( 'listReversed', !!options.reversed, block );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t */\n\tprivate _getValue() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tif ( isListItemBlock( block ) && block.getAttribute( 'listType' ) == 'numbered' ) {\n\t\t\treturn block.getAttribute( 'listReversed' ) as boolean;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/converters\n */\n\nimport type { UpcastElementEvent } from 'ckeditor5/src/engine.js';\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\n\nimport type { AttributeStrategy } from './listpropertiesediting.js';\n\n/**\n * Returns a converter that consumes the `style`, `reversed`, and `start` attributes.\n * In `style`, it searches for the `list-style-type` definition.\n * If not found, the `\"default\"` value will be used.\n *\n * @internal\n * @param strategy\n */\nexport function listPropertiesUpcastConverter( strategy: AttributeStrategy ): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, schema, consumable } = conversionApi;\n\n\t\t// If there is no view consumable to consume, set the default attribute value to be able to reconvert nested lists on parent change.\n\t\t// So abort converting if attribute was directly consumed.\n\t\tif ( consumable.test( data.viewItem, strategy.viewConsumables ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !data.modelRange ) {\n\t\t\tObject.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\tlet applied = false;\n\n\t\tfor ( const item of data.modelRange!.getItems( { shallow: true } ) ) {\n\t\t\tif ( !schema.checkAttribute( item, strategy.attributeName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( !strategy.appliesToListItem( item ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Set list attributes only on same level items, those nested deeper are already handled by the recursive conversion.\n\t\t\tif ( item.hasAttribute( strategy.attributeName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\twriter.setAttribute( strategy.attributeName, strategy.getAttributeOnUpcast( data.viewItem ), item );\n\t\t\tapplied = true;\n\t\t}\n\n\t\tif ( applied ) {\n\t\t\tconsumable.consume( data.viewItem, strategy.viewConsumables );\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/listpropertiesutils\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\tgetAllSupportedStyleTypes,\n\tgetListStyleTypeFromTypeAttribute,\n\tgetListTypeFromListStyleType,\n\tgetTypeAttributeFromListStyleType\n} from './utils/style.js';\n\n/**\n * A set of helpers related to document lists.\n */\nexport default class ListPropertiesUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListPropertiesUtils' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets all the style types supported by given list type.\n\t */\n\tpublic getAllSupportedStyleTypes(): Array<string> {\n\t\treturn getAllSupportedStyleTypes();\n\t}\n\n\t/**\n\t * Checks whether the given list-style-type is supported by numbered or bulleted list.\n\t */\n\tpublic getListTypeFromListStyleType( listStyleType: string ): 'bulleted' | 'numbered' | null {\n\t\treturn getListTypeFromListStyleType( listStyleType );\n\t}\n\n\t/**\n\t * Converts `type` attribute of `<ul>` or `<ol>` elements to `list-style-type` equivalent.\n\t */\n\tpublic getListStyleTypeFromTypeAttribute( value: string ): string | null {\n\t\treturn getListStyleTypeFromTypeAttribute( value );\n\t}\n\n\t/**\n\t * Converts `list-style-type` style to `type` attribute of `<ul>` or `<ol>` elements.\n\t */\n\tpublic getTypeAttributeFromListStyleType( value: string ): string | null {\n\t\treturn getTypeAttributeFromListStyleType( value );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/utils/config\n */\n\nimport { toArray } from 'ckeditor5/src/utils.js';\nimport type { ListPropertiesConfig, ListPropertiesStyleListType } from '../../listconfig.js';\n\n/**\n * Normalizes {@link module:list/listconfig~ListPropertiesConfig} in the configuration of the list properties feature.\n * The structure of normalized list properties options looks as follows:\n *\n * ```ts\n * {\n * \tstyles: {\n * \t\tlistTypes: [ 'bulleted', 'numbered' ],\n * \t\tuseAttribute: false\n * \t},\n * \tstartIndex: true,\n * \treversed: true\n * }\n * ```\n *\n * @param config The list properties {@link module:list/listconfig~ListPropertiesConfig config}.\n * @returns An object with normalized list properties options.\n */\nexport function getNormalizedConfig( config: ListPropertiesConfig ): NormalizedListPropertiesConfig {\n\tconst { startIndex, reversed, styles } = config;\n\n\treturn {\n\t\tstyles: getNormalizedStylesConfig( styles ),\n\t\tstartIndex: startIndex || false,\n\t\treversed: reversed || false\n\t};\n}\n\n/**\n * Normalizes styles in the configuration of the list properties feature.\n * The structure of normalized list properties options looks as follows:\n *\n * ```ts\n * {\n * \tlistTypes: [ 'bulleted', 'numbered' ],\n * \tuseAttribute: false\n * }\n * ```\n *\n * @param styles The list properties styles.\n * @returns An object with normalized list properties styles.\n */\nfunction getNormalizedStylesConfig( styles: ListPropertiesConfig[ 'styles' ] ): NormalizedListPropertiesConfig[ 'styles' ] {\n\tconst normalizedConfig: NormalizedListPropertiesConfig[ 'styles' ] = {\n\t\tlistTypes: [ 'bulleted', 'numbered' ],\n\t\tuseAttribute: false\n\t};\n\n\tif ( styles === true ) {\n\t\treturn normalizedConfig;\n\t}\n\n\tif ( !styles ) {\n\t\tnormalizedConfig.listTypes = [];\n\t}\n\telse if ( Array.isArray( styles ) || typeof styles == 'string' ) {\n\t\tnormalizedConfig.listTypes = toArray( styles );\n\t}\n\telse {\n\t\tnormalizedConfig.listTypes = styles.listTypes ?\n\t\t\ttoArray( styles.listTypes ) :\n\t\t\tnormalizedConfig.listTypes;\n\n\t\tnormalizedConfig.useAttribute = !!styles.useAttribute;\n\n\t\tif ( styles.listStyleTypes ) {\n\t\t\tnormalizedConfig.listStyleTypes = styles.listStyleTypes;\n\t\t}\n\t}\n\n\treturn normalizedConfig;\n}\n\n/**\n* Normalized list properties config.\n*/\nexport type NormalizedListPropertiesConfig = {\n\tstyles: {\n\t\tlistTypes: Array<ListPropertiesStyleListType>;\n\t\tlistStyleTypes?: {\n\t\t\tnumbered?: Array<string>;\n\t\t\tbulleted?: Array<string>;\n\t\t};\n\t\tuseAttribute: boolean;\n\t};\n\tstartIndex: boolean;\n\treversed: boolean;\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/listpropertiesediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\n\nimport type {\n\tConsumables,\n\tDowncastWriter,\n\tElement,\n\tItem,\n\tUpcastElementEvent,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport ListEditing, {\n\ttype ListType,\n\ttype ListEditingCheckAttributesEvent,\n\ttype ListEditingPostFixerEvent,\n\ttype ListItemAttributesMap\n} from '../list/listediting.js';\n\nimport ListStartCommand from './liststartcommand.js';\nimport ListStyleCommand from './liststylecommand.js';\nimport ListReversedCommand from './listreversedcommand.js';\nimport { listPropertiesUpcastConverter } from './converters.js';\nimport {\n\tgetAllSupportedStyleTypes,\n\tgetListTypeFromListStyleType,\n\tgetListStyleTypeFromTypeAttribute,\n\tgetTypeAttributeFromListStyleType,\n\tnormalizeListStyle\n} from './utils/style.js';\nimport ListPropertiesUtils from './listpropertiesutils.js';\nimport {\n\tisNumberedListType\n} from '../list/utils/model.js';\n\nimport type { ListIndentCommandAfterExecuteEvent } from '../list/listindentcommand.js';\nimport type { ListPropertiesConfig } from '../listconfig.js';\nimport { getNormalizedConfig } from './utils/config.js';\n\nconst DEFAULT_LIST_TYPE = 'default';\n\n/**\n * The document list properties engine feature.\n *\n * It registers the `'listStyle'`, `'listReversed'` and `'listStart'` commands if they are enabled in the configuration.\n * Read more in {@link module:list/listconfig~ListPropertiesConfig}.\n */\nexport default class ListPropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing, ListPropertiesUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListPropertiesEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'list.properties', {\n\t\t\tstyles: true,\n\t\t\tstartIndex: false,\n\t\t\treversed: false\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\n\t\tconst enabledProperties = editor.config.get( 'list.properties' )!;\n\t\tconst strategies = createAttributeStrategies( enabledProperties );\n\n\t\tfor ( const strategy of strategies ) {\n\t\t\tstrategy.addCommand( editor );\n\n\t\t\tmodel.schema.extend( '$listItem', { allowAttributes: strategy.attributeName } );\n\n\t\t\t// Register downcast strategy.\n\t\t\tlistEditing.registerDowncastStrategy( {\n\t\t\t\tscope: 'list',\n\t\t\t\tattributeName: strategy.attributeName,\n\n\t\t\t\tsetAttributeOnDowncast( writer, attributeValue, viewElement ) {\n\t\t\t\t\tstrategy.setAttributeOnDowncast( writer, attributeValue, viewElement );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Set up conversion.\n\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ol', listPropertiesUpcastConverter( strategy ) );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ul', listPropertiesUpcastConverter( strategy ) );\n\t\t\t}\n\t\t} );\n\n\t\t// Verify if the list view element (ul or ol) requires refreshing.\n\t\tlistEditing.on<ListEditingCheckAttributesEvent>(\n\t\t\t'checkAttributes:list',\n\t\t\t( evt, { viewElement, modelAttributes } ) => {\n\t\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\t\tif ( strategy.getAttributeOnUpcast( viewElement ) != modelAttributes[ strategy.attributeName ] ) {\n\t\t\t\t\t\tevt.return = true;\n\t\t\t\t\t\tevt.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t// Reset list properties after indenting list items.\n\t\tthis.listenTo<ListIndentCommandAfterExecuteEvent>(\n\t\t\teditor.commands.get( 'indentList' )!,\n\t\t\t'afterExecute',\n\t\t\t( evt, changedBlocks ) => {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\tfor ( const node of changedBlocks ) {\n\t\t\t\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\t\t\t\tif ( strategy.appliesToListItem( node ) ) {\n\t\t\t\t\t\t\t\t// Just reset the attribute.\n\t\t\t\t\t\t\t\t// If there is a previous indented list that this node should be merged into,\n\t\t\t\t\t\t\t\t// the postfixer will unify all the attributes of both sub-lists.\n\t\t\t\t\t\t\t\twriter.setAttribute( strategy.attributeName, strategy.defaultValue, node );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t);\n\n\t\t// Add or remove list properties attributes depending on the list type.\n\t\tlistEditing.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tfor ( const { node } of listNodes ) {\n\t\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\t\t// Check if attribute is valid.\n\t\t\t\t\tif ( strategy.hasValidAttribute( node ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add missing default property attributes...\n\t\t\t\t\tif ( strategy.appliesToListItem( node ) ) {\n\t\t\t\t\t\twriter.setAttribute( strategy.attributeName, strategy.defaultValue, node );\n\t\t\t\t\t}\n\t\t\t\t\t// ...or remove invalid property attributes.\n\t\t\t\t\telse {\n\t\t\t\t\t\twriter.removeAttribute( strategy.attributeName, node );\n\t\t\t\t\t}\n\n\t\t\t\t\tevt.return = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Make sure that all items in a single list (items at the same level & listType) have the same properties.\n\t\tlistEditing.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tfor ( const { node, previousNodeInList } of listNodes ) {\n\t\t\t\t// This is a first item of a nested list.\n\t\t\t\tif ( !previousNodeInList ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// This is a first block of a list of a different type.\n\t\t\t\tif ( previousNodeInList.getAttribute( 'listType' ) != node.getAttribute( 'listType' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Copy properties from the previous one.\n\t\t\t\tfor ( const strategy of strategies ) {\n\t\t\t\t\tconst { attributeName } = strategy;\n\n\t\t\t\t\tif ( !strategy.appliesToListItem( node ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = previousNodeInList.getAttribute( attributeName );\n\n\t\t\t\t\tif ( node.getAttribute( attributeName ) != value ) {\n\t\t\t\t\t\twriter.setAttribute( attributeName, value, node );\n\t\t\t\t\t\tevt.return = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Strategy for dealing with `listItem` attributes supported by this plugin.\n *\n * @internal\n */\nexport interface AttributeStrategy {\n\n\t/**\n\t * The model attribute name.\n\t */\n\tattributeName: keyof ListItemAttributesMap;\n\n\t/**\n\t * The model attribute default value.\n\t */\n\tdefaultValue: unknown;\n\n\t/**\n\t * The view consumable as expected by {@link module:engine/conversion/viewconsumable~ViewConsumable#consume `ViewConsumable`}.\n\t */\n\tviewConsumables: Consumables;\n\n\t/**\n\t * Registers an editor command.\n\t */\n\taddCommand( editor: Editor ): void;\n\n\t/**\n\t * Verifies whether the strategy is applicable for the specified model element.\n\t */\n\tappliesToListItem( element: Item ): boolean;\n\n\t/**\n\t * Verifies whether the model attribute value is valid.\n\t */\n\thasValidAttribute( element: Element ): boolean;\n\n\t/**\n\t * Sets the property on the view element.\n\t */\n\tsetAttributeOnDowncast( writer: DowncastWriter, value: unknown, element: ViewElement ): void;\n\n\t/**\n\t * Retrieves the property value from the view element.\n\t */\n\tgetAttributeOnUpcast( element: ViewElement ): unknown;\n}\n\n/**\n * Creates an array of strategies for dealing with enabled listItem attributes.\n */\nfunction createAttributeStrategies( enabledProperties: ListPropertiesConfig ) {\n\tconst strategies: Array<AttributeStrategy> = [];\n\tconst normalizedConfig = getNormalizedConfig( enabledProperties );\n\n\tif ( enabledProperties.styles ) {\n\t\tconst useAttribute = normalizedConfig.styles.useAttribute;\n\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listStyle',\n\t\t\tdefaultValue: DEFAULT_LIST_TYPE,\n\t\t\tviewConsumables: { styles: 'list-style-type' },\n\n\t\t\taddCommand( editor ) {\n\t\t\t\tlet supportedTypes = getAllSupportedStyleTypes();\n\n\t\t\t\tif ( useAttribute ) {\n\t\t\t\t\tsupportedTypes = supportedTypes.filter( styleType => !!getTypeAttributeFromListStyleType( styleType ) );\n\t\t\t\t}\n\n\t\t\t\teditor.commands.add( 'listStyle', new ListStyleCommand( editor, DEFAULT_LIST_TYPE, supportedTypes ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn item.getAttribute( 'listType' ) == 'numbered' || item.getAttribute( 'listType' ) == 'bulleted';\n\t\t\t},\n\n\t\t\thasValidAttribute( item ) {\n\t\t\t\tif ( !this.appliesToListItem( item ) ) {\n\t\t\t\t\treturn !item.hasAttribute( 'listStyle' );\n\t\t\t\t}\n\n\t\t\t\tif ( !item.hasAttribute( 'listStyle' ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst value = item.getAttribute( 'listStyle' );\n\n\t\t\t\tif ( value == DEFAULT_LIST_TYPE ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn getListTypeFromListStyleType( value as string ) == item.getAttribute( 'listType' );\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listStyle, element ) {\n\t\t\t\tif ( listStyle && listStyle !== DEFAULT_LIST_TYPE ) {\n\t\t\t\t\tif ( useAttribute ) {\n\t\t\t\t\t\tconst value = getTypeAttributeFromListStyleType( listStyle as string );\n\n\t\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\t\twriter.setAttribute( 'type', value, element );\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.setStyle( 'list-style-type', listStyle as string, element );\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twriter.removeStyle( 'list-style-type', element );\n\t\t\t\twriter.removeAttribute( 'type', element );\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\tconst style = listParent.getStyle( 'list-style-type' );\n\n\t\t\t\tif ( style ) {\n\t\t\t\t\treturn normalizeListStyle( style );\n\t\t\t\t}\n\n\t\t\t\tconst attribute = listParent.getAttribute( 'type' );\n\n\t\t\t\tif ( attribute ) {\n\t\t\t\t\treturn getListStyleTypeFromTypeAttribute( attribute );\n\t\t\t\t}\n\n\t\t\t\treturn DEFAULT_LIST_TYPE;\n\t\t\t}\n\t\t} );\n\t}\n\n\tif ( enabledProperties.reversed ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listReversed',\n\t\t\tdefaultValue: false,\n\t\t\tviewConsumables: { attributes: 'reversed' },\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listReversed', new ListReversedCommand( editor ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn item.getAttribute( 'listType' ) == 'numbered';\n\t\t\t},\n\n\t\t\thasValidAttribute( item ) {\n\t\t\t\treturn this.appliesToListItem( item ) == item.hasAttribute( 'listReversed' );\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listReversed, element ) {\n\t\t\t\tif ( listReversed ) {\n\t\t\t\t\twriter.setAttribute( 'reversed', 'reversed', element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'reversed', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\treturn listParent.hasAttribute( 'reversed' );\n\t\t\t}\n\t\t} );\n\t}\n\n\tif ( enabledProperties.startIndex ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listStart',\n\t\t\tdefaultValue: 1,\n\t\t\tviewConsumables: { attributes: 'start' },\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listStart', new ListStartCommand( editor ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn isNumberedListType( item.getAttribute( 'listType' ) as ListType );\n\t\t\t},\n\n\t\t\thasValidAttribute( item ) {\n\t\t\t\treturn this.appliesToListItem( item ) == item.hasAttribute( 'listStart' );\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listStart, element ) {\n\t\t\t\tif ( listStart == 0 || ( listStart as number ) > 1 ) {\n\t\t\t\t\twriter.setAttribute( 'start', listStart, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'start', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\tconst startAttributeValue: any = listParent.getAttribute( 'start' );\n\n\t\t\t\treturn startAttributeValue >= 0 ? startAttributeValue : 1;\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn strategies;\n}\n\ndeclare module '../list/listediting' {\n\tinterface ListItemAttributesMap {\n\t\tlistStyle?: string;\n\t\tlistStart?: number;\n\t\tlistReversed?: boolean;\n\t}\n}\n\ndeclare module '../list/utils/model' {\n\tinterface ListElement {\n\t\tgetAttribute( key: 'listStyle' ): string;\n\t\tgetAttribute( key: 'listStart' ): number;\n\t\tgetAttribute( key: 'listReversed' ): boolean;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/ui/listpropertiesview\n */\n\nimport {\n\tButtonView,\n\tView,\n\tViewCollection,\n\tFocusCycler,\n\tSwitchButtonView,\n\tLabeledFieldView,\n\tcreateLabeledInputNumber,\n\taddKeyboardHandlingForGrid,\n\tCollapsibleView,\n\ttype InputNumberView,\n\ttype FocusableView\n} from 'ckeditor5/src/ui.js';\n\nimport {\n\tFocusTracker,\n\tKeystrokeHandler,\n\tglobal,\n\ttype Locale\n} from 'ckeditor5/src/utils.js';\n\nimport type { NormalizedListPropertiesConfig } from '../utils/config.js';\n\nimport '../../../theme/listproperties.css';\n\n/**\n * The list properties view to be displayed in the list dropdown.\n *\n * Contains a grid of available list styles and, for numbered list, also the list start index and reversed fields.\n *\n * @internal\n */\nexport default class ListPropertiesView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public locale: Locale;\n\n\t/**\n\t * A collection of the child views.\n\t */\n\tpublic readonly children: ViewCollection;\n\n\t/**\n\t * A view that renders the grid of list styles.\n\t */\n\tpublic readonly stylesView: StylesView | null = null;\n\n\t/**\n\t * A collapsible view that hosts additional list property fields ({@link #startIndexFieldView} and\n\t * {@link #reversedSwitchButtonView}) to visually separate them from the {@link #stylesView grid of styles}.\n\t *\n\t * **Note**: Only present when:\n\t * * the view represents **numbered** list properties,\n\t * * and the {@link #stylesView} is rendered,\n\t * * and either {@link #startIndexFieldView} or {@link #reversedSwitchButtonView} is rendered.\n\t *\n\t * @readonly\n\t */\n\tpublic additionalPropertiesCollapsibleView: CollapsibleView | null = null;\n\n\t/**\n\t * A labeled number field allowing the user to set the start index of the list.\n\t *\n\t * **Note**: Only present when the view represents **numbered** list properties.\n\t *\n\t * @readonly\n\t */\n\tpublic startIndexFieldView: LabeledFieldView<InputNumberView> | null = null;\n\n\t/**\n\t * A switch button allowing the user to make the edited list reversed.\n\t *\n\t * **Note**: Only present when the view represents **numbered** list properties.\n\t *\n\t * @readonly\n\t */\n\tpublic reversedSwitchButtonView: SwitchButtonView | null = null;\n\n\t/**\n\t * Tracks information about the DOM focus in the view.\n\t */\n\tpublic readonly focusTracker: FocusTracker = new FocusTracker();\n\n\t/**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler = new KeystrokeHandler();\n\n\t/**\n\t * A collection of views that can be focused in the properties view.\n\t */\n\tpublic readonly focusables = new ViewCollection<FocusableView>();\n\n\t/**\n\t * Helps cycling over {@link #focusables} in the view.\n\t */\n\tpublic readonly focusCycler: FocusCycler;\n\n\t/**\n\t * Creates an instance of the list properties view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Options of the view.\n\t * @param options.enabledProperties An object containing the configuration of enabled list property names.\n\t * Allows conditional rendering the sub-components of the properties view.\n\t * @param options.styleButtonViews A list of style buttons to be rendered\n\t * inside the styles grid. The grid will not be rendered when `enabledProperties` does not include the `'styles'` key.\n\t * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).\n\t */\n\tconstructor(\n\t\tlocale: Locale,\n\t\t{ enabledProperties, styleButtonViews, styleGridAriaLabel }: {\n\t\t\tenabledProperties: NormalizedListPropertiesConfig;\n\t\t\tstyleButtonViews: Array<ButtonView> | null;\n\t\t\tstyleGridAriaLabel: string;\n\t\t}\n\t) {\n\t\tsuper( locale );\n\n\t\tconst elementCssClasses = [\n\t\t\t'ck',\n\t\t\t'ck-list-properties'\n\t\t];\n\n\t\tthis.children = this.createCollection();\n\n\t\tthis.focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate #children backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate #children forwards using the <kbd>Tab</kbd> key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t// The rendering of the styles grid is conditional. When there is no styles grid, the view will render without collapsible\n\t\t// for numbered list properties, hence simplifying the layout.\n\t\tif ( styleButtonViews && styleButtonViews.length ) {\n\t\t\tthis.stylesView = this._createStylesView( styleButtonViews!, styleGridAriaLabel );\n\t\t\tthis.children.add( this.stylesView );\n\t\t} else {\n\t\t\telementCssClasses.push( 'ck-list-properties_without-styles' );\n\t\t}\n\n\t\t// The rendering of the numbered list property views is also conditional. It only makes sense for the numbered list\n\t\t// dropdown. The unordered list does not have such properties.\n\t\tif ( enabledProperties.startIndex || enabledProperties.reversed ) {\n\t\t\tthis._addNumberedListPropertyViews( enabledProperties );\n\n\t\t\telementCssClasses.push( 'ck-list-properties_with-numbered-properties' );\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: elementCssClasses\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\tif ( this.stylesView ) {\n\t\t\tthis.focusables.add( this.stylesView );\n\t\t\tthis.focusTracker.add( this.stylesView.element! );\n\n\t\t\t// Register the collapsible toggle button to the focus system.\n\t\t\tif ( this.startIndexFieldView || this.reversedSwitchButtonView ) {\n\t\t\t\tthis.focusables.add( ( this.children.last as any ).buttonView );\n\t\t\t\tthis.focusTracker.add( ( this.children.last as any ).buttonView.element );\n\t\t\t}\n\n\t\t\tfor ( const item of this.stylesView.children ) {\n\t\t\t\tthis.stylesView.focusTracker.add( item.element! );\n\t\t\t}\n\n\t\t\taddKeyboardHandlingForGrid( {\n\t\t\t\tkeystrokeHandler: this.stylesView.keystrokes,\n\t\t\t\tfocusTracker: this.stylesView.focusTracker,\n\t\t\t\tgridItems: this.stylesView.children,\n\t\t\t\t// Note: The styles view has a different number of columns depending on whether the other properties\n\t\t\t\t// are enabled in the dropdown or not (https://github.com/ckeditor/ckeditor5/issues/12340)\n\t\t\t\tnumberOfColumns: () => global.window\n\t\t\t\t\t.getComputedStyle( this.stylesView!.element! )\n\t\t\t\t\t.getPropertyValue( 'grid-template-columns' )\n\t\t\t\t\t.split( ' ' )\n\t\t\t\t\t.length,\n\t\t\t\tuiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.startIndexFieldView ) {\n\t\t\tthis.focusables.add( this.startIndexFieldView );\n\t\t\tthis.focusTracker.add( this.startIndexFieldView.element! );\n\n\t\t\tconst stopPropagation = ( data: Event ) => data.stopPropagation();\n\n\t\t\t// Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n\t\t\t// keystroke handler would take over the key management in the input. We need to prevent\n\t\t\t// this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n\t\t\tthis.keystrokes.set( 'arrowright', stopPropagation );\n\t\t\tthis.keystrokes.set( 'arrowleft', stopPropagation );\n\t\t\tthis.keystrokes.set( 'arrowup', stopPropagation );\n\t\t\tthis.keystrokes.set( 'arrowdown', stopPropagation );\n\t\t}\n\n\t\tif ( this.reversedSwitchButtonView ) {\n\t\t\tthis.focusables.add( this.reversedSwitchButtonView );\n\t\t\tthis.focusTracker.add( this.reversedSwitchButtonView.element! );\n\t\t}\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic focus(): void {\n\t\tthis.focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic focusLast(): void {\n\t\tthis.focusCycler.focusLast();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Creates the list styles grid.\n\t *\n\t * @param styleButtons Buttons to be placed in the grid.\n\t * @param styleGridAriaLabel The assistive technology label of the grid.\n\t */\n\tprivate _createStylesView( styleButtons: Array<ButtonView>, styleGridAriaLabel: string ) {\n\t\tconst stylesView = new View( this.locale ) as StylesView;\n\n\t\tstylesView.children = stylesView.createCollection();\n\t\tstylesView.children.addMany( styleButtons );\n\n\t\tstylesView.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\t'aria-label': styleGridAriaLabel,\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list-styles-list'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: stylesView.children\n\t\t} );\n\n\t\tstylesView.children.delegate( 'execute' ).to( this );\n\n\t\tstylesView.focus = function( this: any ) {\n\t\t\t// If there is a button that is already on, focus it.\n\t\t\t// It's counterintuitive to focus the first button when there is already a button on.\n\t\t\tfor ( const child of this.children ) {\n\t\t\t\tif ( child instanceof ButtonView && child.isOn ) {\n\t\t\t\t\tchild.focus();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ... otherwise focus the first button.\n\t\t\tthis.children.first.focus();\n\t\t};\n\n\t\tstylesView.focusTracker = new FocusTracker();\n\t\tstylesView.keystrokes = new KeystrokeHandler();\n\n\t\tstylesView.render();\n\n\t\tstylesView.keystrokes.listenTo( stylesView.element! );\n\n\t\treturn stylesView;\n\t}\n\n\t/**\n\t * Renders {@link #startIndexFieldView} and/or {@link #reversedSwitchButtonView} depending on the configuration of the properties view.\n\t *\n\t * @param enabledProperties An object containing the configuration of enabled list property names\n\t * (see {@link #constructor}).\n\t */\n\tprivate _addNumberedListPropertyViews( enabledProperties: NormalizedListPropertiesConfig ) {\n\t\tconst t = this.locale.t;\n\t\tconst numberedPropertyViews = [];\n\n\t\tif ( enabledProperties.startIndex ) {\n\t\t\tthis.startIndexFieldView = this._createStartIndexField();\n\t\t\tnumberedPropertyViews.push( this.startIndexFieldView );\n\t\t}\n\n\t\tif ( enabledProperties.reversed ) {\n\t\t\tthis.reversedSwitchButtonView = this._createReversedSwitchButton();\n\t\t\tnumberedPropertyViews.push( this.reversedSwitchButtonView );\n\t\t}\n\n\t\t// When there are some style buttons, pack the numbered list properties into a collapsible to separate them.\n\t\tif ( this.stylesView ) {\n\t\t\tthis.additionalPropertiesCollapsibleView = new CollapsibleView( this.locale, numberedPropertyViews );\n\n\t\t\tthis.additionalPropertiesCollapsibleView.set( {\n\t\t\t\tlabel: t( 'List properties' ),\n\t\t\t\tisCollapsed: true\n\t\t\t} );\n\n\t\t\t// Don't enable the collapsible view unless either start index or reversed field is enabled (e.g. when no list is selected).\n\t\t\tthis.additionalPropertiesCollapsibleView.buttonView.bind( 'isEnabled' ).toMany(\n\t\t\t\tnumberedPropertyViews, 'isEnabled', ( ...areEnabled ) => areEnabled.some( isEnabled => isEnabled ) );\n\n\t\t\t// Automatically collapse the additional properties collapsible when either start index or reversed field gets disabled.\n\t\t\tthis.additionalPropertiesCollapsibleView.buttonView.on( 'change:isEnabled', ( evt, data, isEnabled ) => {\n\t\t\t\tif ( !isEnabled ) {\n\t\t\t\t\tthis.additionalPropertiesCollapsibleView!.isCollapsed = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.children.add( this.additionalPropertiesCollapsibleView );\n\t\t} else {\n\t\t\tthis.children.addMany( numberedPropertyViews );\n\t\t}\n\t}\n\n\t/**\n\t * Creates the list start index labeled field.\n\t */\n\tprivate _createStartIndexField() {\n\t\tconst t = this.locale.t;\n\t\tconst startIndexFieldView = new LabeledFieldView( this.locale, createLabeledInputNumber );\n\n\t\tstartIndexFieldView.set( {\n\t\t\tlabel: t( 'Start at' ),\n\t\t\tclass: 'ck-numbered-list-properties__start-index'\n\t\t} );\n\n\t\tstartIndexFieldView.fieldView.set( {\n\t\t\tmin: 0,\n\t\t\tstep: 1,\n\t\t\tvalue: 1,\n\t\t\tinputMode: 'numeric'\n\t\t} );\n\n\t\tstartIndexFieldView.fieldView.on( 'input', () => {\n\t\t\tconst inputElement = startIndexFieldView.fieldView.element!;\n\t\t\tconst startIndex = inputElement.valueAsNumber;\n\n\t\t\tif ( Number.isNaN( startIndex ) ) {\n\t\t\t\t// Number inputs allow for the entry of characters that may result in NaN,\n\t\t\t\t// such as 'e', '+', '123e', '2-'.\n\t\t\t\tstartIndexFieldView.errorText = t( 'Invalid start index value.' );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !inputElement.checkValidity() ) {\n\t\t\t\tstartIndexFieldView.errorText = t( 'Start index must be greater than 0.' );\n\t\t\t} else {\n\t\t\t\tthis.fire<ListPropertiesViewListStartEvent>( 'listStart', { startIndex } );\n\t\t\t}\n\t\t} );\n\n\t\treturn startIndexFieldView;\n\t}\n\n\t/**\n\t * Creates the reversed list switch button.\n\t */\n\tprivate _createReversedSwitchButton() {\n\t\tconst t = this.locale.t;\n\t\tconst reversedButtonView = new SwitchButtonView( this.locale );\n\n\t\treversedButtonView.set( {\n\t\t\twithText: true,\n\t\t\tlabel: t( 'Reversed order' ),\n\t\t\tclass: 'ck-numbered-list-properties__reversed-order'\n\t\t} );\n\n\t\treversedButtonView.delegate( 'execute' ).to( this, 'listReversed' );\n\n\t\treturn reversedButtonView;\n\t}\n}\n\nexport type StylesView = View & {\n\tchildren: ViewCollection;\n\tfocusTracker: FocusTracker;\n\tkeystrokes: KeystrokeHandler;\n\tfocus(): void;\n};\n\n/**\n * Fired when the list start index value has changed via {@link ~ListPropertiesView#startIndexFieldView}.\n *\n * @eventName ~ListPropertiesView#listStart\n */\nexport type ListPropertiesViewListStartEvent = {\n\tname: 'listStart';\n\targs: [ data: { startIndex: number } ];\n};\n\n/**\n * Fired when the list order has changed (reversed) via {@link ~ListPropertiesView#reversedSwitchButtonView}.\n *\n * @eventName ~ListPropertiesView#listReversed\n */\nexport type ListPropertiesViewListReversedEvent = {\n\tname: 'listReversed';\n\targs: [];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties/listpropertiesui\n */\n\nimport { icons, Plugin, type Editor } from 'ckeditor5/src/core.js';\n\nimport {\n\tButtonView,\n\tSplitButtonView,\n\tcreateDropdown,\n\tfocusChildOnDropdownOpen,\n\tMenuBarMenuView,\n\ttype DropdownView\n} from 'ckeditor5/src/ui.js';\n\nimport type { Locale } from 'ckeditor5/src/utils.js';\n\nimport ListPropertiesView from './ui/listpropertiesview.js';\n\nimport type LegacyListStyleCommand from '../legacylistproperties/legacyliststylecommand.js';\nimport type ListStyleCommand from '../listproperties/liststylecommand.js';\nimport type LegacyListStartCommand from '../legacylistproperties/legacyliststartcommand.js';\nimport type ListStartCommand from '../listproperties/liststartcommand.js';\nimport type LegacyListReversedCommand from '../legacylistproperties/legacylistreversedcommand.js';\nimport type ListReversedCommand from '../listproperties/listreversedcommand.js';\n\nimport { getNormalizedConfig, type NormalizedListPropertiesConfig } from './utils/config.js';\nimport { type ListPropertiesStyleListType } from '../listconfig.js';\n\nimport listStyleDiscIcon from '../../theme/icons/liststyledisc.svg';\nimport listStyleCircleIcon from '../../theme/icons/liststylecircle.svg';\nimport listStyleSquareIcon from '../../theme/icons/liststylesquare.svg';\nimport listStyleDecimalIcon from '../../theme/icons/liststyledecimal.svg';\nimport listStyleDecimalWithLeadingZeroIcon from '../../theme/icons/liststyledecimalleadingzero.svg';\nimport listStyleLowerRomanIcon from '../../theme/icons/liststylelowerroman.svg';\nimport listStyleUpperRomanIcon from '../../theme/icons/liststyleupperroman.svg';\nimport listStyleLowerLatinIcon from '../../theme/icons/liststylelowerlatin.svg';\nimport listStyleUpperLatinIcon from '../../theme/icons/liststyleupperlatin.svg';\n\nimport '../../theme/liststyles.css';\n\n/**\n * The list properties UI plugin. It introduces the extended `'bulletedList'` and `'numberedList'` toolbar\n * buttons that allow users to control such aspects of list as the marker, start index or order.\n *\n * **Note**: Buttons introduced by this plugin override implementations from the {@link module:list/list/listui~ListUI}\n * (because they share the same names).\n */\nexport default class ListPropertiesUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListPropertiesUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.locale.t;\n\t\tconst propertiesConfig = editor.config.get( 'list.properties' )!;\n\t\tconst normalizedConfig = getNormalizedConfig( propertiesConfig );\n\t\tconst stylesListTypes = normalizedConfig.styles.listTypes;\n\n\t\t// Note: When this plugin does not register the \"bulletedList\" dropdown due to properties configuration,\n\t\t// a simple button will be still registered under the same name by ListUI as a fallback. This should happen\n\t\t// in most editor configuration because the List plugin automatically requires ListUI.\n\t\tif ( stylesListTypes.includes( 'bulleted' ) ) {\n\t\t\tconst styleDefinitions = [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the disc list style' ),\n\t\t\t\t\ttooltip: t( 'Disc' ),\n\t\t\t\t\ttype: 'disc',\n\t\t\t\t\ticon: listStyleDiscIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the circle list style' ),\n\t\t\t\t\ttooltip: t( 'Circle' ),\n\t\t\t\t\ttype: 'circle',\n\t\t\t\t\ticon: listStyleCircleIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the square list style' ),\n\t\t\t\t\ttooltip: t( 'Square' ),\n\t\t\t\t\ttype: 'square',\n\t\t\t\t\ticon: listStyleSquareIcon\n\t\t\t\t}\n\t\t\t];\n\t\t\tconst buttonLabel = t( 'Bulleted List' );\n\t\t\tconst styleGridAriaLabel = t( 'Bulleted list styles toolbar' );\n\t\t\tconst commandName = 'bulletedList';\n\n\t\t\teditor.ui.componentFactory.add( commandName, getDropdownViewCreator( {\n\t\t\t\teditor,\n\t\t\t\tnormalizedConfig,\n\t\t\t\tparentCommandName: commandName,\n\t\t\t\tbuttonLabel,\n\t\t\t\tbuttonIcon: icons.bulletedList,\n\t\t\t\tstyleGridAriaLabel,\n\t\t\t\tstyleDefinitions\n\t\t\t} ) );\n\n\t\t\t// Add the menu bar item for bulleted list.\n\t\t\teditor.ui.componentFactory.add( `menuBar:${ commandName }`, getMenuBarStylesMenuCreator( {\n\t\t\t\teditor,\n\t\t\t\tnormalizedConfig,\n\t\t\t\tparentCommandName: commandName,\n\t\t\t\tbuttonLabel,\n\t\t\t\tstyleGridAriaLabel,\n\t\t\t\tstyleDefinitions\n\t\t\t} ) );\n\t\t}\n\n\t\t// Note: When this plugin does not register the \"numberedList\" dropdown due to properties configuration,\n\t\t// a simple button will be still registered under the same name by ListUI as a fallback. This should happen\n\t\t// in most editor configuration because the List plugin automatically requires ListUI.\n\t\tif ( stylesListTypes.includes( 'numbered' ) || propertiesConfig.startIndex || propertiesConfig.reversed ) {\n\t\t\tconst styleDefinitions = [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the decimal list style' ),\n\t\t\t\t\ttooltip: t( 'Decimal' ),\n\t\t\t\t\ttype: 'decimal',\n\t\t\t\t\ticon: listStyleDecimalIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the decimal with leading zero list style' ),\n\t\t\t\t\ttooltip: t( 'Decimal with leading zero' ),\n\t\t\t\t\ttype: 'decimal-leading-zero',\n\t\t\t\t\ticon: listStyleDecimalWithLeadingZeroIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the lower–roman list style' ),\n\t\t\t\t\ttooltip: t( 'Lower–roman' ),\n\t\t\t\t\ttype: 'lower-roman',\n\t\t\t\t\ticon: listStyleLowerRomanIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the upper–roman list style' ),\n\t\t\t\t\ttooltip: t( 'Upper-roman' ),\n\t\t\t\t\ttype: 'upper-roman',\n\t\t\t\t\ticon: listStyleUpperRomanIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the lower–latin list style' ),\n\t\t\t\t\ttooltip: t( 'Lower-latin' ),\n\t\t\t\t\ttype: 'lower-latin',\n\t\t\t\t\ticon: listStyleLowerLatinIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Toggle the upper–latin list style' ),\n\t\t\t\t\ttooltip: t( 'Upper-latin' ),\n\t\t\t\t\ttype: 'upper-latin',\n\t\t\t\t\ticon: listStyleUpperLatinIcon\n\t\t\t\t}\n\t\t\t];\n\t\t\tconst buttonLabel = t( 'Numbered List' );\n\t\t\tconst styleGridAriaLabel = t( 'Numbered list styles toolbar' );\n\t\t\tconst commandName = 'numberedList';\n\n\t\t\teditor.ui.componentFactory.add( commandName, getDropdownViewCreator( {\n\t\t\t\teditor,\n\t\t\t\tnormalizedConfig,\n\t\t\t\tparentCommandName: commandName,\n\t\t\t\tbuttonLabel,\n\t\t\t\tbuttonIcon: icons.numberedList,\n\t\t\t\tstyleGridAriaLabel,\n\t\t\t\tstyleDefinitions\n\t\t\t} ) );\n\n\t\t\t// Menu bar menu does not display list start index or reverse UI. If there are no styles enabled,\n\t\t\t// the menu makes no sense and should be omitted.\n\t\t\tif ( stylesListTypes.includes( 'numbered' ) ) {\n\t\t\t\teditor.ui.componentFactory.add( `menuBar:${ commandName }`, getMenuBarStylesMenuCreator( {\n\t\t\t\t\teditor,\n\t\t\t\t\tnormalizedConfig,\n\t\t\t\t\tparentCommandName: commandName,\n\t\t\t\t\tbuttonLabel,\n\t\t\t\t\tstyleGridAriaLabel,\n\t\t\t\t\tstyleDefinitions\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A helper that returns a function that creates a split button with a toolbar in the dropdown,\n * which in turn contains buttons allowing users to change list styles in the context of the current selection.\n *\n * @param options.editor\n * @param options.normalizedConfig List properties configuration.\n * @param options.parentCommandName The name of the higher-order editor command associated with\n * the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n * @param options.buttonLabel Label of the main part of the split button.\n * @param options.buttonIcon The SVG string of an icon for the main part of the split button.\n * @param options.styleGridAriaLabel The ARIA label for the styles grid in the split button dropdown.\n * @param options.styleDefinitions Definitions of the style buttons.\n * @returns A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n */\nfunction getDropdownViewCreator( {\n\teditor,\n\tnormalizedConfig,\n\tparentCommandName,\n\tbuttonLabel,\n\tbuttonIcon,\n\tstyleGridAriaLabel,\n\tstyleDefinitions\n}: {\n\teditor: Editor;\n\tnormalizedConfig: Readonly<NormalizedListPropertiesConfig>;\n\tparentCommandName: string;\n\tbuttonLabel: string;\n\tbuttonIcon: string;\n\tstyleGridAriaLabel: string;\n\tstyleDefinitions: Array<StyleDefinition>;\n} ) {\n\tconst parentCommand = editor.commands.get( parentCommandName )!;\n\n\treturn ( locale: Locale ) => {\n\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\tconst mainButtonView = dropdownView.buttonView;\n\n\t\tdropdownView.bind( 'isEnabled' ).to( parentCommand );\n\t\tdropdownView.class = 'ck-list-styles-dropdown';\n\n\t\t// Main button was clicked.\n\t\tmainButtonView.on( 'execute', () => {\n\t\t\teditor.execute( parentCommandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\tmainButtonView.set( {\n\t\t\tlabel: buttonLabel,\n\t\t\ticon: buttonIcon,\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\tmainButtonView.bind( 'isOn' ).to( parentCommand, 'value', value => !!value );\n\n\t\tdropdownView.once( 'change:isOpen', () => {\n\t\t\tconst listPropertiesView = createListPropertiesView( {\n\t\t\t\teditor,\n\t\t\t\tnormalizedConfig,\n\t\t\t\tdropdownView,\n\t\t\t\tparentCommandName,\n\t\t\t\tstyleGridAriaLabel,\n\t\t\t\tstyleDefinitions\n\t\t\t} );\n\n\t\t\tdropdownView.panelView.children.add( listPropertiesView );\n\t\t} );\n\n\t\t// Focus the editable after executing the command.\n\t\t// Overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n\t\tdropdownView.on( 'execute', () => {\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn dropdownView;\n\t};\n}\n\n/**\n * A helper that returns a function (factory) that creates individual buttons used by users to change styles\n * of lists.\n *\n * @param options.editor\n * @param options.listStyleCommand The instance of the `ListStylesCommand` class.\n * @param options.parentCommandName The name of the higher-order command associated with a\n * particular list style (e.g. \"bulletedList\" is associated with \"square\" and \"numberedList\" is associated with \"roman\").\n * @returns A function that can be passed straight into {@link module:ui/componentfactory~ComponentFactory#add}.\n */\nfunction getStyleButtonCreator( {\n\teditor,\n\tlistStyleCommand,\n\tparentCommandName\n}: {\n\teditor: Editor;\n\tlistStyleCommand: LegacyListStyleCommand | ListStyleCommand;\n\tparentCommandName: string;\n} ) {\n\tconst locale = editor.locale;\n\tconst parentCommand = editor.commands.get( parentCommandName )!;\n\n\treturn ( { label, type, icon, tooltip }: StyleDefinition ) => {\n\t\tconst button = new ButtonView( locale );\n\n\t\tbutton.set( { label, icon, tooltip } );\n\n\t\tbutton.bind( 'isOn' ).to( listStyleCommand, 'value', value => value === type );\n\n\t\tbutton.on( 'execute', () => {\n\t\t\t// If the content the selection is anchored to is a list, let's change its style.\n\t\t\tif ( parentCommand.value ) {\n\t\t\t\t// Remove the list when the current list style is the same as the one that would normally be applied.\n\t\t\t\tif ( listStyleCommand.value === type ) {\n\t\t\t\t\teditor.execute( parentCommandName );\n\t\t\t\t}\n\t\t\t\t// If the current list style is not set in the model or the style is different than the\n\t\t\t\t// one to be applied, simply apply the new style.\n\t\t\t\telse if ( listStyleCommand.value !== type ) {\n\t\t\t\t\teditor.execute( 'listStyle', { type } );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Otherwise, leave the creation of the styled list to the `ListStyleCommand`.\n\t\t\telse {\n\t\t\t\teditor.model.change( () => {\n\t\t\t\t\teditor.execute( 'listStyle', { type } );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn button;\n\t};\n}\n\n/**\n * A helper that creates the properties view for the individual style dropdown.\n *\n * @param options.editor Editor instance.\n * @param options.normalizedConfig List properties configuration.\n * @param options.dropdownView Styles dropdown view that hosts the properties view.\n * @param options.parentCommandName The name of the higher-order editor command associated with\n * the set of particular list styles (e.g. \"bulletedList\" for \"disc\", \"circle\", and \"square\" styles).\n * @param options.styleDefinitions Definitions of the style buttons.\n * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).\n */\nfunction createListPropertiesView( {\n\teditor,\n\tnormalizedConfig,\n\tdropdownView,\n\tparentCommandName,\n\tstyleDefinitions,\n\tstyleGridAriaLabel\n}: {\n\teditor: Editor;\n\tnormalizedConfig: Readonly<NormalizedListPropertiesConfig>;\n\tdropdownView: DropdownView;\n\tparentCommandName: string;\n\tstyleDefinitions: Array<StyleDefinition>;\n\tstyleGridAriaLabel: string;\n} ) {\n\tconst locale = editor.locale;\n\tconst enabledProperties = {\n\t\t...normalizedConfig,\n\n\t\t...( parentCommandName != 'numberedList' ? {\n\t\t\tstartIndex: false,\n\t\t\treversed: false\n\t\t} : null )\n\t};\n\tconst listType = parentCommandName.replace( 'List', '' ) as ListPropertiesStyleListType;\n\n\tlet styleButtonViews = null;\n\n\tif ( normalizedConfig.styles.listTypes.includes( listType ) ) {\n\t\tconst listStyleCommand: LegacyListStyleCommand | ListStyleCommand = editor.commands.get( 'listStyle' )!;\n\t\tconst styleButtonCreator = getStyleButtonCreator( {\n\t\t\teditor,\n\t\t\tparentCommandName,\n\t\t\tlistStyleCommand\n\t\t} );\n\n\t\tconst configuredListStylesTypes = normalizedConfig.styles.listStyleTypes;\n\t\tlet filteredDefinitions = styleDefinitions;\n\n\t\tif ( configuredListStylesTypes ) {\n\t\t\tconst allowedTypes = configuredListStylesTypes[ listType ];\n\n\t\t\tif ( allowedTypes ) {\n\t\t\t\tfilteredDefinitions = styleDefinitions.filter( def => allowedTypes.includes( def.type ) );\n\t\t\t}\n\t\t}\n\n\t\tconst isStyleTypeSupported = getStyleTypeSupportChecker( listStyleCommand );\n\t\tstyleButtonViews = filteredDefinitions\n\t\t\t.filter( isStyleTypeSupported )\n\t\t\t.map( styleButtonCreator );\n\t}\n\n\tconst listPropertiesView = new ListPropertiesView( locale, {\n\t\tstyleGridAriaLabel,\n\t\tenabledProperties,\n\t\tstyleButtonViews\n\t} );\n\n\tif ( normalizedConfig.styles.listTypes.includes( listType ) ) {\n\t\t// Accessibility: focus the first active style when opening the dropdown.\n\t\tfocusChildOnDropdownOpen( dropdownView, () => {\n\t\t\treturn listPropertiesView.stylesView!.children.find( ( child: any ) => child.isOn );\n\t\t} );\n\t}\n\n\tif ( enabledProperties.startIndex ) {\n\t\tconst listStartCommand: LegacyListStartCommand | ListStartCommand = editor.commands.get( 'listStart' )!;\n\n\t\tlistPropertiesView.startIndexFieldView!.bind( 'isEnabled' ).to( listStartCommand );\n\t\tlistPropertiesView.startIndexFieldView!.fieldView.bind( 'value' ).to( listStartCommand as any );\n\t\tlistPropertiesView.on( 'listStart', ( evt, data ) => editor.execute( 'listStart', data ) );\n\t}\n\n\tif ( enabledProperties.reversed ) {\n\t\tconst listReversedCommand: LegacyListReversedCommand | ListReversedCommand = editor.commands.get( 'listReversed' )!;\n\n\t\tlistPropertiesView.reversedSwitchButtonView!.bind( 'isEnabled' ).to( listReversedCommand );\n\t\tlistPropertiesView.reversedSwitchButtonView!.bind( 'isOn' ).to( listReversedCommand, 'value', value => !!value );\n\t\tlistPropertiesView.on( 'listReversed', () => {\n\t\t\tconst isReversed = listReversedCommand.value;\n\n\t\t\teditor.execute( 'listReversed', { reversed: !isReversed } );\n\t\t} );\n\t}\n\n\t// Make sure applying styles closes the dropdown.\n\tlistPropertiesView.delegate( 'execute' ).to( dropdownView );\n\n\treturn listPropertiesView;\n}\n\n/**\n * A helper that creates the list style submenu for menu bar.\n *\n * @param editor Editor instance.\n * @param normalizedConfig List properties configuration.\n * @param parentCommandName Name of the list command.\n * @param buttonLabel Label of the menu button.\n * @param styleGridAriaLabel ARIA label of the styles grid.\n */\nfunction getMenuBarStylesMenuCreator(\n\t{\n\t\teditor,\n\t\tnormalizedConfig,\n\t\tparentCommandName,\n\t\tbuttonLabel,\n\t\tstyleGridAriaLabel,\n\t\tstyleDefinitions\n\t}: {\n\t\teditor: Editor;\n\t\tnormalizedConfig: Readonly<NormalizedListPropertiesConfig>;\n\t\tparentCommandName: 'bulletedList' | 'numberedList';\n\t\tbuttonLabel: string;\n\t\tstyleGridAriaLabel: string;\n\t\tstyleDefinitions: Array<StyleDefinition>;\n\t}\n) {\n\treturn ( locale: Locale ) => {\n\t\tconst menuView = new MenuBarMenuView( locale );\n\t\tconst listCommand = editor.commands.get( parentCommandName )!;\n\t\tconst listStyleCommand = editor.commands.get( 'listStyle' )!;\n\t\tconst isStyleTypeSupported = getStyleTypeSupportChecker( listStyleCommand );\n\t\tconst styleButtonCreator = getStyleButtonCreator( {\n\t\t\teditor,\n\t\t\tparentCommandName,\n\t\t\tlistStyleCommand\n\t\t} );\n\n\t\tconst configuredListStylesTypes = normalizedConfig.styles.listStyleTypes;\n\t\tlet filteredDefinitions = styleDefinitions;\n\n\t\tif ( configuredListStylesTypes ) {\n\t\t\tconst listType = listCommand.type as 'numbered' | 'bulleted';\n\t\t\tconst allowedTypes = configuredListStylesTypes[ listType ];\n\n\t\t\tif ( allowedTypes ) {\n\t\t\t\tfilteredDefinitions = styleDefinitions.filter( def => allowedTypes.includes( def.type ) );\n\t\t\t}\n\t\t}\n\n\t\tconst styleButtonViews = filteredDefinitions.filter( isStyleTypeSupported ).map( styleButtonCreator );\n\t\tconst listPropertiesView = new ListPropertiesView( locale, {\n\t\t\tstyleGridAriaLabel,\n\t\t\tenabledProperties: {\n\t\t\t\t...normalizedConfig,\n\n\t\t\t\t// Disable list start index and reversed in the menu bar.\n\t\t\t\tstartIndex: false,\n\t\t\t\treversed: false\n\t\t\t},\n\t\t\tstyleButtonViews\n\t\t} );\n\n\t\tlistPropertiesView.delegate( 'execute' ).to( menuView );\n\n\t\tmenuView.buttonView.set( {\n\t\t\tlabel: buttonLabel,\n\t\t\ticon: icons[ parentCommandName ]\n\t\t} );\n\t\tmenuView.panelView.children.add( listPropertiesView );\n\t\tmenuView.bind( 'isEnabled' ).to( listCommand, 'isEnabled' );\n\t\tmenuView.on( 'execute', () => {\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn menuView;\n\t};\n}\n\nfunction getStyleTypeSupportChecker( listStyleCommand: LegacyListStyleCommand | ListStyleCommand ) {\n\tif ( typeof listStyleCommand.isStyleTypeSupported == 'function' ) {\n\t\treturn ( styleDefinition: StyleDefinition ) => listStyleCommand.isStyleTypeSupported( styleDefinition.type );\n\t} else {\n\t\treturn () => true;\n\t}\n}\n\ninterface StyleDefinition {\n\n\t/**\n\t * The label of the style button.\n\t */\n\tlabel: string;\n\n\t/**\n\t * The type of the style button (e.g. \"roman\" or \"circle\").\n\t */\n\ttype: string;\n\n\t/**\n\t * The SVG string of an icon of the style button.\n\t */\n\ticon: string;\n\n\t/**\n\t * The tooltip text of the button (shorter than verbose label).\n\t */\n\ttooltip: string;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/listproperties\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport ListPropertiesEditing from './listproperties/listpropertiesediting.js';\nimport ListPropertiesUI from './listproperties/listpropertiesui.js';\n\n/**\n * The list properties feature.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:list/listproperties/listpropertiesediting~ListPropertiesEditing list properties\n * editing feature} and the {@link module:list/listproperties/listpropertiesui~ListPropertiesUI list properties UI feature}.\n */\nexport default class ListProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListPropertiesEditing, ListPropertiesUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'ListProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist/checktodolistcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport { getAllListItemBlocks } from '../list/utils/model.js';\n\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/todolist/todolistediting~TodoListEditing} as\n * the `checkTodoList` editor command.\n */\nexport default class CheckTodoListCommand extends Command {\n\t/**\n\t * A list of to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t *\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public value: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t// Refresh command before executing to be sure all values are up to date.\n\t\t// It is needed when selection has changed before command execution, in the same change block.\n\t\tthis.on( 'execute', () => {\n\t\t\tthis.refresh();\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */\n\tpublic override refresh(): void {\n\t\tconst selectedElements = this._getSelectedItems();\n\n\t\tthis.value = this._getValue( selectedElements );\n\t\tthis.isEnabled = !!selectedElements.length;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tthis.editor.model.change( writer => {\n\t\t\tconst selectedElements = this._getSelectedItems();\n\t\t\tconst value = ( options.forceValue === undefined ) ? !this._getValue( selectedElements ) : options.forceValue;\n\n\t\t\tfor ( const element of selectedElements ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setAttribute( 'todoListChecked', true, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'todoListChecked', element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns a value for the command.\n\t */\n\tprivate _getValue( selectedElements: Array<Element> ): boolean {\n\t\treturn selectedElements.every( element => element.getAttribute( 'todoListChecked' ) );\n\t}\n\n\t/**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t */\n\tprivate _getSelectedItems() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\n\t\tconst selectionRange = model.document.selection.getFirstRange()!;\n\t\tconst startElement = selectionRange.start.parent as Element;\n\t\tconst elements: Array<Element> = [];\n\n\t\tif ( schema.checkAttribute( startElement, 'todoListChecked' ) ) {\n\t\t\telements.push( ...getAllListItemBlocks( startElement ) );\n\t\t}\n\n\t\tfor ( const item of selectionRange.getItems( { shallow: true } ) as Iterable<Element> ) {\n\t\t\tif ( schema.checkAttribute( item, 'todoListChecked' ) && !elements.includes( item ) ) {\n\t\t\t\telements.push( ...getAllListItemBlocks( item ) );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist/todocheckboxchangeobserver\n */\n\nimport { DomEventObserver, type DomEventData } from 'ckeditor5/src/engine.js';\n\n/**\n * Observes all to-do list checkboxes state changes.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n */\nexport default class TodoCheckboxChangeObserver extends DomEventObserver<'change'> {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic readonly domEventType = [ 'change' ] as const;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic onDomEvent( domEvent: Event ): void {\n\t\tif ( domEvent.target ) {\n\t\t\tconst viewTarget = this.view.domConverter.mapDomToView( domEvent.target as HTMLElement );\n\n\t\t\tif (\n\t\t\t\tviewTarget &&\n\t\t\t\tviewTarget.is( 'element', 'input' ) &&\n\t\t\t\tviewTarget.getAttribute( 'type' ) == 'checkbox' &&\n\t\t\t\tviewTarget.findAncestor( { classes: 'todo-list__label' } )\n\t\t\t) {\n\t\t\t\tthis.fire( 'todoCheckboxChange', domEvent );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Fired when the to-do list checkbox is toggled.\n *\n * Introduced by {@link module:list/todolist/todocheckboxchangeobserver~TodoCheckboxChangeObserver}.\n *\n * Note that this event is not available by default. To make it available,\n * {@link module:list/todolist/todocheckboxchangeobserver~TodoCheckboxChangeObserver}\n * needs to be added to {@link module:engine/view/view~View} by the {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:list/todolist/todocheckboxchangeobserver~TodoCheckboxChangeObserver\n * @eventName module:engine/view/document~Document#todoCheckboxChange\n * @param data The event data.\n */\nexport type ViewDocumentTodoCheckboxChangeEvent = {\n\tname: 'todoCheckboxChange';\n\targs: [ data: DomEventData<Event> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist/todolistediting\n */\n\nimport {\n\tMatcher,\n\ttype UpcastElementEvent,\n\ttype Model,\n\ttype MatcherPattern,\n\ttype ViewElement,\n\ttype ViewDocumentKeyDownEvent,\n\ttype ViewDocumentArrowKeyEvent,\n\ttype MapperViewToModelPositionEvent,\n\ttype ViewDocumentFragment,\n\ttype SelectionChangeRangeEvent,\n\ttype DocumentFragment,\n\ttype Element\n} from 'ckeditor5/src/engine.js';\n\nimport {\n\tgetCode,\n\tparseKeystroke,\n\tgetLocalizedArrowKeyCodeDirection,\n\ttype GetCallback,\n\ttype Locale\n} from 'ckeditor5/src/utils.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport { getAllListItemBlocks, isFirstBlockOfListItem, isListItemBlock } from '../list/utils/model.js';\nimport ListEditing, {\n\ttype ListEditingCheckElementEvent,\n\ttype ListEditingPostFixerEvent\n} from '../list/listediting.js';\nimport ListCommand from '../list/listcommand.js';\nimport CheckTodoListCommand from './checktodolistcommand.js';\nimport TodoCheckboxChangeObserver, { type ViewDocumentTodoCheckboxChangeEvent } from './todocheckboxchangeobserver.js';\n\nconst ITEM_TOGGLE_KEYSTROKE = /* #__PURE__ */ parseKeystroke( 'Ctrl+Enter' );\n\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/list/listediting~ListEditing list editing plugin}\n * and extends it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n */\nexport default class TodoListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TodoListEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst editing = editor.editing;\n\t\tconst listEditing = editor.plugins.get( ListEditing );\n\t\tconst multiBlock = editor.config.get( 'list.multiBlock' );\n\t\tconst elementName = multiBlock ? 'paragraph' : 'listItem';\n\n\t\teditor.commands.add( 'todoList', new ListCommand( editor, 'todo' ) );\n\t\teditor.commands.add( 'checkTodoList', new CheckTodoListCommand( editor ) );\n\n\t\tediting.view.addObserver( TodoCheckboxChangeObserver );\n\n\t\tmodel.schema.extend( '$listItem', { allowAttributes: 'todoListChecked' } );\n\n\t\tmodel.schema.addAttributeCheck( context => {\n\t\t\tconst item = context.last;\n\n\t\t\t// Don't allow `todoListChecked` attribute on elements which are not todo list items.\n\t\t\tif ( !item.getAttribute( 'listItemId' ) || item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}, 'todoListChecked' );\n\n\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n\t\t\t// Upcast of to-do list item is based on a checkbox at the beginning of a <li> to keep compatibility with markdown input.\n\t\t\tdispatcher.on( 'element:input', todoItemInputConverter() );\n\n\t\t\t// Priority is set to low to allow generic list item converter to run first.\n\t\t\tdispatcher.on( 'element:li', todoListItemUpcastConverter(), {\n\t\t\t\tpriority: 'low'\n\t\t\t} );\n\n\t\t\t// Consume other elements that are normally generated in data downcast, so they won't get captured by GHS.\n\t\t\tdispatcher.on( 'element:label', elementUpcastConsumingConverter(\n\t\t\t\t{ name: 'label', classes: 'todo-list__label' }\n\t\t\t) );\n\t\t\tdispatcher.on( 'element:label', elementUpcastConsumingConverter(\n\t\t\t\t{ name: 'label', classes: [ 'todo-list__label', 'todo-list__label_without-description' ] }\n\t\t\t) );\n\t\t\tdispatcher.on( 'element:span', elementUpcastConsumingConverter(\n\t\t\t\t{ name: 'span', classes: 'todo-list__label__description' }\n\t\t\t) );\n\n\t\t\tdispatcher.on( 'element:ul', attributeUpcastConsumingConverter(\n\t\t\t\t{ name: 'ul', classes: 'todo-list' }\n\t\t\t) );\n\t\t} );\n\n\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n\t\t\tmodel: elementName,\n\t\t\tview: ( element, { writer } ) => {\n\t\t\t\tif ( isDescriptionBlock( element, listEditing.getListAttributeNames() ) ) {\n\t\t\t\t\treturn writer.createContainerElement( 'span', { class: 'todo-list__label__description' } );\n\t\t\t\t}\n\t\t\t},\n\t\t\tconverterPriority: 'highest'\n\t\t} );\n\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'list',\n\t\t\tattributeName: 'listType',\n\n\t\t\tsetAttributeOnDowncast( writer, value, element ) {\n\t\t\t\tif ( value == 'todo' ) {\n\t\t\t\t\twriter.addClass( 'todo-list', element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeClass( 'todo-list', element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tlistEditing.registerDowncastStrategy( {\n\t\t\tscope: 'itemMarker',\n\t\t\tattributeName: 'todoListChecked',\n\n\t\t\tcreateElement( writer, modelElement, { dataPipeline } ) {\n\t\t\t\tif ( modelElement.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst viewElement = writer.createUIElement( 'input', {\n\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\t...( modelElement.getAttribute( 'todoListChecked' ) ?\n\t\t\t\t\t\t{ checked: 'checked' } :\n\t\t\t\t\t\tnull\n\t\t\t\t\t),\n\t\t\t\t\t...( dataPipeline ?\n\t\t\t\t\t\t{ disabled: 'disabled' } :\n\t\t\t\t\t\t{ tabindex: '-1' }\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\tif ( dataPipeline ) {\n\t\t\t\t\treturn viewElement;\n\t\t\t\t}\n\n\t\t\t\tconst wrapper = writer.createContainerElement( 'span', { contenteditable: 'false' }, viewElement );\n\n\t\t\t\twrapper.getFillerOffset = () => null;\n\n\t\t\t\treturn wrapper;\n\t\t\t},\n\n\t\t\tcanWrapElement( modelElement ) {\n\t\t\t\treturn isDescriptionBlock( modelElement, listEditing.getListAttributeNames() );\n\t\t\t},\n\n\t\t\tcreateWrapperElement( writer, modelElement, { dataPipeline } ) {\n\t\t\t\tconst classes = [ 'todo-list__label' ];\n\n\t\t\t\tif ( !isDescriptionBlock( modelElement, listEditing.getListAttributeNames() ) ) {\n\t\t\t\t\tclasses.push( 'todo-list__label_without-description' );\n\t\t\t\t}\n\n\t\t\t\treturn writer.createAttributeElement( dataPipeline ? 'label' : 'span', {\n\t\t\t\t\tclass: classes.join( ' ' )\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\t// Verifies if a to-do list block requires reconversion of a first item downcasted as an item description.\n\t\tlistEditing.on<ListEditingCheckElementEvent>( 'checkElement', ( evt, { modelElement, viewElement } ) => {\n\t\t\tconst isFirstTodoModelParagraphBlock = isDescriptionBlock( modelElement, listEditing.getListAttributeNames() );\n\t\t\tconst hasViewClass = viewElement.hasClass( 'todo-list__label__description' );\n\n\t\t\tif ( hasViewClass != isFirstTodoModelParagraphBlock ) {\n\t\t\t\tevt.return = true;\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// Verifies if a to-do list block requires reconversion of a checkbox element\n\t\t// (for example there is a new paragraph inserted as a first block of a list item).\n\t\tlistEditing.on<ListEditingCheckElementEvent>( 'checkElement', ( evt, { modelElement, viewElement } ) => {\n\t\t\tconst isFirstTodoModelItemBlock = modelElement.getAttribute( 'listType' ) == 'todo' && isFirstBlockOfListItem( modelElement );\n\n\t\t\tlet hasViewItemMarker = false;\n\t\t\tconst viewWalker = editor.editing.view.createPositionBefore( viewElement ).getWalker( { direction: 'backward' } );\n\n\t\t\tfor ( const { item } of viewWalker ) {\n\t\t\t\tif ( item.is( 'element' ) && editor.editing.mapper.toModelElement( item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( item.is( 'element', 'input' ) && item.getAttribute( 'type' ) == 'checkbox' ) {\n\t\t\t\t\thasViewItemMarker = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( hasViewItemMarker != isFirstTodoModelItemBlock ) {\n\t\t\t\tevt.return = true;\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// Make sure that all blocks of the same list item have the same todoListChecked attribute.\n\t\tlistEditing.on<ListEditingPostFixerEvent>( 'postFixer', ( evt, { listNodes, writer } ) => {\n\t\t\tfor ( const { node, previousNodeInList } of listNodes ) {\n\t\t\t\t// This is a first item of a nested list.\n\t\t\t\tif ( !previousNodeInList ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( previousNodeInList.getAttribute( 'listItemId' ) != node.getAttribute( 'listItemId' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst previousHasAttribute = previousNodeInList.hasAttribute( 'todoListChecked' );\n\t\t\t\tconst nodeHasAttribute = node.hasAttribute( 'todoListChecked' );\n\n\t\t\t\tif ( nodeHasAttribute && !previousHasAttribute ) {\n\t\t\t\t\twriter.removeAttribute( 'todoListChecked', node );\n\t\t\t\t\tevt.return = true;\n\t\t\t\t}\n\t\t\t\telse if ( !nodeHasAttribute && previousHasAttribute ) {\n\t\t\t\t\twriter.setAttribute( 'todoListChecked', true, node );\n\t\t\t\t\tevt.return = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Make sure that todoListChecked attribute is only present for to-do list items.\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tconst changes = model.document.differ.getChanges();\n\t\t\tlet wasFixed = false;\n\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type == 'attribute' && change.attributeKey == 'listType' ) {\n\t\t\t\t\tconst element = change.range.start.nodeAfter!;\n\n\t\t\t\t\tif ( change.attributeOldValue == 'todo' && element.hasAttribute( 'todoListChecked' ) ) {\n\t\t\t\t\t\twriter.removeAttribute( 'todoListChecked', element );\n\t\t\t\t\t\twasFixed = true;\n\t\t\t\t\t}\n\t\t\t\t} else if ( change.type == 'insert' && change.name != '$text' ) {\n\t\t\t\t\tfor ( const { item } of writer.createRangeOn( change.position.nodeAfter! ) ) {\n\t\t\t\t\t\tif ( item.is( 'element' ) && item.getAttribute( 'listType' ) != 'todo' && item.hasAttribute( 'todoListChecked' ) ) {\n\t\t\t\t\t\t\twriter.removeAttribute( 'todoListChecked', item );\n\t\t\t\t\t\t\twasFixed = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn wasFixed;\n\t\t} );\n\n\t\t// Toggle check state of selected to-do list items on keystroke.\n\t\tthis.listenTo<ViewDocumentKeyDownEvent>( editing.view.document, 'keydown', ( evt, data ) => {\n\t\t\tif ( getCode( data ) === ITEM_TOGGLE_KEYSTROKE ) {\n\t\t\t\teditor.execute( 'checkTodoList' );\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// Toggle check state of a to-do list item clicked on the checkbox.\n\t\tthis.listenTo<ViewDocumentTodoCheckboxChangeEvent>( editing.view.document, 'todoCheckboxChange', ( evt, data ) => {\n\t\t\tconst viewTarget = data.target;\n\n\t\t\tif ( !viewTarget || !viewTarget.is( 'element', 'input' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewPositionAfter = editing.view.createPositionAfter( viewTarget );\n\t\t\tconst modelPositionAfter = editing.mapper.toModelPosition( viewPositionAfter );\n\t\t\tconst modelElement = modelPositionAfter.parent;\n\n\t\t\tif ( modelElement && isListItemBlock( modelElement ) && modelElement.getAttribute( 'listType' ) == 'todo' ) {\n\t\t\t\tthis._handleCheckmarkChange( modelElement );\n\t\t\t}\n\t\t} );\n\n\t\t// Jump at the start/end of the next node on right arrow key press, when selection is before the checkbox.\n\t\t//\n\t\t// <blockquote><p>Foo{}</p></blockquote>\n\t\t// <ul><li><checkbox/>Bar</li></ul>\n\t\t//\n\t\t// press: `->`\n\t\t//\n\t\t// <blockquote><p>Foo</p></blockquote>\n\t\t// <ul><li><checkbox/>{}Bar</li></ul>\n\t\t//\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>(\n\t\t\tediting.view.document,\n\t\t\t'arrowKey',\n\t\t\tjumpOverCheckmarkOnSideArrowKeyPress( model, editor.locale ),\n\t\t\t{ context: '$text' }\n\t\t);\n\n\t\t// Map view positions inside the checkbox and wrappers to the position in the first block of the list item.\n\t\tthis.listenTo<MapperViewToModelPositionEvent>( editing.mapper, 'viewToModelPosition', ( evt, data ) => {\n\t\t\tconst viewParent = data.viewPosition.parent as ViewElement;\n\n\t\t\tconst isStartOfListItem = viewParent.is( 'attributeElement', 'li' ) && data.viewPosition.offset == 0;\n\t\t\tconst isStartOfListLabel = isLabelElement( viewParent ) && data.viewPosition.offset <= 1;\n\n\t\t\tconst isInInputWrapper = viewParent.is( 'element', 'span' ) &&\n\t\t\t\tviewParent.getAttribute( 'contenteditable' ) == 'false' &&\n\t\t\t\tisLabelElement( viewParent.parent );\n\n\t\t\tif ( !isStartOfListItem && !isStartOfListLabel && !isInInputWrapper ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeAfter = data.modelPosition!.nodeAfter;\n\n\t\t\tif ( nodeAfter && nodeAfter.getAttribute( 'listType' ) == 'todo' ) {\n\t\t\t\tdata.modelPosition = model.createPositionAt( nodeAfter, 0 );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis._initAriaAnnouncements();\n\t}\n\n\t/**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t */\n\tprivate _handleCheckmarkChange( listItem: Element ): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst previousSelectionRanges = Array.from( model.document.selection.getRanges() );\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( listItem, 'end' );\n\t\t\teditor.execute( 'checkTodoList' );\n\t\t\twriter.setSelection( previousSelectionRanges );\n\t\t} );\n\t}\n\n\t/**\n\t * Observe when user enters or leaves todo list and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified todo list.\n\t *\n\t * @internal\n\t */\n\tprivate _initAriaAnnouncements( ) {\n\t\tconst { model, ui, t } = this.editor;\n\t\tlet lastFocusedCodeBlock: Element | DocumentFragment | null = null;\n\n\t\tif ( !ui ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.document.selection.on<SelectionChangeRangeEvent>( 'change:range', () => {\n\t\t\tconst focusParent = model.document.selection.focus!.parent;\n\t\t\tconst lastElementIsTodoList = isTodoListItemElement( lastFocusedCodeBlock );\n\t\t\tconst currentElementIsTodoList = isTodoListItemElement( focusParent );\n\n\t\t\tif ( lastElementIsTodoList && !currentElementIsTodoList ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( t( 'Leaving a to-do list' ) );\n\t\t\t} else if ( !lastElementIsTodoList && currentElementIsTodoList ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( t( 'Entering a to-do list' ) );\n\t\t\t}\n\n\t\t\tlastFocusedCodeBlock = focusParent;\n\t\t} );\n\t}\n}\n\n/**\n * Returns an upcast converter for to-do list items.\n */\nfunction todoListItemUpcastConverter(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst { writer, schema } = conversionApi;\n\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Group to-do list items by their listItemId attribute to ensure that all items of the same list item have the same checked state.\n\t\tconst groupedItems = Array\n\t\t\t.from( data.modelRange.getItems( { shallow: true } ) )\n\t\t\t.filter( ( item ): item is Element =>\n\t\t\t\titem.getAttribute( 'listType' ) === 'todo' && schema.checkAttribute( item, 'listItemId' )\n\t\t\t)\n\t\t\t.reduce( ( acc, item ) => {\n\t\t\t\tconst listItemId = item.getAttribute( 'listItemId' ) as string;\n\n\t\t\t\tif ( !acc.has( listItemId ) ) {\n\t\t\t\t\tacc.set( listItemId, getAllListItemBlocks( item ) );\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, new Map<string, Array<Element>>() );\n\n\t\t// During the upcast, we need to ensure that all items of the same list have the same checked state. From time to time\n\t\t// the checked state of the items can be different when the user pastes content from the clipboard with <input type=\"checkbox\">\n\t\t// that has checked state set to true. In such cases, we need to ensure that all items of the same list have the same checked state.\n\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/15602\n\t\tfor ( const [ , items ] of groupedItems.entries() ) {\n\t\t\tif ( items.some( item => item.getAttribute( 'todoListChecked' ) ) ) {\n\t\t\t\tfor ( const item of items ) {\n\t\t\t\t\twriter.setAttribute( 'todoListChecked', true, item );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Returns an upcast converter that detects a to-do list checkbox and marks the list item as a to-do list.\n */\nfunction todoItemInputConverter(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst modelCursor = data.modelCursor;\n\t\tconst modelItem = modelCursor.parent as Element;\n\t\tconst viewItem = data.viewItem;\n\n\t\tif ( !conversionApi.consumable.test( viewItem, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( viewItem.getAttribute( 'type' ) != 'checkbox' || !modelCursor.isAtStart || !modelItem.hasAttribute( 'listType' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconversionApi.consumable.consume( viewItem, { name: true } );\n\n\t\tconst writer = conversionApi.writer;\n\n\t\twriter.setAttribute( 'listType', 'todo', modelItem );\n\n\t\tif ( data.viewItem.hasAttribute( 'checked' ) ) {\n\t\t\twriter.setAttribute( 'todoListChecked', true, modelItem );\n\t\t}\n\n\t\tdata.modelRange = writer.createRange( modelCursor );\n\t};\n}\n\n/**\n * Returns an upcast converter that consumes element matching the given matcher pattern.\n */\nfunction elementUpcastConsumingConverter( matcherPattern: MatcherPattern ): GetCallback<UpcastElementEvent> {\n\tconst matcher = new Matcher( matcherPattern );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst matcherResult = matcher.match( data.viewItem );\n\n\t\tif ( !matcherResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.viewItem, matcherResult.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t};\n}\n\n/**\n * Returns an upcast converter that consumes attributes matching the given matcher pattern.\n */\nfunction attributeUpcastConsumingConverter( matcherPattern: MatcherPattern ): GetCallback<UpcastElementEvent> {\n\tconst matcher = new Matcher( matcherPattern );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst matcherResult = matcher.match( data.viewItem );\n\n\t\tif ( !matcherResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst match = matcherResult.match;\n\n\t\tmatch.name = false;\n\t\tconversionApi.consumable.consume( data.viewItem, match );\n\t};\n}\n\n/**\n * Returns true if the given list item block should be converted as a description block of a to-do list item.\n */\nfunction isDescriptionBlock( modelElement: Element, listAttributeNames: Array<string> ): boolean {\n\treturn ( modelElement.is( 'element', 'paragraph' ) || modelElement.is( 'element', 'listItem' ) ) &&\n\t\tmodelElement.getAttribute( 'listType' ) == 'todo' &&\n\t\tisFirstBlockOfListItem( modelElement ) &&\n\t\thasOnlyListAttributes( modelElement, listAttributeNames );\n}\n\n/**\n * Returns true if only attributes from the given list are present on the model element.\n */\nfunction hasOnlyListAttributes( modelElement: Element, attributeNames: Array<string> ): boolean {\n\tfor ( const attributeKey of modelElement.getAttributeKeys() ) {\n\t\t// Ignore selection attributes stored on block elements.\n\t\tif ( attributeKey.startsWith( 'selection:' ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( !attributeNames.includes( attributeKey ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Jump at the start and end of a to-do list item.\n */\nfunction jumpOverCheckmarkOnSideArrowKeyPress( model: Model, locale: Locale ): GetCallback<ViewDocumentArrowKeyEvent> {\n\treturn ( eventInfo, domEventData ) => {\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( domEventData.keyCode, locale.contentLanguageDirection );\n\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = selection.getFirstPosition()!;\n\t\tconst parent = position.parent as Element;\n\n\t\t// Right arrow before a to-do list item.\n\t\tif ( direction == 'right' && position.isAtEnd ) {\n\t\t\tconst newRange = schema.getNearestSelectionRange( model.createPositionAfter( parent ), 'forward' );\n\n\t\t\tif ( !newRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newRangeParent = newRange.start.parent;\n\n\t\t\tif ( newRangeParent && isListItemBlock( newRangeParent ) && newRangeParent.getAttribute( 'listType' ) == 'todo' ) {\n\t\t\t\tmodel.change( writer => writer.setSelection( newRange ) );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\tdomEventData.stopPropagation();\n\t\t\t\teventInfo.stop();\n\t\t\t}\n\t\t}\n\t\t// Left arrow at the beginning of a to-do list item.\n\t\telse if ( direction == 'left' && position.isAtStart && isListItemBlock( parent ) && parent.getAttribute( 'listType' ) == 'todo' ) {\n\t\t\tconst newRange = schema.getNearestSelectionRange( model.createPositionBefore( parent ), 'backward' );\n\n\t\t\tif ( !newRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodel.change( writer => writer.setSelection( newRange ) );\n\n\t\t\tdomEventData.preventDefault();\n\t\t\tdomEventData.stopPropagation();\n\t\t\teventInfo.stop();\n\t\t}\n\t};\n}\n\n/**\n * Returns true if the given element is a label element of a to-do list item.\n */\nfunction isLabelElement( viewElement: ViewElement | ViewDocumentFragment | null ): boolean {\n\treturn !!viewElement && viewElement.is( 'attributeElement' ) && viewElement.hasClass( 'todo-list__label' );\n}\n\n/**\n * Returns true if the given element is a list item model element of a to-do list.\n */\nfunction isTodoListItemElement( element: Element | DocumentFragment | null ): boolean {\n\tif ( !element ) {\n\t\treturn false;\n\t}\n\n\tif ( !element.is( 'element', 'paragraph' ) && !element.is( 'element', 'listItem' ) ) {\n\t\treturn false;\n\t}\n\n\treturn element.getAttribute( 'listType' ) == 'todo';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist/todolistui\n */\n\nimport { createUIComponents } from '../list/utils.js';\nimport { icons, Plugin } from 'ckeditor5/src/core.js';\n\n/**\n * The to-do list UI feature. It introduces the `'todoList'` button that\n * allows to convert elements to and from to-do list items and to indent or outdent them.\n */\nexport default class TodoListUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TodoListUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst t = this.editor.t;\n\n\t\tcreateUIComponents( this.editor, 'todoList', t( 'To-do List' ), icons.todoList );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/todolist\n */\n\nimport TodoListEditing from './todolist/todolistediting.js';\nimport TodoListUI from './todolist/todolistui.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport '../theme/todolist.css';\n\n/**\n * The to-do list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/todolist/todolistediting~TodoListEditing to-do list\n * editing feature} and the {@link module:list/todolist/todolistui~TodoListUI to-do list UI feature}.\n */\nexport default class TodoList extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TodoListEditing, TodoListUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TodoList' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacylistcommand\n */\n\nimport type { Element, Node, Schema } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\n\nimport { first } from 'ckeditor5/src/utils.js';\nimport { type ListType } from '../list/listediting.js';\n\n/**\n * The list command. It is used by the {@link module:list/legacylist~LegacyList legacy list feature}.\n */\nexport default class LegacyListCommand extends Command {\n\t/**\n\t * The type of the list created by the command.\n\t */\n\tpublic readonly type: ListType;\n\n\t/**\n\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n\t *\n\t * @readonly\n\t */\n\tdeclare public value: boolean;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param type List type that will be handled by this command.\n\t */\n\tconstructor( editor: Editor, type: ListType ) {\n\t\tsuper( editor );\n\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the list command.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the\n\t * selected items and potentially the neighbor elements to the proper list items. If set to `false`, it will convert selected elements\n\t * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => checkCanBecomeListItem( block, model.schema ) );\n\n\t\t// Whether we are turning off some items.\n\t\tconst turnOff = options.forceValue !== undefined ? !options.forceValue : this.value;\n\n\t\t// If we are turning off items, we are going to rename them to paragraphs.\n\n\t\tmodel.change( writer => {\n\t\t\t// If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n\t\t\t// To be sure that model is all the time in a good state, we first fix items below turned-off item.\n\t\t\tif ( turnOff ) {\n\t\t\t\t// Start from the model item that is just after the last turned-off item.\n\t\t\t\tlet next = blocks[ blocks.length - 1 ].nextSibling as Element;\n\t\t\t\tlet currentIndent = Number.POSITIVE_INFINITY;\n\t\t\t\tlet changes = [];\n\n\t\t\t\t// Correct indent of all items after the last turned off item.\n\t\t\t\t// Rules that should be followed:\n\t\t\t\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n\t\t\t\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n\t\t\t\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n\t\t\t\t//    should not end up as a child of any of list items that they were not children of before.\n\t\t\t\t// 3. All other items should have their indent changed relatively to it's parent.\n\t\t\t\t//\n\t\t\t\t// For example:\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t// 3        * --------\t\t\t<-- this is turned off.\n\t\t\t\t// 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n\t\t\t\t// 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n\t\t\t\t// 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 8     * --------\t\t\t\t<-- this has to become indent = 0.\n\t\t\t\t// 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n\t\t\t\t// 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n\t\t\t\t// 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n\t\t\t\t// 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// After turning off 3 the list becomes:\n\t\t\t\t//\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t//\n\t\t\t\t// 3  --------\n\t\t\t\t//\n\t\t\t\t// 4  * --------\n\t\t\t\t// 5     * --------\n\t\t\t\t// 6  * --------\n\t\t\t\t// 7     * --------\n\t\t\t\t// 8  * --------\n\t\t\t\t// 9     * --------\n\t\t\t\t// 10       * --------\n\t\t\t\t// 11       * --------\n\t\t\t\t// 12 * --------\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n\t\t\t\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\n\t\t\t\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\n\t\t\t\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n\t\t\t\t// less conversion (faster).\n\t\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) !== 0 ) {\n\t\t\t\t\t// Check each next list item, as long as its indent is bigger than 0.\n\t\t\t\t\t// If the indent is 0 we are not going to change anything anyway.\n\t\t\t\t\tconst indent = next.getAttribute( 'listIndent' ) as number;\n\n\t\t\t\t\t// We check if that's item indent is lower as current relative indent.\n\t\t\t\t\tif ( indent < currentIndent ) {\n\t\t\t\t\t\t// If it is, current relative indent becomes that indent.\n\t\t\t\t\t\tcurrentIndent = indent;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix indent relatively to current relative indent.\n\t\t\t\t\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\t\t\t\t\tconst newIndent = indent - currentIndent;\n\n\t\t\t\t\t// Save the entry in changes array. We do not apply it at the moment, because we will need to\n\t\t\t\t\t// reverse the changes so the last item is changed first.\n\t\t\t\t\t// This is to keep model in correct state all the time.\n\t\t\t\t\tchanges.push( { element: next, listIndent: newIndent } );\n\n\t\t\t\t\t// Find next item.\n\t\t\t\t\tnext = next.nextSibling as Element;\n\t\t\t\t}\n\n\t\t\t\tchanges = changes.reverse();\n\n\t\t\t\tfor ( const item of changes ) {\n\t\t\t\t\twriter.setAttribute( 'listIndent', item.listIndent, item.element );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are turning on, we might change some items that are already `listItem`s but with different type.\n\t\t\t// Changing one nested list item to other type should also trigger changing all its siblings so the\n\t\t\t// whole nested list is of the same type.\n\t\t\t// Example (assume changing to numbered list):\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ---[--\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t// * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n\t\t\t//   * ---]--\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\tif ( !turnOff ) {\n\t\t\t\t// Find lowest indent among selected items. This will be indicator what is the indent of\n\t\t\t\t// top-most list affected by the command.\n\t\t\t\tlet lowestIndent = Number.POSITIVE_INFINITY;\n\n\t\t\t\tfor ( const item of blocks ) {\n\t\t\t\t\tif ( item.is( 'element', 'listItem' ) && ( item.getAttribute( 'listIndent' ) as number ) < lowestIndent ) {\n\t\t\t\t\t\tlowestIndent = item.getAttribute( 'listIndent' ) as number;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Do not execute the fix for top-level lists.\n\t\t\t\tlowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\n\n\t\t\t\t// Fix types of list items that are \"before\" the selected blocks.\n\t\t\t\t_fixType( blocks, true, lowestIndent );\n\n\t\t\t\t// Fix types of list items that are \"after\" the selected blocks.\n\t\t\t\t_fixType( blocks, false, lowestIndent );\n\t\t\t}\n\n\t\t\t// Phew! Now it will be easier :).\n\t\t\t// For each block element that was in the selection, we will either: turn it to list item,\n\t\t\t// turn it to paragraph, or change it's type. Or leave it as it is.\n\t\t\t// Do it in reverse as there might be multiple blocks (same as with changing indents).\n\t\t\tfor ( const element of blocks.reverse() ) {\n\t\t\t\tif ( turnOff && element.name == 'listItem' ) {\n\t\t\t\t\t// We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n\t\t\t\t\t// List item specific attributes are removed by post fixer.\n\t\t\t\t\twriter.rename( element, 'paragraph' );\n\t\t\t\t} else if ( !turnOff && element.name != 'listItem' ) {\n\t\t\t\t\t// We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n\t\t\t\t\t// The order of operations is important to keep model in correct state.\n\t\t\t\t\twriter.setAttributes( { listType: this.type, listIndent: 0 }, element );\n\t\t\t\t\twriter.rename( element, 'listItem' );\n\t\t\t\t} else if ( !turnOff && element.name == 'listItem' && element.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\t\t// We are turning on and the element is a `listItem` but has different type - change it's type and\n\t\t\t\t\t// type of it's all siblings that have same indent.\n\t\t\t\t\twriter.setAttribute( 'listType', this.type, element );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Event fired by the {@link #execute} method.\n\t\t\t *\n\t\t\t * It allows to execute an action after executing the {@link ~ListCommand#execute} method, for example adjusting\n\t\t\t * attributes of changed blocks.\n\t\t\t *\n\t\t\t * @protected\n\t\t\t * @event _executeCleanup\n\t\t\t */\n\t\t\tthis.fire( '_executeCleanup', blocks );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue(): boolean {\n\t\t// Check whether closest `listItem` ancestor of the position has a correct type.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\treturn !!listItem && listItem.is( 'element', 'listItem' ) && listItem.getAttribute( 'listType' ) == this.type;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\t// If command value is true it means that we are in list item, so the command should be enabled.\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Otherwise, check if list item can be inserted at the position start.\n\t\treturn checkCanBecomeListItem( firstBlock, schema );\n\t}\n}\n\n/**\n * Helper function used when one or more list item have their type changed. Fixes type of other list items\n * that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n * not to duplicated code, as same fix has to be performed before and after selection.\n *\n * @param blocks Blocks that are in selection.\n * @param isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n * or blocks after last selected block (`false`).\n * @param lowestIndent Lowest indent among selected blocks.\n */\nfunction _fixType(\n\tblocks: Array<Node>,\n\tisBackward: boolean,\n\tlowestIndent: number\n) {\n\t// We need to check previous sibling of first changed item and next siblings of last changed item.\n\tconst startingItem = isBackward ? blocks[ 0 ] : blocks[ blocks.length - 1 ];\n\n\tif ( startingItem.is( 'element', 'listItem' ) ) {\n\t\tlet item = startingItem[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t// During processing items, keeps the lowest indent of already processed items.\n\t\t// This saves us from changing too many items.\n\t\t// Following example is for going forward as it is easier to read, however same applies to going backward.\n\t\t// * ------\n\t\t//   * ------\n\t\t//     * --[---\n\t\t//   * ------\t\t<-- `lowestIndent` should be 1\n\t\t//     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n\t\t//     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n\t\t//     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n\t\t// * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n\t\tlet currentIndent = startingItem.getAttribute( 'listIndent' ) as number;\n\n\t\t// Look back until a list item with indent lower than reference `lowestIndent`.\n\t\t// That would be the parent of nested sublist which contains item having `lowestIndent`.\n\t\twhile ( item && item.is( 'element', 'listItem' ) && ( item.getAttribute( 'listIndent' ) as number ) >= lowestIndent ) {\n\t\t\tif ( currentIndent > ( item.getAttribute( 'listIndent' ) as number ) ) {\n\t\t\t\tcurrentIndent = item.getAttribute( 'listIndent' ) as number;\n\t\t\t}\n\n\t\t\t// Found an item that is in the same nested sublist.\n\t\t\tif ( item.getAttribute( 'listIndent' ) == currentIndent ) {\n\t\t\t\t// Just add the item to selected blocks like it was selected by the user.\n\t\t\t\tblocks[ isBackward ? 'unshift' : 'push' ]( item );\n\t\t\t}\n\n\t\t\titem = item[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t}\n\t}\n}\n\n/**\n * Checks whether the given block can be replaced by a listItem.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */\nfunction checkCanBecomeListItem( block: Element, schema: Schema ) {\n\treturn schema.checkChild( block.parent as any, 'listItem' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacyindentcommand\n */\n\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { first } from 'ckeditor5/src/utils.js';\n\n/**\n * The list indent command. It is used by the {@link module:list/legacylist~LegacyList legacy list feature}.\n */\nexport default class LegacyIndentCommand extends Command {\n\t/**\n\t * Determines by how much the command will change the list item's indent attribute.\n\t */\n\tprivate readonly _indentBy: 1 | -1;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param indentDirection The direction of indent. If it is equal to `backward`, the command will outdent a list item.\n\t */\n\tconstructor( editor: Editor, indentDirection: 'forward' | 'backward' ) {\n\t\tsuper( editor );\n\n\t\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\n\n\t\t\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\n\t\t\tlet next = lastItem.nextSibling as Element | null;\n\n\t\t\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\t\t\twhile (\n\t\t\t\tnext && next.name == 'listItem' &&\n\t\t\t\t( next.getAttribute( 'listIndent' ) as number ) > ( lastItem.getAttribute( 'listIndent' ) as number )\n\t\t\t) {\n\t\t\t\titemsToChange.push( next );\n\n\t\t\t\tnext = next.nextSibling as Element | null;\n\t\t\t}\n\n\t\t\t// We need to be sure to keep model in correct state after each small change, because converters\n\t\t\t// bases on that state and assumes that model is correct.\n\t\t\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\n\t\t\t// it is safer.\n\t\t\tif ( this._indentBy < 0 ) {\n\t\t\t\titemsToChange = itemsToChange.reverse();\n\t\t\t}\n\n\t\t\tfor ( const item of itemsToChange ) {\n\t\t\t\tconst indent = ( item.getAttribute( 'listIndent' ) as number ) + this._indentBy;\n\n\t\t\t\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\n\t\t\t\t// This means that we need to convert that list item to paragraph.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\n\t\t\t\t\t// as listItem without attributes is very incorrect and will cause problems in converters.\n\t\t\t\t\t// No need to remove attributes, will be removed by post fixer.\n\t\t\t\t\twriter.rename( item, 'paragraph' );\n\t\t\t\t}\n\t\t\t\t// If indent is >= 0, change the attribute value.\n\t\t\t\telse {\n\t\t\t\t\twriter.setAttribute( 'listIndent', indent, item );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// It allows to execute an action after executing the `~IndentCommand#execute` method, for example adjusting\n\t\t\t// attributes of changed list items.\n\t\t\tthis.fire( '_executeCleanup', itemsToChange );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !listItem || !listItem.is( 'element', 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this._indentBy > 0 ) {\n\t\t\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n\t\t\t// To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n\t\t\tconst indent = listItem.getAttribute( 'listIndent' ) as number;\n\t\t\tconst type = listItem.getAttribute( 'listType' ) as string;\n\n\t\t\tlet prev = listItem.previousSibling;\n\n\t\t\twhile ( prev && prev.is( 'element', 'listItem' ) && ( prev.getAttribute( 'listIndent' ) as number ) >= indent ) {\n\t\t\t\tif ( prev.getAttribute( 'listIndent' ) == indent ) {\n\t\t\t\t\t// The item is on the same level.\n\t\t\t\t\t// If it has same type, it means that we found a preceding sibling from the same list.\n\t\t\t\t\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\n\t\t\t\t\t// on top level lists, though).\n\t\t\t\t\treturn prev.getAttribute( 'listType' ) == type;\n\t\t\t\t}\n\n\t\t\t\tprev = prev.previousSibling;\n\t\t\t}\n\n\t\t\t// Could not find similar list item, this means that `listItem` is first in its list.\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacyutils\n */\n\nimport {\n\tTreeWalker,\n\tgetFillerOffset,\n\ttype DowncastConversionApi,\n\ttype DowncastWriter,\n\ttype Element,\n\ttype Item,\n\ttype Model,\n\ttype Position,\n\ttype ViewContainerElement,\n\ttype ViewElement,\n\ttype ViewItem,\n\ttype ViewPosition\n} from 'ckeditor5/src/engine.js';\n\n/**\n * Creates a list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @param writer The writer instance.\n */\nexport function createViewListItemElement( writer: DowncastWriter ): ViewContainerElement {\n\tconst viewItem = writer.createContainerElement( 'li' );\n\n\tviewItem.getFillerOffset = getListItemFillerOffset;\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (`<li>`) with the model `listItem` element.\n * The function then returns the created view list item (`<li>`).\n *\n * @param modelItem Model list item.\n * @param conversionApi Conversion interface.\n * @returns View list element.\n */\nexport function generateLiInUl( modelItem: Item, conversionApi: DowncastConversionApi ): ViewContainerElement {\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\tconst listType = modelItem.getAttribute( 'listType' ) == 'numbered' ? 'ol' : 'ul';\n\tconst viewItem = createViewListItemElement( viewWriter );\n\n\tconst viewList = viewWriter.createContainerElement( listType, null );\n\n\tviewWriter.insert( viewWriter.createPositionAt( viewList, 0 ), viewItem );\n\n\tmapper.bindElements( modelItem as any, viewItem );\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @param modelItem Model list item.\n * @param injectedItem\n * @param conversionApi Conversion interface.\n * @param model The model instance.\n */\nexport function injectViewList(\n\tmodelItem: Element,\n\tinjectedItem: ViewContainerElement,\n\tconversionApi: DowncastConversionApi,\n\tmodel: Model\n): void {\n\tconst injectedList = injectedItem.parent as ViewElement;\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// The position where the view list will be inserted.\n\tlet insertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\n\t// 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n\t// that is a \"parent\" or \"sibling\" of the injected model item.\n\t// If there is no such list item, it means that the injected list item is the first item in \"its list\".\n\tconst refItem = getSiblingListItem( modelItem.previousSibling, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: modelItem.getAttribute( 'listIndent' ) as number\n\t} );\n\tconst prevItem = modelItem.previousSibling as Element | null;\n\n\tif ( refItem && refItem.getAttribute( 'listIndent' ) == modelItem.getAttribute( 'listIndent' ) ) {\n\t\t// There is a list item with the same indent - we found the same-level sibling.\n\t\t// Break the list after it. The inserted view item will be added in the broken space.\n\t\tconst viewItem = mapper.toViewElement( refItem )!;\n\t\tinsertPosition = viewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\t} else {\n\t\t// There is no list item with the same indent. Check the previous model item.\n\t\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\t\t// If it is a list item, it has to have a lower indent.\n\t\t\t// It means that the inserted item should be added to it as its nested item.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionAt( prevItem, 'end' ) );\n\n\t\t\t// There could be some not mapped elements (eg. span in to-do list) but we need to insert\n\t\t\t// a nested list directly inside the li element.\n\t\t\tconst mappedViewAncestor = mapper.findMappedViewAncestor( insertPosition );\n\t\t\tconst nestedList = findNestedList( mappedViewAncestor );\n\n\t\t\t// If there already is some nested list, then use it's position.\n\t\t\tif ( nestedList ) {\n\t\t\t\tinsertPosition = viewWriter.createPositionBefore( nestedList );\n\t\t\t} else {\n\t\t\t\t// Else just put new list on the end of list item content.\n\t\t\t\tinsertPosition = viewWriter.createPositionAt( mappedViewAncestor, 'end' );\n\t\t\t}\n\t\t} else {\n\t\t\t// The previous item is not a list item (or does not exist at all).\n\t\t\t// Just map the position and insert the view item at the mapped position.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\t\t}\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Insert the view item.\n\tviewWriter.insert( insertPosition, injectedList );\n\n\t// 2. Handle possible children of the injected model item.\n\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\tconst prevView = mapper.toViewElement( prevItem )!;\n\n\t\tconst walkerBoundaries = viewWriter.createRange( viewWriter.createPositionAt( prevView, 0 ), insertPosition );\n\t\tconst walker = walkerBoundaries.getWalker( { ignoreElementEnd: true } );\n\n\t\tfor ( const value of walker ) {\n\t\t\tif ( value.item.is( 'element', 'li' ) ) {\n\t\t\t\tconst breakPosition = viewWriter.breakContainer( viewWriter.createPositionBefore( value.item ) );\n\t\t\t\tconst viewList = value.item.parent as ViewElement;\n\n\t\t\t\tconst targetPosition = viewWriter.createPositionAt( injectedItem, 'end' );\n\t\t\t\tmergeViewLists( viewWriter, targetPosition.nodeBefore!, targetPosition.nodeAfter! );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( viewList ), targetPosition );\n\n\t\t\t\t// This is bad, but those lists will be removed soon anyway.\n\t\t\t\t( walker as any )._position = breakPosition;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst nextViewList = injectedList.nextSibling;\n\n\t\tif ( nextViewList && ( nextViewList.is( 'element', 'ul' ) || nextViewList.is( 'element', 'ol' ) ) ) {\n\t\t\tlet lastSubChild = null;\n\n\t\t\tfor ( const child of nextViewList.getChildren() as Iterable<ViewElement> ) {\n\t\t\t\tconst modelChild = mapper.toModelElement( child );\n\n\t\t\t\tif (\n\t\t\t\t\tmodelChild &&\n\t\t\t\t\t( modelChild.getAttribute( 'listIndent' ) as number ) > ( modelItem.getAttribute( 'listIndent' ) as number )\n\t\t\t\t) {\n\t\t\t\t\tlastSubChild = child;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( lastSubChild ) {\n\t\t\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( lastSubChild ) );\n\t\t\t\tviewWriter.move(\n\t\t\t\t\tviewWriter.createRangeOn( lastSubChild.parent as any ),\n\t\t\t\t\tviewWriter.createPositionAt( injectedItem, 'end' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Merge the inserted view list with its possible neighbor lists.\n\tmergeViewLists( viewWriter, injectedList, injectedList.nextSibling! );\n\tmergeViewLists( viewWriter, injectedList.previousSibling!, injectedList );\n}\n\n/**\n * Helper function that takes two parameters that are expected to be view list elements, and merges them.\n * The merge happens only if both parameters are list elements of the same type (the same element name and the same class attributes).\n *\n * @param viewWriter The writer instance.\n * @param firstList The first element to compare.\n * @param secondList The second element to compare.\n * @returns The position after merge or `null` when there was no merge.\n */\nexport function mergeViewLists(\n\tviewWriter: DowncastWriter,\n\tfirstList: ViewItem,\n\tsecondList: ViewItem\n): ViewPosition | null;\n\nexport function mergeViewLists(\n\tviewWriter: DowncastWriter,\n\tfirstList: any,\n\tsecondList: any\n): ViewPosition | null {\n\t// Check if two lists are going to be merged.\n\tif ( !firstList || !secondList || ( firstList.name != 'ul' && firstList.name != 'ol' ) ) {\n\t\treturn null;\n\t}\n\n\t// Both parameters are list elements, so compare types now.\n\tif ( firstList.name != secondList.name || firstList.getAttribute( 'class' ) !== secondList.getAttribute( 'class' ) ) {\n\t\treturn null;\n\t}\n\n\treturn viewWriter.mergeContainers( viewWriter.createPositionAfter( firstList ) );\n}\n\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n */\nexport function positionAfterUiElements( viewPosition: ViewPosition ): ViewPosition {\n\treturn viewPosition.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n}\n\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @param options Search criteria.\n * @param options.sameIndent Whether the sought sibling should have the same indentation.\n * @param options.smallerIndent Whether the sought sibling should have a smaller indentation.\n * @param options.listIndent The reference indentation.\n * @param options.direction Walking direction.\n */\nexport function getSiblingListItem(\n\tmodelItem: Item | null,\n\toptions: {\n\t\tsameIndent?: boolean;\n\t\tsmallerIndent?: boolean;\n\t\tlistIndent?: number;\n\t\tdirection?: 'forward' | 'backward';\n\t}\n): Element | null {\n\tconst sameIndent = !!options.sameIndent;\n\tconst smallerIndent = !!options.smallerIndent;\n\tconst indent = options.listIndent;\n\n\tlet item: any = modelItem;\n\n\twhile ( item && item.name == 'listItem' ) {\n\t\tconst itemIndent = item.getAttribute( 'listIndent' ) as number;\n\n\t\tif ( ( sameIndent && indent == itemIndent ) || ( smallerIndent && indent as number > itemIndent ) ) {\n\t\t\treturn item;\n\t\t}\n\n\t\tif ( options.direction === 'forward' ) {\n\t\t\titem = item.nextSibling;\n\t\t} else {\n\t\t\titem = item.previousSibling;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a first list view element that is direct child of the given view element.\n */\nexport function findNestedList( viewElement: ViewElement ): ViewElement | null {\n\tfor ( const node of ( viewElement.getChildren() as Iterable<ViewElement> ) ) {\n\t\tif ( node.name == 'ul' || node.name == 'ol' ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns an array with all `listItem` elements that represent the same list.\n *\n * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.\n *\n * Additionally, if the `position` is inside a list item, that list item will be returned as well.\n *\n * @param position Starting position.\n * @param direction Walking direction.\n */\nexport function getSiblingNodes( position: Position, direction: 'forward' | 'backward' ): Array<Element> {\n\tconst items: Array<Element> = [];\n\tconst listItem = position.parent as Element;\n\tconst walkerOptions = {\n\t\tignoreElementEnd: false,\n\t\tstartPosition: position,\n\t\tshallow: true,\n\t\tdirection\n\t};\n\tconst limitIndent = listItem.getAttribute( 'listIndent' ) as number;\n\tconst nodes = [ ...new TreeWalker( walkerOptions ) ]\n\t\t.filter( value => value.item.is( 'element' ) )\n\t\t.map( value => value.item );\n\n\tfor ( const element of nodes ) {\n\t\t// If found something else than `listItem`, we're out of the list scope.\n\t\tif ( !element.is( 'element', 'listItem' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// If current parsed item has lower indent that element that the element that was a starting point,\n\t\t// it means we left a nested list. Abort searching items.\n\t\t//\n\t\t// ■ List item 1.       [listIndent=0]\n\t\t//     ○ List item 2.[] [listIndent=1], limitIndent = 1,\n\t\t//     ○ List item 3.   [listIndent=1]\n\t\t// ■ List item 4.       [listIndent=0]\n\t\t//\n\t\t// Abort searching when leave nested list.\n\t\tif ( ( element.getAttribute( 'listIndent' ) as number ) < limitIndent ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// ■ List item 1.[]     [listIndent=0] limitIndent = 0,\n\t\t//     ○ List item 2.   [listIndent=1]\n\t\t//     ○ List item 3.   [listIndent=1]\n\t\t// ■ List item 4.       [listIndent=0]\n\t\t//\n\t\t// Ignore nested lists.\n\t\tif ( ( element.getAttribute( 'listIndent' ) as number ) > limitIndent ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// ■ List item 1.[]  [listType=bulleted]\n\t\t// 1. List item 2.   [listType=numbered]\n\t\t// 2.List item 3.    [listType=numbered]\n\t\t//\n\t\t// Abort searching when found a different kind of a list.\n\t\tif ( element.getAttribute( 'listType' ) !== listItem.getAttribute( 'listType' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// ■ List item 1.[]  [listType=bulleted]\n\t\t// ■ List item 2.    [listType=bulleted]\n\t\t// ○ List item 3.    [listType=bulleted]\n\t\t// ○ List item 4.    [listType=bulleted]\n\t\t//\n\t\t// Abort searching when found a different list style,\n\t\tif ( element.getAttribute( 'listStyle' ) !== listItem.getAttribute( 'listStyle' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// ... different direction\n\t\tif ( element.getAttribute( 'listReversed' ) !== listItem.getAttribute( 'listReversed' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// ... and different start index\n\t\tif ( element.getAttribute( 'listStart' ) !== listItem.getAttribute( 'listStart' ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif ( direction === 'backward' ) {\n\t\t\titems.unshift( element );\n\t\t} else {\n\t\t\titems.push( element );\n\t\t}\n\t}\n\n\treturn items;\n}\n\n/**\n * Returns an array with all `listItem` elements in the model selection.\n *\n * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.\n * If no list is selected, it returns an empty array.\n * The order of the elements is not specified.\n *\n * @internal\n */\nexport function getSelectedListItems( model: Model ): Array<Element> {\n\tconst document = model.document;\n\n\t// For all selected blocks find all list items that are being selected\n\t// and update the `listStyle` attribute in those lists.\n\tlet listItems = [ ...document.selection.getSelectedBlocks() ]\n\t\t.filter( element => element.is( 'element', 'listItem' ) )\n\t\t.map( element => {\n\t\t\tconst position = model.change( writer => writer.createPositionAt( element, 0 ) );\n\n\t\t\treturn [\n\t\t\t\t...getSiblingNodes( position, 'backward' ),\n\t\t\t\t...getSiblingNodes( position, 'forward' )\n\t\t\t];\n\t\t} )\n\t\t.flat();\n\n\t// Since `getSelectedBlocks()` can return items that belong to the same list, and\n\t// `getSiblingNodes()` returns the entire list, we need to remove duplicated items.\n\tlistItems = [ ...new Set( listItems ) ];\n\n\treturn listItems;\n}\n\nconst BULLETED_LIST_STYLE_TYPES = [ 'disc', 'circle', 'square' ];\n\n// There's a lot of them (https://www.w3.org/TR/css-counter-styles-3/#typedef-counter-style).\n// Let's support only those that can be selected by ListPropertiesUI.\nconst NUMBERED_LIST_STYLE_TYPES = [\n\t'decimal',\n\t'decimal-leading-zero',\n\t'lower-roman',\n\t'upper-roman',\n\t'lower-latin',\n\t'upper-latin'\n];\n\n/**\n * Checks whether the given list-style-type is supported by numbered or bulleted list.\n */\nexport function getListTypeFromListStyleType( listStyleType: string ): 'bulleted' | 'numbered' | null {\n\tif ( BULLETED_LIST_STYLE_TYPES.includes( listStyleType ) ) {\n\t\treturn 'bulleted';\n\t}\n\n\tif ( NUMBERED_LIST_STYLE_TYPES.includes( listStyleType ) ) {\n\t\treturn 'numbered';\n\t}\n\n\treturn null;\n}\n\n/**\n * Implementation of getFillerOffset for view list item element.\n *\n * @returns Block filler offset or `null` if block filler is not needed.\n */\nfunction getListItemFillerOffset( this: any ): number | null {\n\tconst hasOnlyLists = !this.isEmpty && ( this.getChild( 0 ).name == 'ul' || this.getChild( 0 ).name == 'ol' );\n\n\tif ( this.isEmpty || hasOnlyLists ) {\n\t\treturn 0;\n\t}\n\n\treturn getFillerOffset.call( this );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacylistutils\n */\n\nimport type { Element, Model, Position } from 'ckeditor5/src/engine.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport {\n\tgetListTypeFromListStyleType,\n\tgetSelectedListItems,\n\tgetSiblingNodes\n} from './legacyutils.js';\n\n/**\n * A set of helpers related to legacy lists.\n */\nexport default class LegacyListUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyListUtils' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether the given list-style-type is supported by numbered or bulleted list.\n\t */\n\tpublic getListTypeFromListStyleType( listStyleType: string ): 'bulleted' | 'numbered' | null {\n\t\treturn getListTypeFromListStyleType( listStyleType );\n\t}\n\n\t/**\n\t * Returns an array with all `listItem` elements in the model selection.\n\t *\n\t * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.\n\t * If no list is selected, it returns an empty array.\n\t * The order of the elements is not specified.\n\t */\n\tpublic getSelectedListItems( model: Model ): Array<Element> {\n\t\treturn getSelectedListItems( model );\n\t}\n\n\t/**\n\t * Returns an array with all `listItem` elements that represent the same list.\n\t *\n\t * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.\n\t *\n\t * Additionally, if the `position` is inside a list item, that list item will be returned as well.\n\t *\n\t * @param position Starting position.\n\t * @param direction Walking direction.\n\t */\n\tpublic getSiblingNodes( position: Position, direction: 'forward' | 'backward' ): Array<Element> {\n\t\treturn getSiblingNodes( position, direction );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacyconverters\n */\n\nimport {\n\tTreeWalker,\n\ttype DowncastAttributeEvent,\n\ttype DowncastConversionApi,\n\ttype DowncastInsertEvent,\n\ttype DowncastRemoveEvent,\n\ttype Element,\n\ttype MapperModelToViewPositionEvent,\n\ttype MapperViewToModelPositionEvent,\n\ttype Model,\n\ttype ModelInsertContentEvent,\n\ttype Node,\n\ttype Position,\n\ttype UpcastConversionApi,\n\ttype UpcastElementEvent,\n\ttype EditingView,\n\ttype ViewContainerElement,\n\ttype ViewElement,\n\ttype ViewNode,\n\ttype ViewPosition,\n\ttype ViewTypeCheckable,\n\ttype Writer\n} from 'ckeditor5/src/engine.js';\n\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\n\nimport {\n\tgenerateLiInUl,\n\tinjectViewList,\n\tmergeViewLists,\n\tgetSiblingListItem,\n\tpositionAfterUiElements\n} from './legacyutils.js';\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n */\nexport function modelViewInsertion( model: Model ): GetCallback<DowncastInsertEvent<Element>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( data.item, 'insert' );\n\t\tconsumable.consume( data.item, 'attribute:listType' );\n\t\tconsumable.consume( data.item, 'attribute:listIndent' );\n\n\t\tconst modelItem = data.item;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A model-to-view converter for the `listItem` model element removal.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */\nexport function modelViewRemove( model: Model ): GetCallback<DowncastRemoveEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\n\t\tconst viewStart = viewPosition.getLastMatchingPosition( value => !value.item.is( 'element', 'li' ) );\n\t\tconst viewItem = viewStart.nodeAfter as ViewElement;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item - the one to remove.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Remove the list with the item to remove.\n\t\tconst viewList = viewItem.parent as ViewElement;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tconst removed = viewWriter.remove( removeRange );\n\n\t\t// 3. Merge the whole created by breaking and removing the list.\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 4. Bring back nested list that was in the removed <li>.\n\t\tconst modelItem = conversionApi.mapper.toModelElement( viewItem )!;\n\n\t\thoistNestedLists(\n\t\t\tmodelItem.getAttribute( 'listIndent' ) as number + 1,\n\t\t\tdata.position,\n\t\t\tremoveRange.start,\n\t\t\tviewItem,\n\t\t\tconversionApi,\n\t\t\tmodel\n\t\t);\n\n\t\t// 5. Unbind removed view item and all children.\n\t\tfor ( const child of viewWriter.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child as ViewElement );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * A model-to-view converter for the `type` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements and changing their name. The next {@link module:list/legacylist/legacyconverters~modelViewMergeAfterChangeType}\n * converter will attempt to merge split nodes.\n *\n * Splitting this conversion into 2 steps makes it possible to add an additional conversion in the middle.\n * Check {@link module:list/legacytodolist/legacytodolistconverters~modelViewChangeType} to see an example of it.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n */\nexport const modelViewChangeType: GetCallback<DowncastAttributeEvent<Element>> = ( evt, data, conversionApi ) => {\n\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\treturn;\n\t}\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item )!;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Break the container after and before the list item.\n\t// This will create a view list with one view list item -- the one that changed type.\n\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t// Change name of the view list that holds the changed view item.\n\t// We cannot just change name property, because that would not render properly.\n\tconst viewList = viewItem.parent as ViewContainerElement;\n\tconst listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n\n\tviewWriter.rename( listName, viewList );\n};\n\n/**\n * A model-to-view converter that attempts to merge nodes split by {@link module:list/legacylist/legacyconverters~modelViewChangeType}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n */\nexport const modelViewMergeAfterChangeType: GetCallback<DowncastAttributeEvent<Element>> = ( evt, data, conversionApi ) => {\n\tconversionApi.consumable.consume( data.item, evt.name );\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item )!;\n\tconst viewList = viewItem.parent as ViewContainerElement;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Merge the changed view list with other lists, if possible.\n\tmergeViewLists( viewWriter, viewList, viewList.nextSibling! );\n\tmergeViewLists( viewWriter, viewList.previousSibling!, viewList );\n};\n\n/**\n * A model-to-view converter for the `listIndent` attribute change on the `listItem` model element.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */\nexport function modelViewChangeIndent( model: Model ): GetCallback<DowncastAttributeEvent<Element>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:listIndent' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewItem = conversionApi.mapper.toViewElement( data.item ) as ViewContainerElement;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item -- the one that changed type.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n\t\tconst viewList = viewItem.parent as ViewElement;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tviewWriter.remove( removeRange );\n\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 3. Bring back nested list that was in the removed <li>.\n\t\thoistNestedLists(\n\t\t\tdata.attributeOldValue as number + 1,\n\t\t\tdata.range.start,\n\t\t\tremoveRange.start,\n\t\t\tviewItem,\n\t\t\tconversionApi,\n\t\t\tmodel\n\t\t);\n\n\t\t// 4. Inject view list like it is newly inserted.\n\t\tinjectViewList( data.item, viewItem, conversionApi, model );\n\n\t\t// 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n\t\tfor ( const child of data.item.getChildren() ) {\n\t\t\tconversionApi.consumable.consume( child, 'insert' );\n\t\t}\n\t};\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/legacylist~LegacyList list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n * ```xml\n * // Model:                        // View:\n * <listItem>foo</listItem>         <ul>\n * <listItem>bar</listItem>             <li>foo</li>\n *                                      <li>bar</li>\n *                                  </ul>\n *\n * // After change:                 // Correct view guaranteed by this converter:\n * <listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n * <paragraph>xxx</paragraph>       // Instead of this wrong view state:\n * <listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n * ```\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n */\nexport const modelViewSplitOnInsert: GetCallback<DowncastInsertEvent<Element>> = ( evt, data, conversionApi ) => {\n\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\treturn;\n\t}\n\n\tif ( data.item.name != 'listItem' ) {\n\t\tlet viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst lists = [];\n\n\t\t// Break multiple ULs/OLs if there are.\n\t\t//\n\t\t// Imagine following list:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// Insert paragraph after item 1.1.1:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// In this case 1.1.2 has to become beginning of a new list.\n\t\t// We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n\t\t// Then we need to move those broken pieces one after another and merge:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t// 1.1.2 --------\n\t\t//   1.1.3 --------\n\t\t//     1.1.3.1 --------\n\t\t// 1.2 --------\n\t\t//   1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\twhile ( ( viewPosition.parent as any ).name == 'ul' || ( viewPosition.parent as any ).name == 'ol' ) {\n\t\t\tviewPosition = viewWriter.breakContainer( viewPosition );\n\n\t\t\tif ( ( viewPosition.parent as any ).name != 'li' ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Remove lists that are after inserted element.\n\t\t\t// They will be brought back later, below the inserted element.\n\t\t\tconst removeStart = viewPosition;\n\t\t\tconst removeEnd = viewWriter.createPositionAt( viewPosition.parent as any, 'end' );\n\n\t\t\t// Don't remove if there is nothing to remove.\n\t\t\tif ( !removeStart.isEqual( removeEnd ) ) {\n\t\t\t\tconst removed = viewWriter.remove( viewWriter.createRange( removeStart, removeEnd ) );\n\t\t\t\tlists.push( removed );\n\t\t\t}\n\n\t\t\tviewPosition = viewWriter.createPositionAfter( viewPosition.parent as any );\n\t\t}\n\n\t\t// Bring back removed lists.\n\t\tif ( lists.length > 0 ) {\n\t\t\tfor ( let i = 0; i < lists.length; i++ ) {\n\t\t\t\tconst previousList = viewPosition.nodeBefore;\n\t\t\t\tconst insertedRange = viewWriter.insert( viewPosition, lists[ i ] );\n\t\t\t\tviewPosition = insertedRange.end;\n\n\t\t\t\t// Don't merge first list! We want a split in that place (this is why this converter is introduced).\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tconst mergePos = mergeViewLists( viewWriter, previousList!, previousList!.nextSibling! );\n\n\t\t\t\t\t// If `mergePos` is in `previousList` it means that the lists got merged.\n\t\t\t\t\t// In this case, we need to fix insert position.\n\t\t\t\t\tif ( mergePos && mergePos.parent == previousList ) {\n\t\t\t\t\t\tviewPosition.offset--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Merge last inserted list with element after it.\n\t\t\tmergeViewLists( viewWriter, viewPosition.nodeBefore!, viewPosition.nodeAfter! );\n\t\t}\n\t}\n};\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/legacylist~LegacyList list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n * ```xml\n * // Model:                        // View:\n * <listItem>foo</listItem>         <ul><li>foo</li></ul>\n * <paragraph>xxx</paragraph>       <p>xxx</p>\n * <listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n * // After change:                 // Correct view guaranteed by this converter:\n * <listItem>foo</listItem>         <ul>\n * <listItem>bar</listItem>             <li>foo</li>\n *                                      <li>bar</li>\n *                                  </ul>\n * ```\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n */\nexport const modelViewMergeAfter: GetCallback<DowncastRemoveEvent> = ( evt, data, conversionApi ) => {\n\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\n\tconst viewItemPrev = viewPosition.nodeBefore;\n\tconst viewItemNext = viewPosition.nodeAfter;\n\n\t// Merge lists if something (remove, move) was done from inside of list.\n\t// Merging will be done only if both items are view lists of the same type.\n\t// The check is done inside the helper function.\n\tmergeViewLists( conversionApi.writer, viewItemPrev!, viewItemNext! );\n};\n\n/**\n * A view-to-model converter that converts the `<li>` view elements into the `listItem` model elements.\n *\n * To set correct values of the `listType` and `listIndent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */\nexport const viewModelConverter: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\tif ( conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\tconst writer = conversionApi.writer;\n\n\t\t// 1. Create `listItem` model element.\n\t\tconst listItem = writer.createElement( 'listItem' );\n\n\t\t// 2. Handle `listItem` model element attributes.\n\t\tconst indent = getIndent( data.viewItem );\n\n\t\twriter.setAttribute( 'listIndent', indent, listItem );\n\n\t\t// Set 'bulleted' as default. If this item is pasted into a context,\n\t\tconst type = data.viewItem.parent && ( data.viewItem.parent as any ).name == 'ol' ? 'numbered' : 'bulleted';\n\t\twriter.setAttribute( 'listType', type, listItem );\n\n\t\tif ( !conversionApi.safeInsert( listItem, data.modelCursor ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextPosition = viewToModelListItemChildrenConverter( listItem, data.viewItem.getChildren(), conversionApi );\n\n\t\t// Result range starts before the first item and ends after the last.\n\t\tdata.modelRange = writer.createRange( data.modelCursor, nextPosition );\n\n\t\tconversionApi.updateConversionResult( listItem, data );\n\t}\n};\n\n/**\n * A view-to-model converter for the `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between the `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */\nexport const cleanList: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\t// Caching children because when we start removing them iterating fails.\n\t\tconst children = Array.from( data.viewItem.getChildren() );\n\n\t\tfor ( const child of children ) {\n\t\t\tconst isWrongElement = !( child.is( 'element', 'li' ) || isList( child ) );\n\n\t\t\tif ( isWrongElement ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * A view-to-model converter for the `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */\nexport const cleanListItem: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\tif ( data.viewItem.childCount === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst children = [ ...data.viewItem.getChildren() ];\n\n\t\tlet foundList = false;\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( foundList && !isList( child ) ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\n\t\t\tif ( isList( child ) ) {\n\t\t\t\t// If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n\t\t\t\tfoundList = true;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Returns a callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `listItem` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n */\nexport function modelToViewPosition( view: EditingView ): GetCallback<MapperModelToViewPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tif ( data.isPhantom ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.modelPosition.nodeBefore;\n\n\t\tif ( modelItem && modelItem.is( 'element', 'listItem' ) ) {\n\t\t\tconst viewItem = data.mapper.toViewElement( modelItem )!;\n\t\t\tconst topmostViewList = viewItem.getAncestors().find( isList );\n\t\t\tconst walker = view.createPositionAt( viewItem, 0 ).getWalker();\n\n\t\t\tfor ( const value of walker ) {\n\t\t\t\tif ( value.type == 'elementStart' && value.item.is( 'element', 'li' ) ) {\n\t\t\t\t\tdata.viewPosition = value.previousPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t} else if ( value.type == 'elementEnd' && value.item == topmostViewList ) {\n\t\t\t\t\tdata.viewPosition = value.nextPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `<li>` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */\nexport function viewToModelPosition( model: Model ): GetCallback<MapperViewToModelPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tconst viewPos = data.viewPosition;\n\t\tconst viewParent = viewPos.parent as ViewElement;\n\t\tconst mapper = data.mapper;\n\n\t\tif ( viewParent.name == 'ul' || viewParent.name == 'ol' ) {\n\t\t\t// Position is directly in <ul> or <ol>.\n\t\t\tif ( !viewPos.isAtEnd ) {\n\t\t\t\t// If position is not at the end, it must be before <li>.\n\t\t\t\t// Get that <li>, map it to `listItem` and set model position before that `listItem`.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeAfter as any )!;\n\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode );\n\t\t\t} else {\n\t\t\t\t// Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n\t\t\t\t// There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n\t\t\t\t// because that <li> may contain nested items.\n\t\t\t\t// We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeBefore as any );\n\t\t\t\tconst modelLength = mapper.getModelLength( viewPos.nodeBefore! );\n\n\t\t\t\t// Then we get model position before mapped `listItem` and shift it accordingly.\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode! ).getShiftedBy( modelLength );\n\t\t\t}\n\n\t\t\tevt.stop();\n\t\t} else if (\n\t\t\tviewParent.name == 'li' &&\n\t\t\tviewPos.nodeBefore &&\n\t\t\t( ( viewPos.nodeBefore as any ).name == 'ul' || ( viewPos.nodeBefore as any ).name == 'ol' )\n\t\t) {\n\t\t\t// In most cases when view position is in <li> it is in text and this is a correct position.\n\t\t\t// However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n\t\t\tconst modelNode = mapper.toModelElement( viewParent );\n\n\t\t\t// Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n\t\t\t// Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n\t\t\tlet modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n\t\t\tlet viewList: ViewNode | null = viewPos.nodeBefore;\n\n\t\t\twhile ( viewList && isList( viewList ) ) {\n\t\t\t\tmodelLength += mapper.getModelLength( viewList );\n\n\t\t\t\tviewList = viewList.previousSibling;\n\t\t\t}\n\n\t\t\tdata.modelPosition = model.createPositionBefore( modelNode! ).getShiftedBy( modelLength );\n\n\t\t\tevt.stop();\n\t\t}\n\t};\n}\n\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>Item 2</listItem>   <--- this is removed.\n * <listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n * ```\n *\n * The list structure after the middle element is removed:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n * ```\n *\n * @param model The data model.\n * @param writer The writer to do changes with.\n * @returns `true` if any change has been applied, `false` otherwise.\n */\nexport function modelChangePostFixer( model: Model, writer: Writer ): boolean {\n\tconst changes = model.document.differ.getChanges();\n\tconst itemToListHead = new Map<Element, Element>();\n\n\tlet applied = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'insert' && entry.name != 'listItem' ) {\n\t\t\tif ( entry.name != '$text' ) {\n\t\t\t\t// In case of renamed element.\n\t\t\t\tconst item = entry.position.nodeAfter as Element;\n\n\t\t\t\tif ( item.hasAttribute( 'listIndent' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listIndent', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listType' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listType', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listStyle' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listStyle', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listReversed' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listReversed', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listStart' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listStart', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tfor ( const innerItem of Array.from( model.createRangeIn( item ) ).filter( e => e.item.is( 'element', 'listItem' ) ) ) {\n\t\t\t\t\t_addListToFix( innerItem.previousPosition );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst posAfter = entry.position.getShiftedBy( entry.length );\n\n\t\t\t_addListToFix( posAfter );\n\t\t} else if ( entry.type == 'remove' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listIndent' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listType' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t}\n\t}\n\n\tfor ( const listHead of itemToListHead.values() ) {\n\t\t_fixListIndents( listHead );\n\t\t_fixListTypes( listHead );\n\t}\n\n\treturn applied;\n\n\tfunction _addListToFix( position: Position ) {\n\t\tconst previousNode = position.nodeBefore;\n\n\t\tif ( !previousNode || !previousNode.is( 'element', 'listItem' ) ) {\n\t\t\tconst item = position.nodeAfter;\n\n\t\t\tif ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\t\titemToListHead.set( item, item );\n\t\t\t}\n\t\t} else {\n\t\t\tlet listHead = previousNode;\n\n\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (\n\t\t\t\t// Cache previousSibling and reuse for performance reasons. See #6581.\n\t\t\t\tlet previousSibling = listHead.previousSibling;\n\t\t\t\tpreviousSibling && previousSibling.is( 'element', 'listItem' );\n\t\t\t\tpreviousSibling = listHead.previousSibling\n\t\t\t) {\n\t\t\t\tlistHead = previousSibling;\n\n\t\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titemToListHead.set( previousNode, listHead );\n\t\t}\n\t}\n\n\tfunction _fixListIndents( item: Node | null ) {\n\t\tlet maxIndent = 0;\n\t\tlet fixBy = null;\n\n\t\twhile ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' ) as number;\n\n\t\t\tif ( itemIndent > maxIndent ) {\n\t\t\t\tlet newIndent;\n\n\t\t\t\tif ( fixBy === null ) {\n\t\t\t\t\tfixBy = itemIndent - maxIndent;\n\t\t\t\t\tnewIndent = maxIndent;\n\t\t\t\t} else {\n\t\t\t\t\tif ( fixBy > itemIndent ) {\n\t\t\t\t\t\tfixBy = itemIndent;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewIndent = itemIndent - fixBy;\n\t\t\t\t}\n\n\t\t\t\twriter.setAttribute( 'listIndent', newIndent, item );\n\n\t\t\t\tapplied = true;\n\t\t\t} else {\n\t\t\t\tfixBy = null;\n\t\t\t\tmaxIndent = item.getAttribute( 'listIndent' ) as number + 1;\n\t\t\t}\n\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n\n\tfunction _fixListTypes( item: Node | null ) {\n\t\tlet typesStack: Array<string> = [];\n\t\tlet prev = null;\n\n\t\twhile ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' ) as number;\n\n\t\t\tif ( prev && prev.getAttribute( 'listIndent' ) as number > itemIndent ) {\n\t\t\t\ttypesStack = typesStack.slice( 0, itemIndent + 1 );\n\t\t\t}\n\n\t\t\tif ( itemIndent != 0 ) {\n\t\t\t\tif ( typesStack[ itemIndent ] ) {\n\t\t\t\t\tconst type = typesStack[ itemIndent ];\n\n\t\t\t\t\tif ( item.getAttribute( 'listType' ) != type ) {\n\t\t\t\t\t\twriter.setAttribute( 'listType', type, item );\n\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttypesStack[ itemIndent ] = item.getAttribute( 'listType' ) as string;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprev = item;\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n}\n\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>A</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>B^</listItem>\n * // At ^ paste:  <listItem listType=\"bulleted\" listIndent=4>X</listItem>\n * //              <listItem listType=\"bulleted\" listIndent=5>Y</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>C</listItem>\n * ```\n *\n * Should become:\n *\n * ```xml\n * <listItem listType=\"bulleted\" listIndent=0>A</listItem>\n * <listItem listType=\"bulleted\" listIndent=1>BX</listItem>\n * <listItem listType=\"bulleted\" listIndent=2>Y/listItem>\n * <listItem listType=\"bulleted\" listIndent=2>C</listItem>\n * ```\n */\nexport const modelIndentPasteFixer: GetCallback<ModelInsertContentEvent> = function( evt, [ content, selectable ] ) {\n\tconst model = this as Model;\n\n\t// Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n\t// elements before it and there is no need to fix indents, because even if we insert that content into a list,\n\t// that list will be broken.\n\t// Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n\t// would create incorrect model.\n\tlet item = content.is( 'documentFragment' ) ? content.getChild( 0 ) : content;\n\n\tlet selection;\n\n\tif ( !selectable ) {\n\t\tselection = model.document.selection;\n\t} else {\n\t\tselection = model.createSelection( selectable );\n\t}\n\n\tif ( item && item.is( 'element', 'listItem' ) ) {\n\t\t// Get a reference list item. Inserted list items will be fixed according to that item.\n\t\tconst pos = selection.getFirstPosition()!;\n\t\tlet refItem = null;\n\n\t\tif ( pos.parent.is( 'element', 'listItem' ) ) {\n\t\t\trefItem = pos.parent;\n\t\t} else if ( pos.nodeBefore && pos.nodeBefore.is( 'element', 'listItem' ) ) {\n\t\t\trefItem = pos.nodeBefore;\n\t\t}\n\n\t\t// If there is `refItem` it means that we do insert list items into an existing list.\n\t\tif ( refItem ) {\n\t\t\t// First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n\t\t\t// to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n\t\t\t// Indent of all those items has to be adjusted to reference item.\n\t\t\tconst indentChange = refItem.getAttribute( 'listIndent' ) as number;\n\n\t\t\t// Fix only if there is anything to fix.\n\t\t\tif ( indentChange > 0 ) {\n\t\t\t\t// Adjust indent of all \"first\" list items in inserted data.\n\t\t\t\twhile ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\t\t\titem._setAttribute( 'listIndent', item.getAttribute( 'listIndent' ) as number + indentChange );\n\n\t\t\t\t\titem = item.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Helper function that converts children of a given `<li>` view element into corresponding model elements.\n * The function maintains proper order of elements if model `listItem` is split during the conversion\n * due to block children conversion.\n *\n * @param listItemModel List item model element to which converted children will be inserted.\n * @param viewChildren View elements which will be converted.\n * @param conversionApi Conversion interface to be used by the callback.\n * @returns Position on which next elements should be inserted after children conversion.\n */\nfunction viewToModelListItemChildrenConverter(\n\tlistItemModel: Element,\n\tviewChildren: Iterable<ViewNode>,\n\tconversionApi: UpcastConversionApi\n) {\n\tconst { writer, schema } = conversionApi;\n\n\t// A position after the last inserted `listItem`.\n\tlet nextPosition = writer.createPositionAfter( listItemModel );\n\n\t// Check all children of the converted `<li>`. At this point we assume there are no \"whitespace\" view text nodes\n\t// in view list, between view list items. This should be handled by `<ul>` and `<ol>` converters.\n\tfor ( const child of viewChildren ) {\n\t\tif ( ( child as any ).name == 'ul' || ( child as any ).name == 'ol' ) {\n\t\t\t// If the children is a list, we will insert its conversion result after currently handled `listItem`.\n\t\t\t// Then, next insertion position will be set after all the new list items (and maybe other elements if\n\t\t\t// something split list item).\n\t\t\t//\n\t\t\t// If this is a list, we expect that some `listItem`s and possibly other blocks will be inserted, however `.modelCursor`\n\t\t\t// should be set after last `listItem` (or block). This is why it feels safe to use it as `nextPosition`\n\t\t\tnextPosition = conversionApi.convertItem( child, nextPosition ).modelCursor;\n\t\t} else {\n\t\t\t// If this is not a list, try inserting content at the end of the currently handled `listItem`.\n\t\t\tconst result = conversionApi.convertItem( child, writer.createPositionAt( listItemModel, 'end' ) );\n\n\t\t\t// It may end up that the current `listItem` becomes split (if that content cannot be inside `listItem`). For example:\n\t\t\t//\n\t\t\t// <li><p>Foo</p></li>\n\t\t\t//\n\t\t\t// will be converted to:\n\t\t\t//\n\t\t\t// <listItem></listItem><paragraph>Foo</paragraph><listItem></listItem>\n\t\t\t//\n\t\t\tconst convertedChild = result.modelRange!.start.nodeAfter;\n\t\t\tconst wasSplit = convertedChild && convertedChild.is( 'element' ) && !schema.checkChild( listItemModel, convertedChild.name );\n\n\t\t\tif ( wasSplit ) {\n\t\t\t\t// As `lastListItem` got split, we need to update it to the second part of the split `listItem` element.\n\t\t\t\t//\n\t\t\t\t// `modelCursor` should be set to a position where the conversion should continue. There are multiple possible scenarios\n\t\t\t\t// that may happen. Usually, `modelCursor` (marked as `#` below) would point to the second list item after conversion:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><p>Foo</p></li>` -> `<listItem></listItem><paragraph>Foo</paragraph><listItem>#</listItem>`\n\t\t\t\t//\n\t\t\t\t// However, in some cases, like auto-paragraphing, the position is placed at the end of the block element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><div>Foo</div></li>` -> `<listItem></listItem><paragraph>Foo#</paragraph><listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// or after an element if another element broken auto-paragraphed element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><div><h2>Foo</h2></div></li>` -> `<listItem></listItem><heading1>Foo</heading1>#<listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// We need to check for such cases and use proper list item and position based on it.\n\t\t\t\t//\n\t\t\t\tif ( result.modelCursor.parent.is( 'element', 'listItem' ) ) {\n\t\t\t\t\t// (1).\n\t\t\t\t\tlistItemModel = result.modelCursor.parent;\n\t\t\t\t} else {\n\t\t\t\t\t// (2), (3).\n\t\t\t\t\tlistItemModel = findNextListItem( result.modelCursor );\n\t\t\t\t}\n\n\t\t\t\tnextPosition = writer.createPositionAfter( listItemModel );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nextPosition;\n}\n\n/**\n * Helper function that seeks for a next list item starting from given `startPosition`.\n */\nfunction findNextListItem( startPosition: Position ) {\n\tconst treeWalker = new TreeWalker( { startPosition } );\n\n\tlet value;\n\n\tdo {\n\t\tvalue = treeWalker.next();\n\t} while ( !value.value.item.is( 'element', 'listItem' ) );\n\n\treturn value.value.item;\n}\n\n/**\n * Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n * to other given parameters.\n */\nfunction hoistNestedLists(\n\tnextIndent: number,\n\tmodelRemoveStartPosition: Position,\n\tviewRemoveStartPosition: ViewPosition,\n\tviewRemovedItem: ViewElement,\n\tconversionApi: DowncastConversionApi,\n\tmodel: Model\n) {\n\t// Find correct previous model list item element.\n\t// The element has to have either same or smaller indent than given reference indent.\n\t// This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n\t// Keep in mind that such element might not be found, if removed item was the first item.\n\tconst prevModelItem = getSiblingListItem( modelRemoveStartPosition.nodeBefore, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: nextIndent\n\t} );\n\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Indent of found element or `null` if the element has not been found.\n\tconst prevIndent = prevModelItem ? prevModelItem.getAttribute( 'listIndent' ) : null;\n\n\tlet insertPosition;\n\n\tif ( !prevModelItem ) {\n\t\t// If element has not been found, simply insert lists at the position where the removed item was:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n\t\t//   1.1 --------       <--- this is reference indent.\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1.1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t// 1.2 --------\n\t\tinsertPosition = viewRemoveStartPosition;\n\t} else if ( prevIndent == nextIndent ) {\n\t\t// If element has been found and has same indent as reference indent it means that nested items should\n\t\t// become siblings of found element:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------       <--- this is `prevModelItem`.\n\t\t// 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n\t\t//   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n\t\t//   2.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------\n\t\t//   2.1 --------\n\t\t//   2.2 --------\n\t\tconst prevViewList = mapper.toViewElement( prevModelItem )!.parent as ViewElement;\n\t\tinsertPosition = viewWriter.createPositionAfter( prevViewList );\n\t} else {\n\t\t// If element has been found and has smaller indent as reference indent it means that nested items\n\t\t// should become nested items of found item:\n\t\t//\n\t\t// 1 --------           <--- this is `prevModelItem`.\n\t\t//   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n\t\t//     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n\t\t// because following item may have indent bigger only by one. But this is fixed by postfixer.\n\t\tconst modelPosition = model.createPositionAt( prevModelItem, 'end' );\n\t\tinsertPosition = mapper.toViewPosition( modelPosition );\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n\t// are inserted after the first list (no need to recalculate insertion position for them).\n\tfor ( const child of [ ...viewRemovedItem.getChildren() ] ) {\n\t\tif ( isList( child ) ) {\n\t\t\tinsertPosition = viewWriter.move( viewWriter.createRangeOn( child ), insertPosition ).end;\n\n\t\t\tmergeViewLists( viewWriter, child, child.nextSibling! );\n\t\t\tmergeViewLists( viewWriter, child.previousSibling!, child );\n\t\t}\n\t}\n}\n\n/**\n * Checks if view element is a list type (ul or ol).\n */\nfunction isList( viewElement: ViewTypeCheckable ): viewElement is ViewElement & { name: 'ol' | 'ul' } {\n\treturn viewElement.is( 'element', 'ol' ) || viewElement.is( 'element', 'ul' );\n}\n\n/**\n * Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n *\n * Also, fixes non HTML compliant lists indents:\n *\n * ```\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n *     |-> OL                                  |-> OL\n *         |-> OL                                  |\n *         |   |-> OL                              |\n *         |       |-> OL                          |\n *         |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n *         |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> OL                                      |\n *     |-> OL                                  |\n *          |-> OL                             |\n *              |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n *\n * before:                                     fixed list:\n * OL                                          OL\n * |-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n * |-> OL                                          |-> OL\n *     |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n * ```\n */\nfunction getIndent( listItem: ViewElement ) {\n\tlet indent = 0;\n\n\tlet parent = listItem.parent as ViewElement;\n\n\twhile ( parent ) {\n\t\t// Each LI in the tree will result in an increased indent for HTML compliant lists.\n\t\tif ( parent.is( 'element', 'li' ) ) {\n\t\t\tindent++;\n\t\t} else {\n\t\t\t// If however the list is nested in other list we should check previous sibling of any of the list elements...\n\t\t\tconst previousSibling = parent.previousSibling;\n\n\t\t\t// ...because the we might need increase its indent:\n\t\t\t//\t\tbefore:                           fixed list:\n\t\t\t//\t\tOL                                OL\n\t\t\t//\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n\t\t\t//\t\t|-> OL                                |-> OL\n\t\t\t//\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n\t\t\tif ( previousSibling && previousSibling.is( 'element', 'li' ) ) {\n\t\t\t\tindent++;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parent as ViewElement;\n\t}\n\n\treturn indent;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist/legacylistediting\n */\n\nimport LegacyListCommand from './legacylistcommand.js';\nimport LegacyIndentCommand from './legacyindentcommand.js';\nimport LegacyListUtils from './legacylistutils.js';\n\nimport { Plugin, type MultiCommand } from 'ckeditor5/src/core.js';\n\nimport { Enter, type ViewDocumentEnterEvent } from 'ckeditor5/src/enter.js';\nimport { Delete, type ViewDocumentDeleteEvent } from 'ckeditor5/src/typing.js';\n\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastInsertEvent,\n\tDowncastRemoveEvent,\n\tElement,\n\tMapperModelToViewPositionEvent,\n\tMapperViewToModelPositionEvent,\n\tModelInsertContentEvent,\n\tUpcastElementEvent,\n\tViewDocumentTabEvent,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport {\n\tcleanList,\n\tcleanListItem,\n\tmodelViewInsertion,\n\tmodelViewChangeType,\n\tmodelViewMergeAfterChangeType,\n\tmodelViewMergeAfter,\n\tmodelViewRemove,\n\tmodelViewSplitOnInsert,\n\tmodelViewChangeIndent,\n\tmodelChangePostFixer,\n\tmodelIndentPasteFixer,\n\tviewModelConverter,\n\tmodelToViewPosition,\n\tviewToModelPosition\n} from './legacyconverters.js';\n\nimport '../../theme/list.css';\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n */\nexport default class LegacyListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyListEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ Enter, Delete, LegacyListUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Schema.\n\t\t// Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n\t\t// uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n\t\t// If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\t\teditor.model.schema.register( 'listItem', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n\t\t} );\n\n\t\t// Converters.\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\teditor.model.document.registerPostFixer( writer => modelChangePostFixer( editor.model, writer ) );\n\n\t\tediting.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t\tdata.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\n\t\tediting.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\t\tediting.mapper.on<MapperViewToModelPositionEvent>( 'viewToModelPosition', viewToModelPosition( editor.model ) );\n\t\tdata.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<DowncastInsertEvent<Element>>( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\t\t\tdispatcher.on<DowncastInsertEvent<Element>>( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<Element>>( 'attribute:listType:listItem', modelViewChangeType, { priority: 'high' } );\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<Element>>(\n\t\t\t\t\t'attribute:listType:listItem', modelViewMergeAfterChangeType, { priority: 'low' } );\n\t\t\t\tdispatcher.on<DowncastAttributeEvent<Element>>( 'attribute:listIndent:listItem', modelViewChangeIndent( editor.model ) );\n\t\t\t\tdispatcher.on<DowncastRemoveEvent>( 'remove:listItem', modelViewRemove( editor.model ) );\n\t\t\t\tdispatcher.on<DowncastRemoveEvent>( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\t\t\t} );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<DowncastInsertEvent<Element>>( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\t\t\tdispatcher.on<DowncastInsertEvent<Element>>( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\t\t} );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ul', cleanList, { priority: 'high' } );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ol', cleanList, { priority: 'high' } );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:li', cleanListItem, { priority: 'high' } );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:li', viewModelConverter );\n\t\t\t} );\n\n\t\t// Fix indentation of pasted items.\n\t\teditor.model.on<ModelInsertContentEvent>( 'insertContent', modelIndentPasteFixer, { priority: 'high' } );\n\n\t\t// Register commands for numbered and bulleted list.\n\t\teditor.commands.add( 'numberedList', new LegacyListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new LegacyListCommand( editor, 'bulleted' ) );\n\n\t\t// Register commands for indenting.\n\t\teditor.commands.add( 'indentList', new LegacyIndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new LegacyIndentCommand( editor, 'backward' ) );\n\n\t\tconst viewDocument = editing.view.document;\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\t\tthis.listenTo<ViewDocumentEnterEvent>( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition()!.parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty ) {\n\t\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'li' } );\n\n\t\t// Overwrite default Backspace key behavior.\n\t\t// If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\t\tthis.listenTo<ViewDocumentDeleteEvent>( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t// Check conditions from those that require less computations like those immediately available.\n\t\t\tif ( data.direction !== 'backward' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = this.editor.model.document.selection;\n\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst firstPosition = selection.getFirstPosition()!;\n\n\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\tif ( positionParent.name !== 'listItem' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousIsAListItem = positionParent.previousSibling && ( positionParent.previousSibling as any ).name === 'listItem';\n\n\t\t\tif ( previousIsAListItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: 'li' } );\n\n\t\tthis.listenTo<ViewDocumentTabEvent>( editor.editing.view.document, 'tab', ( evt, data ) => {\n\t\t\tconst commandName = data.shiftKey ? 'outdentList' : 'indentList';\n\t\t\tconst command = this.editor.commands.get( commandName )!;\n\n\t\t\tif ( command.isEnabled ) {\n\t\t\t\teditor.execute( commandName );\n\n\t\t\t\tdata.stopPropagation();\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: 'li' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst commands = this.editor.commands;\n\n\t\tconst indent = commands.get( 'indent' ) as MultiCommand;\n\t\tconst outdent = commands.get( 'outdent' ) as MultiCommand;\n\n\t\tif ( indent ) {\n\t\t\tindent.registerChildCommand( commands.get( 'indentList' )! );\n\t\t}\n\n\t\tif ( outdent ) {\n\t\t\toutdent.registerChildCommand( commands.get( 'outdentList' )! );\n\t\t}\n\t}\n}\n\nfunction getViewListItemLength( element: ViewElement ) {\n\tlet length = 1;\n\n\tfor ( const child of element.getChildren() as Iterable<ViewElement> ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\tfor ( const item of child.getChildren() ) {\n\t\t\t\tlength += getViewListItemLength( item as ViewElement );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn length;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylist\n */\n\nimport LegacyListEditing from './legacylist/legacylistediting.js';\nimport ListUI from './list/listui.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\n/**\n * The legacy list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacylist/legacylistediting~LegacyListEditing legacy list editing feature}\n * and {@link module:list/list/listui~ListUI list UI feature}.\n */\nexport default class LegacyList extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyListEditing, ListUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyList' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties/legacyliststylecommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { getListTypeFromListStyleType, getSelectedListItems } from '../legacylist/legacyutils.js';\n\n/**\n * The list style command. It changes the `listStyle` attribute of the selected list items.\n *\n * If the list type (numbered or bulleted) can be inferred from the passed style type,\n * the command tries to convert selected items to a list of that type.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */\nexport default class LegacyListStyleCommand extends Command {\n\tdeclare public isStyleTypeSupported: undefined;\n\n\t/**\n\t * @inheritDoc\n\t * @readonly\n\t */\n\tdeclare public value: string | null;\n\n\t/**\n\t * The default type of the list style.\n\t */\n\tpublic readonly defaultType: string;\n\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param defaultType The list type that will be used by default if the value was not specified during\n\t * the command execution.\n\t */\n\tconstructor( editor: Editor, defaultType: string ) {\n\t\tsuper( editor );\n\n\t\tthis.defaultType = defaultType;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default\n\t * style will be applied.\n\t */\n\tpublic override execute( options: { type?: string | null } = {} ): void {\n\t\tthis._tryToConvertItemsToList( options );\n\n\t\tconst model = this.editor.model;\n\t\tconst listItems = getSelectedListItems( model );\n\n\t\tif ( !listItems.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of listItems ) {\n\t\t\t\twriter.setAttribute( 'listStyle', options.type || this.defaultType, item );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst listItem = this.editor.model.document.selection.getFirstPosition()!.parent;\n\n\t\tif ( listItem && listItem.is( 'element', 'listItem' ) ) {\n\t\t\treturn listItem.getAttribute( 'listStyle' ) as string;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */\n\tprivate _checkEnabled() {\n\t\tconst editor = this.editor;\n\n\t\tconst numberedList = editor.commands.get( 'numberedList' )!;\n\t\tconst bulletedList = editor.commands.get( 'bulletedList' )!;\n\n\t\treturn numberedList.isEnabled || bulletedList.isEnabled;\n\t}\n\n\t/**\n\t * Checks if the provided list style is valid. Also changes the selection to a list if it's not set yet.\n\t *\n\t * @param The type of the list style. If `null` is specified, the function does nothing.\n\t*/\n\tprivate _tryToConvertItemsToList( options: { type?: string | null } ) {\n\t\tif ( !options.type ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst listType = getListTypeFromListStyleType( options.type );\n\n\t\t/* istanbul ignore next -- @preserve */\n\t\tif ( !listType ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst commandName = `${ listType }List` as const;\n\t\tconst command = editor.commands.get( commandName )!;\n\n\t\tif ( !command.value ) {\n\t\t\teditor.execute( commandName );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties/legacylistreversedcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { getSelectedListItems } from '../legacylist/legacyutils.js';\n\n/**\n * The reversed list command. It changes the `listReversed` attribute of the selected list items. As a result, the list order will be\n * reversed.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */\nexport default class LegacyListReversedCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: boolean | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst value = this._getValue();\n\t\tthis.value = value;\n\t\tthis.isEnabled = value != null;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.reversed Whether the list should be reversed.\n\t */\n\tpublic override execute( options: { reversed?: boolean } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst listItems = getSelectedListItems( model )\n\t\t\t.filter( item => item.getAttribute( 'listType' ) == 'numbered' );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of listItems ) {\n\t\t\t\twriter.setAttribute( 'listReversed', !!options.reversed, item );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst listItem = this.editor.model.document.selection.getFirstPosition()!.parent;\n\n\t\tif ( listItem && listItem.is( 'element', 'listItem' ) && listItem.getAttribute( 'listType' ) == 'numbered' ) {\n\t\t\treturn listItem.getAttribute( 'listReversed' ) as boolean;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties/legacyliststartcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport { getSelectedListItems } from '../legacylist/legacyutils.js';\n\n/**\n * The list start index command. It changes the `listStart` attribute of the selected list items.\n * It is used by the {@link module:list/legacylistproperties~LegacyListProperties legacy list properties feature}.\n */\nexport default class LegacyListStartCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tdeclare public value: number | null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst value = this._getValue();\n\t\tthis.value = value;\n\t\tthis.isEnabled = value != null;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.startIndex The list start index.\n\t */\n\tpublic override execute( { startIndex = 1 }: { startIndex?: number } = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst listItems = getSelectedListItems( model )\n\t\t\t.filter( item => item.getAttribute( 'listType' ) == 'numbered' );\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of listItems ) {\n\t\t\t\twriter.setAttribute( 'listStart', startIndex >= 0 ? startIndex : 1, item );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */\n\tprivate _getValue() {\n\t\tconst listItem = this.editor.model.document.selection.getFirstPosition()!.parent;\n\n\t\tif ( listItem && listItem.is( 'element', 'listItem' ) && listItem.getAttribute( 'listType' ) == 'numbered' ) {\n\t\t\treturn listItem.getAttribute( 'listStart' ) as number;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties/legacylistpropertiesediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\n\nimport type {\n\tDiffItem,\n\tDowncastAttributeEvent,\n\tDowncastDispatcher,\n\tDowncastWriter,\n\tElement,\n\tModelDeleteContentEvent,\n\tNode,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement,\n\tWriter\n} from 'ckeditor5/src/engine.js';\n\nimport LegacyListEditing from '../legacylist/legacylistediting.js';\nimport LegacyListStyleCommand from './legacyliststylecommand.js';\nimport LegacyListReversedCommand from './legacylistreversedcommand.js';\nimport LegacyListStartCommand from './legacyliststartcommand.js';\nimport { getSiblingListItem, getSiblingNodes } from '../legacylist/legacyutils.js';\nimport type { ListPropertiesConfig } from '../listconfig.js';\nimport { normalizeListStyle } from '../listproperties/utils/style.js';\n\nconst DEFAULT_LIST_TYPE = 'default';\n\n/**\n * The engine of the list properties feature.\n *\n * It sets the value for the `listItem` attribute of the {@link module:list/legacylist~LegacyList `<listItem>`} element that\n * allows modifying the list style type.\n *\n * It registers the `'listStyle'`, `'listReversed'` and `'listStart'` commands if they are enabled in the configuration.\n * Read more in {@link module:list/listconfig~ListPropertiesConfig}.\n */\nexport default class LegacyListPropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyListPropertiesEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'list', {\n\t\t\tproperties: {\n\t\t\t\tstyles: true,\n\t\t\t\tstartIndex: false,\n\t\t\t\treversed: false\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tconst enabledProperties = editor.config.get( 'list.properties' )!;\n\t\tconst strategies = createAttributeStrategies( enabledProperties );\n\n\t\t// Extend schema.\n\t\tmodel.schema.extend( 'listItem', {\n\t\t\tallowAttributes: strategies.map( s => s.attributeName )\n\t\t} );\n\n\t\tfor ( const strategy of strategies ) {\n\t\t\tstrategy.addCommand( editor );\n\t\t}\n\n\t\t// Fix list attributes when modifying their nesting levels (the `listIndent` attribute).\n\t\tthis.listenTo( editor.commands.get( 'indentList' )!, '_executeCleanup', fixListAfterIndentListCommand( editor, strategies ) );\n\t\tthis.listenTo( editor.commands.get( 'outdentList' )!, '_executeCleanup', fixListAfterOutdentListCommand( editor, strategies ) );\n\n\t\tthis.listenTo( editor.commands.get( 'bulletedList' )!, '_executeCleanup', restoreDefaultListStyle( editor ) );\n\t\tthis.listenTo( editor.commands.get( 'numberedList' )!, '_executeCleanup', restoreDefaultListStyle( editor ) );\n\n\t\t// Register a post-fixer that ensures that the attributes is specified in each `listItem` element.\n\t\tmodel.document.registerPostFixer( fixListAttributesOnListItemElements( editor, strategies ) );\n\n\t\t// Set up conversion.\n\t\teditor.conversion.for( 'upcast' ).add( upcastListItemAttributes( strategies ) );\n\t\teditor.conversion.for( 'downcast' ).add( downcastListItemAttributes( strategies ) );\n\n\t\t// Handle merging two separated lists into the single one.\n\t\tthis._mergeListAttributesWhileMergingLists( strategies );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Enable post-fixer that removes the attributes from to-do list items only if the \"TodoList\" plugin is on.\n\t\t// We need to registry the hook here since the `TodoList` plugin can be added after the `ListPropertiesEditing`.\n\t\tif ( editor.commands.get( 'todoList' ) ) {\n\t\t\teditor.model.document.registerPostFixer( removeListItemAttributesFromTodoList( editor ) );\n\t\t}\n\t}\n\n\t/**\n\t * Starts listening to {@link module:engine/model/model~Model#deleteContent} and checks whether two lists will be merged into a single\n\t * one after deleting the content.\n\t *\n\t * The purpose of this action is to adjust the `listStyle`, `listReversed` and `listStart` values\n\t * for the list that was merged.\n\t *\n\t * Consider the following model's content:\n\t *\n\t * ```xml\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * <paragraph>[A paragraph.]</paragraph>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 2</listItem>\n\t * ```\n\t *\n\t * After removing the paragraph element, the second list will be merged into the first one.\n\t * We want to inherit the `listStyle` attribute for the second list from the first one.\n\t *\n\t * ```xml\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t * <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t * ```\n\t *\n\t * See https://github.com/ckeditor/ckeditor5/issues/7879.\n\t *\n\t * @param attributeStrategies Strategies for the enabled attributes.\n\t */\n\tprivate _mergeListAttributesWhileMergingLists( attributeStrategies: Array<AttributeStrategy> ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\t// First the outer-most`listItem` in the first list reference.\n\t\t// If found, the lists should be merged and this `listItem` provides the attributes\n\t\t// and it is also a starting point when searching for items in the second list.\n\t\tlet firstMostOuterItem: Element | null;\n\n\t\t// Check whether the removed content is between two lists.\n\t\tthis.listenTo<ModelDeleteContentEvent>( model, 'deleteContent', ( evt, [ selection ] ) => {\n\t\t\tconst firstPosition = selection.getFirstPosition()!;\n\t\t\tconst lastPosition = selection.getLastPosition()!;\n\n\t\t\t// Typing or removing content in a single item. Aborting.\n\t\t\tif ( firstPosition.parent === lastPosition.parent ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// An element before the content that will be removed is not a list.\n\t\t\tif ( !firstPosition.parent.is( 'element', 'listItem' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextSibling = lastPosition.parent.nextSibling;\n\n\t\t\t// An element after the content that will be removed is not a list.\n\t\t\tif ( !nextSibling || !nextSibling.is( 'element', 'listItem' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find the outermost list item based on the `listIndent` attribute. We can't assume that `listIndent=0`\n\t\t\t// because the selection can be hooked in nested lists.\n\t\t\t//\n\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t\t\t// <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"square\">UL List [item 1.1</listItem>\n\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">[]UL List item 1.</listItem>\n\t\t\t// <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"circle\">UL List ]item 1.1</listItem>\n\t\t\t//\n\t\t\t// After deleting the content, we would like to inherit the \"square\" attribute for the last element:\n\t\t\t//\n\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t\t\t// <listItem listIndent=\"1\" listType=\"bulleted\" listStyle=\"square\">UL List []item 1.1</listItem>\n\t\t\tconst mostOuterItemList = getSiblingListItem( firstPosition.parent, {\n\t\t\t\tsameIndent: true,\n\t\t\t\tlistIndent: nextSibling.getAttribute( 'listIndent' ) as number\n\t\t\t} );\n\n\t\t\t// The outermost list item may not exist while removing elements between lists with different value\n\t\t\t// of the `listIndent` attribute. In such a case we don't want to update anything. See: #8073.\n\t\t\tif ( !mostOuterItemList ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( mostOuterItemList.getAttribute( 'listType' ) === nextSibling.getAttribute( 'listType' ) ) {\n\t\t\t\tfirstMostOuterItem = mostOuterItemList;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// If so, update the `listStyle` attribute for the second list.\n\t\tthis.listenTo<ModelDeleteContentEvent>( model, 'deleteContent', () => {\n\t\t\tif ( !firstMostOuterItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmodel.change( writer => {\n\t\t\t\t// Find the first most-outer item list in the merged list.\n\t\t\t\t// A case when the first list item in the second list was merged into the last item in the first list.\n\t\t\t\t//\n\t\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 1</listItem>\n\t\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"square\">UL List item 2</listItem>\n\t\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">[]UL List item 1</listItem>\n\t\t\t\t// <listItem listIndent=\"0\" listType=\"bulleted\" listStyle=\"circle\">UL List item 2</listItem>\n\t\t\t\tconst secondListMostOuterItem = getSiblingListItem( firstMostOuterItem!.nextSibling, {\n\t\t\t\t\tsameIndent: true,\n\t\t\t\t\tlistIndent: firstMostOuterItem!.getAttribute( 'listIndent' ) as number,\n\t\t\t\t\tdirection: 'forward'\n\t\t\t\t} );\n\n\t\t\t\t// If the selection ends in a non-list element, there are no <listItem>s that would require adjustments.\n\t\t\t\t// See: #8642.\n\t\t\t\tif ( !secondListMostOuterItem ) {\n\t\t\t\t\tfirstMostOuterItem = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst items = [\n\t\t\t\t\tsecondListMostOuterItem,\n\t\t\t\t\t...getSiblingNodes( writer.createPositionAt( secondListMostOuterItem, 0 ), 'forward' )\n\t\t\t\t];\n\n\t\t\t\tfor ( const listItem of items ) {\n\t\t\t\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\t\t\t\tif ( strategy.appliesToListItem( listItem ) ) {\n\t\t\t\t\t\t\tconst attributeName = strategy.attributeName;\n\t\t\t\t\t\t\tconst value = firstMostOuterItem!.getAttribute( attributeName );\n\n\t\t\t\t\t\t\twriter.setAttribute( attributeName, value, listItem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tfirstMostOuterItem = null;\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Strategy for dealing with `listItem` attributes supported by this plugin.\n */\ninterface AttributeStrategy {\n\tattributeName: string;\n\tdefaultValue: unknown;\n\taddCommand: ( editor: Editor ) => void;\n\tappliesToListItem: ( element: Node ) => boolean;\n\tsetAttributeOnDowncast: ( writer: DowncastWriter, value: any, element: ViewElement ) => void;\n\tgetAttributeOnUpcast: ( element: ViewElement ) => unknown;\n}\n\n/**\n * Creates an array of strategies for dealing with enabled listItem attributes.\n */\nfunction createAttributeStrategies( enabledProperties: ListPropertiesConfig ) {\n\tconst strategies: Array<AttributeStrategy> = [];\n\n\tif ( enabledProperties.styles ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listStyle',\n\t\t\tdefaultValue: DEFAULT_LIST_TYPE,\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listStyle', new LegacyListStyleCommand( editor, DEFAULT_LIST_TYPE ) );\n\t\t\t},\n\n\t\t\tappliesToListItem() {\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listStyle, element ) {\n\t\t\t\tif ( listStyle && listStyle !== DEFAULT_LIST_TYPE ) {\n\t\t\t\t\twriter.setStyle( 'list-style-type', listStyle, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeStyle( 'list-style-type', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\treturn normalizeListStyle( listParent.getStyle( 'list-style-type' )! ) || DEFAULT_LIST_TYPE;\n\t\t\t}\n\t\t} );\n\t}\n\n\tif ( enabledProperties.reversed ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listReversed',\n\t\t\tdefaultValue: false,\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listReversed', new LegacyListReversedCommand( editor ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn item.getAttribute( 'listType' ) == 'numbered';\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listReversed, element ) {\n\t\t\t\tif ( listReversed ) {\n\t\t\t\t\twriter.setAttribute( 'reversed', 'reversed', element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'reversed', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\treturn listParent.hasAttribute( 'reversed' );\n\t\t\t}\n\t\t} );\n\t}\n\n\tif ( enabledProperties.startIndex ) {\n\t\tstrategies.push( {\n\t\t\tattributeName: 'listStart',\n\t\t\tdefaultValue: 1,\n\n\t\t\taddCommand( editor ) {\n\t\t\t\teditor.commands.add( 'listStart', new LegacyListStartCommand( editor ) );\n\t\t\t},\n\n\t\t\tappliesToListItem( item ) {\n\t\t\t\treturn item.getAttribute( 'listType' ) == 'numbered';\n\t\t\t},\n\n\t\t\tsetAttributeOnDowncast( writer, listStart, element ) {\n\t\t\t\tif ( listStart == 0 || listStart > 1 ) {\n\t\t\t\t\twriter.setAttribute( 'start', listStart, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( 'start', element );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetAttributeOnUpcast( listParent ) {\n\t\t\t\tconst startAttributeValue: any = listParent.getAttribute( 'start' );\n\n\t\t\t\treturn startAttributeValue >= 0 ? startAttributeValue : 1;\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn strategies;\n}\n\n/**\n * Returns a converter consumes the `style`, `reversed` and `start` attribute.\n * In `style` it searches for the `list-style-type` definition.\n * If not found, the `\"default\"` value will be used.\n */\nfunction upcastListItemAttributes( attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( dispatcher: UpcastDispatcher ) => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:li', ( evt, data, conversionApi ) => {\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/13858\n\t\t\tif ( !data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst listParent = data.viewItem.parent as ViewElement;\n\t\t\tconst listItem = data.modelRange.start.nodeAfter || data.modelRange.end.nodeBefore;\n\n\t\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\t\tif ( strategy.appliesToListItem( listItem! ) ) {\n\t\t\t\t\tconst listStyle = strategy.getAttributeOnUpcast( listParent );\n\t\t\t\t\tconversionApi.writer.setAttribute( strategy.attributeName, listStyle, listItem! );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * Returns a converter that adds `reversed`, `start` attributes and adds `list-style-type` definition as a value for the `style` attribute.\n * The `\"default\"` values are removed and not present in the view/data.\n */\nfunction downcastListItemAttributes( attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( dispatcher: DowncastDispatcher ) => {\n\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\tdispatcher.on<DowncastAttributeEvent>( `attribute:${ strategy.attributeName }:listItem`, ( evt, data, conversionApi ) => {\n\t\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\t\tconst currentElement = data.item as Element;\n\n\t\t\t\tconst previousElement = getSiblingListItem( currentElement.previousSibling, {\n\t\t\t\t\tsameIndent: true,\n\t\t\t\t\tlistIndent: currentElement.getAttribute( 'listIndent' ) as number,\n\t\t\t\t\tdirection: 'backward'\n\t\t\t\t} );\n\n\t\t\t\tconst viewItem = conversionApi.mapper.toViewElement( currentElement )!;\n\n\t\t\t\t// A case when elements represent different lists. We need to separate their container.\n\t\t\t\tif ( !areRepresentingSameList( currentElement, previousElement ) ) {\n\t\t\t\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\t\t\t}\n\t\t\t\tstrategy.setAttributeOnDowncast( viewWriter, data.attributeNewValue, viewItem.parent as ViewElement );\n\t\t\t}, { priority: 'low' } );\n\t\t}\n\t};\n\n\t/**\n\t * Checks whether specified list items belong to the same list.\n\t */\n\tfunction areRepresentingSameList( listItem1: Element, listItem2: Element | null ) {\n\t\treturn listItem2 &&\n\t\t\tlistItem1.getAttribute( 'listType' ) === listItem2.getAttribute( 'listType' ) &&\n\t\t\tlistItem1.getAttribute( 'listIndent' ) === listItem2.getAttribute( 'listIndent' ) &&\n\t\t\tlistItem1.getAttribute( 'listStyle' ) === listItem2.getAttribute( 'listStyle' ) &&\n\t\t\tlistItem1.getAttribute( 'listReversed' ) === listItem2.getAttribute( 'listReversed' ) &&\n\t\t\tlistItem1.getAttribute( 'listStart' ) === listItem2.getAttribute( 'listStart' );\n\t}\n}\n\n/**\n * When indenting list, nested list should clear its value for the attributes or inherit from nested lists.\n *\n * ■ List item 1.\n * ■ List item 2.[]\n * ■ List item 3.\n * editor.execute( 'indentList' );\n *\n * ■ List item 1.\n *     ○ List item 2.[]\n * ■ List item 3.\n */\nfunction fixListAfterIndentListCommand( editor: Editor, attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( evt: unknown, changedItems: Array<Element> ) => {\n\t\tconst root = changedItems[ 0 ];\n\t\tconst rootIndent = root.getAttribute( 'listIndent' ) as number;\n\n\t\tconst itemsToUpdate = changedItems.filter( item => item.getAttribute( 'listIndent' ) === rootIndent );\n\n\t\t// A case where a few list items are indented must be checked separately\n\t\t// since `getSiblingListItem()` returns the first changed element.\n\t\t// ■ List item 1.\n\t\t//     ○ [List item 2.\n\t\t//     ○ List item 3.]\n\t\t// ■ List item 4.\n\t\t//\n\t\t// List items: `2` and `3` should be adjusted.\n\t\tlet previousSibling: Element | null = null;\n\n\t\tif ( root.previousSibling!.getAttribute( 'listIndent' ) as number + 1 !== rootIndent ) {\n\t\t\tpreviousSibling = getSiblingListItem( root.previousSibling, {\n\t\t\t\tsameIndent: true, direction: 'backward', listIndent: rootIndent\n\t\t\t} );\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\tfor ( const item of itemsToUpdate ) {\n\t\t\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\t\t\tif ( strategy.appliesToListItem( item ) ) {\n\t\t\t\t\t\tconst valueToSet = previousSibling == null ?\n\t\t\t\t\t\t\tstrategy.defaultValue :\n\t\t\t\t\t\t\tpreviousSibling.getAttribute( strategy.attributeName );\n\n\t\t\t\t\t\twriter.setAttribute( strategy.attributeName, valueToSet, item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * When outdenting a list, a nested list should copy attribute values\n * from the previous sibling list item including the same value for the `listIndent` value.\n *\n * ■ List item 1.\n *     ○ List item 2.[]\n * ■ List item 3.\n *\n * editor.execute( 'outdentList' );\n *\n * ■ List item 1.\n * ■ List item 2.[]\n * ■ List item 3.\n */\nfunction fixListAfterOutdentListCommand( editor: Editor, attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( evt: unknown, changedItems: Array<Element> ) => {\n\t\tchangedItems = changedItems.reverse().filter( item => item.is( 'element', 'listItem' ) );\n\n\t\tif ( !changedItems.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst indent = changedItems[ 0 ].getAttribute( 'listIndent' );\n\t\tconst listType = changedItems[ 0 ].getAttribute( 'listType' );\n\t\tlet listItem: Node | null = changedItems[ 0 ].previousSibling!;\n\n\t\t// ■ List item 1.\n\t\t//     ○ List item 2.\n\t\t//     ○ List item 3.[]\n\t\t// ■ List item 4.\n\t\t//\n\t\t// After outdenting a list, `List item 3` should inherit the `listStyle` attribute from `List item 1`.\n\t\t//\n\t\t// ■ List item 1.\n\t\t//     ○ List item 2.\n\t\t// ■ List item 3.[]\n\t\t// ■ List item 4.\n\t\tif ( listItem.is( 'element', 'listItem' ) ) {\n\t\t\twhile ( listItem!.getAttribute( 'listIndent' ) !== indent ) {\n\t\t\t\tlistItem = listItem!.previousSibling;\n\t\t\t}\n\t\t} else {\n\t\t\tlistItem = null;\n\t\t}\n\n\t\t// Outdenting such a list should restore values based on `List item 4`.\n\t\t// ■ List item 1.[]\n\t\t//     ○ List item 2.\n\t\t//     ○ List item 3.\n\t\t// ■ List item 4.\n\t\tif ( !listItem ) {\n\t\t\tlistItem = changedItems[ changedItems.length - 1 ].nextSibling;\n\t\t}\n\n\t\t// And such a list should not modify anything.\n\t\t// However, `listItem` can indicate a node below the list. Be sure that we have the `listItem` element.\n\t\t// ■ List item 1.[]\n\t\t//     ○ List item 2.\n\t\t//     ○ List item 3.\n\t\t// <paragraph>The later if check.</paragraph>\n\t\tif ( !listItem || !listItem.is( 'element', 'listItem' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not modify the list if found `listItem` represents other type of list than outdented list items.\n\t\tif ( listItem.getAttribute( 'listType' ) !== listType ) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\tconst itemsToUpdate = changedItems.filter( item => item.getAttribute( 'listIndent' ) === indent );\n\n\t\t\tfor ( const item of itemsToUpdate ) {\n\t\t\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\t\t\tif ( strategy.appliesToListItem( item ) ) {\n\t\t\t\t\t\tconst attributeName = strategy.attributeName;\n\t\t\t\t\t\tconst valueToSet = listItem!.getAttribute( attributeName );\n\n\t\t\t\t\t\twriter.setAttribute( attributeName, valueToSet, item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * Each `listItem` element must have specified the `listStyle`, `listReversed` and `listStart` attributes\n * if they are enabled and supported by its `listType`.\n * This post-fixer checks whether inserted elements `listItem` elements should inherit the attribute values from\n * their sibling nodes or should use the default values.\n *\n * Paragraph[]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2. // ...\n * ■ List item 3. // ...\n *\n * editor.execute( 'bulletedList' )\n *\n * ■ Paragraph[]  // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2.\n * ■ List item 3.\n *\n * It also covers a such change:\n *\n * [Paragraph 1\n * Paragraph 2]\n * ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2. // ...\n * ■ List item 3. // ...\n *\n * editor.execute( 'numberedList' )\n *\n * 1. [Paragraph 1 // [listStyle=\"default\", listType=\"numbered\"]\n * 2. Paragraph 2] // [listStyle=\"default\", listType=\"numbered\"]\n * ■ List item 1.  // [listStyle=\"square\", listType=\"bulleted\"]\n * ■ List item 2.  // ...\n * ■ List item 3.  // ...\n */\nfunction fixListAttributesOnListItemElements( editor: Editor, attributeStrategies: Array<AttributeStrategy> ) {\n\treturn ( writer: Writer ) => {\n\t\tlet wasFixed = false;\n\n\t\tconst insertedListItems = getChangedListItems( editor.model.document.differ.getChanges() )\n\t\t\t.filter( item => {\n\t\t\t\t// Don't touch todo lists. They are handled in another post-fixer.\n\t\t\t\treturn item.getAttribute( 'listType' ) !== 'todo';\n\t\t\t} );\n\n\t\tif ( !insertedListItems.length ) {\n\t\t\treturn wasFixed;\n\t\t}\n\n\t\t// Check whether the last inserted element is next to the `listItem` element.\n\t\t//\n\t\t// ■ Paragraph[]  // <-- The inserted item.\n\t\t// ■ List item 1.\n\t\tlet existingListItem = insertedListItems[ insertedListItems.length - 1 ].nextSibling;\n\n\t\t// If it doesn't, maybe the `listItem` was inserted at the end of the list.\n\t\t//\n\t\t// ■ List item 1.\n\t\t// ■ Paragraph[]  // <-- The inserted item.\n\t\tif ( !existingListItem || !existingListItem.is( 'element', 'listItem' ) ) {\n\t\t\texistingListItem = insertedListItems[ 0 ].previousSibling;\n\n\t\t\tif ( existingListItem ) {\n\t\t\t\tconst indent = insertedListItems[ 0 ].getAttribute( 'listIndent' );\n\n\t\t\t\t// But we need to find a `listItem` with the `listIndent=0` attribute.\n\t\t\t\t// If doesn't, maybe the `listItem` was inserted at the end of the list.\n\t\t\t\t//\n\t\t\t\t// ■ List item 1.\n\t\t\t\t//     ○ List item 2.\n\t\t\t\t// ■ Paragraph[]  // <-- The inserted item.\n\t\t\t\twhile ( existingListItem.is( 'element', 'listItem' ) && existingListItem.getAttribute( 'listIndent' ) !== indent ) {\n\t\t\t\t\texistingListItem = existingListItem.previousSibling;\n\n\t\t\t\t\t// If the item does not exist, most probably there is no other content in the editor. See: #8072.\n\t\t\t\t\tif ( !existingListItem ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ( const strategy of attributeStrategies ) {\n\t\t\tconst attributeName = strategy.attributeName;\n\n\t\t\tfor ( const item of insertedListItems ) {\n\t\t\t\tif ( !strategy.appliesToListItem( item ) ) {\n\t\t\t\t\twriter.removeAttribute( attributeName, item );\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( !item.hasAttribute( attributeName ) ) {\n\t\t\t\t\tif ( shouldInheritListType( existingListItem, item, strategy ) ) {\n\t\t\t\t\t\twriter.setAttribute( attributeName, existingListItem!.getAttribute( attributeName ), item );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.setAttribute( attributeName, strategy.defaultValue, item );\n\t\t\t\t\t}\n\t\t\t\t\twasFixed = true;\n\t\t\t\t} else {\n\t\t\t\t\t// Adjust the `listStyle`, `listReversed` and `listStart`\n\t\t\t\t\t// attributes for inserted (pasted) items. See #8160.\n\t\t\t\t\t//\n\t\t\t\t\t// ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ List item 1.1. // [listStyle=\"circle\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ [] (selection is here)\n\t\t\t\t\t//\n\t\t\t\t\t// Then, pasting a list with different attributes (listStyle, listType):\n\t\t\t\t\t//\n\t\t\t\t\t// 1. First. // [listStyle=\"decimal\", listType=\"numbered\"]\n\t\t\t\t\t// 2. Second // [listStyle=\"decimal\", listType=\"numbered\"]\n\t\t\t\t\t//\n\t\t\t\t\t// The `listType` attribute will be corrected by the `ListEditing` converters.\n\t\t\t\t\t// We need to adjust the `listStyle` attribute. Expected structure:\n\t\t\t\t\t//\n\t\t\t\t\t// ■ List item 1. // [listStyle=\"square\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ List item 1.1. // [listStyle=\"circle\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ First. // [listStyle=\"circle\", listType=\"bulleted\"]\n\t\t\t\t\t//     ○ Second // [listStyle=\"circle\", listType=\"bulleted\"]\n\t\t\t\t\tconst previousSibling = item.previousSibling;\n\n\t\t\t\t\tif ( shouldInheritListTypeFromPreviousItem( previousSibling, item, strategy.attributeName ) ) {\n\t\t\t\t\t\twriter.setAttribute( attributeName, previousSibling!.getAttribute( attributeName ), item );\n\n\t\t\t\t\t\twasFixed = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn wasFixed;\n\t};\n}\n\n/**\n * Checks whether the `listStyle`, `listReversed` and `listStart` attributes\n * should be copied from the `baseItem` element.\n *\n * The attribute should be copied if the inserted element does not have defined it and\n * the value for the element is other than default in the base element.\n */\nfunction shouldInheritListType( baseItem: Node | null, itemToChange: Element, attributeStrategy: AttributeStrategy ) {\n\tif ( !baseItem ) {\n\t\treturn false;\n\t}\n\n\tconst baseListAttribute = baseItem.getAttribute( attributeStrategy.attributeName );\n\n\tif ( !baseListAttribute ) {\n\t\treturn false;\n\t}\n\n\tif ( baseListAttribute == attributeStrategy.defaultValue ) {\n\t\treturn false;\n\t}\n\n\tif ( baseItem.getAttribute( 'listType' ) !== itemToChange.getAttribute( 'listType' ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Checks whether the `listStyle`, `listReversed` and `listStart` attributes\n * should be copied from previous list item.\n *\n * The attribute should be copied if there's a mismatch of styles of the pasted list into a nested list.\n * Top-level lists are not normalized as we allow side-by-side list of different types.\n */\nfunction shouldInheritListTypeFromPreviousItem( previousItem: Node | null, itemToChange: Element, attributeName: string ) {\n\tif ( !previousItem || !previousItem.is( 'element', 'listItem' ) ) {\n\t\treturn false;\n\t}\n\n\tif ( itemToChange.getAttribute( 'listType' ) !== previousItem.getAttribute( 'listType' ) ) {\n\t\treturn false;\n\t}\n\n\tconst previousItemIndent = previousItem.getAttribute( 'listIndent' ) as number;\n\n\tif ( previousItemIndent < 1 || previousItemIndent !== itemToChange.getAttribute( 'listIndent' ) ) {\n\t\treturn false;\n\t}\n\n\tconst previousItemListAttribute = previousItem.getAttribute( attributeName );\n\n\tif ( !previousItemListAttribute || previousItemListAttribute === itemToChange.getAttribute( attributeName ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Removes the `listStyle`, `listReversed` and `listStart` attributes from \"todo\" list items.\n */\nfunction removeListItemAttributesFromTodoList( editor: Editor ) {\n\treturn ( writer: Writer ) => {\n\t\tconst todoListItems = getChangedListItems( editor.model.document.differ.getChanges() )\n\t\t\t.filter( item => {\n\t\t\t\t// Handle the todo lists only. The rest is handled in another post-fixer.\n\t\t\t\treturn item.getAttribute( 'listType' ) === 'todo' && (\n\t\t\t\t\titem.hasAttribute( 'listStyle' ) ||\n\t\t\t\t\titem.hasAttribute( 'listReversed' ) ||\n\t\t\t\t\titem.hasAttribute( 'listStart' )\n\t\t\t\t);\n\t\t\t} );\n\n\t\tif ( !todoListItems.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const item of todoListItems ) {\n\t\t\twriter.removeAttribute( 'listStyle', item );\n\t\t\twriter.removeAttribute( 'listReversed', item );\n\t\t\twriter.removeAttribute( 'listStart', item );\n\t\t}\n\n\t\treturn true;\n\t};\n}\n\n/**\n * Restores the `listStyle` attribute after changing the list type.\n */\nfunction restoreDefaultListStyle( editor: Editor ) {\n\treturn ( evt: unknown, changedItems: Array<Element> ) => {\n\t\tchangedItems = changedItems.filter( item => item.is( 'element', 'listItem' ) );\n\n\t\teditor.model.change( writer => {\n\t\t\tfor ( const item of changedItems ) {\n\t\t\t\t// Remove the attribute. Post-fixer will restore the proper value.\n\t\t\t\twriter.removeAttribute( 'listStyle', item );\n\t\t\t}\n\t\t} );\n\t};\n}\n\n/**\n * Returns the `listItem` that was inserted or changed.\n *\n * @param changes The changes list returned by the differ.\n */\nfunction getChangedListItems( changes: Array<DiffItem> ) {\n\tconst items: Array<Element> = [];\n\n\tfor ( const change of changes ) {\n\t\tconst item = getItemFromChange( change );\n\n\t\tif ( item && item.is( 'element', 'listItem' ) ) {\n\t\t\titems.push( item );\n\t\t}\n\t}\n\n\treturn items;\n}\n\nfunction getItemFromChange( change: DiffItem ) {\n\tif ( change.type === 'attribute' ) {\n\t\treturn change.range.start.nodeAfter;\n\t}\n\n\tif ( change.type === 'insert' ) {\n\t\treturn change.position.nodeAfter;\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacylistproperties\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport LegacyListPropertiesEditing from './legacylistproperties/legacylistpropertiesediting.js';\nimport ListPropertiesUI from './listproperties/listpropertiesui.js';\n\n/**\n * The legacy list properties feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacylistproperties/legacylistpropertiesediting~LegacyListPropertiesEditing\n * legacy list properties editing feature} and the\n * {@link module:list/listproperties/listpropertiesui~ListPropertiesUI list properties UI feature}.\n */\nexport default class LegacyListProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyListPropertiesEditing, ListPropertiesUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyListProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacytodolist/legacychecktodolistcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { Element } from 'ckeditor5/src/engine.js';\n\nconst attributeKey = 'todoListChecked';\n\n/**\n * The check to-do command.\n *\n * The command is registered by the {@link module:list/legacytodolist/legacytodolistediting~LegacyTodoListEditing} as\n * the `checkTodoList` editor command and it is also available via aliased `todoListCheck` name.\n */\nexport default class LegacyCheckTodoListCommand extends Command {\n\t/**\n\t * A list of to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t *\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public value: boolean;\n\n\t/**\n\t * A list of to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t *\n\t * @internal\n\t */\n\tpublic _selectedElements: Array<Element>;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._selectedElements = [];\n\n\t\t// Refresh command before executing to be sure all values are up to date.\n\t\t// It is needed when selection has changed before command execution, in the same change block.\n\t\tthis.on( 'execute', () => {\n\t\t\tthis.refresh();\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} properties based on the current selection.\n\t */\n\tpublic override refresh(): void {\n\t\tthis._selectedElements = this._getSelectedItems();\n\t\tthis.value = this._selectedElements.every( element => !!element.getAttribute( attributeKey ) );\n\t\tthis.isEnabled = !!this._selectedElements.length;\n\t}\n\n\t/**\n\t * Gets all to-do list items selected by the {@link module:engine/model/selection~Selection}.\n\t */\n\tprivate _getSelectedItems() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\n\t\tconst selectionRange = model.document.selection.getFirstRange()!;\n\t\tconst startElement = selectionRange.start.parent as Element;\n\t\tconst elements: Array<Element> = [];\n\n\t\tif ( schema.checkAttribute( startElement, attributeKey ) ) {\n\t\t\telements.push( startElement );\n\t\t}\n\n\t\tfor ( const item of selectionRange.getItems() as Iterable<Element> ) {\n\t\t\tif ( schema.checkAttribute( item, attributeKey ) && !elements.includes( item ) ) {\n\t\t\t\telements.push( item );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply\n\t * the attribute. Otherwise, the command will remove the attribute. If not set, the command will look for its current\n\t * value to decide what it should do.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tthis.editor.model.change( writer => {\n\t\t\tfor ( const element of this._selectedElements ) {\n\t\t\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setAttribute( attributeKey, true, element );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeAttribute( attributeKey, element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacytodolist/legacytodolistconverters\n */\n\n/* global document */\n\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastInsertEvent,\n\tDowncastWriter,\n\tElement,\n\tMapperModelToViewPositionEvent,\n\tModel,\n\tUpcastElementEvent,\n\tEditingView,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport { createElement, type GetCallback } from 'ckeditor5/src/utils.js';\n\nimport { generateLiInUl, injectViewList, positionAfterUiElements, findNestedList } from '../legacylist/legacyutils.js';\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It converts the `listItem` model element to an unordered list with a {@link module:engine/view/uielement~UIElement checkbox element}\n * at the beginning of each list item. It also merges the list with surrounding lists (if available).\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n * @param onCheckboxChecked Callback function.\n * @returns Returns a conversion callback.\n */\nexport function modelViewInsertion(\n\tmodel: Model,\n\tonCheckboxChecked: ( element: Element ) => void\n): GetCallback<DowncastInsertEvent<Element>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.item;\n\n\t\tconsumable.consume( modelItem, 'insert' );\n\t\tconsumable.consume( modelItem, 'attribute:listType' );\n\t\tconsumable.consume( modelItem, 'attribute:listIndent' );\n\t\tconsumable.consume( modelItem, 'attribute:todoListChecked' );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tconst isChecked = !!modelItem.getAttribute( 'todoListChecked' );\n\t\tconst checkmarkElement = createCheckmarkElement( modelItem, viewWriter, isChecked, onCheckboxChecked );\n\n\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\tclass: 'todo-list__label__description'\n\t\t} );\n\n\t\tviewWriter.addClass( 'todo-list', viewItem.parent as any );\n\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), checkmarkElement );\n\t\tviewWriter.insert( viewWriter.createPositionAfter( checkmarkElement ), span );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param model Model instance.\n * @returns Returns a conversion callback.\n */\nexport function dataModelViewInsertion( model: Model ): GetCallback<DowncastInsertEvent<Element>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.item;\n\n\t\tconsumable.consume( modelItem, 'insert' );\n\t\tconsumable.consume( modelItem, 'attribute:listType' );\n\t\tconsumable.consume( modelItem, 'attribute:listIndent' );\n\t\tconsumable.consume( modelItem, 'attribute:todoListChecked' );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tviewWriter.addClass( 'todo-list', viewItem.parent as any );\n\n\t\tconst label = viewWriter.createContainerElement( 'label', {\n\t\t\tclass: 'todo-list__label'\n\t\t} );\n\n\t\tconst checkbox = viewWriter.createEmptyElement( 'input', {\n\t\t\ttype: 'checkbox',\n\t\t\tdisabled: 'disabled'\n\t\t} );\n\n\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\tclass: 'todo-list__label__description'\n\t\t} );\n\n\t\tif ( modelItem.getAttribute( 'todoListChecked' ) ) {\n\t\t\tviewWriter.setAttribute( 'checked', 'checked', checkbox );\n\t\t}\n\n\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), label );\n\t\tviewWriter.insert( viewWriter.createPositionAt( label, 0 ), checkbox );\n\t\tviewWriter.insert( viewWriter.createPositionAfter( checkbox ), span );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A view-to-model converter for the checkbox element inside a view list item.\n *\n * It changes the `listType` of the model `listItem` to a `todo` value.\n * When a view checkbox element is marked as checked, an additional `todoListChecked=\"true\"` attribute is added to the model item.\n *\n * It is used by {@link module:engine/controller/datacontroller~DataController}.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n */\nexport const dataViewModelCheckmarkInsertion: GetCallback<UpcastElementEvent> = ( evt, data, conversionApi ) => {\n\tconst modelCursor = data.modelCursor;\n\tconst modelItem = modelCursor.parent;\n\tconst viewItem = data.viewItem;\n\n\tif ( viewItem.getAttribute( 'type' ) != 'checkbox' || modelItem.name != 'listItem' || !modelCursor.isAtStart ) {\n\t\treturn;\n\t}\n\n\tif ( !conversionApi.consumable.consume( viewItem, { name: true } ) ) {\n\t\treturn;\n\t}\n\n\tconst writer = conversionApi.writer;\n\n\twriter.setAttribute( 'listType', 'todo', modelItem );\n\n\tif ( data.viewItem.hasAttribute( 'checked' ) ) {\n\t\twriter.setAttribute( 'todoListChecked', true, modelItem );\n\t}\n\n\tdata.modelRange = writer.createRange( modelCursor );\n};\n\n/**\n * A model-to-view converter for the `listType` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes to `<ul class=\"todo-list\">` and a\n * {@link module:engine/view/uielement~UIElement checkbox UI element} is added at the beginning\n * of the list item element (or vice versa).\n *\n * This converter is preceded by {@link module:list/legacylist/legacyconverters~modelViewChangeType} and followed by\n * {@link module:list/legacylist/legacyconverters~modelViewMergeAfterChangeType} to handle splitting and merging surrounding lists\n * of the same type.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param onCheckedChange Callback fired after clicking the checkbox UI element.\n * @param view Editing view controller.\n * @returns Returns a conversion callback.\n */\nexport function modelViewChangeType(\n\tonCheckedChange: ( element: Element ) => void,\n\tview: EditingView\n): GetCallback<DowncastAttributeEvent<Element>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewItem = conversionApi.mapper.toViewElement( data.item )!;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tconst labelElement = findLabel( viewItem, view )!;\n\n\t\tif ( data.attributeNewValue == 'todo' ) {\n\t\t\tconst isChecked = !!data.item.getAttribute( 'todoListChecked' );\n\t\t\tconst checkmarkElement = createCheckmarkElement( data.item, viewWriter, isChecked, onCheckedChange );\n\n\t\t\tconst span = viewWriter.createContainerElement( 'span', {\n\t\t\t\tclass: 'todo-list__label__description'\n\t\t\t} );\n\n\t\t\tconst itemRange = viewWriter.createRangeIn( viewItem );\n\t\t\tconst nestedList = findNestedList( viewItem );\n\n\t\t\tconst descriptionStart = positionAfterUiElements( itemRange.start );\n\t\t\tconst descriptionEnd = nestedList ? viewWriter.createPositionBefore( nestedList ) : itemRange.end;\n\t\t\tconst descriptionRange = viewWriter.createRange( descriptionStart, descriptionEnd );\n\n\t\t\tviewWriter.addClass( 'todo-list', viewItem.parent as any );\n\t\t\tviewWriter.move( descriptionRange, viewWriter.createPositionAt( span, 0 ) );\n\t\t\tviewWriter.insert( viewWriter.createPositionAt( viewItem, 0 ), checkmarkElement );\n\t\t\tviewWriter.insert( viewWriter.createPositionAfter( checkmarkElement ), span );\n\t\t} else if ( data.attributeOldValue == 'todo' ) {\n\t\t\tconst descriptionSpan = findDescription( viewItem, view )!;\n\n\t\t\tviewWriter.removeClass( 'todo-list', viewItem.parent as any );\n\t\t\tviewWriter.remove( labelElement );\n\t\t\tviewWriter.move( viewWriter.createRangeIn( descriptionSpan ), viewWriter.createPositionBefore( descriptionSpan ) );\n\t\t\tviewWriter.remove( descriptionSpan );\n\t\t}\n\t};\n}\n\n/**\n * A model-to-view converter for the `todoListChecked` attribute change on the `listItem` model element.\n *\n * It marks the {@link module:engine/view/uielement~UIElement checkbox UI element} as checked.\n *\n * It is used by {@link module:engine/controller/editingcontroller~EditingController}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param onCheckedChange Callback fired after clicking the checkbox UI element.\n * @returns Returns a conversion callback.\n */\nexport function modelViewChangeChecked(\n\tonCheckedChange: ( element: Element ) => void\n): GetCallback<DowncastAttributeEvent<Element>> {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Do not convert `todoListChecked` attribute when to-do list item has changed to other list item.\n\t\t// This attribute will be removed by the model post fixer.\n\t\tif ( data.item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:todoListChecked' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { mapper, writer: viewWriter } = conversionApi;\n\t\tconst isChecked = !!data.item.getAttribute( 'todoListChecked' );\n\t\tconst viewItem = mapper.toViewElement( data.item )!;\n\t\t// Because of m -> v position mapper we can be sure checkbox is always at the beginning.\n\t\tconst oldCheckmarkElement = viewItem.getChild( 0 )!;\n\t\tconst newCheckmarkElement = createCheckmarkElement( data.item, viewWriter, isChecked, onCheckedChange );\n\n\t\tviewWriter.insert( viewWriter.createPositionAfter( oldCheckmarkElement ), newCheckmarkElement );\n\t\tviewWriter.remove( oldCheckmarkElement );\n\t};\n}\n\n/**\n * A model-to-view position at zero offset mapper.\n *\n * This helper ensures that position inside todo-list in the view is mapped after the checkbox.\n *\n * It only handles the position at the beginning of a list item as other positions are properly mapped be the default mapper.\n */\nexport function mapModelToViewPosition( view: EditingView ): GetCallback<MapperModelToViewPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tconst modelPosition = data.modelPosition;\n\t\tconst parent = modelPosition.parent;\n\n\t\tif ( !parent.is( 'element', 'listItem' ) || parent.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewLi = data.mapper.toViewElement( parent )!;\n\t\tconst descSpan = findDescription( viewLi, view );\n\n\t\tif ( descSpan ) {\n\t\t\tdata.viewPosition = data.mapper.findPositionIn( descSpan, modelPosition.offset );\n\t\t}\n\t};\n}\n\n/**\n * Creates a checkbox UI element.\n */\nfunction createCheckmarkElement(\n\tmodelItem: Element,\n\tviewWriter: DowncastWriter,\n\tisChecked: boolean,\n\tonChange: ( element: Element ) => void\n) {\n\tconst uiElement = viewWriter.createUIElement(\n\t\t'label',\n\t\t{\n\t\t\tclass: 'todo-list__label',\n\t\t\tcontenteditable: false\n\t\t},\n\t\tfunction( domDocument ) {\n\t\t\tconst checkbox = createElement( document, 'input', { type: 'checkbox', tabindex: '-1' } );\n\n\t\t\tif ( isChecked ) {\n\t\t\t\tcheckbox.setAttribute( 'checked', 'checked' );\n\t\t\t}\n\n\t\t\tcheckbox.addEventListener( 'change', () => onChange( modelItem ) );\n\n\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\tdomElement.appendChild( checkbox );\n\n\t\t\treturn domElement;\n\t\t}\n\t);\n\n\treturn uiElement;\n}\n\n// Helper method to find label element inside li.\nfunction findLabel( viewItem: ViewElement, view: EditingView ) {\n\tconst range = view.createRangeIn( viewItem );\n\n\tfor ( const value of range ) {\n\t\tif ( value.item.is( 'uiElement', 'label' ) ) {\n\t\t\treturn value.item;\n\t\t}\n\t}\n}\n\nfunction findDescription( viewItem: ViewElement, view: EditingView ) {\n\tconst range = view.createRangeIn( viewItem );\n\n\tfor ( const value of range ) {\n\t\tif ( value.item.is( 'containerElement', 'span' ) && value.item.hasClass( 'todo-list__label__description' ) ) {\n\t\t\treturn value.item;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacytodolist/legacytodolistediting\n */\n\nimport type {\n\tDowncastAttributeEvent,\n\tDowncastInsertEvent,\n\tElement,\n\tItem,\n\tMapperModelToViewPositionEvent,\n\tModel,\n\tModelApplyOperationEvent,\n\tUpcastElementEvent,\n\tViewDocumentArrowKeyEvent,\n\tViewDocumentKeyDownEvent,\n\tAttributeOperation,\n\tRenameOperation,\n\tSelectionChangeRangeEvent,\n\tDocumentFragment\n} from 'ckeditor5/src/engine.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport {\n\tgetCode,\n\tparseKeystroke,\n\tgetLocalizedArrowKeyCodeDirection,\n\ttype Locale,\n\ttype GetCallback\n} from 'ckeditor5/src/utils.js';\n\nimport LegacyListCommand from '../legacylist/legacylistcommand.js';\nimport LegacyListEditing from '../legacylist/legacylistediting.js';\nimport LegacyCheckTodoListCommand from './legacychecktodolistcommand.js';\nimport {\n\tdataModelViewInsertion,\n\tdataViewModelCheckmarkInsertion,\n\tmapModelToViewPosition,\n\tmodelViewChangeChecked,\n\tmodelViewChangeType,\n\tmodelViewInsertion\n} from './legacytodolistconverters.js';\n\nconst ITEM_TOGGLE_KEYSTROKE = /* #__PURE__ */ parseKeystroke( 'Ctrl+Enter' );\n\n/**\n * The engine of the to-do list feature. It handles creating, editing and removing to-do lists and their items.\n *\n * It registers the entire functionality of the {@link module:list/legacylist/legacylistediting~LegacyListEditing legacy list editing\n * plugin} and extends it with the commands:\n *\n * - `'todoList'`,\n * - `'checkTodoList'`,\n * - `'todoListCheck'` as an alias for `checkTodoList` command.\n */\nexport default class LegacyTodoListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyTodoListEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyListEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst { editing, data, model } = editor;\n\n\t\t// Extend schema.\n\t\tmodel.schema.extend( 'listItem', {\n\t\t\tallowAttributes: [ 'todoListChecked' ]\n\t\t} );\n\n\t\t// Disallow todoListChecked attribute on other nodes than listItem with to-do listType.\n\t\tmodel.schema.addAttributeCheck( ( context: any, attributeName ) => {\n\t\t\tconst item = context.last;\n\n\t\t\tif ( attributeName == 'todoListChecked' && item.name == 'listItem' && item.getAttribute( 'listType' ) != 'todo' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Register `todoList` command.\n\t\teditor.commands.add( 'todoList', new LegacyListCommand( editor, 'todo' ) );\n\n\t\tconst checkTodoListCommand = new LegacyCheckTodoListCommand( editor );\n\n\t\t// Register `checkTodoList` command and add `todoListCheck` command as an alias for backward compatibility.\n\t\teditor.commands.add( 'checkTodoList', checkTodoListCommand );\n\t\teditor.commands.add( 'todoListCheck', checkTodoListCommand );\n\n\t\t// Define converters.\n\t\tdata.downcastDispatcher.on<DowncastInsertEvent<Element>>(\n\t\t\t'insert:listItem',\n\t\t\tdataModelViewInsertion( model ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\t\tdata.upcastDispatcher.on<UpcastElementEvent>(\n\t\t\t'element:input',\n\t\t\tdataViewModelCheckmarkInsertion,\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tediting.downcastDispatcher.on<DowncastInsertEvent<Element>>(\n\t\t\t'insert:listItem',\n\t\t\tmodelViewInsertion( model, listItem => this._handleCheckmarkChange( listItem ) ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\t\tediting.downcastDispatcher.on<DowncastAttributeEvent<Element>>(\n\t\t\t'attribute:listType:listItem',\n\t\t\tmodelViewChangeType( listItem => this._handleCheckmarkChange( listItem ), editing.view )\n\t\t);\n\t\tediting.downcastDispatcher.on<DowncastAttributeEvent<Element>>(\n\t\t\t'attribute:todoListChecked:listItem',\n\t\t\tmodelViewChangeChecked( listItem => this._handleCheckmarkChange( listItem ) )\n\t\t);\n\n\t\tediting.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', mapModelToViewPosition( editing.view ) );\n\t\tdata.mapper.on<MapperModelToViewPositionEvent>( 'modelToViewPosition', mapModelToViewPosition( editing.view ) );\n\n\t\t// Jump at the end of the previous node on left arrow key press, when selection is after the checkbox.\n\t\t//\n\t\t// <blockquote><p>Foo</p></blockquote>\n\t\t// <ul><li><checkbox/>{}Bar</li></ul>\n\t\t//\n\t\t// press: `<-`\n\t\t//\n\t\t// <blockquote><p>Foo{}</p></blockquote>\n\t\t// <ul><li><checkbox/>Bar</li></ul>\n\t\t//\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>(\n\t\t\tediting.view.document,\n\t\t\t'arrowKey',\n\t\t\tjumpOverCheckmarkOnSideArrowKeyPress( model, editor.locale ),\n\t\t\t{ context: 'li' }\n\t\t);\n\n\t\t// Toggle check state of selected to-do list items on keystroke.\n\t\tthis.listenTo<ViewDocumentKeyDownEvent>( editing.view.document, 'keydown', ( evt, data ) => {\n\t\t\tif ( getCode( data ) === ITEM_TOGGLE_KEYSTROKE ) {\n\t\t\t\teditor.execute( 'checkTodoList' );\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// Remove `todoListChecked` attribute when a host element is no longer a to-do list item.\n\t\tconst listItemsToFix = new Set<Item>();\n\n\t\tthis.listenTo<ModelApplyOperationEvent>( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ] as RenameOperation | AttributeOperation;\n\n\t\t\tif ( operation.type == 'rename' && operation.oldName == 'listItem' ) {\n\t\t\t\tconst item = operation.position.nodeAfter!;\n\n\t\t\t\tif ( item.hasAttribute( 'todoListChecked' ) ) {\n\t\t\t\t\tlistItemsToFix.add( item );\n\t\t\t\t}\n\t\t\t} else if ( operation.type == 'changeAttribute' && operation.key == 'listType' && operation.oldValue === 'todo' ) {\n\t\t\t\tfor ( const item of operation.range.getItems() ) {\n\t\t\t\t\tif ( item.hasAttribute( 'todoListChecked' ) && item.getAttribute( 'listType' ) !== 'todo' ) {\n\t\t\t\t\t\tlistItemsToFix.add( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tlet hasChanged = false;\n\n\t\t\tfor ( const listItem of listItemsToFix ) {\n\t\t\t\twriter.removeAttribute( 'todoListChecked', listItem );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tlistItemsToFix.clear();\n\n\t\t\treturn hasChanged;\n\t\t} );\n\n\t\tthis._initAriaAnnouncements();\n\t}\n\n\t/**\n\t * Handles the checkbox element change, moves the selection to the corresponding model item to make it possible\n\t * to toggle the `todoListChecked` attribute using the command, and restores the selection position.\n\t *\n\t * Some say it's a hack :) Moving the selection only for executing the command on a certain node and restoring it after,\n\t * is not a clear solution. We need to design an API for using commands beyond the selection range.\n\t * See https://github.com/ckeditor/ckeditor5/issues/1954.\n\t */\n\tprivate _handleCheckmarkChange( listItem: Element ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst previousSelectionRanges = Array.from( model.document.selection.getRanges() );\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( listItem, 'end' );\n\t\t\teditor.execute( 'checkTodoList' );\n\t\t\twriter.setSelection( previousSelectionRanges );\n\t\t} );\n\t}\n\n\t/**\n\t * Observe when user enters or leaves todo list and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified todo list.\n\t *\n\t * @internal\n\t */\n\tprivate _initAriaAnnouncements( ) {\n\t\tconst { model, ui, t } = this.editor;\n\t\tlet lastFocusedCodeBlock: Element | DocumentFragment | null = null;\n\n\t\tif ( !ui ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.document.selection.on<SelectionChangeRangeEvent>( 'change:range', () => {\n\t\t\tconst focusParent = model.document.selection.focus!.parent;\n\t\t\tconst lastElementIsTodoList = isLegacyTodoListItemElement( lastFocusedCodeBlock );\n\t\t\tconst currentElementIsTodoList = isLegacyTodoListItemElement( focusParent );\n\n\t\t\tif ( lastElementIsTodoList && !currentElementIsTodoList ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( t( 'Leaving a to-do list' ) );\n\t\t\t} else if ( !lastElementIsTodoList && currentElementIsTodoList ) {\n\t\t\t\tui.ariaLiveAnnouncer.announce( t( 'Entering a to-do list' ) );\n\t\t\t}\n\n\t\t\tlastFocusedCodeBlock = focusParent;\n\t\t} );\n\t}\n}\n\n/**\n * Handles the left/right (LTR/RTL content) arrow key and moves the selection at the end of the previous block element\n * if the selection is just after the checkbox element. In other words, it jumps over the checkbox element when\n * moving the selection to the left/right (LTR/RTL).\n *\n * @returns Callback for 'keydown' events.\n */\nfunction jumpOverCheckmarkOnSideArrowKeyPress( model: Model, locale: Locale ): GetCallback<ViewDocumentArrowKeyEvent> {\n\treturn ( eventInfo, domEventData ) => {\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( domEventData.keyCode, locale.contentLanguageDirection );\n\n\t\tif ( direction != 'left' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = selection.getFirstPosition()!;\n\t\tconst parent = position.parent;\n\n\t\tif ( parent.name === 'listItem' && parent.getAttribute( 'listType' ) == 'todo' && position.isAtStart ) {\n\t\t\tconst newRange = schema.getNearestSelectionRange( model.createPositionBefore( parent ), 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => writer.setSelection( newRange ) );\n\t\t\t}\n\n\t\t\tdomEventData.preventDefault();\n\t\t\tdomEventData.stopPropagation();\n\t\t\teventInfo.stop();\n\t\t}\n\t};\n}\n\n/**\n * Returns true if the given element is a list item model element of a to-do list.\n */\nfunction isLegacyTodoListItemElement( element: Element | DocumentFragment | null ): boolean {\n\treturn !!element && element.is( 'element', 'listItem' ) && element.getAttribute( 'listType' ) === 'todo';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/legacytodolist\n */\n\nimport LegacyTodoListEditing from './legacytodolist/legacytodolistediting.js';\nimport TodoListUI from './todolist/todolistui.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport '../theme/todolist.css';\n\n/**\n * The legacy to-do list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/legacytodolist/legacytodolistediting~LegacyTodoListEditing legacy to-do list\n * editing feature} and the {@link module:list/todolist/todolistui~TodoListUI to-do list UI feature}.\n */\nexport default class LegacyTodoList extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ LegacyTodoListEditing, TodoListUI ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'LegacyTodoList' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/list/adjacentlistssupport\n */\n\nimport type { GetCallback } from 'ckeditor5/src/utils.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport type { UpcastElementEvent, ViewElement } from 'ckeditor5/src/engine.js';\n\nexport default class AdjacentListsSupport extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'AdjacentListsSupport' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.schema.register( 'listSeparator', {\n\t\t\tallowWhere: '$block',\n\t\t\tisBlock: true\n\t\t} );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t// Add a list separator element between similar list elements on upcast.\n\t\t\t.add( dispatcher => {\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ol', listSeparatorUpcastConverter() );\n\t\t\t\tdispatcher.on<UpcastElementEvent>( 'element:ul', listSeparatorUpcastConverter() );\n\t\t\t} )\n\t\t\t// View-to-model transformation.\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'listSeparator',\n\t\t\t\tview: 'ck-list-separator'\n\t\t\t} );\n\n\t\t// The list separator element should exist in the view, but should be invisible (hidden).\n\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'listSeparator',\n\t\t\tview: {\n\t\t\t\tname: 'div',\n\t\t\t\tclasses: [ 'ck-list-separator', 'ck-hidden' ]\n\t\t\t}\n\t\t} );\n\n\t\t// The list separator element should not exist in the output data.\n\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'listSeparator',\n\t\t\tview: ( modelElement, conversionApi ) => {\n\t\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'ck-list-separator' );\n\n\t\t\t\tconversionApi.writer.setCustomProperty( 'dataPipeline:transparentRendering', true, viewElement );\n\n\t\t\t\tviewElement.getFillerOffset = () => null;\n\n\t\t\t\treturn viewElement;\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Inserts a list separator element between two lists of the same type (`ol` + `ol` or `ul` + `ul`).\n */\nfunction listSeparatorUpcastConverter(): GetCallback<UpcastElementEvent> {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst element: ViewElement = data.viewItem;\n\t\tconst nextSibling = element.nextSibling as ViewElement | null;\n\n\t\tif ( !nextSibling ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( element.name !== nextSibling.name ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !data.modelRange ) {\n\t\t\tObject.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\tconst writer = conversionApi.writer;\n\t\tconst modelElement = writer.createElement( 'listSeparator' );\n\n\t\t// Try to insert a list separator element on the current model cursor position.\n\t\tif ( !conversionApi.safeInsert( modelElement, data.modelCursor ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parts = conversionApi.getSplitParts( modelElement );\n\n\t\t// Extend the model range with the range of the created list separator element.\n\t\tdata.modelRange = writer.createRange(\n\t\t\tdata.modelRange!.start,\n\t\t\twriter.createPositionAfter( parts[ parts.length - 1 ] )\n\t\t);\n\n\t\tconversionApi.updateConversionResult( modelElement, data );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/documentlist\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { logWarning } from 'ckeditor5/src/utils.js';\nimport List from './list.js';\n\n/**\n * The document list feature.\n *\n * This is an obsolete plugin that exists for backward compatibility only.\n * Use the {@link module:list/list~List `List`} instead.\n *\n * @deprecated\n */\nexport default class DocumentList extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ List ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'DocumentList' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The `DocumentList` plugin is obsolete. Use `List` instead.\n\t\t *\n\t\t * @error plugin-obsolete-documentlist\n\t\t */\n\t\tlogWarning( 'plugin-obsolete-documentlist', { pluginName: 'DocumentList' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/documentlistproperties\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { logWarning } from 'ckeditor5/src/utils.js';\nimport ListProperties from './listproperties.js';\n\n/**\n * The document list properties feature.\n *\n * This is an obsolete plugin that exists for backward compatibility only.\n * Use the {@link module:list/listproperties~ListProperties `ListProperties`} instead.\n *\n * @deprecated\n */\nexport default class DocumentListProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ListProperties ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'DocumentListProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The `DocumentListProperties` plugin is obsolete. Use `ListProperties` instead.\n\t\t *\n\t\t * @error plugin-obsolete-documentlistproperties\n\t\t */\n\t\tlogWarning( 'plugin-obsolete-documentlistproperties', { pluginName: 'DocumentListProperties' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module list/tododocumentlist\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { logWarning } from 'ckeditor5/src/utils.js';\nimport TodoList from './todolist.js';\n\n/**\n * The to-do list feature.\n *\n * This is an obsolete plugin that exists for backward compatibility only.\n * Use the {@link module:list/todolist~TodoList `TodoList`} instead.\n *\n * @deprecated\n */\nexport default class TodoDocumentList extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TodoList ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TodoDocumentList' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The `TodoDocumentList` plugin is obsolete. Use `TodoList` instead.\n\t\t *\n\t\t * @error plugin-obsolete-tododocumentlist\n\t\t */\n\t\tlogWarning( 'plugin-obsolete-tododocumentlist', { pluginName: 'TodoDocumentList' } );\n\t}\n}\n"],"names":["ListWalker","constructor","startElement","options","_startElement","_referenceIndent","getAttribute","_isForward","direction","_includeSelf","includeSelf","_sameAttributes","toArray","sameAttributes","_sameIndent","sameIndent","_lowerIndent","lowerIndent","_higherIndent","higherIndent","first","walker","iterator","Symbol","nestedItems","node","SiblingListBlocksIterator","_getStartNode","indent","push","length","some","attr","nextSibling","previousSibling","_node","_previousNodesByIndent","_previous","_previousNodeIndent","next","isListItemBlock","done","value","undefined","nodeIndent","previousNodeInList","previousNodeIndent","previous","ListBlocksIterable","_listHead","listHead","ListItemUid","uid","is","hasAttribute","getAllListItemBlocks","listItem","getListItemBlocks","isForward","items","Array","from","reverse","getNestedListBlocks","getListItems","backwardBlocks","forwardBlocks","isFirstBlockOfListItem","listBlock","isLastBlockOfListItem","expandListBlocksToCompleteItems","blocks","withNested","allBlocks","Set","block","itemBlock","add","sortBlocks","expandListBlocksToCompleteList","splitListItemBefore","writer","id","setAttribute","mergeListItemBefore","parentBlock","attributes","key","getAttributes","startsWith","setAttributes","indentBlocks","expand","indentBy","blockIndent","removeListAttributes","outdentBlocksWithMerge","visited","referenceIndent","Math","min","map","parentBlocks","Map","set","has","mergedBlocks","mergeListItemIfNotLast","get","mergedBlock","rename","attributeKey","getAttributeKeys","removeAttribute","isSingleListItem","firstItemId","item","outdentFollowingItems","lastBlock","changedBlocks","currentIndent","Number","POSITIVE_INFINITY","newIndent","filter","root","rootName","sort","a","b","index","getSelectedBlockObject","model","selectedElement","document","selection","getSelectedElement","schema","isObject","isBlock","canBecomeSimpleListItem","checkChild","parent","isNumberedListType","listType","parentItemBlocks","pop","ListIndentCommand","Command","editor","indentDirection","_direction","isEnabled","_checkEnabled","getSelectedListBlocks","change","previousItemBlock","_fireAfterExecute","fire","firstBlock","siblingItem","getSelectedBlocks","firstNonListBlockIndex","findIndex","ListCommand","type","_listWalkerOptions","multiLevel","_getValue","execute","selectedBlockObject","checkAttribute","turnOff","forceValue","itemBlocks","isCollapsed","additionalAttributes","listIndent","listItemId","ListMergeCommand","shouldMergeOnBlocksContentLevel","firstElement","lastElement","_getMergeSubjectElements","firstIndent","lastIndent","lastElementId","nestedLastElementBlocks","sel","createSelection","createRange","createPositionAt","deleteContent","doNotResetEntireContent","lastElementAfterDelete","getLastPosition","positionParent","getFirstPosition","siblingNode","lastPosition","firstPosition","isFirstBlock","ListSplitCommand","_getStartBlock","doc","ListUtils","Plugin","pluginName","isOfficialPlugin","isListView","viewElement","isListItemView","getIndent","createListElement","getViewElementIdForListType","createAttributeElement","getViewElementNameForListType","priority","createListItemElement","findAndAddListHeadToMap","position","itemToListHead","previousNode","nodeBefore","nodeAfter","fixListIndents","listNodes","maxIndent","prevIndent","fixBy","applied","itemIndent","fixListItemIds","seenIds","listItemUpcastConverter","evt","data","conversionApi","modelRange","getItems","shallow","viewItem","firstItemListType","keepEmptyElement","reconvertItemsOnDataChange","editing","attributeNames","listEditing","changes","differ","getChanges","itemsToRefresh","changedItems","entry","name","getShiftedBy","range","start","includes","attributeNewValue","doesItemBlockRequiresRefresh","values","collectListItemsToRefresh","reconvertItem","stack","Object","fromEntries","doesItemWrappingRequiresRefresh","mapper","toViewElement","needsRefresh","modelElement","useBogus","shouldUseBogusParagraph","element","isListItemElement","isListElement","eventName","modelAttributes","listItemDowncastConverter","strategies","dataPipeline","consumer","createAttributesConsumer","consumable","findMappedViewElement","removeCustomMarkerElements","unwrapListItemBlock","viewRange","insertCustomMarkerElements","wrapListItemBlock","listItemDowncastRemoveConverter","elementName","split","viewStart","toViewPosition","modelEnd","viewEnd","isPhantom","getTrimmed","end","bogusParagraphCreator","createContainerElement","class","setCustomProperty","createRangeOn","toViewRange","createModelToViewPositionMapper","view","modelPosition","offset","strategy","scope","canInjectMarkerIntoElement","createRangeIn","viewWalker","getWalker","positionAfterLastMarker","toModelElement","getCustomProperty","createPositionAfter","skip","previousPosition","isEqual","viewPosition","viewWriter","unwrap","markersToRemove","collectMarkersToRemove","createPositionBefore","marker","remove","markerElement","createElement","insert","createWrapperElement","canWrapElement","wrapper","wrap","attributeElement","parentElement","listItemIndent","currentListItem","listItemViewElement","listViewElement","attributeName","setAttributeOnDowncast","events","every","event","test","forEach","consume","LIST_BASE_ATTRIBUTES","ListEditing","_downcastStrategies","requires","Enter","Delete","ClipboardPipeline","config","define","multiBlock","plugins","CKEditorError","conflictPlugin","register","allowAttributes","extend","allowAttributesOf","inheritAllFrom","attribute","setAttributeProperties","copyOnReplace","commands","_setupDeleteIntegration","_setupEnterIntegration","_setupTabIntegration","_setupClipboardIntegration","_setupAccessibilityIntegration","outdent","registerChildCommand","_setupModelPostFixing","_setupConversion","registerDowncastStrategy","mergeBackwardCommand","mergeForwardCommand","listenTo","isAtStart","previousBlock","preventDefault","stop","isAtEnd","context","enterCommand","isEmpty","isSoft","isLastBlock","splitCommand","refresh","listItemBlocks","commandName","shiftKey","command","stopPropagation","getListAttributeNames","conversion","for","elementToElement","converterPriority","dispatcher","on","modelToViewPositionMapper","return","registerPostFixer","modelChangePostFixer","clipboardPipeline","createModelIndentPasteFixer","allContentChildren","content","getChildren","lastItem","contentChildrenExceptLastItem","slice","method","allChildren","isSingleListItemSelected","t","accessibility","addKeystrokeInfoGroup","label","keystrokes","keystroke","innerItem","attributeOldValue","selectable","refItem","refType","refIndent","firstElementIndent","indentDiff","max","isListItem","createUIComponents","icon","ui","componentFactory","buttonView","_createButton","ButtonView","tooltip","isToggleable","MenuBarMenuListItemButtonView","role","ButtonClass","locale","bind","to","focus","ListUI","icons","numberedList","bulletedList","List","ListStartCommand","startIndex","LIST_STYLE_TO_LIST_TYPE","LIST_STYLE_TO_TYPE_ATTRIBUTE","TYPE_ATTRIBUTE_TO_LIST_STYLE","LIST_STYLE_TYPES","listStyle","typeAttribute","getAllSupportedStyleTypes","x","getListTypeFromListStyleType","listStyleType","getListStyleTypeFromTypeAttribute","getTypeAttributeFromListStyleType","normalizeListStyle","ListStyleCommand","defaultType","supportedTypes","_supportedTypes","_tryToConvertItemsToList","isStyleTypeSupported","ListReversedCommand","reversed","listPropertiesUpcastConverter","viewConsumables","assign","convertChildren","modelCursor","appliesToListItem","getAttributeOnUpcast","ListPropertiesUtils","getNormalizedConfig","styles","getNormalizedStylesConfig","normalizedConfig","listTypes","useAttribute","isArray","listStyleTypes","DEFAULT_LIST_TYPE","ListPropertiesEditing","enabledProperties","createAttributeStrategies","addCommand","attributeValue","defaultValue","hasValidAttribute","styleType","setStyle","removeStyle","listParent","style","getStyle","listReversed","listStart","startAttributeValue","ListPropertiesView","View","stylesView","additionalPropertiesCollapsibleView","startIndexFieldView","reversedSwitchButtonView","focusTracker","FocusTracker","KeystrokeHandler","focusables","ViewCollection","styleButtonViews","styleGridAriaLabel","elementCssClasses","children","createCollection","focusCycler","FocusCycler","keystrokeHandler","actions","focusPrevious","focusNext","_createStylesView","_addNumberedListPropertyViews","setTemplate","tag","render","last","addKeyboardHandlingForGrid","gridItems","numberOfColumns","global","window","getComputedStyle","getPropertyValue","uiLanguageDirection","focusFirst","focusLast","destroy","styleButtons","addMany","delegate","child","isOn","numberedPropertyViews","_createStartIndexField","_createReversedSwitchButton","CollapsibleView","toMany","areEnabled","LabeledFieldView","createLabeledInputNumber","fieldView","step","inputMode","inputElement","valueAsNumber","isNaN","errorText","checkValidity","reversedButtonView","SwitchButtonView","withText","ListPropertiesUI","init","propertiesConfig","stylesListTypes","styleDefinitions","listStyleDiscIcon","listStyleCircleIcon","listStyleSquareIcon","buttonLabel","getDropdownViewCreator","parentCommandName","buttonIcon","getMenuBarStylesMenuCreator","listStyleDecimalIcon","listStyleDecimalWithLeadingZeroIcon","listStyleLowerRomanIcon","listStyleUpperRomanIcon","listStyleLowerLatinIcon","listStyleUpperLatinIcon","parentCommand","dropdownView","createDropdown","SplitButtonView","mainButtonView","once","listPropertiesView","createListPropertiesView","panelView","getStyleButtonCreator","listStyleCommand","button","replace","styleButtonCreator","configuredListStylesTypes","filteredDefinitions","allowedTypes","def","getStyleTypeSupportChecker","focusChildOnDropdownOpen","find","listStartCommand","listReversedCommand","isReversed","menuView","MenuBarMenuView","listCommand","styleDefinition","ListProperties","CheckTodoListCommand","selectedElements","_getSelectedItems","selectionRange","getFirstRange","elements","TodoCheckboxChangeObserver","DomEventObserver","onDomEvent","domEvent","target","viewTarget","domConverter","mapDomToView","findAncestor","classes","ITEM_TOGGLE_KEYSTROKE","parseKeystroke","TodoListEditing","addObserver","addAttributeCheck","todoItemInputConverter","todoListItemUpcastConverter","elementUpcastConsumingConverter","attributeUpcastConsumingConverter","isDescriptionBlock","addClass","removeClass","createUIElement","checked","disabled","tabindex","contenteditable","getFillerOffset","join","isFirstTodoModelParagraphBlock","hasViewClass","hasClass","isFirstTodoModelItemBlock","hasViewItemMarker","previousHasAttribute","nodeHasAttribute","wasFixed","getCode","viewPositionAfter","modelPositionAfter","toModelPosition","_handleCheckmarkChange","jumpOverCheckmarkOnSideArrowKeyPress","viewParent","isStartOfListItem","isStartOfListLabel","isLabelElement","isInInputWrapper","_initAriaAnnouncements","previousSelectionRanges","getRanges","setSelection","lastFocusedCodeBlock","focusParent","lastElementIsTodoList","isTodoListItemElement","currentElementIsTodoList","ariaLiveAnnouncer","announce","groupedItems","reduce","acc","entries","modelItem","matcherPattern","matcher","Matcher","matcherResult","match","listAttributeNames","hasOnlyListAttributes","eventInfo","domEventData","getLocalizedArrowKeyCodeDirection","keyCode","contentLanguageDirection","newRange","getNearestSelectionRange","newRangeParent","TodoListUI","todoList","TodoList","LegacyListCommand","checkCanBecomeListItem","lowestIndent","_fixType","isBackward","startingItem","LegacyIndentCommand","_indentBy","itemsToChange","prev","createViewListItemElement","getListItemFillerOffset","generateLiInUl","viewList","bindElements","injectViewList","injectedItem","injectedList","insertPosition","getSiblingListItem","smallerIndent","prevItem","breakContainer","mappedViewAncestor","findMappedViewAncestor","nestedList","findNestedList","positionAfterUiElements","prevView","walkerBoundaries","ignoreElementEnd","breakPosition","targetPosition","mergeViewLists","move","_position","nextViewList","lastSubChild","modelChild","firstList","secondList","mergeContainers","getLastMatchingPosition","getSiblingNodes","walkerOptions","startPosition","limitIndent","nodes","TreeWalker","unshift","getSelectedListItems","listItems","flat","BULLETED_LIST_STYLE_TYPES","NUMBERED_LIST_STYLE_TYPES","hasOnlyLists","getChild","call","LegacyListUtils","modelViewInsertion","modelViewRemove","viewListPrev","removeRange","removed","hoistNestedLists","unbindViewElement","modelViewChangeType","listName","modelViewMergeAfterChangeType","modelViewChangeIndent","modelViewSplitOnInsert","lists","removeStart","removeEnd","i","previousList","insertedRange","mergePos","modelViewMergeAfter","viewItemPrev","viewItemNext","viewModelConverter","safeInsert","nextPosition","viewToModelListItemChildrenConverter","updateConversionResult","cleanList","isWrongElement","isList","_remove","cleanListItem","childCount","foundList","modelToViewPosition","topmostViewList","getAncestors","viewToModelPosition","viewPos","modelNode","modelLength","getModelLength","_addListToFix","e","posAfter","_fixListIndents","_fixListTypes","typesStack","modelIndentPasteFixer","pos","indentChange","_setAttribute","listItemModel","viewChildren","convertItem","result","convertedChild","wasSplit","findNextListItem","treeWalker","nextIndent","modelRemoveStartPosition","viewRemoveStartPosition","viewRemovedItem","prevModelItem","prevViewList","LegacyListEditing","registerViewToModelLength","getViewListItemLength","viewDocument","previousIsAListItem","LegacyList","LegacyListStyleCommand","LegacyListReversedCommand","LegacyListStartCommand","LegacyListPropertiesEditing","properties","s","fixListAfterIndentListCommand","fixListAfterOutdentListCommand","restoreDefaultListStyle","fixListAttributesOnListItemElements","upcastListItemAttributes","downcastListItemAttributes","_mergeListAttributesWhileMergingLists","removeListItemAttributesFromTodoList","attributeStrategies","firstMostOuterItem","mostOuterItemList","secondListMostOuterItem","currentElement","previousElement","areRepresentingSameList","listItem1","listItem2","rootIndent","itemsToUpdate","valueToSet","insertedListItems","getChangedListItems","existingListItem","shouldInheritListType","shouldInheritListTypeFromPreviousItem","baseItem","itemToChange","attributeStrategy","baseListAttribute","previousItem","previousItemIndent","previousItemListAttribute","todoListItems","getItemFromChange","LegacyListProperties","LegacyCheckTodoListCommand","_selectedElements","onCheckboxChecked","isChecked","checkmarkElement","createCheckmarkElement","span","dataModelViewInsertion","checkbox","createEmptyElement","dataViewModelCheckmarkInsertion","onCheckedChange","labelElement","findLabel","itemRange","descriptionStart","descriptionEnd","descriptionRange","descriptionSpan","findDescription","modelViewChangeChecked","oldCheckmarkElement","newCheckmarkElement","mapModelToViewPosition","viewLi","descSpan","findPositionIn","onChange","uiElement","domDocument","addEventListener","domElement","toDomElement","appendChild","LegacyTodoListEditing","checkTodoListCommand","downcastDispatcher","upcastDispatcher","listItemsToFix","args","operation","oldName","oldValue","hasChanged","clear","isLegacyTodoListItemElement","LegacyTodoList","AdjacentListsSupport","allowWhere","listSeparatorUpcastConverter","parts","getSplitParts","DocumentList","logWarning","DocumentListProperties","TodoDocumentList"],"mappings":"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C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAEjd,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAExjB,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAEzZ,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAE9sD,GAAG,CAAC,mCAAmC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAEt0G,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAEv0B,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAE3nB,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAEvmE,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]}},
    {"offset": {"line": 8047, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}