{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js"],"sourcesContent":["import { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return chain(fromHttp(options ?? {}), fromContainerMetadata(options));\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return fromInstanceMetadata(options);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return fromEnv(options);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\n"],"names":[],"mappings":";;;AAAA;AAAA;AAAA;;AACO,MAAM,0BAA0B,CAAC,kBAAkB,aAAa;IACnE,MAAM,qBAAqB;QACvB,cAAc,OAAO;YACjB,MAAM,EAAE,QAAQ,EAAE,GAAG;YACrB,MAAM,EAAE,qBAAqB,EAAE,GAAG;YAClC,QAAQ,MAAM;YACd,OAAO,CAAA,GAAA,uKAAA,CAAA,QAAK,AAAD,EAAE,SAAS,WAAW,CAAC,IAAI,sBAAsB;QAChE;QACA,qBAAqB,OAAO;YACxB,QAAQ,MAAM;YACd,MAAM,EAAE,oBAAoB,EAAE,GAAG;YACjC,OAAO,qBAAqB;QAChC;QACA,aAAa,OAAO;YAChB,QAAQ,MAAM;YACd,MAAM,EAAE,OAAO,EAAE,GAAG;YACpB,OAAO,QAAQ;QACnB;IACJ;IACA,IAAI,oBAAoB,oBAAoB;QACxC,OAAO,kBAAkB,CAAC,iBAAiB;IAC/C,OACK;QACD,MAAM,IAAI,0LAAA,CAAA,2BAAwB,CAAC,CAAC,yCAAyC,EAAE,YAAY,MAAM,EAAE,iBAAiB,EAAE,CAAC,GACnH,CAAC,4DAA4D,CAAC,EAAE;YAAE;QAAO;IACjF;AACJ","ignoreList":[0]}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/client-sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: options?.parentClientConfig,\n        }, options.clientPlugins);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, {\n            ...profiles,\n            [source_profile]: {\n                ...profiles[source_profile],\n                role_arn: data.role_arn ?? profiles[source_profile].role_arn,\n            },\n        }, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n        DurationSeconds: parseInt(data.duration_seconds || \"3600\", 10),\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js"],"sourcesContent":["export const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})());\n"],"names":[],"mappings":";;;;AAAO,MAAM,mBAAmB,CAAC,MAAQ,QAAQ,QAAQ,OAAO,QAAQ,YAAY,OAAO,IAAI,kBAAkB,KAAK;AAC/G,MAAM,4BAA4B,OAAO,SAAS,UAAY,iKAA+C,IAAI,CAAC,CAAC,EAAE,WAAW,EAAE,GAAK,YAAY;YACtJ,GAAG,OAAO;YACV;QACJ","ignoreList":[0]}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js"],"sourcesContent":["export const resolveSsoCredentials = async (profile, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n    })();\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n"],"names":[],"mappings":";;;;AAAO,MAAM,wBAAwB,OAAO,SAAS,UAAU,CAAC,CAAC;IAC7D,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,OAAO,QAAQ;QACX;QACA,QAAQ,QAAQ,MAAM;IAC1B;AACJ;AACO,MAAM,eAAe,CAAC,MAAQ,OACjC,CAAC,OAAO,IAAI,aAAa,KAAK,YAC1B,OAAO,IAAI,cAAc,KAAK,YAC9B,OAAO,IAAI,WAAW,KAAK,YAC3B,OAAO,IAAI,UAAU,KAAK,YAC1B,OAAO,IAAI,aAAa,KAAK,QAAQ","ignoreList":[0]}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js"],"sourcesContent":["export const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_account_id) > -1;\nexport const resolveStaticCredentials = (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    return Promise.resolve({\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    });\n};\n"],"names":[],"mappings":";;;;AAAO,MAAM,uBAAuB,CAAC,MAAQ,QAAQ,QACjD,OAAO,QAAQ,YACf,OAAO,IAAI,iBAAiB,KAAK,YACjC,OAAO,IAAI,qBAAqB,KAAK,YACrC;QAAC;QAAa;KAAS,CAAC,OAAO,CAAC,OAAO,IAAI,iBAAiB,IAAI,CAAC,KACjE;QAAC;QAAa;KAAS,CAAC,OAAO,CAAC,OAAO,IAAI,cAAc,IAAI,CAAC;AAC3D,MAAM,2BAA2B,CAAC,SAAS;IAC9C,SAAS,QAAQ,MAAM;IACvB,OAAO,QAAQ,OAAO,CAAC;QACnB,aAAa,QAAQ,iBAAiB;QACtC,iBAAiB,QAAQ,qBAAqB;QAC9C,cAAc,QAAQ,iBAAiB;QACvC,GAAI,QAAQ,oBAAoB,IAAI;YAAE,iBAAiB,QAAQ,oBAAoB;QAAC,CAAC;QACrF,GAAI,QAAQ,cAAc,IAAI;YAAE,WAAW,QAAQ,cAAc;QAAC,CAAC;IACvE;AACJ","ignoreList":[0]}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js"],"sourcesContent":["export const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})());\n"],"names":[],"mappings":";;;;AAAO,MAAM,uBAAuB,CAAC,MAAQ,QAAQ,QACjD,OAAO,QAAQ,YACf,OAAO,IAAI,uBAAuB,KAAK,YACvC,OAAO,IAAI,QAAQ,KAAK,YACxB;QAAC;QAAa;KAAS,CAAC,OAAO,CAAC,OAAO,IAAI,iBAAiB,IAAI,CAAC;AAC9D,MAAM,gCAAgC,OAAO,SAAS,UAAY,sKAAoD,IAAI,CAAC,CAAC,EAAE,aAAa,EAAE,GAAK,cAAc;YACnK,sBAAsB,QAAQ,uBAAuB;YACrD,SAAS,QAAQ,QAAQ;YACzB,iBAAiB,QAAQ,iBAAiB;YAC1C,4BAA4B,QAAQ,0BAA0B;YAC9D,QAAQ,QAAQ,MAAM;YACtB,oBAAoB,QAAQ,kBAAkB;QAClD","ignoreList":[0]}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;AAMO,MAAM,qBAAqB,OAAO,aAAa,UAAU,SAAS,kBAAkB,CAAC,CAAC;IACzF,MAAM,OAAO,QAAQ,CAAC,YAAY;IAClC,IAAI,OAAO,IAAI,CAAC,iBAAiB,MAAM,GAAG,KAAK,CAAA,GAAA,uMAAA,CAAA,uBAAoB,AAAD,EAAE,OAAO;QACvE,OAAO,CAAA,GAAA,uMAAA,CAAA,2BAAwB,AAAD,EAAE,MAAM;IAC1C;IACA,IAAI,CAAA,GAAA,2MAAA,CAAA,sBAAmB,AAAD,EAAE,MAAM;QAAE,SAAS;QAAa,QAAQ,QAAQ,MAAM;IAAC,IAAI;QAC7E,OAAO,CAAA,GAAA,2MAAA,CAAA,+BAA4B,AAAD,EAAE,aAAa,UAAU,SAAS;IACxE;IACA,IAAI,CAAA,GAAA,uMAAA,CAAA,uBAAoB,AAAD,EAAE,OAAO;QAC5B,OAAO,CAAA,GAAA,uMAAA,CAAA,2BAAwB,AAAD,EAAE,MAAM;IAC1C;IACA,IAAI,CAAA,GAAA,4MAAA,CAAA,uBAAoB,AAAD,EAAE,OAAO;QAC5B,OAAO,CAAA,GAAA,4MAAA,CAAA,gCAA6B,AAAD,EAAE,MAAM;IAC/C;IACA,IAAI,CAAA,GAAA,wMAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO;QACxB,OAAO,CAAA,GAAA,wMAAA,CAAA,4BAAyB,AAAD,EAAE,SAAS;IAC9C;IACA,IAAI,CAAA,GAAA,oMAAA,CAAA,eAAY,AAAD,EAAE,OAAO;QACpB,OAAO,MAAM,CAAA,GAAA,oMAAA,CAAA,wBAAqB,AAAD,EAAE,aAAa;IACpD;IACA,MAAM,IAAI,0LAAA,CAAA,2BAAwB,CAAC,CAAC,8CAA8C,EAAE,YAAY,uCAAuC,CAAC,EAAE;QAAE,QAAQ,QAAQ,MAAM;IAAC;AACvK","ignoreList":[0]}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40aws-sdk/credential-provider-ini/dist-es/fromIni.js"],"sourcesContent":["import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName(init), profiles, init);\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;AAAA;;;AAEO,MAAM,UAAU,CAAC,OAAO,CAAC,CAAC,GAAK;QAClC,KAAK,MAAM,EAAE,MAAM;QACnB,MAAM,WAAW,MAAM,CAAA,GAAA,4LAAA,CAAA,kBAAe,AAAD,EAAE;QACvC,OAAO,CAAA,GAAA,iMAAA,CAAA,qBAAkB,AAAD,EAAE,CAAA,GAAA,2LAAA,CAAA,iBAAc,AAAD,EAAE,OAAO,UAAU;IAC9D","ignoreList":[0]}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}