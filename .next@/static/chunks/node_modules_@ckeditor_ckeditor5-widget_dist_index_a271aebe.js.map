{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js.map","sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/dist/index.js","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/highlightstack.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/utils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/widgettypearound/utils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/widgettypearound/widgettypearound.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/verticalnavigation.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/widget.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/widgettoolbarrepository.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/widgetresize/resizerstate.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/widgetresize/sizeview.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/widgetresize/resizer.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-widget/src/widgetresize.ts"],"sourcesContent":["import { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { MouseObserver, TreeWalker } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { EmitterMixin, Rect, CKEditorError, toArray, isForwardArrowKeyCode, env, keyCodes, getLocalizedArrowKeyCodeDirection, getRangeFromMouseEvent, logWarning, ObservableMixin, compareArrays, global, DomEmitterMixin } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { IconView, Template, ContextualBalloon, ToolbarView, BalloonPanelView, View } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { throttle } from 'lodash-es';\n\n/**\n * Class used to handle the correct order of highlights on elements.\n *\n * When different highlights are applied to same element the correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */ class HighlightStack extends /* #__PURE__ */ EmitterMixin() {\n    _stack = [];\n    /**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t */ add(descriptor, writer) {\n        const stack = this._stack;\n        // Save top descriptor and insert new one. If top is changed - fire event.\n        const oldTop = stack[0];\n        this._insertDescriptor(descriptor);\n        const newTop = stack[0];\n        // When new object is at the top and stores different information.\n        if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n            this.fire('change:top', {\n                oldDescriptor: oldTop,\n                newDescriptor: newTop,\n                writer\n            });\n        }\n    }\n    /**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param id Id of the descriptor to remove.\n\t */ remove(id, writer) {\n        const stack = this._stack;\n        const oldTop = stack[0];\n        this._removeDescriptor(id);\n        const newTop = stack[0];\n        // When new object is at the top and stores different information.\n        if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n            this.fire('change:top', {\n                oldDescriptor: oldTop,\n                newDescriptor: newTop,\n                writer\n            });\n        }\n    }\n    /**\n\t * Inserts a given descriptor in correct place in the stack. It also takes care about updating information\n\t * when descriptor with same id is already present.\n\t */ _insertDescriptor(descriptor) {\n        const stack = this._stack;\n        const index = stack.findIndex((item)=>item.id === descriptor.id);\n        // Inserting exact same descriptor - do nothing.\n        if (compareDescriptors(descriptor, stack[index])) {\n            return;\n        }\n        // If descriptor with same id but with different information is on the stack - remove it.\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n        // Find correct place to insert descriptor in the stack.\n        // It has different information (for example priority) so it must be re-inserted in correct place.\n        let i = 0;\n        while(stack[i] && shouldABeBeforeB(stack[i], descriptor)){\n            i++;\n        }\n        stack.splice(i, 0, descriptor);\n    }\n    /**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @param id Descriptor's id.\n\t */ _removeDescriptor(id) {\n        const stack = this._stack;\n        const index = stack.findIndex((item)=>item.id === id);\n        // If descriptor with same id is on the list - remove it.\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n    }\n}\n/**\n * Compares two descriptors by checking their priority and class list.\n *\n * @returns Returns true if both descriptors are defined and have same priority and classes.\n */ function compareDescriptors(a, b) {\n    return a && b && a.priority == b.priority && classesToString(a.classes) == classesToString(b.classes);\n}\n/**\n * Checks whenever first descriptor should be placed in the stack before second one.\n */ function shouldABeBeforeB(a, b) {\n    if (a.priority > b.priority) {\n        return true;\n    } else if (a.priority < b.priority) {\n        return false;\n    }\n    // When priorities are equal and names are different - use classes to compare.\n    return classesToString(a.classes) > classesToString(b.classes);\n}\n/**\n * Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n * sorted string.\n */ function classesToString(classes) {\n    return Array.isArray(classes) ? classes.sort().join(',') : classes;\n}\n\nvar dragHandleIcon = \"<svg viewBox=\\\"0 0 16 16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z\\\"/><path fill-opacity=\\\".256\\\" d=\\\"M1 1h14v14H1z\\\"/><g class=\\\"ck-icon__selected-indicator\\\"><path d=\\\"M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z\\\"/><path fill-opacity=\\\".254\\\" d=\\\"M1 1h14v14H1z\\\"/></g></svg>\";\n\n/**\n * CSS class added to each widget element.\n */ const WIDGET_CLASS_NAME = 'ck-widget';\n/**\n * CSS class added to currently selected widget element.\n */ const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n/**\n * Returns `true` if given {@link module:engine/view/node~Node} is an {@link module:engine/view/element~Element} and a widget.\n */ function isWidget(node) {\n    if (!node.is('element')) {\n        return false;\n    }\n    return !!node.getCustomProperty('widget');\n}\n/**\n * Converts the given {@link module:engine/view/element~Element} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"false\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~Element#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n * \t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param options.hasSelectionHandle If `true`, the widget will have a selection handle added.\n * @returns Returns the same element.\n */ function toWidget(element, writer, options = {}) {\n    if (!element.is('containerElement')) {\n        /**\n\t\t * The element passed to `toWidget()` must be a {@link module:engine/view/containerelement~ContainerElement}\n\t\t * instance.\n\t\t *\n\t\t * @error widget-to-widget-wrong-element-type\n\t\t * @param element The view element passed to `toWidget()`.\n\t\t */ throw new CKEditorError('widget-to-widget-wrong-element-type', null, {\n            element\n        });\n    }\n    writer.setAttribute('contenteditable', 'false', element);\n    writer.addClass(WIDGET_CLASS_NAME, element);\n    writer.setCustomProperty('widget', true, element);\n    element.getFillerOffset = getFillerOffset;\n    writer.setCustomProperty('widgetLabel', [], element);\n    if (options.label) {\n        setLabel(element, options.label);\n    }\n    if (options.hasSelectionHandle) {\n        addSelectionHandle(element, writer);\n    }\n    setHighlightHandling(element, writer);\n    return element;\n}\n/**\n * Default handler for adding a highlight on a widget.\n * It adds CSS class and attributes basing on the given highlight descriptor.\n */ function addHighlight(element, descriptor, writer) {\n    if (descriptor.classes) {\n        writer.addClass(toArray(descriptor.classes), element);\n    }\n    if (descriptor.attributes) {\n        for(const key in descriptor.attributes){\n            writer.setAttribute(key, descriptor.attributes[key], element);\n        }\n    }\n}\n/**\n * Default handler for removing a highlight from a widget.\n * It removes CSS class and attributes basing on the given highlight descriptor.\n */ function removeHighlight(element, descriptor, writer) {\n    if (descriptor.classes) {\n        writer.removeClass(toArray(descriptor.classes), element);\n    }\n    if (descriptor.attributes) {\n        for(const key in descriptor.attributes){\n            writer.removeAttribute(key, element);\n        }\n    }\n}\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n */ function setHighlightHandling(element, writer, add = addHighlight, remove = removeHighlight) {\n    const stack = new HighlightStack();\n    stack.on('change:top', (evt, data)=>{\n        if (data.oldDescriptor) {\n            remove(element, data.oldDescriptor, data.writer);\n        }\n        if (data.newDescriptor) {\n            add(element, data.newDescriptor, data.writer);\n        }\n    });\n    const addHighlightCallback = (element, descriptor, writer)=>stack.add(descriptor, writer);\n    const removeHighlightCallback = (element, id, writer)=>stack.remove(id, writer);\n    writer.setCustomProperty('addHighlight', addHighlightCallback, element);\n    writer.setCustomProperty('removeHighlight', removeHighlightCallback, element);\n}\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n */ function setLabel(element, labelOrCreator) {\n    const widgetLabel = element.getCustomProperty('widgetLabel');\n    widgetLabel.push(labelOrCreator);\n}\n/**\n * Returns the label of the provided element.\n */ function getLabel(element) {\n    const widgetLabel = element.getCustomProperty('widgetLabel');\n    return widgetLabel.reduce((prev, current)=>{\n        if (typeof current === 'function') {\n            return prev ? prev + '. ' + current() : current();\n        } else {\n            return prev ? prev + '. ' + current : current;\n        }\n    }, '');\n}\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when {@link module:engine/view/editableelement~EditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n * * implements the {@link ~setHighlightHandling view highlight on widget's editable}.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `editingDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n * \t\t\treturn toWidgetEditable( nested, writer, { label: 'label for editable' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Editable's label used by assistive technologies (e.g. screen readers).\n * @returns Returns the same element that was provided in the `editable` parameter\n */ function toWidgetEditable(editable, writer, options = {}) {\n    writer.addClass([\n        'ck-editor__editable',\n        'ck-editor__nested-editable'\n    ], editable);\n    writer.setAttribute('role', 'textbox', editable);\n    writer.setAttribute('tabindex', '-1', editable);\n    if (options.label) {\n        writer.setAttribute('aria-label', options.label, editable);\n    }\n    // Set initial contenteditable value.\n    writer.setAttribute('contenteditable', editable.isReadOnly ? 'false' : 'true', editable);\n    // Bind the contenteditable property to element#isReadOnly.\n    editable.on('change:isReadOnly', (evt, property, is)=>{\n        writer.setAttribute('contenteditable', is ? 'false' : 'true', editable);\n    });\n    editable.on('change:isFocused', (evt, property, is)=>{\n        if (is) {\n            writer.addClass('ck-editor__nested-editable_focused', editable);\n        } else {\n            writer.removeClass('ck-editor__nested-editable_focused', editable);\n        }\n    });\n    setHighlightHandling(editable, writer);\n    return editable;\n}\n/**\n * Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the collapsed range after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n * is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n * by the inserted widget block.\n *\n * @param selection The selection based on which the insertion position should be calculated.\n * @param model Model instance.\n * @returns The optimal range.\n */ function findOptimalInsertionRange(selection, model) {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement) {\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(selection);\n        // If the WidgetTypeAround \"fake caret\" is displayed, use its position for the insertion\n        // to provide the most predictable UX (https://github.com/ckeditor/ckeditor5/issues/7438).\n        if (typeAroundFakeCaretPosition) {\n            return model.createRange(model.createPositionAt(selectedElement, typeAroundFakeCaretPosition));\n        }\n    }\n    return model.schema.findOptimalInsertionRange(selection);\n}\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n * ```\n * // Model:\n * <placeholder type=\"name\"></placeholder>\n *\n * // View:\n * <span class=\"placeholder\">name</span>\n * ```\n *\n * In such case, view positions inside `<span>` cannot be correctly mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n * ```ts\n * editor.editing.mapper.on(\n * \t'viewToModelPosition',\n * \tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n * );\n * ```\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n * // Model:\n * <paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n * ```\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n * // Model:\n * <paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n * ```\n *\n * @param model Model instance on which the callback operates.\n * @param viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n */ function viewToModelPositionOutsideModelElement(model, viewElementMatcher) {\n    return (evt, data)=>{\n        const { mapper, viewPosition } = data;\n        const viewParent = mapper.findMappedViewAncestor(viewPosition);\n        if (!viewElementMatcher(viewParent)) {\n            return;\n        }\n        const modelParent = mapper.toModelElement(viewParent);\n        data.modelPosition = model.createPositionAt(modelParent, viewPosition.isAtStart ? 'before' : 'after');\n    };\n}\n/**\n * Default filler offset function applied to all widget elements.\n */ function getFillerOffset() {\n    return null;\n}\n/**\n * Adds a drag handle to the widget.\n */ function addSelectionHandle(widgetElement, writer) {\n    const selectionHandle = writer.createUIElement('div', {\n        class: 'ck ck-widget__selection-handle'\n    }, function(domDocument) {\n        const domElement = this.toDomElement(domDocument);\n        // Use the IconView from the ui library.\n        const icon = new IconView();\n        icon.set('content', dragHandleIcon);\n        // Render the icon view right away to append its #element to the selectionHandle DOM element.\n        icon.render();\n        domElement.appendChild(icon.element);\n        return domElement;\n    });\n    // Append the selection handle into the widget wrapper.\n    writer.insert(writer.createPositionAt(widgetElement, 0), selectionHandle);\n    writer.addClass([\n        'ck-widget_with-selection-handle'\n    ], widgetElement);\n}\n/**\n * Starting from a DOM resize host element (an element that receives dimensions as a result of resizing),\n * this helper returns the width of the found ancestor element.\n *\n *\t* It searches up to 5 levels of ancestors only.\n *\n * @param domResizeHost Resize host DOM element that receives dimensions as a result of resizing.\n * @returns Width of ancestor element in pixels or 0 if no ancestor with a computed width has been found.\n */ function calculateResizeHostAncestorWidth(domResizeHost) {\n    const getElementComputedWidth = (element)=>{\n        const { width, paddingLeft, paddingRight } = element.ownerDocument.defaultView.getComputedStyle(element);\n        return parseFloat(width) - (parseFloat(paddingLeft) || 0) - (parseFloat(paddingRight) || 0);\n    };\n    const domResizeHostParent = domResizeHost.parentElement;\n    if (!domResizeHostParent) {\n        return 0;\n    }\n    // Need to use computed style as it properly excludes parent's paddings from the returned value.\n    let parentWidth = getElementComputedWidth(domResizeHostParent);\n    // Sometimes parent width cannot be accessed. If that happens we should go up in the elements tree\n    // and try to get width from next ancestor.\n    // https://github.com/ckeditor/ckeditor5/issues/10776\n    const ancestorLevelLimit = 5;\n    let currentLevel = 0;\n    let checkedElement = domResizeHostParent;\n    while(isNaN(parentWidth)){\n        checkedElement = checkedElement.parentElement;\n        if (++currentLevel > ancestorLevelLimit) {\n            return 0;\n        }\n        parentWidth = getElementComputedWidth(checkedElement);\n    }\n    return parentWidth;\n}\n/**\n * Calculates a relative width of a `domResizeHost` compared to its ancestor in percents.\n *\n * @param domResizeHost Resize host DOM element.\n * @returns Percentage value between 0 and 100.\n */ function calculateResizeHostPercentageWidth(domResizeHost, resizeHostRect = new Rect(domResizeHost)) {\n    const parentWidth = calculateResizeHostAncestorWidth(domResizeHost);\n    if (!parentWidth) {\n        return 0;\n    }\n    return resizeHostRect.width / parentWidth * 100;\n}\n\n/**\n * The name of the type around model selection attribute responsible for\n * displaying a fake caret next to a selected widget.\n */ const TYPE_AROUND_SELECTION_ATTRIBUTE = 'widget-type-around';\n/**\n * Checks if an element is a widget that qualifies to get the widget type around UI.\n */ function isTypeAroundWidget(viewElement, modelElement, schema) {\n    return !!viewElement && isWidget(viewElement) && !schema.isInline(modelElement);\n}\n/**\n * For the passed HTML element, this helper finds the closest widget type around button ancestor.\n */ function getClosestTypeAroundDomButton(domElement) {\n    return domElement.closest('.ck-widget__type-around__button');\n}\n/**\n * For the passed widget type around button element, this helper determines at which position\n * the paragraph would be inserted into the content if, for instance, the button was\n * clicked by the user.\n *\n * @returns The position of the button.\n */ function getTypeAroundButtonPosition(domElement) {\n    return domElement.classList.contains('ck-widget__type-around__button_before') ? 'before' : 'after';\n}\n/**\n * For the passed HTML element, this helper returns the closest view widget ancestor.\n */ function getClosestWidgetViewElement(domElement, domConverter) {\n    const widgetDomElement = domElement.closest('.ck-widget');\n    return domConverter.mapDomToView(widgetDomElement);\n}\n/**\n * For the passed selection instance, it returns the position of the fake caret displayed next to a widget.\n *\n * **Note**: If the fake caret is not currently displayed, `null` is returned.\n *\n * @returns The position of the fake caret or `null` when none is present.\n */ function getTypeAroundFakeCaretPosition(selection) {\n    return selection.getAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n}\n\nvar returnIcon = \"<svg viewBox=\\\"0 0 10 8\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\\\"/></svg>\";\n\nconst POSSIBLE_INSERTION_POSITIONS = [\n    'before',\n    'after'\n];\n// Do the SVG parsing once and then clone the result <svg> DOM element for each new button.\nconst RETURN_ARROW_ICON_ELEMENT = new DOMParser().parseFromString(returnIcon, 'image/svg+xml').firstChild;\nconst PLUGIN_DISABLED_EDITING_ROOT_CLASS = 'ck-widget__type-around_disabled';\n/**\n * A plugin that allows users to type around widgets where normally it is impossible to place the caret due\n * to limitations of web browsers. These \"tight spots\" occur, for instance, before (or after) a widget being\n * the first (or last) child of its parent or between two block widgets.\n *\n * This plugin extends the {@link module:widget/widget~Widget `Widget`} plugin and injects the user interface\n * with two buttons into each widget instance in the editor. Each of the buttons can be clicked by the\n * user if the widget is next to the \"tight spot\". Once clicked, a paragraph is created with the selection anchored\n * in it so that users can type (or insert content, paste, etc.) straight away.\n */ class WidgetTypeAround extends Plugin {\n    /**\n\t * A reference to the model widget element that has the fake caret active\n\t * on either side of it. It is later used to remove CSS classes associated with the fake caret\n\t * when the widget no longer needs it.\n\t */ _currentFakeCaretModelElement = null;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetTypeAround';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Enter,\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        // Set a CSS class on the view editing root when the plugin is disabled so all the buttons\n        // and lines visually disappear. All the interactions are disabled in individual plugin methods.\n        this.on('change:isEnabled', (evt, data, isEnabled)=>{\n            editingView.change((writer)=>{\n                for (const root of editingView.document.roots){\n                    if (isEnabled) {\n                        writer.removeClass(PLUGIN_DISABLED_EDITING_ROOT_CLASS, root);\n                    } else {\n                        writer.addClass(PLUGIN_DISABLED_EDITING_ROOT_CLASS, root);\n                    }\n                }\n            });\n            if (!isEnabled) {\n                editor.model.change((writer)=>{\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                });\n            }\n        });\n        this._enableTypeAroundUIInjection();\n        this._enableInsertingParagraphsOnButtonClick();\n        this._enableInsertingParagraphsOnEnterKeypress();\n        this._enableInsertingParagraphsOnTypingKeystroke();\n        this._enableTypeAroundFakeCaretActivationUsingKeyboardArrows();\n        this._enableDeleteIntegration();\n        this._enableInsertContentIntegration();\n        this._enableInsertObjectIntegration();\n        this._enableDeleteContentIntegration();\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._currentFakeCaretModelElement = null;\n    }\n    /**\n\t * Inserts a new paragraph next to a widget element with the selection anchored in it.\n\t *\n\t * **Note**: This method is heavily user-oriented and will both focus the editing view and scroll\n\t * the viewport to the selection in the inserted paragraph.\n\t *\n\t * @param widgetModelElement The model widget element next to which a paragraph is inserted.\n\t * @param position The position where the paragraph is inserted. Either `'before'` or `'after'` the widget.\n\t */ _insertParagraph(widgetModelElement, position) {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const attributesToCopy = editor.model.schema.getAttributesWithProperty(widgetModelElement, 'copyOnReplace', true);\n        editor.execute('insertParagraph', {\n            position: editor.model.createPositionAt(widgetModelElement, position),\n            attributes: attributesToCopy\n        });\n        editingView.focus();\n        editingView.scrollToTheSelection();\n    }\n    /**\n\t * A wrapper for the {@link module:utils/emittermixin~Emitter#listenTo} method that executes the callbacks only\n\t * when the plugin {@link #isEnabled is enabled}.\n\t *\n\t * @param emitter The object that fires the event.\n\t * @param event The name of the event.\n\t * @param callback The function to be called on event.\n\t * @param options Additional options.\n\t * @param options.priority The priority of this event callback. The higher the priority value the sooner\n\t * the callback will be fired. Events having the same priority are called in the order they were added.\n\t */ _listenToIfEnabled(emitter, event, callback, options) {\n        this.listenTo(emitter, event, (...args)=>{\n            // Do not respond if the plugin is disabled.\n            if (this.isEnabled) {\n                callback(...args);\n            }\n        }, options);\n    }\n    /**\n\t * Similar to {@link #_insertParagraph}, this method inserts a paragraph except that it\n\t * does not expect a position. Instead, it performs the insertion next to a selected widget\n\t * according to the `widget-type-around` model selection attribute value (fake caret position).\n\t *\n\t * Because this method requires the `widget-type-around` attribute to be set,\n\t * the insertion can only happen when the widget's fake caret is active (e.g. activated\n\t * using the keyboard).\n\t *\n\t * @returns Returns `true` when the paragraph was inserted (the attribute was present) and `false` otherwise.\n\t */ _insertParagraphAccordingToFakeCaretPosition() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(modelSelection);\n        if (!typeAroundFakeCaretPosition) {\n            return false;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( '%c[WidgetTypeAround]%c Fake caret -> insert paragraph',\n        // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', ''\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        const selectedModelElement = modelSelection.getSelectedElement();\n        this._insertParagraph(selectedModelElement, typeAroundFakeCaretPosition);\n        return true;\n    }\n    /**\n\t * Creates a listener in the editing conversion pipeline that injects the widget type around\n\t * UI into every single widget instance created in the editor.\n\t *\n\t * The UI is delivered as a {@link module:engine/view/uielement~UIElement}\n\t * wrapper which renders DOM buttons that users can use to insert paragraphs.\n\t */ _enableTypeAroundUIInjection() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.locale.t;\n        const buttonTitles = {\n            before: t('Insert paragraph before block'),\n            after: t('Insert paragraph after block')\n        };\n        editor.editing.downcastDispatcher.on('insert', (evt, data, conversionApi)=>{\n            const viewElement = conversionApi.mapper.toViewElement(data.item);\n            if (!viewElement) {\n                return;\n            }\n            // Filter out non-widgets and inline widgets.\n            if (isTypeAroundWidget(viewElement, data.item, schema)) {\n                injectUIIntoWidget(conversionApi.writer, buttonTitles, viewElement);\n                const widgetLabel = viewElement.getCustomProperty('widgetLabel');\n                widgetLabel.push(()=>{\n                    return this.isEnabled ? t('Press Enter to type after or press Shift + Enter to type before the widget') : '';\n                });\n            }\n        }, {\n            priority: 'low'\n        });\n    }\n    /**\n\t * Brings support for the fake caret that appears when either:\n\t *\n\t * * the selection moves to a widget from a position next to it using arrow keys,\n\t * * the arrow key is pressed when the widget is already selected.\n\t *\n\t * The fake caret lets the user know that they can start typing or just press\n\t * <kbd>Enter</kbd> to insert a paragraph at the position next to a widget as suggested by the fake caret.\n\t *\n\t * The fake caret disappears when the user changes the selection or the editor\n\t * gets blurred.\n\t *\n\t * The whole idea is as follows:\n\t *\n\t * 1. A user does one of the 2 scenarios described at the beginning.\n\t * 2. The \"keydown\" listener is executed and the decision is made whether to show or hide the fake caret.\n\t * 3. If it should show up, the `widget-type-around` model selection attribute is set indicating\n\t *    on which side of the widget it should appear.\n\t * 4. The selection dispatcher reacts to the selection attribute and sets CSS classes responsible for the\n\t *    fake caret on the view widget.\n\t * 5. If the fake caret should disappear, the selection attribute is removed and the dispatcher\n\t *    does the CSS class clean-up in the view.\n\t * 6. Additionally, `change:range` and `FocusTracker#isFocused` listeners also remove the selection\n\t *    attribute (the former also removes widget CSS classes).\n\t */ _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const schema = model.schema;\n        const editingView = editor.editing.view;\n        // This is the main listener responsible for the fake caret.\n        // Note: The priority must precede the default Widget class keydown handler (\"high\").\n        this._listenToIfEnabled(editingView.document, 'arrowKey', (evt, domEventData)=>{\n            this._handleArrowKeyPress(evt, domEventData);\n        }, {\n            context: [\n                isWidget,\n                '$text'\n            ],\n            priority: 'high'\n        });\n        // This listener makes sure the widget type around selection attribute will be gone from the model\n        // selection as soon as the model range changes. This attribute only makes sense when a widget is selected\n        // (and the \"fake horizontal caret\" is visible) so whenever the range changes (e.g. selection moved somewhere else),\n        // let's get rid of the attribute so that the selection downcast dispatcher isn't even bothered.\n        this._listenToIfEnabled(modelSelection, 'change:range', (evt, data)=>{\n            // Do not reset the selection attribute when the change was indirect.\n            if (!data.directChange) {\n                return;\n            }\n            // Get rid of the widget type around attribute of the selection on every change:range.\n            // If the range changes, it means for sure, the user is no longer in the active (\"fake horizontal caret\") mode.\n            editor.model.change((writer)=>{\n                writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n            });\n        });\n        // Get rid of the widget type around attribute of the selection on every document change\n        // that makes widget not selected any more (i.e. widget was removed).\n        this._listenToIfEnabled(model.document, 'change:data', ()=>{\n            const selectedModelElement = modelSelection.getSelectedElement();\n            if (selectedModelElement) {\n                const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n                if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                    return;\n                }\n            }\n            editor.model.change((writer)=>{\n                writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n            });\n        });\n        // React to changes of the model selection attribute made by the arrow keys listener.\n        // If the block widget is selected and the attribute changes, downcast the attribute to special\n        // CSS classes associated with the active (\"fake horizontal caret\") mode of the widget.\n        this._listenToIfEnabled(editor.editing.downcastDispatcher, 'selection', (evt, data, conversionApi)=>{\n            const writer = conversionApi.writer;\n            if (this._currentFakeCaretModelElement) {\n                const selectedViewElement = conversionApi.mapper.toViewElement(this._currentFakeCaretModelElement);\n                if (selectedViewElement) {\n                    // Get rid of CSS classes associated with the active (\"fake horizontal caret\") mode from the view widget.\n                    writer.removeClass(POSSIBLE_INSERTION_POSITIONS.map(positionToWidgetCssClass), selectedViewElement);\n                    this._currentFakeCaretModelElement = null;\n                }\n            }\n            const selectedModelElement = data.selection.getSelectedElement();\n            if (!selectedModelElement) {\n                return;\n            }\n            const selectedViewElement = conversionApi.mapper.toViewElement(selectedModelElement);\n            if (!isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(data.selection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            writer.addClass(positionToWidgetCssClass(typeAroundFakeCaretPosition), selectedViewElement);\n            // Remember the view widget that got the \"fake-caret\" CSS class. This class should be removed ASAP when the\n            // selection changes\n            this._currentFakeCaretModelElement = selectedModelElement;\n        });\n        this._listenToIfEnabled(editor.ui.focusTracker, 'change:isFocused', (evt, name, isFocused)=>{\n            if (!isFocused) {\n                editor.model.change((writer)=>{\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                });\n            }\n        });\n        function positionToWidgetCssClass(position) {\n            return `ck-widget_type-around_show-fake-caret_${position}`;\n        }\n    }\n    /**\n\t * A listener executed on each \"keydown\" in the view document, a part of\n\t * {@link #_enableTypeAroundFakeCaretActivationUsingKeyboardArrows}.\n\t *\n\t * It decides whether the arrow keypress should activate the fake caret or not (also whether it should\n\t * be deactivated).\n\t *\n\t * The fake caret activation is done by setting the `widget-type-around` model selection attribute\n\t * in this listener, and stopping and preventing the event that would normally be handled by the widget\n\t * plugin that is responsible for the regular keyboard navigation near/across all widgets (that\n\t * includes inline widgets, which are ignored by the widget type around plugin).\n\t */ _handleArrowKeyPress(evt, domEventData) {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const schema = model.schema;\n        const editingView = editor.editing.view;\n        const keyCode = domEventData.keyCode;\n        const isForward = isForwardArrowKeyCode(keyCode, editor.locale.contentLanguageDirection);\n        const selectedViewElement = editingView.document.selection.getSelectedElement();\n        const selectedModelElement = editor.editing.mapper.toModelElement(selectedViewElement);\n        let shouldStopAndPreventDefault;\n        // Handle keyboard navigation when a type-around-compatible widget is currently selected.\n        if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressOnSelectedWidget(isForward);\n        } else if (modelSelection.isCollapsed) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressWhenSelectionNextToAWidget(isForward);\n        } else if (!domEventData.shiftKey) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressWhenNonCollapsedSelection(isForward);\n        }\n        if (shouldStopAndPreventDefault) {\n            domEventData.preventDefault();\n            evt.stop();\n        }\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected and activates or deactivates\n\t * the fake caret for that widget, depending on the current value of the `widget-type-around` model\n\t * selection attribute and the direction of the pressed arrow key.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressOnSelectedWidget(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(modelSelection);\n        return model.change((writer)=>{\n            // If the fake caret is displayed...\n            if (typeAroundFakeCaretPosition) {\n                const isLeavingWidget = typeAroundFakeCaretPosition === (isForward ? 'after' : 'before');\n                // If the keyboard arrow works against the value of the selection attribute...\n                // then remove the selection attribute but prevent default DOM actions\n                // and do not let the Widget plugin listener move the selection. This brings\n                // the widget back to the state, for instance, like if was selected using the mouse.\n                //\n                // **Note**: If leaving the widget when the fake caret is active, then the default\n                // Widget handler will change the selection and, in turn, this will automatically discard\n                // the selection attribute.\n                if (!isLeavingWidget) {\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                    return true;\n                }\n            } else {\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before');\n                return true;\n            }\n            return false;\n        });\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when **no** widget is selected but the selection is **directly** next\n\t * to one and upon the fake caret should become active for this widget upon arrow keypress\n\t * (AKA entering/selecting the widget).\n\t *\n\t * **Note**: This code mirrors the implementation from the widget plugin but also adds the selection attribute.\n\t * Unfortunately, there is no safe way to let the widget plugin do the selection part first and then just set the\n\t * selection attribute here in the widget type around plugin. This is why this code must duplicate some from the widget plugin.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressWhenSelectionNextToAWidget(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const widgetPlugin = editor.plugins.get('Widget');\n        // This is the widget the selection is about to be set on.\n        const modelElementNextToSelection = widgetPlugin._getObjectElementNextToSelection(isForward);\n        const viewElementNextToSelection = editor.editing.mapper.toViewElement(modelElementNextToSelection);\n        if (isTypeAroundWidget(viewElementNextToSelection, modelElementNextToSelection, schema)) {\n            model.change((writer)=>{\n                widgetPlugin._setSelectionOverElement(modelElementNextToSelection);\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'before' : 'after');\n            });\n            // The change() block above does the same job as the Widget plugin. The event can\n            // be safely canceled.\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected (together with some other content)\n\t * and the widget is the first or last element in the selection. It activates or deactivates the fake caret for that widget.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressWhenNonCollapsedSelection(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const mapper = editor.editing.mapper;\n        const modelSelection = model.document.selection;\n        const selectedModelNode = isForward ? modelSelection.getLastPosition().nodeBefore : modelSelection.getFirstPosition().nodeAfter;\n        const selectedViewNode = mapper.toViewElement(selectedModelNode);\n        // There is a widget at the collapse position so collapse the selection to the fake caret on it.\n        if (isTypeAroundWidget(selectedViewNode, selectedModelNode, schema)) {\n            model.change((writer)=>{\n                writer.setSelection(selectedModelNode, 'on');\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before');\n            });\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Registers a `mousedown` listener for the view document which intercepts events\n\t * coming from the widget type around UI, which happens when a user clicks one of the buttons\n\t * that insert a paragraph next to a widget.\n\t */ _enableInsertingParagraphsOnButtonClick() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        this._listenToIfEnabled(editingView.document, 'mousedown', (evt, domEventData)=>{\n            const button = getClosestTypeAroundDomButton(domEventData.domTarget);\n            if (!button) {\n                return;\n            }\n            const buttonPosition = getTypeAroundButtonPosition(button);\n            const widgetViewElement = getClosestWidgetViewElement(button, editingView.domConverter);\n            const widgetModelElement = editor.editing.mapper.toModelElement(widgetViewElement);\n            this._insertParagraph(widgetModelElement, buttonPosition);\n            domEventData.preventDefault();\n            evt.stop();\n        });\n    }\n    /**\n\t * Creates the <kbd>Enter</kbd> key listener on the view document that allows the user to insert a paragraph\n\t * near the widget when either:\n\t *\n\t * * The fake caret was first activated using the arrow keys,\n\t * * The entire widget is selected in the model.\n\t *\n\t * In the first case, the new paragraph is inserted according to the `widget-type-around` selection\n\t * attribute (see {@link #_handleArrowKeyPress}).\n\t *\n\t * In the second case, the new paragraph is inserted based on whether a soft (<kbd>Shift</kbd>+<kbd>Enter</kbd>) keystroke\n\t * was pressed or not.\n\t */ _enableInsertingParagraphsOnEnterKeypress() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const editingView = editor.editing.view;\n        this._listenToIfEnabled(editingView.document, 'enter', (evt, domEventData)=>{\n            // This event could be triggered from inside the widget but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            const selectedModelElement = selection.getSelectedElement();\n            const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n            const schema = editor.model.schema;\n            let wasHandled;\n            // First check if the widget is selected and there's a type around selection attribute associated\n            // with the fake caret that would tell where to insert a new paragraph.\n            if (this._insertParagraphAccordingToFakeCaretPosition()) {\n                wasHandled = true;\n            } else if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                this._insertParagraph(selectedModelElement, domEventData.isSoft ? 'before' : 'after');\n                wasHandled = true;\n            }\n            if (wasHandled) {\n                domEventData.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: isWidget\n        });\n    }\n    /**\n\t * Similar to the {@link #_enableInsertingParagraphsOnEnterKeypress}, it allows the user\n\t * to insert a paragraph next to a widget when the fake caret was activated using arrow\n\t * keys but it responds to typing instead of <kbd>Enter</kbd>.\n\t *\n\t * Listener enabled by this method will insert a new paragraph according to the `widget-type-around`\n\t * model selection attribute as the user simply starts typing, which creates the impression that the fake caret\n\t * behaves like a real one rendered by the browser (AKA your text appears where the caret was).\n\t *\n\t * **Note**: At the moment this listener creates 2 undo steps: one for the `insertParagraph` command\n\t * and another one for actual typing. It is not a disaster but this may need to be fixed\n\t * sooner or later.\n\t */ _enableInsertingParagraphsOnTypingKeystroke() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        // Note: The priority must precede the default Input plugin insertText handler.\n        this._listenToIfEnabled(viewDocument, 'insertText', (evt, data)=>{\n            if (this._insertParagraphAccordingToFakeCaretPosition()) {\n                // The view selection in the event data contains the widget. If the new paragraph\n                // was inserted, modify the view selection passed along with the insertText event\n                // so the default event handler in the Input plugin starts typing inside the paragraph.\n                // Otherwise, the typing would be over the widget.\n                data.selection = viewDocument.selection;\n            }\n        }, {\n            priority: 'high'\n        });\n        if (env.isAndroid) {\n            // On Android with English keyboard, the composition starts just by putting caret\n            // at the word end or by selecting a table column. This is not a real composition started.\n            // Trigger delete content on first composition key pressed.\n            this._listenToIfEnabled(viewDocument, 'keydown', (evt, data)=>{\n                if (data.keyCode == 229) {\n                    this._insertParagraphAccordingToFakeCaretPosition();\n                }\n            });\n        } else {\n            // Note: The priority must precede the default Input plugin compositionstart handler (to call it before delete content).\n            this._listenToIfEnabled(viewDocument, 'compositionstart', ()=>{\n                this._insertParagraphAccordingToFakeCaretPosition();\n            }, {\n                priority: 'high'\n            });\n        }\n    }\n    /**\n\t * It creates a \"delete\" event listener on the view document to handle cases when the <kbd>Delete</kbd> or <kbd>Backspace</kbd>\n\t * is pressed and the fake caret is currently active.\n\t *\n\t * The fake caret should create an illusion of a real browser caret so that when it appears before or after\n\t * a widget, pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> should remove a widget or delete the content\n\t * before or after a widget (depending on the content surrounding the widget).\n\t */ _enableDeleteIntegration() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const model = editor.model;\n        const schema = model.schema;\n        this._listenToIfEnabled(editingView.document, 'delete', (evt, domEventData)=>{\n            // This event could be triggered from inside the widget but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(model.document.selection);\n            // This listener handles only these cases when the fake caret is active.\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            const direction = domEventData.direction;\n            const selectedModelWidget = model.document.selection.getSelectedElement();\n            const isFakeCaretBefore = typeAroundFakeCaretPosition === 'before';\n            const isDeleteForward = direction == 'forward';\n            const shouldDeleteEntireWidget = isFakeCaretBefore === isDeleteForward;\n            if (shouldDeleteEntireWidget) {\n                editor.execute('delete', {\n                    selection: model.createSelection(selectedModelWidget, 'on')\n                });\n            } else {\n                const range = schema.getNearestSelectionRange(model.createPositionAt(selectedModelWidget, typeAroundFakeCaretPosition), direction);\n                // If there is somewhere to move selection to, then there will be something to delete.\n                if (range) {\n                    // If the range is NOT collapsed, then we know that the range contains an object (see getNearestSelectionRange() docs).\n                    if (!range.isCollapsed) {\n                        model.change((writer)=>{\n                            writer.setSelection(range);\n                            editor.execute(isDeleteForward ? 'deleteForward' : 'delete');\n                        });\n                    } else {\n                        const probe = model.createSelection(range.start);\n                        model.modifySelection(probe, {\n                            direction\n                        });\n                        // If the range is collapsed, let's see if a non-collapsed range exists that can could be deleted.\n                        // If such range exists, use the editor command because it it safe for collaboration (it merges where it can).\n                        if (!probe.focus.isEqual(range.start)) {\n                            model.change((writer)=>{\n                                writer.setSelection(range);\n                                editor.execute(isDeleteForward ? 'deleteForward' : 'delete');\n                            });\n                        } else {\n                            const deepestEmptyRangeAncestor = getDeepestEmptyElementAncestor(schema, range.start.parent);\n                            model.deleteContent(model.createSelection(deepestEmptyRangeAncestor, 'on'), {\n                                doNotAutoparagraph: true\n                            });\n                        }\n                    }\n                }\n            }\n            // If some content was deleted, don't let the handler from the Widget plugin kick in.\n            // If nothing was deleted, then the default handler will have nothing to do anyway.\n            domEventData.preventDefault();\n            evt.stop();\n        }, {\n            context: isWidget\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertContent} event listener that, for instance, allows the user to paste\n\t * content near a widget when the fake caret is first activated using the arrow keys.\n\t *\n\t * The content is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */ _enableInsertContentIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'insertContent', (evt, [content, selectable])=>{\n            if (selectable && !selectable.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            evt.stop();\n            return model.change((writer)=>{\n                const selectedElement = documentSelection.getSelectedElement();\n                const position = model.createPositionAt(selectedElement, typeAroundFakeCaretPosition);\n                const selection = writer.createSelection(position);\n                const result = model.insertContent(content, selection);\n                writer.setSelection(selection);\n                return result;\n            });\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertObject} event listener that modifies the\n\t * `options.findOptimalPosition`parameter to position of fake caret in relation to selected element\n\t * to reflect user's intent of desired insertion position.\n\t *\n\t * The object is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */ _enableInsertObjectIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'insertObject', (evt, args)=>{\n            const [, selectable, options = {}] = args;\n            if (selectable && !selectable.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            options.findOptimalPosition = typeAroundFakeCaretPosition;\n            args[3] = options;\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:deleteContent} event listener to block the event when the fake\n\t * caret is active.\n\t *\n\t * This is required for cases that trigger {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n\t * before calling {@link module:engine/model/model~Model#insertContent `model.insertContent()`} like, for instance,\n\t * plain text pasting.\n\t */ _enableDeleteContentIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'deleteContent', (evt, [selection])=>{\n            if (selection && !selection.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            // Disable removing the selection content while pasting plain text.\n            if (typeAroundFakeCaretPosition) {\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n}\n/**\n * Injects the type around UI into a view widget instance.\n */ function injectUIIntoWidget(viewWriter, buttonTitles, widgetViewElement) {\n    const typeAroundWrapper = viewWriter.createUIElement('div', {\n        class: 'ck ck-reset_all ck-widget__type-around'\n    }, function(domDocument) {\n        const wrapperDomElement = this.toDomElement(domDocument);\n        injectButtons(wrapperDomElement, buttonTitles);\n        injectFakeCaret(wrapperDomElement);\n        return wrapperDomElement;\n    });\n    // Inject the type around wrapper into the widget's wrapper.\n    viewWriter.insert(viewWriter.createPositionAt(widgetViewElement, 'end'), typeAroundWrapper);\n}\n/**\n * FYI: Not using the IconView class because each instance would need to be destroyed to avoid memory leaks\n * and it's pretty hard to figure out when a view (widget) is gone for good so it's cheaper to use raw\n * <svg> here.\n */ function injectButtons(wrapperDomElement, buttonTitles) {\n    for (const position of POSSIBLE_INSERTION_POSITIONS){\n        const buttonTemplate = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-widget__type-around__button',\n                    `ck-widget__type-around__button_${position}`\n                ],\n                title: buttonTitles[position],\n                'aria-hidden': 'true'\n            },\n            children: [\n                wrapperDomElement.ownerDocument.importNode(RETURN_ARROW_ICON_ELEMENT, true)\n            ]\n        });\n        wrapperDomElement.appendChild(buttonTemplate.render());\n    }\n}\nfunction injectFakeCaret(wrapperDomElement) {\n    const caretTemplate = new Template({\n        tag: 'div',\n        attributes: {\n            class: [\n                'ck',\n                'ck-widget__type-around__fake-caret'\n            ]\n        }\n    });\n    wrapperDomElement.appendChild(caretTemplate.render());\n}\n/**\n * Returns the ancestor of an element closest to the root which is empty. For instance,\n * for `<baz>`:\n *\n * ```\n * <foo>abc<bar><baz></baz></bar></foo>\n * ```\n *\n * it returns `<bar>`.\n */ function getDeepestEmptyElementAncestor(schema, element) {\n    let deepestEmptyAncestor = element;\n    for (const ancestor of element.getAncestors({\n        parentFirst: true\n    })){\n        if (ancestor.childCount > 1 || schema.isLimit(ancestor)) {\n            break;\n        }\n        deepestEmptyAncestor = ancestor;\n    }\n    return deepestEmptyAncestor;\n}\n\n/**\n * Returns 'keydown' handler for up/down arrow keys that modifies the caret movement if it's in a text line next to an object.\n *\n * @param editing The editing controller.\n */ function verticalNavigationHandler(editing) {\n    const model = editing.model;\n    return (evt, data)=>{\n        const arrowUpPressed = data.keyCode == keyCodes.arrowup;\n        const arrowDownPressed = data.keyCode == keyCodes.arrowdown;\n        const expandSelection = data.shiftKey;\n        const selection = model.document.selection;\n        if (!arrowUpPressed && !arrowDownPressed) {\n            return;\n        }\n        const isForward = arrowDownPressed;\n        // Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n        // Selection for sure will not approach any object.\n        if (expandSelection && selectionWillShrink(selection, isForward)) {\n            return;\n        }\n        // Find a range between selection and closest limit element.\n        const range = findTextRangeFromSelection(editing, selection, isForward);\n        // There is no selection position inside the limit element.\n        if (!range) {\n            return;\n        }\n        // If already at the edge of a limit element.\n        if (range.isCollapsed) {\n            // A collapsed selection at limit edge - nothing more to do.\n            if (selection.isCollapsed) {\n                return;\n            } else if (expandSelection) {\n                return;\n            }\n        }\n        // If the range is a single line (there is no word wrapping) then move the selection to the position closest to the limit element.\n        //\n        // We can't move the selection directly to the isObject element (eg. table cell) because of dual position at the end/beginning\n        // of wrapped line (it's at the same time at the end of one line and at the start of the next line).\n        if (range.isCollapsed || isSingleLineRange(editing, range, isForward)) {\n            model.change((writer)=>{\n                const newPosition = isForward ? range.end : range.start;\n                if (expandSelection) {\n                    const newSelection = model.createSelection(selection.anchor);\n                    newSelection.setFocus(newPosition);\n                    writer.setSelection(newSelection);\n                } else {\n                    writer.setSelection(newPosition);\n                }\n            });\n            evt.stop();\n            data.preventDefault();\n            data.stopPropagation();\n        }\n    };\n}\n/**\n * Finds the range between selection and closest limit element (in the direction of navigation).\n * The position next to limit element is adjusted to the closest allowed `$text` position.\n *\n * Returns `null` if, according to the schema, the resulting range cannot contain a `$text` element.\n *\n * @param editing The editing controller.\n * @param selection The current selection.\n * @param isForward The expected navigation direction.\n */ function findTextRangeFromSelection(editing, selection, isForward) {\n    const model = editing.model;\n    if (isForward) {\n        const startPosition = selection.isCollapsed ? selection.focus : selection.getLastPosition();\n        const endPosition = getNearestNonInlineLimit(model, startPosition, 'forward');\n        // There is no limit element, browser should handle this.\n        if (!endPosition) {\n            return null;\n        }\n        const range = model.createRange(startPosition, endPosition);\n        const lastRangePosition = getNearestTextPosition(model.schema, range, 'backward');\n        if (lastRangePosition) {\n            return model.createRange(startPosition, lastRangePosition);\n        }\n        return null;\n    } else {\n        const endPosition = selection.isCollapsed ? selection.focus : selection.getFirstPosition();\n        const startPosition = getNearestNonInlineLimit(model, endPosition, 'backward');\n        // There is no limit element, browser should handle this.\n        if (!startPosition) {\n            return null;\n        }\n        const range = model.createRange(startPosition, endPosition);\n        const firstRangePosition = getNearestTextPosition(model.schema, range, 'forward');\n        if (firstRangePosition) {\n            return model.createRange(firstRangePosition, endPosition);\n        }\n        return null;\n    }\n}\n/**\n * Finds the limit element position that is closest to startPosition.\n *\n * @param direction Search direction.\n */ function getNearestNonInlineLimit(model, startPosition, direction) {\n    const schema = model.schema;\n    const range = model.createRangeIn(startPosition.root);\n    const walkerValueType = direction == 'forward' ? 'elementStart' : 'elementEnd';\n    for (const { previousPosition, item, type } of range.getWalker({\n        startPosition,\n        direction\n    })){\n        if (schema.isLimit(item) && !schema.isInline(item)) {\n            return previousPosition;\n        }\n        // Stop looking for isLimit element if the next element is a block element (it is for sure not single line).\n        if (type == walkerValueType && schema.isBlock(item)) {\n            return null;\n        }\n    }\n    return null;\n}\n/**\n * Basing on the provided range, finds the first or last (depending on `direction`) position inside the range\n * that can contain `$text` (according to schema).\n *\n * @param schema The schema.\n * @param range The range to find the position in.\n * @param direction Search direction.\n * @returns The nearest selection position.\n *\n */ function getNearestTextPosition(schema, range, direction) {\n    const position = direction == 'backward' ? range.end : range.start;\n    if (schema.checkChild(position, '$text')) {\n        return position;\n    }\n    for (const { nextPosition } of range.getWalker({\n        direction\n    })){\n        if (schema.checkChild(nextPosition, '$text')) {\n            return nextPosition;\n        }\n    }\n    return null;\n}\n/**\n * Checks if the DOM range corresponding to the provided model range renders as a single line by analyzing DOMRects\n * (verifying if they visually wrap content to the next line).\n *\n * @param editing The editing controller.\n * @param modelRange The current table cell content range.\n * @param isForward The expected navigation direction.\n */ function isSingleLineRange(editing, modelRange, isForward) {\n    const model = editing.model;\n    const domConverter = editing.view.domConverter;\n    // Wrapped lines contain exactly the same position at the end of current line\n    // and at the beginning of next line. That position's client rect is at the end\n    // of current line. In case of caret at first position of the last line that 'dual'\n    // position would be detected as it's not the last line.\n    if (isForward) {\n        const probe = model.createSelection(modelRange.start);\n        model.modifySelection(probe);\n        // If the new position is at the end of the container then we can't use this position\n        // because it would provide incorrect result for eg caption of image and selection\n        // just before end of it. Also in this case there is no \"dual\" position.\n        if (!probe.focus.isAtEnd && !modelRange.start.isEqual(probe.focus)) {\n            modelRange = model.createRange(probe.focus, modelRange.end);\n        }\n    }\n    const viewRange = editing.mapper.toViewRange(modelRange);\n    const domRange = domConverter.viewRangeToDom(viewRange);\n    const rects = Rect.getDomRangeRects(domRange);\n    let boundaryVerticalPosition;\n    for (const rect of rects){\n        if (boundaryVerticalPosition === undefined) {\n            boundaryVerticalPosition = Math.round(rect.bottom);\n            continue;\n        }\n        // Let's check if this rect is in new line.\n        if (Math.round(rect.top) >= boundaryVerticalPosition) {\n            return false;\n        }\n        boundaryVerticalPosition = Math.max(boundaryVerticalPosition, Math.round(rect.bottom));\n    }\n    return true;\n}\nfunction selectionWillShrink(selection, isForward) {\n    return !selection.isCollapsed && selection.isBackward == isForward;\n}\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n */ class Widget extends Plugin {\n    /**\n\t * Holds previously selected widgets.\n\t */ _previouslySelected = new Set();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Widget';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            WidgetTypeAround,\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const t = editor.t;\n        // Model to view selection converter.\n        // Converts selection placed over widget element to fake selection.\n        //\n        // By default, the selection is downcasted by the engine to surround the attribute element, even though its only\n        // child is an inline widget. A similar thing also happens when a collapsed marker is rendered as a UI element\n        // next to an inline widget: the view selection contains both the widget and the marker.\n        //\n        // This prevents creating a correct fake selection when this inline widget is selected. Normalize the selection\n        // in these cases based on the model:\n        //\n        //\t\t[<attributeElement><inlineWidget /></attributeElement>] -> <attributeElement>[<inlineWidget />]</attributeElement>\n        //\t\t[<uiElement></uiElement><inlineWidget />] -> <uiElement></uiElement>[<inlineWidget />]\n        //\n        // Thanks to this:\n        //\n        // * fake selection can be set correctly,\n        // * any logic depending on (View)Selection#getSelectedElement() also works OK.\n        //\n        // See https://github.com/ckeditor/ckeditor5/issues/9524.\n        this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi)=>{\n            const viewWriter = conversionApi.writer;\n            const modelSelection = data.selection;\n            // The collapsed selection can't contain any widget.\n            if (modelSelection.isCollapsed) {\n                return;\n            }\n            const selectedModelElement = modelSelection.getSelectedElement();\n            if (!selectedModelElement) {\n                return;\n            }\n            const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n            if (!isWidget(selectedViewElement)) {\n                return;\n            }\n            if (!conversionApi.consumable.consume(modelSelection, 'selection')) {\n                return;\n            }\n            viewWriter.setSelection(viewWriter.createRangeOn(selectedViewElement), {\n                fake: true,\n                label: getLabel(selectedViewElement)\n            });\n        });\n        // Mark all widgets inside the selection with the css class.\n        // This handler is registered at the 'low' priority so it's triggered after the real selection conversion.\n        this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi)=>{\n            // Remove selected class from previously selected widgets.\n            this._clearPreviouslySelectedWidgets(conversionApi.writer);\n            const viewWriter = conversionApi.writer;\n            const viewSelection = viewWriter.document.selection;\n            let lastMarked = null;\n            for (const range of viewSelection.getRanges()){\n                // Note: There could be multiple selected widgets in a range but no fake selection.\n                // All of them must be marked as selected, for instance [<widget></widget><widget></widget>]\n                for (const value of range){\n                    const node = value.item;\n                    // Do not mark nested widgets in selected one. See: #4594\n                    if (isWidget(node) && !isChild(node, lastMarked)) {\n                        viewWriter.addClass(WIDGET_SELECTED_CLASS_NAME, node);\n                        this._previouslySelected.add(node);\n                        lastMarked = node;\n                    }\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n        // If mouse down is pressed on widget - create selection over whole widget.\n        view.addObserver(MouseObserver);\n        this.listenTo(viewDocument, 'mousedown', (...args)=>this._onMousedown(...args));\n        // There are two keydown listeners working on different priorities. This allows other\n        // features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n        // and customize the behavior even further in different content/selection scenarios.\n        //\n        // * The first listener handles changing the selection on arrow key press\n        // if the widget is selected or if the selection is next to a widget and the widget\n        // should become selected upon the arrow key press.\n        //\n        // * The second (late) listener makes sure the default browser action on arrow key press is\n        // prevented when a widget is selected. This prevents the selection from being moved\n        // from a fake selection container.\n        this.listenTo(viewDocument, 'arrowKey', (...args)=>{\n            this._handleSelectionChangeOnArrowKeyPress(...args);\n        }, {\n            context: [\n                isWidget,\n                '$text'\n            ]\n        });\n        this.listenTo(viewDocument, 'arrowKey', (...args)=>{\n            this._preventDefaultOnArrowKeyPress(...args);\n        }, {\n            context: '$root'\n        });\n        this.listenTo(viewDocument, 'arrowKey', verticalNavigationHandler(this.editor.editing), {\n            context: '$text'\n        });\n        // Handle custom delete behaviour.\n        this.listenTo(viewDocument, 'delete', (evt, data)=>{\n            if (this._handleDelete(data.direction == 'forward')) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: '$root'\n        });\n        // Handle Tab key while a widget is selected.\n        this.listenTo(viewDocument, 'tab', (evt, data)=>{\n            // This event could be triggered from inside the widget, but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            if (data.shiftKey) {\n                return;\n            }\n            if (this._selectFirstNestedEditable()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: isWidget,\n            priority: 'low'\n        });\n        // Handle Shift+Tab key while caret inside a widget editable.\n        this.listenTo(viewDocument, 'tab', (evt, data)=>{\n            if (!data.shiftKey) {\n                return;\n            }\n            if (this._selectAncestorWidget()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            priority: 'low'\n        });\n        // Handle Esc key while inside a nested editable.\n        this.listenTo(viewDocument, 'keydown', (evt, data)=>{\n            if (data.keystroke != keyCodes.esc) {\n                return;\n            }\n            if (this._selectAncestorWidget()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            priority: 'low'\n        });\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfoGroup({\n            id: 'widget',\n            label: t('Keystrokes that can be used when a widget is selected (for example: image, table, etc.)'),\n            keystrokes: [\n                {\n                    label: t('Move focus from an editable area back to the parent widget'),\n                    keystroke: 'Esc'\n                },\n                {\n                    label: t('Insert a new paragraph directly after a widget'),\n                    keystroke: 'Enter'\n                },\n                {\n                    label: t('Insert a new paragraph directly before a widget'),\n                    keystroke: 'Shift+Enter'\n                },\n                {\n                    label: t('Move the caret to allow typing directly before a widget'),\n                    keystroke: [\n                        [\n                            'arrowup'\n                        ],\n                        [\n                            'arrowleft'\n                        ]\n                    ]\n                },\n                {\n                    label: t('Move the caret to allow typing directly after a widget'),\n                    keystroke: [\n                        [\n                            'arrowdown'\n                        ],\n                        [\n                            'arrowright'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n\t */ _onMousedown(eventInfo, domEventData) {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        let element = domEventData.target;\n        // Some of DOM elements have no view element representation so it may be null.\n        if (!element) {\n            return;\n        }\n        // If triple click should select entire paragraph.\n        if (domEventData.domEvent.detail >= 3) {\n            if (this._selectBlockContent(element)) {\n                domEventData.preventDefault();\n            }\n            return;\n        }\n        // If target is not a widget element - check if one of the ancestors is.\n        if (!isWidget(element)) {\n            const editableOrWidgetElement = findClosestEditableOrWidgetAncestor(element);\n            if (!editableOrWidgetElement) {\n                return;\n            }\n            if (isWidget(editableOrWidgetElement)) {\n                element = editableOrWidgetElement;\n            } else {\n                // Pick view range from the point where the mouse was clicked.\n                const clickTargetFromPoint = getElementFromMouseEvent(view, domEventData);\n                if (clickTargetFromPoint && isWidget(clickTargetFromPoint)) {\n                    element = clickTargetFromPoint;\n                } else {\n                    return;\n                }\n            }\n        }\n        // On Android selection would jump to the first table cell, on other devices\n        // we can't block it (and don't need to) because of drag and drop support.\n        if (env.isAndroid) {\n            domEventData.preventDefault();\n        }\n        // Focus editor if is not focused already.\n        if (!viewDocument.isFocused) {\n            view.focus();\n        }\n        // Create model selection over widget.\n        const modelElement = editor.editing.mapper.toModelElement(element);\n        this._setSelectionOverElement(modelElement);\n    }\n    /**\n\t * Selects entire block content, e.g. on triple click it selects entire paragraph.\n\t */ _selectBlockContent(element) {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const schema = model.schema;\n        const viewElement = mapper.findMappedViewAncestor(this.editor.editing.view.createPositionAt(element, 0));\n        const modelElement = findTextBlockAncestor(mapper.toModelElement(viewElement), model.schema);\n        if (!modelElement) {\n            return false;\n        }\n        model.change((writer)=>{\n            const nextTextBlock = !schema.isLimit(modelElement) ? findNextTextBlock(writer.createPositionAfter(modelElement), schema) : null;\n            const start = writer.createPositionAt(modelElement, 0);\n            const end = nextTextBlock ? writer.createPositionAt(nextTextBlock, 0) : writer.createPositionAt(modelElement, 'end');\n            writer.setSelection(writer.createRange(start, end));\n        });\n        return true;\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and changes\n\t * the model selection when:\n\t *\n\t * * arrow key is pressed when the widget is selected,\n\t * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n\t *\n\t * See {@link #_preventDefaultOnArrowKeyPress}.\n\t */ _handleSelectionChangeOnArrowKeyPress(eventInfo, domEventData) {\n        const keyCode = domEventData.keyCode;\n        const model = this.editor.model;\n        const schema = model.schema;\n        const modelSelection = model.document.selection;\n        const objectElement = modelSelection.getSelectedElement();\n        const direction = getLocalizedArrowKeyCodeDirection(keyCode, this.editor.locale.contentLanguageDirection);\n        const isForward = direction == 'down' || direction == 'right';\n        const isVerticalNavigation = direction == 'up' || direction == 'down';\n        // If object element is selected.\n        if (objectElement && schema.isObject(objectElement)) {\n            const position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n            const newRange = schema.getNearestSelectionRange(position, isForward ? 'forward' : 'backward');\n            if (newRange) {\n                model.change((writer)=>{\n                    writer.setSelection(newRange);\n                });\n                domEventData.preventDefault();\n                eventInfo.stop();\n            }\n            return;\n        }\n        // Handle collapsing of the selection when there is any widget on the edge of selection.\n        // This is needed because browsers have problems with collapsing such selection.\n        if (!modelSelection.isCollapsed && !domEventData.shiftKey) {\n            const firstPosition = modelSelection.getFirstPosition();\n            const lastPosition = modelSelection.getLastPosition();\n            const firstSelectedNode = firstPosition.nodeAfter;\n            const lastSelectedNode = lastPosition.nodeBefore;\n            if (firstSelectedNode && schema.isObject(firstSelectedNode) || lastSelectedNode && schema.isObject(lastSelectedNode)) {\n                model.change((writer)=>{\n                    writer.setSelection(isForward ? lastPosition : firstPosition);\n                });\n                domEventData.preventDefault();\n                eventInfo.stop();\n            }\n            return;\n        }\n        // Return if not collapsed.\n        if (!modelSelection.isCollapsed) {\n            return;\n        }\n        // If selection is next to object element.\n        const objectElementNextToSelection = this._getObjectElementNextToSelection(isForward);\n        if (objectElementNextToSelection && schema.isObject(objectElementNextToSelection)) {\n            // Do not select an inline widget while handling up/down arrow.\n            if (schema.isInline(objectElementNextToSelection) && isVerticalNavigation) {\n                return;\n            }\n            this._setSelectionOverElement(objectElementNextToSelection);\n            domEventData.preventDefault();\n            eventInfo.stop();\n        }\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and prevents\n\t * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n\t * container.\n\t *\n\t * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n\t */ _preventDefaultOnArrowKeyPress(eventInfo, domEventData) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const objectElement = model.document.selection.getSelectedElement();\n        // If object element is selected.\n        if (objectElement && schema.isObject(objectElement)) {\n            domEventData.preventDefault();\n            eventInfo.stop();\n        }\n    }\n    /**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @param isForward Set to true if delete was performed in forward direction.\n\t * @returns Returns `true` if keys were handled correctly.\n\t */ _handleDelete(isForward) {\n        const modelDocument = this.editor.model.document;\n        const modelSelection = modelDocument.selection;\n        // Do nothing when the read only mode is enabled.\n        if (!this.editor.model.canEditAt(modelSelection)) {\n            return;\n        }\n        // Do nothing on non-collapsed selection.\n        if (!modelSelection.isCollapsed) {\n            return;\n        }\n        const objectElement = this._getObjectElementNextToSelection(isForward);\n        if (objectElement) {\n            this.editor.model.change((writer)=>{\n                let previousNode = modelSelection.anchor.parent;\n                // Remove previous element if empty.\n                while(previousNode.isEmpty){\n                    const nodeToRemove = previousNode;\n                    previousNode = nodeToRemove.parent;\n                    writer.remove(nodeToRemove);\n                }\n                this._setSelectionOverElement(objectElement);\n            });\n            return true;\n        }\n    }\n    /**\n\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n\t *\n\t * @internal\n\t */ _setSelectionOverElement(element) {\n        this.editor.model.change((writer)=>{\n            writer.setSelection(writer.createRangeOn(element));\n        });\n    }\n    /**\n\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\n\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~Schema schema} as `object`.\n\t *\n\t * @internal\n\t * @param forward Direction of checking.\n\t */ _getObjectElementNextToSelection(forward) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const modelSelection = model.document.selection;\n        // Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n        // to its current state after undo.\n        const probe = model.createSelection(modelSelection);\n        model.modifySelection(probe, {\n            direction: forward ? 'forward' : 'backward'\n        });\n        // The selection didn't change so there is nothing there.\n        if (probe.isEqual(modelSelection)) {\n            return null;\n        }\n        const objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n        if (!!objectElement && schema.isObject(objectElement)) {\n            return objectElement;\n        }\n        return null;\n    }\n    /**\n\t * Removes CSS class from previously selected widgets.\n\t */ _clearPreviouslySelectedWidgets(writer) {\n        for (const widget of this._previouslySelected){\n            writer.removeClass(WIDGET_SELECTED_CLASS_NAME, widget);\n        }\n        this._previouslySelected.clear();\n    }\n    /**\n\t * Moves the document selection into the first nested editable.\n\t */ _selectFirstNestedEditable() {\n        const editor = this.editor;\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        for (const item of viewDocument.selection.getFirstRange().getItems()){\n            if (item.is('editableElement')) {\n                const modelElement = editor.editing.mapper.toModelElement(item);\n                /* istanbul ignore next -- @preserve */ if (!modelElement) {\n                    continue;\n                }\n                const position = editor.model.createPositionAt(modelElement, 0);\n                const newRange = editor.model.schema.getNearestSelectionRange(position, 'forward');\n                editor.model.change((writer)=>{\n                    writer.setSelection(newRange);\n                });\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Updates the document selection so that it selects first ancestor widget.\n\t */ _selectAncestorWidget() {\n        const editor = this.editor;\n        const mapper = editor.editing.mapper;\n        const selection = editor.editing.view.document.selection;\n        const positionParent = selection.getFirstPosition().parent;\n        const positionParentElement = positionParent.is('$text') ? positionParent.parent : positionParent;\n        const viewElement = positionParentElement.findAncestor(isWidget);\n        if (!viewElement) {\n            return false;\n        }\n        const modelElement = mapper.toModelElement(viewElement);\n        /* istanbul ignore next -- @preserve */ if (!modelElement) {\n            return false;\n        }\n        editor.model.change((writer)=>{\n            writer.setSelection(modelElement, 'on');\n        });\n        return true;\n    }\n}\n/**\n * Finds the closest ancestor element that is either an editable element or a widget.\n *\n * @param element The element from which to start searching.\n * @returns The closest ancestor element that is either an editable element or a widget, or null if none is found.\n */ function findClosestEditableOrWidgetAncestor(element) {\n    let currentElement = element;\n    while(currentElement){\n        if (currentElement.is('editableElement') || isWidget(currentElement)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parent;\n    }\n    return null;\n}\n/**\n * Retrieves the ViewElement associated with a mouse event in the editing view.\n *\n * @param view The editing view.\n * @param domEventData The DOM event data containing the mouse event.\n * @returns The ViewElement associated with the mouse event, or null if not found.\n */ function getElementFromMouseEvent(view, domEventData) {\n    const domRange = getRangeFromMouseEvent(domEventData.domEvent);\n    let viewRange = null;\n    if (domRange) {\n        viewRange = view.domConverter.domRangeToView(domRange);\n    } else {\n        // Fallback to create range in target element. It happens frequently on Safari browser.\n        // See more: https://github.com/ckeditor/ckeditor5/issues/16978\n        viewRange = view.createRange(view.createPositionAt(domEventData.target, 0));\n    }\n    if (!viewRange) {\n        return null;\n    }\n    const viewPosition = viewRange.start;\n    if (!viewPosition.parent) {\n        return null;\n    }\n    let viewNode = viewPosition.parent;\n    if (viewPosition.parent.is('editableElement')) {\n        if (viewPosition.isAtEnd && viewPosition.nodeBefore) {\n            // Click after a widget tend to return position at the end of the editable element\n            // so use the node before it if range is at the end of a parent.\n            viewNode = viewPosition.nodeBefore;\n        } else if (viewPosition.isAtStart && viewPosition.nodeAfter) {\n            // Click before a widget tend to return position at the start of the editable element\n            // so use the node after it if range is at the start of a parent.\n            // See more: https://github.com/ckeditor/ckeditor5/issues/16992\n            viewNode = viewPosition.nodeAfter;\n        }\n    }\n    if (viewNode.is('$text')) {\n        return viewNode.parent;\n    }\n    return viewNode;\n}\n/**\n * Checks whether the specified `element` is a child of the `parent` element.\n *\n * @param element An element to check.\n * @param parent A parent for the element.\n */ function isChild(element, parent) {\n    if (!parent) {\n        return false;\n    }\n    return Array.from(element.getAncestors()).includes(parent);\n}\n/**\n * Returns nearest text block ancestor.\n */ function findTextBlockAncestor(modelElement, schema) {\n    for (const element of modelElement.getAncestors({\n        includeSelf: true,\n        parentFirst: true\n    })){\n        if (schema.checkChild(element, '$text')) {\n            return element;\n        }\n        // Do not go beyond nested editable.\n        if (schema.isLimit(element) && !schema.isObject(element)) {\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Returns next text block where could put selection.\n */ function findNextTextBlock(position, schema) {\n    const treeWalker = new TreeWalker({\n        startPosition: position\n    });\n    for (const { item } of treeWalker){\n        if (schema.isLimit(item) || !item.is('element')) {\n            return null;\n        }\n        if (schema.checkChild(item, '$text')) {\n            return item;\n        }\n    }\n    return null;\n}\n\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * ```ts\n * class ImageToolbar extends Plugin {\n * \tstatic get requires() {\n * \t\treturn [ WidgetToolbarRepository ];\n * \t}\n *\n * \tafterInit() {\n * \t\tconst editor = this.editor;\n * \t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n * \t\twidgetToolbarRepository.register( 'image', {\n * \t\t\titems: editor.config.get( 'image.toolbar' ),\n * \t\t\tgetRelatedElement: getClosestSelectedImageWidget\n * \t\t} );\n * \t}\n * }\n * ```\n */ class WidgetToolbarRepository extends Plugin {\n    /**\n\t * A map of toolbar definitions.\n\t */ _toolbarDefinitions = new Map();\n    _balloon;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetToolbarRepository';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Disables the default balloon toolbar for all widgets.\n        if (editor.plugins.has('BalloonToolbar')) {\n            const balloonToolbar = editor.plugins.get('BalloonToolbar');\n            this.listenTo(balloonToolbar, 'show', (evt)=>{\n                if (isWidgetSelected(editor.editing.view.document.selection)) {\n                    evt.stop();\n                }\n            }, {\n                priority: 'high'\n            });\n        }\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        this.on('change:isEnabled', ()=>{\n            this._updateToolbarsVisibility();\n        });\n        this.listenTo(editor.ui, 'update', ()=>{\n            this._updateToolbarsVisibility();\n        });\n        // UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', ()=>{\n            this._updateToolbarsVisibility();\n        }, {\n            priority: 'low'\n        });\n    }\n    destroy() {\n        super.destroy();\n        for (const toolbarConfig of this._toolbarDefinitions.values()){\n            toolbarConfig.view.destroy();\n        }\n    }\n    /**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param toolbarId An id for the toolbar. Used to\n\t * @param options.ariaLabel Label used by assistive technologies to describe this toolbar element.\n\t * @param options.items Array of toolbar items.\n\t * @param options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n\t * @param options.balloonClassName CSS class for the widget balloon.\n\t */ register(toolbarId, { ariaLabel, items, getRelatedElement, balloonClassName = 'ck-toolbar-container' }) {\n        // Trying to register a toolbar without any item.\n        if (!items.length) {\n            /**\n\t\t\t * When {@link module:widget/widgettoolbarrepository~WidgetToolbarRepository#register registering} a new widget toolbar, you\n\t\t\t * need to provide a non-empty array with the items that will be inserted into the toolbar.\n\t\t\t *\n\t\t\t * If you see this error when integrating the editor, you likely forgot to configure one of the widget toolbars.\n\t\t\t *\n\t\t\t * See for instance:\n\t\t\t *\n\t\t\t * * {@link module:table/tableconfig~TableConfig#contentToolbar `config.table.contentToolbar`}\n\t\t\t * * {@link module:image/imageconfig~ImageConfig#toolbar `config.image.toolbar`}\n\t\t\t *\n\t\t\t * @error widget-toolbar-no-items\n\t\t\t * @param toolbarId The id of the toolbar that has not been configured correctly.\n\t\t\t */ logWarning('widget-toolbar-no-items', {\n                toolbarId\n            });\n            return;\n        }\n        const editor = this.editor;\n        const t = editor.t;\n        const toolbarView = new ToolbarView(editor.locale);\n        toolbarView.ariaLabel = ariaLabel || t('Widget toolbar');\n        if (this._toolbarDefinitions.has(toolbarId)) {\n            /**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param toolbarId Toolbar id.\n\t\t\t */ throw new CKEditorError('widget-toolbar-duplicated', this, {\n                toolbarId\n            });\n        }\n        const toolbarDefinition = {\n            view: toolbarView,\n            getRelatedElement,\n            balloonClassName,\n            itemsConfig: items,\n            initialized: false\n        };\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(toolbarView, {\n            isContextual: true,\n            beforeFocus: ()=>{\n                const relatedElement = getRelatedElement(editor.editing.view.document.selection);\n                if (relatedElement) {\n                    this._showToolbar(toolbarDefinition, relatedElement);\n                }\n            },\n            afterBlur: ()=>{\n                this._hideToolbar(toolbarDefinition);\n            }\n        });\n        this._toolbarDefinitions.set(toolbarId, toolbarDefinition);\n    }\n    /**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t */ _updateToolbarsVisibility() {\n        let maxRelatedElementDepth = 0;\n        let deepestRelatedElement = null;\n        let deepestToolbarDefinition = null;\n        for (const definition of this._toolbarDefinitions.values()){\n            const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n            if (!this.isEnabled || !relatedElement) {\n                if (this._isToolbarInBalloon(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else if (!this.editor.ui.focusTracker.isFocused) {\n                if (this._isToolbarVisible(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else {\n                const relatedElementDepth = relatedElement.getAncestors().length;\n                // Many toolbars can express willingness to be displayed but they do not know about\n                // each other. Figure out which toolbar is deepest in the view tree to decide which\n                // should be displayed. For instance, if a selected image is inside a table cell, display\n                // the ImageToolbar rather than the TableToolbar (#60).\n                if (relatedElementDepth > maxRelatedElementDepth) {\n                    maxRelatedElementDepth = relatedElementDepth;\n                    deepestRelatedElement = relatedElement;\n                    deepestToolbarDefinition = definition;\n                }\n            }\n        }\n        if (deepestToolbarDefinition) {\n            this._showToolbar(deepestToolbarDefinition, deepestRelatedElement);\n        }\n    }\n    /**\n\t * Hides the given toolbar.\n\t */ _hideToolbar(toolbarDefinition) {\n        this._balloon.remove(toolbarDefinition.view);\n        this.stopListening(this._balloon, 'change:visibleView');\n    }\n    /**\n\t * Shows up the toolbar if the toolbar is not visible.\n\t * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:ui/editorui/editorui~EditorUI#event:update}.\n\t */ _showToolbar(toolbarDefinition, relatedElement) {\n        if (this._isToolbarVisible(toolbarDefinition)) {\n            repositionContextualBalloon(this.editor, relatedElement);\n        } else if (!this._isToolbarInBalloon(toolbarDefinition)) {\n            if (!toolbarDefinition.initialized) {\n                toolbarDefinition.initialized = true;\n                toolbarDefinition.view.fillFromConfig(toolbarDefinition.itemsConfig, this.editor.ui.componentFactory);\n            }\n            this._balloon.add({\n                view: toolbarDefinition.view,\n                position: getBalloonPositionData(this.editor, relatedElement),\n                balloonClassName: toolbarDefinition.balloonClassName\n            });\n            // Update toolbar position each time stack with toolbar view is switched to visible.\n            // This is in a case target element has changed when toolbar was in invisible stack\n            // e.g. target image was wrapped by a block quote.\n            // See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n            this.listenTo(this._balloon, 'change:visibleView', ()=>{\n                for (const definition of this._toolbarDefinitions.values()){\n                    if (this._isToolbarVisible(definition)) {\n                        const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n                        repositionContextualBalloon(this.editor, relatedElement);\n                    }\n                }\n            });\n        }\n    }\n    _isToolbarVisible(toolbar) {\n        return this._balloon.visibleView === toolbar.view;\n    }\n    _isToolbarInBalloon(toolbar) {\n        return this._balloon.hasView(toolbar.view);\n    }\n}\nfunction repositionContextualBalloon(editor, relatedElement) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    const position = getBalloonPositionData(editor, relatedElement);\n    balloon.updatePosition(position);\n}\nfunction getBalloonPositionData(editor, relatedElement) {\n    const editingView = editor.editing.view;\n    const defaultPositions = BalloonPanelView.defaultPositions;\n    return {\n        target: editingView.domConverter.mapViewToDom(relatedElement),\n        positions: [\n            defaultPositions.northArrowSouth,\n            defaultPositions.northArrowSouthWest,\n            defaultPositions.northArrowSouthEast,\n            defaultPositions.southArrowNorth,\n            defaultPositions.southArrowNorthWest,\n            defaultPositions.southArrowNorthEast,\n            defaultPositions.viewportStickyNorth\n        ]\n    };\n}\nfunction isWidgetSelected(selection) {\n    const viewElement = selection.getSelectedElement();\n    return !!(viewElement && isWidget(viewElement));\n}\n\n/**\n * Stores the internal state of a single resizable object.\n */ class ResizeState extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n\t * traveled, so how much the image should be enlarged.\n\t * This information is only known after the DOM was rendered, so it will be updated later.\n\t *\n\t * @internal\n\t */ _referenceCoordinates;\n    /**\n\t * Resizer options.\n\t */ _options;\n    /**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalWidth;\n    /**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalHeight;\n    /**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalWidthPercents;\n    /**\n\t * A width to height ratio of the resized image.\n\t *\n\t * @readonly\n\t */ _aspectRatio;\n    /**\n\t * @param options Resizer options.\n\t */ constructor(options){\n        super();\n        this.set('activeHandlePosition', null);\n        this.set('proposedWidthPercents', null);\n        this.set('proposedWidth', null);\n        this.set('proposedHeight', null);\n        this.set('proposedHandleHostWidth', null);\n        this.set('proposedHandleHostHeight', null);\n        this._options = options;\n        this._referenceCoordinates = null;\n    }\n    /**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t */ get originalWidth() {\n        return this._originalWidth;\n    }\n    /**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t */ get originalHeight() {\n        return this._originalHeight;\n    }\n    /**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t */ get originalWidthPercents() {\n        return this._originalWidthPercents;\n    }\n    /**\n\t * A width to height ratio of the resized image.\n\t */ get aspectRatio() {\n        return this._aspectRatio;\n    }\n    /**\n\t *\n\t * @param domResizeHandle The handle used to calculate the reference point.\n\t */ begin(domResizeHandle, domHandleHost, domResizeHost) {\n        const clientRect = new Rect(domHandleHost);\n        this.activeHandlePosition = getHandlePosition(domResizeHandle);\n        this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n        this._originalWidth = clientRect.width;\n        this._originalHeight = clientRect.height;\n        this._aspectRatio = clientRect.width / clientRect.height;\n        const widthStyle = domResizeHost.style.width;\n        if (widthStyle && widthStyle.match(/^\\d+(\\.\\d*)?%$/)) {\n            this._originalWidthPercents = parseFloat(widthStyle);\n        } else {\n            this._originalWidthPercents = calculateResizeHostPercentageWidth(domResizeHost, clientRect);\n        }\n    }\n    update(newSize) {\n        this.proposedWidth = newSize.width;\n        this.proposedHeight = newSize.height;\n        this.proposedWidthPercents = newSize.widthPercents;\n        this.proposedHandleHostWidth = newSize.handleHostWidth;\n        this.proposedHandleHostHeight = newSize.handleHostHeight;\n    }\n}\n/**\n * Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n *\n * @param resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n */ function getAbsoluteBoundaryPoint(element, resizerPosition) {\n    const elementRect = new Rect(element);\n    const positionParts = resizerPosition.split('-');\n    const ret = {\n        x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n        y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n    };\n    ret.x += element.ownerDocument.defaultView.scrollX;\n    ret.y += element.ownerDocument.defaultView.scrollY;\n    return ret;\n}\n/**\n * @param resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element.\n */ function getResizerHandleClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\n/**\n * Determines the position of a given resize handle.\n *\n * @param domHandle Handle used to calculate the reference point.\n * @returns Returns a string like `\"top-left\"` or `undefined` if not matched.\n */ function getHandlePosition(domHandle) {\n    const resizerPositions = [\n        'top-left',\n        'top-right',\n        'bottom-right',\n        'bottom-left'\n    ];\n    for (const position of resizerPositions){\n        if (domHandle.classList.contains(getResizerHandleClass(position))) {\n            return position;\n        }\n    }\n}\n/**\n * @param position Like `\"top-left\"`.\n * @returns Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n */ function getOppositePosition(position) {\n    const parts = position.split('-');\n    const replacements = {\n        top: 'bottom',\n        bottom: 'top',\n        left: 'right',\n        right: 'left'\n    };\n    return `${replacements[parts[0]]}-${replacements[parts[1]]}`;\n}\n\n/**\n * A view displaying the proposed new element size during the resizing.\n */ class SizeView extends View {\n    constructor(){\n        super();\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-size-view',\n                    bind.to('_viewPosition', (value)=>value ? `ck-orientation-${value}` : '')\n                ],\n                style: {\n                    display: bind.if('_isVisible', 'none', (visible)=>!visible)\n                }\n            },\n            children: [\n                {\n                    text: bind.to('_label')\n                }\n            ]\n        });\n    }\n    /**\n\t * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n\t *\n\t * @internal\n\t * @param options An object defining the resizer options, used for setting the proper size label.\n\t * @param resizeState The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n\t */ _bindToState(options, resizeState) {\n        this.bind('_isVisible').to(resizeState, 'proposedWidth', resizeState, 'proposedHeight', (width, height)=>width !== null && height !== null);\n        this.bind('_label').to(resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', resizeState, 'proposedWidthPercents', (width, height, widthPercents)=>{\n            if (options.unit === 'px') {\n                return `${width}×${height}`;\n            } else {\n                return `${widthPercents}%`;\n            }\n        });\n        this.bind('_viewPosition').to(resizeState, 'activeHandlePosition', resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', // If the widget is too small to contain the size label, display the label above.\n        (position, width, height)=>width < 50 || height < 50 ? 'above-center' : position);\n    }\n    /**\n\t * A method used for cleaning up. It removes the bindings and hides the view.\n\t *\n\t * @internal\n\t */ _dismiss() {\n        this.unbind();\n        this._isVisible = false;\n    }\n}\n\n/**\n * Represents a resizer for a single resizable object.\n */ class Resizer extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */ _state;\n    /**\n\t * A view displaying the proposed new element size during the resizing.\n\t */ _sizeView;\n    /**\n\t * Options passed to the {@link #constructor}.\n\t */ _options;\n    /**\n\t * A wrapper that is controlled by the resizer. This is usually a widget element.\n\t */ _viewResizerWrapper = null;\n    /**\n\t * The width of the resized {@link module:widget/widgetresize~ResizerOptions#viewElement viewElement} before the resizing started.\n\t */ _initialViewWidth;\n    /**\n\t * @param options Resizer options.\n\t */ constructor(options){\n        super();\n        this._options = options;\n        this.set('isEnabled', true);\n        this.set('isSelected', false);\n        this.bind('isVisible').to(this, 'isEnabled', this, 'isSelected', (isEnabled, isSelected)=>isEnabled && isSelected);\n        this.decorate('begin');\n        this.decorate('cancel');\n        this.decorate('commit');\n        this.decorate('updateSize');\n        this.on('commit', (event)=>{\n            // State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n            // cleaned up (#5195).\n            if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {\n                this._cleanup();\n                event.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */ get state() {\n        return this._state;\n    }\n    /**\n\t * Makes resizer visible in the UI.\n\t */ show() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.removeClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n\t * Hides resizer in the UI.\n\t */ hide() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.addClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n\t * Attaches the resizer to the DOM.\n\t */ attach() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const widgetElement = this._options.viewElement;\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            const viewResizerWrapper = writer.createUIElement('div', {\n                class: 'ck ck-reset_all ck-widget__resizer'\n            }, function(domDocument) {\n                const domElement = this.toDomElement(domDocument);\n                that._appendHandles(domElement);\n                that._appendSizeUI(domElement);\n                return domElement;\n            });\n            // Append the resizer wrapper to the widget's wrapper.\n            writer.insert(writer.createPositionAt(widgetElement, 'end'), viewResizerWrapper);\n            writer.addClass('ck-widget_with-resizer', widgetElement);\n            this._viewResizerWrapper = viewResizerWrapper;\n            if (!this.isVisible) {\n                this.hide();\n            }\n        });\n        this.on('change:isVisible', ()=>{\n            if (this.isVisible) {\n                this.show();\n                this.redraw();\n            } else {\n                this.hide();\n            }\n        });\n    }\n    /**\n\t * Starts the resizing process.\n\t *\n\t * Creates a new {@link #state} for the current process.\n\t *\n\t * @fires begin\n\t * @param domResizeHandle Clicked handle.\n\t */ begin(domResizeHandle) {\n        this._state = new ResizeState(this._options);\n        this._sizeView._bindToState(this._options, this.state);\n        this._initialViewWidth = this._options.viewElement.getStyle('width');\n        this.state.begin(domResizeHandle, this._getHandleHost(), this._getResizeHost());\n    }\n    /**\n\t * Updates the proposed size based on `domEventData`.\n\t *\n\t * @fires updateSize\n\t */ updateSize(domEventData) {\n        const newSize = this._proposeNewSize(domEventData);\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            const unit = this._options.unit || '%';\n            const newWidth = (unit === '%' ? newSize.widthPercents : newSize.width) + unit;\n            writer.setStyle('width', newWidth, this._options.viewElement);\n        });\n        // Get an actual image width, and:\n        // * reflect this size to the resize wrapper\n        // * apply this **real** size to the state\n        const domHandleHost = this._getHandleHost();\n        const domHandleHostRect = new Rect(domHandleHost);\n        const handleHostWidth = Math.round(domHandleHostRect.width);\n        const handleHostHeight = Math.round(domHandleHostRect.height);\n        // Handle max-width limitation.\n        const domResizeHostRect = new Rect(domHandleHost);\n        newSize.width = Math.round(domResizeHostRect.width);\n        newSize.height = Math.round(domResizeHostRect.height);\n        this.redraw(domHandleHostRect);\n        this.state.update({\n            ...newSize,\n            handleHostWidth,\n            handleHostHeight\n        });\n    }\n    /**\n\t * Applies the geometry proposed with the resizer.\n\t *\n\t * @fires commit\n\t */ commit() {\n        const unit = this._options.unit || '%';\n        const newValue = (unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth) + unit;\n        // Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n        this._options.editor.editing.view.change(()=>{\n            this._cleanup();\n            this._options.onCommit(newValue);\n        });\n    }\n    /**\n\t * Cancels and rejects the proposed resize dimensions, hiding the UI.\n\t *\n\t * @fires cancel\n\t */ cancel() {\n        this._cleanup();\n    }\n    /**\n\t * Destroys the resizer.\n\t */ destroy() {\n        this.cancel();\n    }\n    /**\n\t * Redraws the resizer.\n\t *\n\t * @param handleHostRect Handle host rectangle might be given to improve performance.\n\t */ redraw(handleHostRect) {\n        const domWrapper = this._domResizerWrapper;\n        // Refresh only if resizer exists in the DOM.\n        if (!existsInDom(domWrapper)) {\n            return;\n        }\n        const widgetWrapper = domWrapper.parentElement;\n        const handleHost = this._getHandleHost();\n        const resizerWrapper = this._viewResizerWrapper;\n        const currentDimensions = [\n            resizerWrapper.getStyle('width'),\n            resizerWrapper.getStyle('height'),\n            resizerWrapper.getStyle('left'),\n            resizerWrapper.getStyle('top')\n        ];\n        let newDimensions;\n        if (widgetWrapper.isSameNode(handleHost)) {\n            const clientRect = handleHostRect || new Rect(handleHost);\n            newDimensions = [\n                clientRect.width + 'px',\n                clientRect.height + 'px',\n                undefined,\n                undefined\n            ];\n        } else {\n            newDimensions = [\n                handleHost.offsetWidth + 'px',\n                handleHost.offsetHeight + 'px',\n                handleHost.offsetLeft + 'px',\n                handleHost.offsetTop + 'px'\n            ];\n        }\n        // Make changes to the view only if the resizer should actually get new dimensions.\n        // Otherwise, if View#change() was always called, this would cause EditorUI#update\n        // loops because the WidgetResize plugin listens to EditorUI#update and updates\n        // the resizer.\n        // https://github.com/ckeditor/ckeditor5/issues/7633\n        if (compareArrays(currentDimensions, newDimensions) !== 'same') {\n            this._options.editor.editing.view.change((writer)=>{\n                writer.setStyle({\n                    width: newDimensions[0],\n                    height: newDimensions[1],\n                    left: newDimensions[2],\n                    top: newDimensions[3]\n                }, resizerWrapper);\n            });\n        }\n    }\n    containsHandle(domElement) {\n        return this._domResizerWrapper.contains(domElement);\n    }\n    static isResizeHandle(domElement) {\n        return domElement.classList.contains('ck-widget__resizer__handle');\n    }\n    /**\n\t * Cleans up the context state.\n\t */ _cleanup() {\n        this._sizeView._dismiss();\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.setStyle('width', this._initialViewWidth, this._options.viewElement);\n        });\n    }\n    /**\n\t * Calculates the proposed size as the resize handles are dragged.\n\t *\n\t * @param domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n\t */ _proposeNewSize(domEventData) {\n        const state = this.state;\n        const currentCoordinates = extractCoordinates(domEventData);\n        const isCentered = this._options.isCentered ? this._options.isCentered(this) : true;\n        // Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n        // meaning that it has been shrunk.\n        //\n        // +----------------+--+\n        // |                |  |\n        // |       img      |  |\n        // |  /handle host  |  |\n        // +----------------+  | ^\n        // |                   | | - enlarge y\n        // +-------------------+ v\n        // \t\t\t\t\t<-->\n        // \t\t\t\t\t enlarge x\n        const enlargement = {\n            x: state._referenceCoordinates.x - (currentCoordinates.x + state.originalWidth),\n            y: currentCoordinates.y - state.originalHeight - state._referenceCoordinates.y\n        };\n        if (isCentered && state.activeHandlePosition.endsWith('-right')) {\n            enlargement.x = currentCoordinates.x - (state._referenceCoordinates.x + state.originalWidth);\n        }\n        // Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n        // one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n        if (isCentered) {\n            enlargement.x *= 2;\n        }\n        // const resizeHost = this._getResizeHost();\n        // The size proposed by the user. It does not consider the aspect ratio.\n        let width = Math.abs(state.originalWidth + enlargement.x);\n        let height = Math.abs(state.originalHeight + enlargement.y);\n        // Dominant determination must take the ratio into account.\n        const dominant = width / state.aspectRatio > height ? 'width' : 'height';\n        if (dominant == 'width') {\n            height = width / state.aspectRatio;\n        } else {\n            width = height * state.aspectRatio;\n        }\n        return {\n            width: Math.round(width),\n            height: Math.round(height),\n            widthPercents: Math.min(Math.round(state.originalWidthPercents / state.originalWidth * width * 100) / 100, 100)\n        };\n    }\n    /**\n\t * Obtains the resize host.\n\t *\n\t * Resize host is an object that receives dimensions which are the result of resizing.\n\t */ _getResizeHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getResizeHost(widgetWrapper);\n    }\n    /**\n\t * Obtains the handle host.\n\t *\n\t * Handle host is an object that the handles are aligned to.\n\t *\n\t * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n\t * contains an image and a caption. Only the image should be surrounded with handles.\n\t */ _getHandleHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getHandleHost(widgetWrapper);\n    }\n    /**\n\t * DOM container of the entire resize UI.\n\t *\n\t * Note that this property will have a value only after the element bound with the resizer is rendered\n\t * (otherwise `null`).\n\t */ get _domResizerWrapper() {\n        return this._options.editor.editing.view.domConverter.mapViewToDom(this._viewResizerWrapper);\n    }\n    /**\n\t * Renders the resize handles in the DOM.\n\t *\n\t * @param domElement The resizer wrapper.\n\t */ _appendHandles(domElement) {\n        const resizerPositions = [\n            'top-left',\n            'top-right',\n            'bottom-right',\n            'bottom-left'\n        ];\n        for (const currentPosition of resizerPositions){\n            domElement.appendChild(new Template({\n                tag: 'div',\n                attributes: {\n                    class: `ck-widget__resizer__handle ${getResizerClass(currentPosition)}`\n                }\n            }).render());\n        }\n    }\n    /**\n\t * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n\t */ _appendSizeUI(domElement) {\n        this._sizeView = new SizeView();\n        // Make sure icon#element is rendered before passing to appendChild().\n        this._sizeView.render();\n        domElement.appendChild(this._sizeView.element);\n    }\n}\n/**\n * @param resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element\n */ function getResizerClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\nfunction extractCoordinates(event) {\n    return {\n        x: event.pageX,\n        y: event.pageY\n    };\n}\nfunction existsInDom(element) {\n    return element && element.ownerDocument && element.ownerDocument.contains(element);\n}\n\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n */ class WidgetResize extends Plugin {\n    /**\n\t * A map of resizers created using this plugin instance.\n\t */ _resizers = new Map();\n    _observer;\n    _redrawSelectedResizerThrottled;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetResize';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editing = this.editor.editing;\n        const domDocument = global.window.document;\n        this.set('selectedResizer', null);\n        this.set('_activeResizer', null);\n        editing.view.addObserver(MouseObserver);\n        this._observer = new (DomEmitterMixin())();\n        this.listenTo(editing.view.document, 'mousedown', this._mouseDownListener.bind(this), {\n            priority: 'high'\n        });\n        this._observer.listenTo(domDocument, 'mousemove', this._mouseMoveListener.bind(this));\n        this._observer.listenTo(domDocument, 'mouseup', this._mouseUpListener.bind(this));\n        this._redrawSelectedResizerThrottled = throttle(()=>this.redrawSelectedResizer(), 200);\n        // Redrawing on any change of the UI of the editor (including content changes).\n        this.editor.ui.on('update', this._redrawSelectedResizerThrottled);\n        // Remove view widget-resizer mappings for widgets that have been removed from the document.\n        // https://github.com/ckeditor/ckeditor5/issues/10156\n        // https://github.com/ckeditor/ckeditor5/issues/10266\n        this.editor.model.document.on('change', ()=>{\n            for (const [viewElement, resizer] of this._resizers){\n                if (!viewElement.isAttached()) {\n                    this._resizers.delete(viewElement);\n                    resizer.destroy();\n                }\n            }\n        }, {\n            priority: 'lowest'\n        });\n        // Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n        this._observer.listenTo(global.window, 'resize', this._redrawSelectedResizerThrottled);\n        const viewSelection = this.editor.editing.view.document.selection;\n        viewSelection.on('change', ()=>{\n            const selectedElement = viewSelection.getSelectedElement();\n            const resizer = this.getResizerByViewElement(selectedElement) || null;\n            if (resizer) {\n                this.select(resizer);\n            } else {\n                this.deselect();\n            }\n        });\n    }\n    /**\n\t * Redraws the selected resizer if there is any selected resizer and if it is visible.\n\t */ redrawSelectedResizer() {\n        if (this.selectedResizer && this.selectedResizer.isVisible) {\n            this.selectedResizer.redraw();\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._observer.stopListening();\n        for (const resizer of this._resizers.values()){\n            resizer.destroy();\n        }\n        this._redrawSelectedResizerThrottled.cancel();\n    }\n    /**\n\t * Marks resizer as selected.\n\t */ select(resizer) {\n        this.deselect();\n        this.selectedResizer = resizer;\n        this.selectedResizer.isSelected = true;\n    }\n    /**\n\t * Deselects currently set resizer.\n\t */ deselect() {\n        if (this.selectedResizer) {\n            this.selectedResizer.isSelected = false;\n        }\n        this.selectedResizer = null;\n    }\n    /**\n\t * @param options Resizer options.\n\t */ attachTo(options) {\n        const resizer = new Resizer(options);\n        const plugins = this.editor.plugins;\n        resizer.attach();\n        if (plugins.has('WidgetToolbarRepository')) {\n            // Hiding widget toolbar to improve the performance\n            // (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n            const widgetToolbarRepository = plugins.get('WidgetToolbarRepository');\n            resizer.on('begin', ()=>{\n                widgetToolbarRepository.forceDisabled('resize');\n            }, {\n                priority: 'lowest'\n            });\n            resizer.on('cancel', ()=>{\n                widgetToolbarRepository.clearForceDisabled('resize');\n            }, {\n                priority: 'highest'\n            });\n            resizer.on('commit', ()=>{\n                widgetToolbarRepository.clearForceDisabled('resize');\n            }, {\n                priority: 'highest'\n            });\n        }\n        this._resizers.set(options.viewElement, resizer);\n        const viewSelection = this.editor.editing.view.document.selection;\n        const selectedElement = viewSelection.getSelectedElement();\n        // If the element the resizer is created for is currently focused, it should become visible.\n        if (this.getResizerByViewElement(selectedElement) == resizer) {\n            this.select(resizer);\n        }\n        return resizer;\n    }\n    /**\n\t * Returns a resizer created for a given view element (widget element).\n\t *\n\t * @param viewElement View element associated with the resizer.\n\t */ getResizerByViewElement(viewElement) {\n        return this._resizers.get(viewElement);\n    }\n    /**\n\t * Returns a resizer that contains a given resize handle.\n\t */ _getResizerByHandle(domResizeHandle) {\n        for (const resizer of this._resizers.values()){\n            if (resizer.containsHandle(domResizeHandle)) {\n                return resizer;\n            }\n        }\n    }\n    /**\n\t * @param domEventData Native DOM event.\n\t */ _mouseDownListener(event, domEventData) {\n        const resizeHandle = domEventData.domTarget;\n        if (!Resizer.isResizeHandle(resizeHandle)) {\n            return;\n        }\n        this._activeResizer = this._getResizerByHandle(resizeHandle) || null;\n        if (this._activeResizer) {\n            this._activeResizer.begin(resizeHandle);\n            // Do not call other events when resizing. See: #6755.\n            event.stop();\n            domEventData.preventDefault();\n        }\n    }\n    /**\n\t * @param domEventData Native DOM event.\n\t */ _mouseMoveListener(event, domEventData) {\n        if (this._activeResizer) {\n            this._activeResizer.updateSize(domEventData);\n        }\n    }\n    _mouseUpListener() {\n        if (this._activeResizer) {\n            this._activeResizer.commit();\n            this._activeResizer = null;\n        }\n    }\n}\n\nexport { WIDGET_CLASS_NAME, WIDGET_SELECTED_CLASS_NAME, Widget, WidgetResize, WidgetToolbarRepository, WidgetTypeAround, calculateResizeHostAncestorWidth, calculateResizeHostPercentageWidth, findOptimalInsertionRange, getLabel, isWidget, setHighlightHandling, setLabel, toWidget, toWidgetEditable, viewToModelPositionOutsideModelElement };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport { EmitterMixin, type ArrayOrItem } from '@ckeditor/ckeditor5-utils';\n\nimport type { DowncastWriter, HighlightDescriptor } from '@ckeditor/ckeditor5-engine';\n\n/**\n * Class used to handle the correct order of highlights on elements.\n *\n * When different highlights are applied to same element the correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack extends /* #__PURE__ */ EmitterMixin() {\n\tprivate readonly _stack: Array<HighlightDescriptor> = [];\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t */\n\tpublic add( descriptor: HighlightDescriptor, writer: DowncastWriter ): void {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire<HighlightStackChangeEvent>( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param id Id of the descriptor to remove.\n\t */\n\tpublic remove( id: string, writer: DowncastWriter ): void {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire<HighlightStackChangeEvent>( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts a given descriptor in correct place in the stack. It also takes care about updating information\n\t * when descriptor with same id is already present.\n\t */\n\tprivate _insertDescriptor( descriptor: HighlightDescriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It has different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @param id Descriptor's id.\n\t */\n\tprivate _removeDescriptor( id: string ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\n/**\n * Compares two descriptors by checking their priority and class list.\n *\n * @returns Returns true if both descriptors are defined and have same priority and classes.\n */\nfunction compareDescriptors( a: HighlightDescriptor, b: HighlightDescriptor ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.classes ) == classesToString( b.classes );\n}\n\n/**\n * Checks whenever first descriptor should be placed in the stack before second one.\n */\nfunction shouldABeBeforeB( a: HighlightDescriptor, b: HighlightDescriptor ) {\n\tif ( a.priority! > b.priority! ) {\n\t\treturn true;\n\t} else if ( a.priority! < b.priority! ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.classes ) > classesToString( b.classes );\n}\n\n/**\n * Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n * sorted string.\n */\nfunction classesToString( classes: ArrayOrItem<string> ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @eventName ~HighlightStack#change:top\n */\nexport type HighlightStackChangeEvent = {\n\tname: 'change' | 'change:top';\n\targs: [ HighlightStackChangeEventData ];\n};\n\n/**\n * Additional information about the change.\n */\nexport type HighlightStackChangeEventData = {\n\n\t/**\n\t * Old highlight descriptor. It will be `undefined` when first descriptor is added to the stack.\n\t */\n\toldDescriptor: HighlightDescriptor;\n\n\t/**\n\t * New highlight descriptor. It will be `undefined` when last descriptor is removed from the stack.\n\t */\n\tnewDescriptor: HighlightDescriptor;\n\n\t/**\n\t * View writer that can be used to modify element.\n\t */\n\twriter: DowncastWriter;\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/utils\n */\n\nimport {\n\tRect,\n\tCKEditorError,\n\ttoArray,\n\ttype ObservableChangeEvent,\n\ttype GetCallback\n} from '@ckeditor/ckeditor5-utils';\n\nimport {\n\ttype AddHighlightCallback,\n\ttype HighlightDescriptor,\n\ttype RemoveHighlightCallback,\n\ttype MapperViewToModelPositionEvent,\n\ttype DocumentSelection,\n\ttype DowncastWriter,\n\ttype Model,\n\ttype Range,\n\ttype Selection,\n\ttype ViewContainerElement,\n\ttype ViewEditableElement,\n\ttype ViewElement,\n\ttype ViewTypeCheckable\n} from '@ckeditor/ckeditor5-engine';\n\nimport { IconView } from '@ckeditor/ckeditor5-ui';\n\nimport HighlightStack, { type HighlightStackChangeEvent } from './highlightstack.js';\nimport { getTypeAroundFakeCaretPosition } from './widgettypearound/utils.js';\n\nimport dragHandleIcon from '../theme/icons/drag-handle.svg';\n\n/**\n * CSS class added to each widget element.\n */\nexport const WIDGET_CLASS_NAME = 'ck-widget';\n\n/**\n * CSS class added to currently selected widget element.\n */\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n\n/**\n * Returns `true` if given {@link module:engine/view/node~Node} is an {@link module:engine/view/element~Element} and a widget.\n */\nexport function isWidget( node: ViewTypeCheckable ): boolean {\n\tif ( !node.is( 'element' ) ) {\n\t\treturn false;\n\t}\n\n\treturn !!node.getCustomProperty( 'widget' );\n}\n\n/**\n * Converts the given {@link module:engine/view/element~Element} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"false\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~Element#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n * \t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param options.hasSelectionHandle If `true`, the widget will have a selection handle added.\n * @returns Returns the same element.\n */\nexport function toWidget(\n\telement: ViewElement,\n\twriter: DowncastWriter,\n\toptions: {\n\t\tlabel?: string | ( () => string );\n\t\thasSelectionHandle?: boolean;\n\t} = {}\n): ViewElement {\n\tif ( !element.is( 'containerElement' ) ) {\n\t\t/**\n\t\t * The element passed to `toWidget()` must be a {@link module:engine/view/containerelement~ContainerElement}\n\t\t * instance.\n\t\t *\n\t\t * @error widget-to-widget-wrong-element-type\n\t\t * @param element The view element passed to `toWidget()`.\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'widget-to-widget-wrong-element-type',\n\t\t\tnull,\n\t\t\t{ element }\n\t\t);\n\t}\n\n\twriter.setAttribute( 'contenteditable', 'false', element );\n\n\twriter.addClass( WIDGET_CLASS_NAME, element );\n\twriter.setCustomProperty( 'widget', true, element );\n\telement.getFillerOffset = getFillerOffset;\n\n\twriter.setCustomProperty( 'widgetLabel', [], element );\n\n\tif ( options.label ) {\n\t\tsetLabel( element, options.label );\n\t}\n\n\tif ( options.hasSelectionHandle ) {\n\t\taddSelectionHandle( element, writer );\n\t}\n\n\tsetHighlightHandling( element, writer );\n\n\treturn element;\n}\n\n/**\n * Default handler for adding a highlight on a widget.\n * It adds CSS class and attributes basing on the given highlight descriptor.\n */\nfunction addHighlight( element: ViewElement, descriptor: HighlightDescriptor, writer: DowncastWriter ) {\n\tif ( descriptor.classes ) {\n\t\twriter.addClass( toArray( descriptor.classes ), element );\n\t}\n\n\tif ( descriptor.attributes ) {\n\t\tfor ( const key in descriptor.attributes ) {\n\t\t\twriter.setAttribute( key, descriptor.attributes[ key ], element );\n\t\t}\n\t}\n}\n\n/**\n * Default handler for removing a highlight from a widget.\n * It removes CSS class and attributes basing on the given highlight descriptor.\n */\nfunction removeHighlight( element: ViewElement, descriptor: HighlightDescriptor, writer: DowncastWriter ) {\n\tif ( descriptor.classes ) {\n\t\twriter.removeClass( toArray( descriptor.classes ), element );\n\t}\n\n\tif ( descriptor.attributes ) {\n\t\tfor ( const key in descriptor.attributes ) {\n\t\t\twriter.removeAttribute( key, element );\n\t\t}\n\t}\n}\n\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n */\nexport function setHighlightHandling(\n\telement: ViewElement,\n\twriter: DowncastWriter,\n\tadd: ( element: ViewElement, descriptor: HighlightDescriptor, writer: DowncastWriter ) => void = addHighlight,\n\tremove: ( element: ViewElement, descriptor: HighlightDescriptor, writer: DowncastWriter ) => void = removeHighlight\n): void {\n\tconst stack = new HighlightStack();\n\n\tstack.on<HighlightStackChangeEvent>( 'change:top', ( evt, data ) => {\n\t\tif ( data.oldDescriptor ) {\n\t\t\tremove( element, data.oldDescriptor, data.writer );\n\t\t}\n\n\t\tif ( data.newDescriptor ) {\n\t\t\tadd( element, data.newDescriptor, data.writer );\n\t\t}\n\t} );\n\n\tconst addHighlightCallback: AddHighlightCallback = ( element, descriptor, writer ) => stack.add( descriptor, writer );\n\tconst removeHighlightCallback: RemoveHighlightCallback = ( element, id, writer ) => stack.remove( id, writer );\n\n\twriter.setCustomProperty( 'addHighlight', addHighlightCallback, element );\n\twriter.setCustomProperty( 'removeHighlight', removeHighlightCallback, element );\n}\n\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n */\nexport function setLabel( element: ViewElement, labelOrCreator: string | ( () => string ) ): void {\n\tconst widgetLabel = element.getCustomProperty( 'widgetLabel' ) as Array<string | ( () => string )>;\n\n\twidgetLabel.push( labelOrCreator );\n}\n\n/**\n * Returns the label of the provided element.\n */\nexport function getLabel( element: ViewElement ): string {\n\tconst widgetLabel = element.getCustomProperty( 'widgetLabel' ) as Array<string | ( () => string )>;\n\n\treturn widgetLabel.reduce( ( prev: string, current: string | ( () => string ) ) => {\n\t\tif ( typeof current === 'function' ) {\n\t\t\treturn prev ? prev + '. ' + current() : current();\n\t\t} else {\n\t\t\treturn prev ? prev + '. ' + current : current;\n\t\t}\n\t}, '' );\n}\n\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when {@link module:engine/view/editableelement~EditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n * * implements the {@link ~setHighlightHandling view highlight on widget's editable}.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `editingDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n * \t\t\treturn toWidgetEditable( nested, writer, { label: 'label for editable' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Editable's label used by assistive technologies (e.g. screen readers).\n * @returns Returns the same element that was provided in the `editable` parameter\n */\nexport function toWidgetEditable(\n\teditable: ViewEditableElement,\n\twriter: DowncastWriter,\n\toptions: {\n\t\tlabel?: string;\n\t} = {}\n): ViewEditableElement {\n\twriter.addClass( [ 'ck-editor__editable', 'ck-editor__nested-editable' ], editable );\n\n\twriter.setAttribute( 'role', 'textbox', editable );\n\twriter.setAttribute( 'tabindex', '-1', editable );\n\n\tif ( options.label ) {\n\t\twriter.setAttribute( 'aria-label', options.label, editable );\n\t}\n\n\t// Set initial contenteditable value.\n\twriter.setAttribute( 'contenteditable', editable.isReadOnly ? 'false' : 'true', editable );\n\n\t// Bind the contenteditable property to element#isReadOnly.\n\teditable.on<ObservableChangeEvent<boolean>>( 'change:isReadOnly', ( evt, property, is ) => {\n\t\twriter.setAttribute( 'contenteditable', is ? 'false' : 'true', editable );\n\t} );\n\n\teditable.on<ObservableChangeEvent<boolean>>( 'change:isFocused', ( evt, property, is ) => {\n\t\tif ( is ) {\n\t\t\twriter.addClass( 'ck-editor__nested-editable_focused', editable );\n\t\t} else {\n\t\t\twriter.removeClass( 'ck-editor__nested-editable_focused', editable );\n\t\t}\n\t} );\n\n\tsetHighlightHandling( editable, writer );\n\n\treturn editable;\n}\n\n/**\n * Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the collapsed range after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n * is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n * by the inserted widget block.\n *\n * @param selection The selection based on which the insertion position should be calculated.\n * @param model Model instance.\n * @returns The optimal range.\n */\nexport function findOptimalInsertionRange(\n\tselection: Selection | DocumentSelection,\n\tmodel: Model\n): Range {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement ) {\n\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( selection );\n\n\t\t// If the WidgetTypeAround \"fake caret\" is displayed, use its position for the insertion\n\t\t// to provide the most predictable UX (https://github.com/ckeditor/ckeditor5/issues/7438).\n\t\tif ( typeAroundFakeCaretPosition ) {\n\t\t\treturn model.createRange( model.createPositionAt( selectedElement, typeAroundFakeCaretPosition ) );\n\t\t}\n\t}\n\n\treturn model.schema.findOptimalInsertionRange( selection );\n}\n\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n * ```\n * // Model:\n * <placeholder type=\"name\"></placeholder>\n *\n * // View:\n * <span class=\"placeholder\">name</span>\n * ```\n *\n * In such case, view positions inside `<span>` cannot be correctly mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n * ```ts\n * editor.editing.mapper.on(\n * \t'viewToModelPosition',\n * \tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n * );\n * ```\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n * // Model:\n * <paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n * ```\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n * // Model:\n * <paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n * ```\n *\n * @param model Model instance on which the callback operates.\n * @param viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n */\nexport function viewToModelPositionOutsideModelElement(\n\tmodel: Model,\n\tviewElementMatcher: ( element: ViewElement ) => boolean\n): GetCallback<MapperViewToModelPositionEvent> {\n\treturn ( evt, data ) => {\n\t\tconst { mapper, viewPosition } = data;\n\n\t\tconst viewParent = mapper.findMappedViewAncestor( viewPosition );\n\n\t\tif ( !viewElementMatcher( viewParent ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelParent = mapper.toModelElement( viewParent );\n\n\t\tdata.modelPosition = model.createPositionAt( modelParent!, viewPosition.isAtStart ? 'before' : 'after' );\n\t};\n}\n\n/**\n * Default filler offset function applied to all widget elements.\n */\nfunction getFillerOffset() {\n\treturn null;\n}\n\n/**\n * Adds a drag handle to the widget.\n */\nfunction addSelectionHandle( widgetElement: ViewContainerElement, writer: DowncastWriter ) {\n\tconst selectionHandle = writer.createUIElement( 'div', { class: 'ck ck-widget__selection-handle' }, function( domDocument ) {\n\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t// Use the IconView from the ui library.\n\t\tconst icon = new IconView();\n\t\ticon.set( 'content', dragHandleIcon );\n\n\t\t// Render the icon view right away to append its #element to the selectionHandle DOM element.\n\t\ticon.render();\n\n\t\tdomElement.appendChild( icon.element! );\n\n\t\treturn domElement;\n\t} );\n\n\t// Append the selection handle into the widget wrapper.\n\twriter.insert( writer.createPositionAt( widgetElement, 0 ), selectionHandle );\n\twriter.addClass( [ 'ck-widget_with-selection-handle' ], widgetElement );\n}\n\n/**\n * Starting from a DOM resize host element (an element that receives dimensions as a result of resizing),\n * this helper returns the width of the found ancestor element.\n *\n *\t* It searches up to 5 levels of ancestors only.\n *\n * @param domResizeHost Resize host DOM element that receives dimensions as a result of resizing.\n * @returns Width of ancestor element in pixels or 0 if no ancestor with a computed width has been found.\n */\nexport function calculateResizeHostAncestorWidth( domResizeHost: HTMLElement ): number {\n\tconst getElementComputedWidth = ( element: HTMLElement ) => {\n\t\tconst { width, paddingLeft, paddingRight } = element.ownerDocument.defaultView!.getComputedStyle( element! );\n\n\t\treturn parseFloat( width ) - ( parseFloat( paddingLeft ) || 0 ) - ( parseFloat( paddingRight ) || 0 );\n\t};\n\n\tconst domResizeHostParent = domResizeHost.parentElement;\n\n\tif ( !domResizeHostParent ) {\n\t\treturn 0;\n\t}\n\n\t// Need to use computed style as it properly excludes parent's paddings from the returned value.\n\tlet parentWidth = getElementComputedWidth( domResizeHostParent! );\n\n\t// Sometimes parent width cannot be accessed. If that happens we should go up in the elements tree\n\t// and try to get width from next ancestor.\n\t// https://github.com/ckeditor/ckeditor5/issues/10776\n\tconst ancestorLevelLimit = 5;\n\tlet currentLevel = 0;\n\n\tlet checkedElement = domResizeHostParent!;\n\n\twhile ( isNaN( parentWidth ) ) {\n\t\tcheckedElement = checkedElement.parentElement!;\n\n\t\tif ( ++currentLevel > ancestorLevelLimit ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tparentWidth = getElementComputedWidth( checkedElement );\n\t}\n\n\treturn parentWidth;\n}\n\n/**\n * Calculates a relative width of a `domResizeHost` compared to its ancestor in percents.\n *\n * @param domResizeHost Resize host DOM element.\n * @returns Percentage value between 0 and 100.\n */\nexport function calculateResizeHostPercentageWidth(\n\tdomResizeHost: HTMLElement,\n\tresizeHostRect: Rect = new Rect( domResizeHost )\n): number {\n\tconst parentWidth = calculateResizeHostAncestorWidth( domResizeHost );\n\n\tif ( !parentWidth ) {\n\t\treturn 0;\n\t}\n\n\treturn resizeHostRect.width / parentWidth * 100;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgettypearound/utils\n */\n\nimport { isWidget } from '../utils.js';\n\nimport type {\n\tDocumentSelection,\n\tDomConverter,\n\tElement,\n\tSchema,\n\tSelection,\n\tViewElement\n} from '@ckeditor/ckeditor5-engine';\n\n/**\n * The name of the type around model selection attribute responsible for\n * displaying a fake caret next to a selected widget.\n */\nexport const TYPE_AROUND_SELECTION_ATTRIBUTE = 'widget-type-around';\n\n/**\n * Checks if an element is a widget that qualifies to get the widget type around UI.\n */\nexport function isTypeAroundWidget( viewElement: ViewElement | undefined, modelElement: Element, schema: Schema ): boolean {\n\treturn !!viewElement && isWidget( viewElement ) && !schema.isInline( modelElement );\n}\n\n/**\n * For the passed HTML element, this helper finds the closest widget type around button ancestor.\n */\nexport function getClosestTypeAroundDomButton( domElement: HTMLElement ): HTMLElement | null {\n\treturn domElement.closest( '.ck-widget__type-around__button' );\n}\n\n/**\n * For the passed widget type around button element, this helper determines at which position\n * the paragraph would be inserted into the content if, for instance, the button was\n * clicked by the user.\n *\n * @returns The position of the button.\n */\nexport function getTypeAroundButtonPosition( domElement: HTMLElement ): 'before' | 'after' {\n\treturn domElement.classList.contains( 'ck-widget__type-around__button_before' ) ? 'before' : 'after';\n}\n\n/**\n * For the passed HTML element, this helper returns the closest view widget ancestor.\n */\nexport function getClosestWidgetViewElement( domElement: HTMLElement, domConverter: DomConverter ): ViewElement {\n\tconst widgetDomElement = domElement.closest( '.ck-widget' );\n\n\treturn domConverter.mapDomToView( widgetDomElement as any ) as ViewElement;\n}\n\n/**\n * For the passed selection instance, it returns the position of the fake caret displayed next to a widget.\n *\n * **Note**: If the fake caret is not currently displayed, `null` is returned.\n *\n * @returns The position of the fake caret or `null` when none is present.\n */\nexport function getTypeAroundFakeCaretPosition( selection: Selection | DocumentSelection ): 'before' | 'after' | null {\n\treturn selection.getAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE ) as any;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/* global DOMParser */\n\n/**\n * @module widget/widgettypearound/widgettypearound\n */\n\nimport { Plugin } from '@ckeditor/ckeditor5-core';\n\nimport { Template } from '@ckeditor/ckeditor5-ui';\n\nimport {\n\tEnter,\n\ttype ViewDocumentEnterEvent\n} from '@ckeditor/ckeditor5-enter';\n\nimport {\n\tDelete,\n\ttype ViewDocumentDeleteEvent,\n\ttype ViewDocumentInsertTextEvent\n} from '@ckeditor/ckeditor5-typing';\n\nimport {\n\tenv,\n\tisForwardArrowKeyCode,\n\ttype BaseEvent,\n\ttype Emitter,\n\ttype GetCallback,\n\ttype GetCallbackOptions,\n\ttype ObservableChangeEvent,\n\ttype KeystrokeInfo\n} from '@ckeditor/ckeditor5-utils';\n\nimport type {\n\tBubblingEventInfo,\n\tDocumentChangeEvent,\n\tDomEventData,\n\tDowncastInsertEvent,\n\tDowncastSelectionEvent,\n\tDowncastWriter,\n\tElement,\n\tSchema,\n\tSelectionChangeRangeEvent,\n\tViewDocumentArrowKeyEvent,\n\tViewDocumentCompositionStartEvent,\n\tViewDocumentKeyDownEvent,\n\tViewDocumentMouseDownEvent,\n\tViewElement,\n\tModelDeleteContentEvent,\n\tModelInsertContentEvent,\n\tModelInsertObjectEvent\n} from '@ckeditor/ckeditor5-engine';\n\nimport {\n\tisTypeAroundWidget,\n\tgetClosestTypeAroundDomButton,\n\tgetTypeAroundButtonPosition,\n\tgetClosestWidgetViewElement,\n\tgetTypeAroundFakeCaretPosition,\n\tTYPE_AROUND_SELECTION_ATTRIBUTE\n} from './utils.js';\n\nimport { isWidget } from '../utils.js';\nimport type Widget from '../widget.js';\n\nimport returnIcon from '../../theme/icons/return-arrow.svg';\n\nimport '../../theme/widgettypearound.css';\n\nconst POSSIBLE_INSERTION_POSITIONS = [ 'before', 'after' ] as const;\n\n// Do the SVG parsing once and then clone the result <svg> DOM element for each new button.\nconst RETURN_ARROW_ICON_ELEMENT = new DOMParser().parseFromString( returnIcon, 'image/svg+xml' ).firstChild!;\n\nconst PLUGIN_DISABLED_EDITING_ROOT_CLASS = 'ck-widget__type-around_disabled';\n\n/**\n * A plugin that allows users to type around widgets where normally it is impossible to place the caret due\n * to limitations of web browsers. These \"tight spots\" occur, for instance, before (or after) a widget being\n * the first (or last) child of its parent or between two block widgets.\n *\n * This plugin extends the {@link module:widget/widget~Widget `Widget`} plugin and injects the user interface\n * with two buttons into each widget instance in the editor. Each of the buttons can be clicked by the\n * user if the widget is next to the \"tight spot\". Once clicked, a paragraph is created with the selection anchored\n * in it so that users can type (or insert content, paste, etc.) straight away.\n */\nexport default class WidgetTypeAround extends Plugin {\n\t/**\n\t * A reference to the model widget element that has the fake caret active\n\t * on either side of it. It is later used to remove CSS classes associated with the fake caret\n\t * when the widget no longer needs it.\n\t */\n\tprivate _currentFakeCaretModelElement: Element | null = null;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'WidgetTypeAround' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ Enter, Delete ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// Set a CSS class on the view editing root when the plugin is disabled so all the buttons\n\t\t// and lines visually disappear. All the interactions are disabled in individual plugin methods.\n\t\tthis.on<ObservableChangeEvent<boolean>>( 'change:isEnabled', ( evt, data, isEnabled ) => {\n\t\t\teditingView.change( writer => {\n\t\t\t\tfor ( const root of editingView.document.roots ) {\n\t\t\t\t\tif ( isEnabled ) {\n\t\t\t\t\t\twriter.removeClass( PLUGIN_DISABLED_EDITING_ROOT_CLASS, root );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.addClass( PLUGIN_DISABLED_EDITING_ROOT_CLASS, root );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( !isEnabled ) {\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tthis._enableTypeAroundUIInjection();\n\t\tthis._enableInsertingParagraphsOnButtonClick();\n\t\tthis._enableInsertingParagraphsOnEnterKeypress();\n\t\tthis._enableInsertingParagraphsOnTypingKeystroke();\n\t\tthis._enableTypeAroundFakeCaretActivationUsingKeyboardArrows();\n\t\tthis._enableDeleteIntegration();\n\t\tthis._enableInsertContentIntegration();\n\t\tthis._enableInsertObjectIntegration();\n\t\tthis._enableDeleteContentIntegration();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis._currentFakeCaretModelElement = null;\n\t}\n\n\t/**\n\t * Inserts a new paragraph next to a widget element with the selection anchored in it.\n\t *\n\t * **Note**: This method is heavily user-oriented and will both focus the editing view and scroll\n\t * the viewport to the selection in the inserted paragraph.\n\t *\n\t * @param widgetModelElement The model widget element next to which a paragraph is inserted.\n\t * @param position The position where the paragraph is inserted. Either `'before'` or `'after'` the widget.\n\t */\n\tprivate _insertParagraph( widgetModelElement: Element, position: 'before' | 'after' ) {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tconst attributesToCopy = editor.model.schema.getAttributesWithProperty( widgetModelElement, 'copyOnReplace', true );\n\n\t\teditor.execute( 'insertParagraph', {\n\t\t\tposition: editor.model.createPositionAt( widgetModelElement, position ),\n\t\t\tattributes: attributesToCopy\n\t\t} );\n\n\t\teditingView.focus();\n\t\teditingView.scrollToTheSelection();\n\t}\n\n\t/**\n\t * A wrapper for the {@link module:utils/emittermixin~Emitter#listenTo} method that executes the callbacks only\n\t * when the plugin {@link #isEnabled is enabled}.\n\t *\n\t * @param emitter The object that fires the event.\n\t * @param event The name of the event.\n\t * @param callback The function to be called on event.\n\t * @param options Additional options.\n\t * @param options.priority The priority of this event callback. The higher the priority value the sooner\n\t * the callback will be fired. Events having the same priority are called in the order they were added.\n\t */\n\tprivate _listenToIfEnabled<TEvent extends BaseEvent>(\n\t\temitter: Emitter,\n\t\tevent: TEvent[ 'name' ],\n\t\tcallback: OmitThisParameter<GetCallback<TEvent>>,\n\t\toptions?: GetCallbackOptions<TEvent>\n\t): void {\n\t\tthis.listenTo( emitter, event, ( ...args ) => {\n\t\t\t// Do not respond if the plugin is disabled.\n\t\t\tif ( this.isEnabled ) {\n\t\t\t\tcallback( ...args );\n\t\t\t}\n\t\t}, options );\n\t}\n\n\t/**\n\t * Similar to {@link #_insertParagraph}, this method inserts a paragraph except that it\n\t * does not expect a position. Instead, it performs the insertion next to a selected widget\n\t * according to the `widget-type-around` model selection attribute value (fake caret position).\n\t *\n\t * Because this method requires the `widget-type-around` attribute to be set,\n\t * the insertion can only happen when the widget's fake caret is active (e.g. activated\n\t * using the keyboard).\n\t *\n\t * @returns Returns `true` when the paragraph was inserted (the attribute was present) and `false` otherwise.\n\t */\n\tprivate _insertParagraphAccordingToFakeCaretPosition() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( modelSelection );\n\n\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n\t\t// @if CK_DEBUG_TYPING // \tconsole.info( '%c[WidgetTypeAround]%c Fake caret -> insert paragraph',\n\t\t// @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', ''\n\t\t// @if CK_DEBUG_TYPING // \t);\n\t\t// @if CK_DEBUG_TYPING // }\n\n\t\tconst selectedModelElement = modelSelection.getSelectedElement()!;\n\n\t\tthis._insertParagraph( selectedModelElement, typeAroundFakeCaretPosition );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates a listener in the editing conversion pipeline that injects the widget type around\n\t * UI into every single widget instance created in the editor.\n\t *\n\t * The UI is delivered as a {@link module:engine/view/uielement~UIElement}\n\t * wrapper which renders DOM buttons that users can use to insert paragraphs.\n\t */\n\tprivate _enableTypeAroundUIInjection() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst t = editor.locale.t;\n\t\tconst buttonTitles = {\n\t\t\tbefore: t( 'Insert paragraph before block' ),\n\t\t\tafter: t( 'Insert paragraph after block' )\n\t\t};\n\n\t\teditor.editing.downcastDispatcher.on<DowncastInsertEvent<Element>>( 'insert', ( evt, data, conversionApi ) => {\n\t\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\t\tif ( !viewElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Filter out non-widgets and inline widgets.\n\t\t\tif ( isTypeAroundWidget( viewElement, data.item, schema ) ) {\n\t\t\t\tinjectUIIntoWidget( conversionApi.writer, buttonTitles, viewElement! );\n\n\t\t\t\tconst widgetLabel = viewElement.getCustomProperty( 'widgetLabel' ) as Array<string | ( () => string )>;\n\n\t\t\t\twidgetLabel.push( () => {\n\t\t\t\t\treturn this.isEnabled ? t( 'Press Enter to type after or press Shift + Enter to type before the widget' ) : '';\n\t\t\t\t} );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Brings support for the fake caret that appears when either:\n\t *\n\t * * the selection moves to a widget from a position next to it using arrow keys,\n\t * * the arrow key is pressed when the widget is already selected.\n\t *\n\t * The fake caret lets the user know that they can start typing or just press\n\t * <kbd>Enter</kbd> to insert a paragraph at the position next to a widget as suggested by the fake caret.\n\t *\n\t * The fake caret disappears when the user changes the selection or the editor\n\t * gets blurred.\n\t *\n\t * The whole idea is as follows:\n\t *\n\t * 1. A user does one of the 2 scenarios described at the beginning.\n\t * 2. The \"keydown\" listener is executed and the decision is made whether to show or hide the fake caret.\n\t * 3. If it should show up, the `widget-type-around` model selection attribute is set indicating\n\t *    on which side of the widget it should appear.\n\t * 4. The selection dispatcher reacts to the selection attribute and sets CSS classes responsible for the\n\t *    fake caret on the view widget.\n\t * 5. If the fake caret should disappear, the selection attribute is removed and the dispatcher\n\t *    does the CSS class clean-up in the view.\n\t * 6. Additionally, `change:range` and `FocusTracker#isFocused` listeners also remove the selection\n\t *    attribute (the former also removes widget CSS classes).\n\t */\n\tprivate _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst schema = model.schema;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// This is the main listener responsible for the fake caret.\n\t\t// Note: The priority must precede the default Widget class keydown handler (\"high\").\n\t\tthis._listenToIfEnabled<ViewDocumentArrowKeyEvent>( editingView.document, 'arrowKey', ( evt, domEventData ) => {\n\t\t\tthis._handleArrowKeyPress( evt, domEventData );\n\t\t}, { context: [ isWidget, '$text' ], priority: 'high' } );\n\n\t\t// This listener makes sure the widget type around selection attribute will be gone from the model\n\t\t// selection as soon as the model range changes. This attribute only makes sense when a widget is selected\n\t\t// (and the \"fake horizontal caret\" is visible) so whenever the range changes (e.g. selection moved somewhere else),\n\t\t// let's get rid of the attribute so that the selection downcast dispatcher isn't even bothered.\n\t\tthis._listenToIfEnabled<SelectionChangeRangeEvent>( modelSelection, 'change:range', ( evt, data ) => {\n\t\t\t// Do not reset the selection attribute when the change was indirect.\n\t\t\tif ( !data.directChange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get rid of the widget type around attribute of the selection on every change:range.\n\t\t\t// If the range changes, it means for sure, the user is no longer in the active (\"fake horizontal caret\") mode.\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t} );\n\t\t} );\n\n\t\t// Get rid of the widget type around attribute of the selection on every document change\n\t\t// that makes widget not selected any more (i.e. widget was removed).\n\t\tthis._listenToIfEnabled<DocumentChangeEvent>( model.document, 'change:data', () => {\n\t\t\tconst selectedModelElement = modelSelection.getSelectedElement();\n\n\t\t\tif ( selectedModelElement ) {\n\t\t\t\tconst selectedViewElement = editor.editing.mapper.toViewElement( selectedModelElement );\n\n\t\t\t\tif ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t} );\n\t\t} );\n\n\t\t// React to changes of the model selection attribute made by the arrow keys listener.\n\t\t// If the block widget is selected and the attribute changes, downcast the attribute to special\n\t\t// CSS classes associated with the active (\"fake horizontal caret\") mode of the widget.\n\t\tthis._listenToIfEnabled<DowncastSelectionEvent>( editor.editing.downcastDispatcher, 'selection', ( evt, data, conversionApi ) => {\n\t\t\tconst writer = conversionApi.writer;\n\n\t\t\tif ( this._currentFakeCaretModelElement ) {\n\t\t\t\tconst selectedViewElement = conversionApi.mapper.toViewElement( this._currentFakeCaretModelElement );\n\n\t\t\t\tif ( selectedViewElement ) {\n\t\t\t\t\t// Get rid of CSS classes associated with the active (\"fake horizontal caret\") mode from the view widget.\n\t\t\t\t\twriter.removeClass( POSSIBLE_INSERTION_POSITIONS.map( positionToWidgetCssClass ), selectedViewElement );\n\n\t\t\t\t\tthis._currentFakeCaretModelElement = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst selectedModelElement = data.selection.getSelectedElement();\n\n\t\t\tif ( !selectedModelElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedViewElement = conversionApi.mapper.toViewElement( selectedModelElement );\n\n\t\t\tif ( !isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( data.selection );\n\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twriter.addClass( positionToWidgetCssClass( typeAroundFakeCaretPosition ), selectedViewElement! );\n\n\t\t\t// Remember the view widget that got the \"fake-caret\" CSS class. This class should be removed ASAP when the\n\t\t\t// selection changes\n\t\t\tthis._currentFakeCaretModelElement = selectedModelElement;\n\t\t} );\n\n\t\tthis._listenToIfEnabled<ObservableChangeEvent<boolean>>( editor.ui.focusTracker, 'change:isFocused', ( evt, name, isFocused ) => {\n\t\t\tif ( !isFocused ) {\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\tfunction positionToWidgetCssClass( position: 'before' | 'after' ) {\n\t\t\treturn `ck-widget_type-around_show-fake-caret_${ position }`;\n\t\t}\n\t}\n\n\t/**\n\t * A listener executed on each \"keydown\" in the view document, a part of\n\t * {@link #_enableTypeAroundFakeCaretActivationUsingKeyboardArrows}.\n\t *\n\t * It decides whether the arrow keypress should activate the fake caret or not (also whether it should\n\t * be deactivated).\n\t *\n\t * The fake caret activation is done by setting the `widget-type-around` model selection attribute\n\t * in this listener, and stopping and preventing the event that would normally be handled by the widget\n\t * plugin that is responsible for the regular keyboard navigation near/across all widgets (that\n\t * includes inline widgets, which are ignored by the widget type around plugin).\n\t */\n\tprivate _handleArrowKeyPress( evt: BubblingEventInfo<'arrowKey'>, domEventData: DomEventData & KeystrokeInfo ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst schema = model.schema;\n\t\tconst editingView = editor.editing.view;\n\n\t\tconst keyCode = domEventData.keyCode;\n\t\tconst isForward = isForwardArrowKeyCode( keyCode, editor.locale.contentLanguageDirection );\n\t\tconst selectedViewElement = editingView.document.selection.getSelectedElement()!;\n\t\tconst selectedModelElement = editor.editing.mapper.toModelElement( selectedViewElement )!;\n\t\tlet shouldStopAndPreventDefault;\n\n\t\t// Handle keyboard navigation when a type-around-compatible widget is currently selected.\n\t\tif ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\tshouldStopAndPreventDefault = this._handleArrowKeyPressOnSelectedWidget( isForward );\n\t\t}\n\t\t// Handle keyboard arrow navigation when the selection is next to a type-around-compatible widget\n\t\t// and the widget is about to be selected.\n\t\telse if ( modelSelection.isCollapsed ) {\n\t\t\tshouldStopAndPreventDefault = this._handleArrowKeyPressWhenSelectionNextToAWidget( isForward );\n\t\t}\n\t\t// Handle collapsing a non-collapsed selection that is wider than on a single widget.\n\t\telse if ( !domEventData.shiftKey ) {\n\t\t\tshouldStopAndPreventDefault = this._handleArrowKeyPressWhenNonCollapsedSelection( isForward );\n\t\t}\n\n\t\tif ( shouldStopAndPreventDefault ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected and activates or deactivates\n\t * the fake caret for that widget, depending on the current value of the `widget-type-around` model\n\t * selection attribute and the direction of the pressed arrow key.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */\n\tprivate _handleArrowKeyPressOnSelectedWidget( isForward: boolean ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( modelSelection );\n\n\t\treturn model.change( writer => {\n\t\t\t// If the fake caret is displayed...\n\t\t\tif ( typeAroundFakeCaretPosition ) {\n\t\t\t\tconst isLeavingWidget = typeAroundFakeCaretPosition === ( isForward ? 'after' : 'before' );\n\n\t\t\t\t// If the keyboard arrow works against the value of the selection attribute...\n\t\t\t\t// then remove the selection attribute but prevent default DOM actions\n\t\t\t\t// and do not let the Widget plugin listener move the selection. This brings\n\t\t\t\t// the widget back to the state, for instance, like if was selected using the mouse.\n\t\t\t\t//\n\t\t\t\t// **Note**: If leaving the widget when the fake caret is active, then the default\n\t\t\t\t// Widget handler will change the selection and, in turn, this will automatically discard\n\t\t\t\t// the selection attribute.\n\t\t\t\tif ( !isLeavingWidget ) {\n\t\t\t\t\twriter.removeSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the fake caret wasn't displayed, let's set it now according to the direction of the arrow\n\t\t\t// key press. This also means we cannot let the Widget plugin listener move the selection.\n\t\t\telse {\n\t\t\t\twriter.setSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before' );\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} );\n\t}\n\n\t/**\n\t * Handles the keyboard navigation on \"keydown\" when **no** widget is selected but the selection is **directly** next\n\t * to one and upon the fake caret should become active for this widget upon arrow keypress\n\t * (AKA entering/selecting the widget).\n\t *\n\t * **Note**: This code mirrors the implementation from the widget plugin but also adds the selection attribute.\n\t * Unfortunately, there is no safe way to let the widget plugin do the selection part first and then just set the\n\t * selection attribute here in the widget type around plugin. This is why this code must duplicate some from the widget plugin.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */\n\tprivate _handleArrowKeyPressWhenSelectionNextToAWidget( isForward: boolean ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst widgetPlugin: Widget = editor.plugins.get( 'Widget' );\n\n\t\t// This is the widget the selection is about to be set on.\n\t\tconst modelElementNextToSelection = widgetPlugin._getObjectElementNextToSelection( isForward )!;\n\t\tconst viewElementNextToSelection = editor.editing.mapper.toViewElement( modelElementNextToSelection );\n\n\t\tif ( isTypeAroundWidget( viewElementNextToSelection, modelElementNextToSelection, schema ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twidgetPlugin._setSelectionOverElement( modelElementNextToSelection );\n\t\t\t\twriter.setSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'before' : 'after' );\n\t\t\t} );\n\n\t\t\t// The change() block above does the same job as the Widget plugin. The event can\n\t\t\t// be safely canceled.\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected (together with some other content)\n\t * and the widget is the first or last element in the selection. It activates or deactivates the fake caret for that widget.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */\n\tprivate _handleArrowKeyPressWhenNonCollapsedSelection( isForward: boolean ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst modelSelection = model.document.selection;\n\n\t\tconst selectedModelNode = isForward ?\n\t\t\tmodelSelection.getLastPosition()!.nodeBefore :\n\t\t\tmodelSelection.getFirstPosition()!.nodeAfter;\n\n\t\tconst selectedViewNode = mapper.toViewElement( selectedModelNode as any );\n\n\t\t// There is a widget at the collapse position so collapse the selection to the fake caret on it.\n\t\tif ( isTypeAroundWidget( selectedViewNode, selectedModelNode as any, schema ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( selectedModelNode!, 'on' );\n\t\t\t\twriter.setSelectionAttribute( TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before' );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Registers a `mousedown` listener for the view document which intercepts events\n\t * coming from the widget type around UI, which happens when a user clicks one of the buttons\n\t * that insert a paragraph next to a widget.\n\t */\n\tprivate _enableInsertingParagraphsOnButtonClick() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tthis._listenToIfEnabled<ViewDocumentMouseDownEvent>( editingView.document, 'mousedown', ( evt, domEventData ) => {\n\t\t\tconst button = getClosestTypeAroundDomButton( domEventData.domTarget );\n\n\t\t\tif ( !button ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst buttonPosition = getTypeAroundButtonPosition( button );\n\t\t\tconst widgetViewElement = getClosestWidgetViewElement( button, editingView.domConverter );\n\t\t\tconst widgetModelElement = editor.editing.mapper.toModelElement( widgetViewElement );\n\n\t\t\tthis._insertParagraph( widgetModelElement!, buttonPosition );\n\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t} );\n\t}\n\n\t/**\n\t * Creates the <kbd>Enter</kbd> key listener on the view document that allows the user to insert a paragraph\n\t * near the widget when either:\n\t *\n\t * * The fake caret was first activated using the arrow keys,\n\t * * The entire widget is selected in the model.\n\t *\n\t * In the first case, the new paragraph is inserted according to the `widget-type-around` selection\n\t * attribute (see {@link #_handleArrowKeyPress}).\n\t *\n\t * In the second case, the new paragraph is inserted based on whether a soft (<kbd>Shift</kbd>+<kbd>Enter</kbd>) keystroke\n\t * was pressed or not.\n\t */\n\tprivate _enableInsertingParagraphsOnEnterKeypress() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst editingView = editor.editing.view;\n\n\t\tthis._listenToIfEnabled<ViewDocumentEnterEvent>( editingView.document, 'enter', ( evt, domEventData ) => {\n\t\t\t// This event could be triggered from inside the widget but we are interested\n\t\t\t// only when the widget is selected itself.\n\t\t\tif ( evt.eventPhase != 'atTarget' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedModelElement = selection.getSelectedElement()!;\n\t\t\tconst selectedViewElement = editor.editing.mapper.toViewElement( selectedModelElement );\n\n\t\t\tconst schema = editor.model.schema;\n\t\t\tlet wasHandled;\n\n\t\t\t// First check if the widget is selected and there's a type around selection attribute associated\n\t\t\t// with the fake caret that would tell where to insert a new paragraph.\n\t\t\tif ( this._insertParagraphAccordingToFakeCaretPosition() ) {\n\t\t\t\twasHandled = true;\n\t\t\t}\n\t\t\t// Then, if there is no selection attribute associated with the fake caret, check if the widget\n\t\t\t// simply is selected and create a new paragraph according to the keystroke (Shift+)Enter.\n\t\t\telse if ( isTypeAroundWidget( selectedViewElement, selectedModelElement, schema ) ) {\n\t\t\t\tthis._insertParagraph( selectedModelElement, domEventData.isSoft ? 'before' : 'after' );\n\n\t\t\t\twasHandled = true;\n\t\t\t}\n\n\t\t\tif ( wasHandled ) {\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: isWidget } );\n\t}\n\n\t/**\n\t * Similar to the {@link #_enableInsertingParagraphsOnEnterKeypress}, it allows the user\n\t * to insert a paragraph next to a widget when the fake caret was activated using arrow\n\t * keys but it responds to typing instead of <kbd>Enter</kbd>.\n\t *\n\t * Listener enabled by this method will insert a new paragraph according to the `widget-type-around`\n\t * model selection attribute as the user simply starts typing, which creates the impression that the fake caret\n\t * behaves like a real one rendered by the browser (AKA your text appears where the caret was).\n\t *\n\t * **Note**: At the moment this listener creates 2 undo steps: one for the `insertParagraph` command\n\t * and another one for actual typing. It is not a disaster but this may need to be fixed\n\t * sooner or later.\n\t */\n\tprivate _enableInsertingParagraphsOnTypingKeystroke() {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\t// Note: The priority must precede the default Input plugin insertText handler.\n\t\tthis._listenToIfEnabled<ViewDocumentInsertTextEvent>( viewDocument, 'insertText', ( evt, data ) => {\n\t\t\tif ( this._insertParagraphAccordingToFakeCaretPosition() ) {\n\t\t\t\t// The view selection in the event data contains the widget. If the new paragraph\n\t\t\t\t// was inserted, modify the view selection passed along with the insertText event\n\t\t\t\t// so the default event handler in the Input plugin starts typing inside the paragraph.\n\t\t\t\t// Otherwise, the typing would be over the widget.\n\t\t\t\tdata.selection = viewDocument.selection;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\tif ( env.isAndroid ) {\n\t\t\t// On Android with English keyboard, the composition starts just by putting caret\n\t\t\t// at the word end or by selecting a table column. This is not a real composition started.\n\t\t\t// Trigger delete content on first composition key pressed.\n\t\t\tthis._listenToIfEnabled<ViewDocumentKeyDownEvent>( viewDocument, 'keydown', ( evt, data ) => {\n\t\t\t\tif ( data.keyCode == 229 ) {\n\t\t\t\t\tthis._insertParagraphAccordingToFakeCaretPosition();\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\t// Note: The priority must precede the default Input plugin compositionstart handler (to call it before delete content).\n\t\t\tthis._listenToIfEnabled<ViewDocumentCompositionStartEvent>( viewDocument, 'compositionstart', () => {\n\t\t\t\tthis._insertParagraphAccordingToFakeCaretPosition();\n\t\t\t}, { priority: 'high' } );\n\t\t}\n\t}\n\n\t/**\n\t * It creates a \"delete\" event listener on the view document to handle cases when the <kbd>Delete</kbd> or <kbd>Backspace</kbd>\n\t * is pressed and the fake caret is currently active.\n\t *\n\t * The fake caret should create an illusion of a real browser caret so that when it appears before or after\n\t * a widget, pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> should remove a widget or delete the content\n\t * before or after a widget (depending on the content surrounding the widget).\n\t */\n\tprivate _enableDeleteIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\n\t\tthis._listenToIfEnabled<ViewDocumentDeleteEvent>( editingView.document, 'delete', ( evt, domEventData ) => {\n\t\t\t// This event could be triggered from inside the widget but we are interested\n\t\t\t// only when the widget is selected itself.\n\t\t\tif ( evt.eventPhase != 'atTarget' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( model.document.selection );\n\n\t\t\t// This listener handles only these cases when the fake caret is active.\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst direction = domEventData.direction;\n\t\t\tconst selectedModelWidget = model.document.selection.getSelectedElement();\n\n\t\t\tconst isFakeCaretBefore = typeAroundFakeCaretPosition === 'before';\n\t\t\tconst isDeleteForward = direction == 'forward';\n\t\t\tconst shouldDeleteEntireWidget = isFakeCaretBefore === isDeleteForward;\n\n\t\t\tif ( shouldDeleteEntireWidget ) {\n\t\t\t\teditor.execute( 'delete', {\n\t\t\t\t\tselection: model.createSelection( selectedModelWidget!, 'on' )\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tconst range = schema.getNearestSelectionRange(\n\t\t\t\t\tmodel.createPositionAt( selectedModelWidget!, typeAroundFakeCaretPosition ),\n\t\t\t\t\tdirection\n\t\t\t\t);\n\n\t\t\t\t// If there is somewhere to move selection to, then there will be something to delete.\n\t\t\t\tif ( range ) {\n\t\t\t\t\t// If the range is NOT collapsed, then we know that the range contains an object (see getNearestSelectionRange() docs).\n\t\t\t\t\tif ( !range.isCollapsed ) {\n\t\t\t\t\t\tmodel.change( writer => {\n\t\t\t\t\t\t\twriter.setSelection( range );\n\t\t\t\t\t\t\teditor.execute( isDeleteForward ? 'deleteForward' : 'delete' );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst probe = model.createSelection( range.start );\n\t\t\t\t\t\tmodel.modifySelection( probe, { direction } );\n\n\t\t\t\t\t\t// If the range is collapsed, let's see if a non-collapsed range exists that can could be deleted.\n\t\t\t\t\t\t// If such range exists, use the editor command because it it safe for collaboration (it merges where it can).\n\t\t\t\t\t\tif ( !probe.focus!.isEqual( range.start ) ) {\n\t\t\t\t\t\t\tmodel.change( writer => {\n\t\t\t\t\t\t\t\twriter.setSelection( range );\n\t\t\t\t\t\t\t\teditor.execute( isDeleteForward ? 'deleteForward' : 'delete' );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If there is no non-collapsed range to be deleted then we are sure that there is an empty element\n\t\t\t\t\t\t// next to a widget that should be removed. \"delete\" and \"deleteForward\" commands cannot get rid of it\n\t\t\t\t\t\t// so calling Model#deleteContent here manually.\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst deepestEmptyRangeAncestor = getDeepestEmptyElementAncestor( schema, range.start.parent as Element );\n\n\t\t\t\t\t\t\tmodel.deleteContent( model.createSelection( deepestEmptyRangeAncestor, 'on' ), {\n\t\t\t\t\t\t\t\tdoNotAutoparagraph: true\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If some content was deleted, don't let the handler from the Widget plugin kick in.\n\t\t\t// If nothing was deleted, then the default handler will have nothing to do anyway.\n\t\t\tdomEventData.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { context: isWidget } );\n\t}\n\n\t/**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertContent} event listener that, for instance, allows the user to paste\n\t * content near a widget when the fake caret is first activated using the arrow keys.\n\t *\n\t * The content is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */\n\tprivate _enableInsertContentIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\n\t\tthis._listenToIfEnabled<ModelInsertContentEvent>( editor.model, 'insertContent', ( evt, [ content, selectable ] ) => {\n\t\t\tif ( selectable && !( selectable as any ).is( 'documentSelection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( documentSelection );\n\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevt.stop();\n\n\t\t\treturn model.change( writer => {\n\t\t\t\tconst selectedElement = documentSelection.getSelectedElement();\n\t\t\t\tconst position = model.createPositionAt( selectedElement!, typeAroundFakeCaretPosition );\n\t\t\t\tconst selection = writer.createSelection( position );\n\n\t\t\t\tconst result = model.insertContent( content, selection );\n\n\t\t\t\twriter.setSelection( selection );\n\n\t\t\t\treturn result;\n\t\t\t} );\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertObject} event listener that modifies the\n\t * `options.findOptimalPosition`parameter to position of fake caret in relation to selected element\n\t * to reflect user's intent of desired insertion position.\n\t *\n\t * The object is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */\n\tprivate _enableInsertObjectIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\n\t\tthis._listenToIfEnabled<ModelInsertObjectEvent>( editor.model, 'insertObject', ( evt, args ) => {\n\t\t\tconst [ , selectable, options = {} ] = args;\n\n\t\t\tif ( selectable && !( selectable as any ).is( 'documentSelection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( documentSelection );\n\n\t\t\tif ( !typeAroundFakeCaretPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toptions.findOptimalPosition = typeAroundFakeCaretPosition;\n\t\t\targs[ 3 ] = options;\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Attaches the {@link module:engine/model/model~Model#event:deleteContent} event listener to block the event when the fake\n\t * caret is active.\n\t *\n\t * This is required for cases that trigger {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n\t * before calling {@link module:engine/model/model~Model#insertContent `model.insertContent()`} like, for instance,\n\t * plain text pasting.\n\t */\n\tprivate _enableDeleteContentIntegration() {\n\t\tconst editor = this.editor;\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\n\t\tthis._listenToIfEnabled<ModelDeleteContentEvent>( editor.model, 'deleteContent', ( evt, [ selection ] ) => {\n\t\t\tif ( selection && !selection.is( 'documentSelection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition( documentSelection );\n\n\t\t\t// Disable removing the selection content while pasting plain text.\n\t\t\tif ( typeAroundFakeCaretPosition ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n}\n\n/**\n * Injects the type around UI into a view widget instance.\n */\nfunction injectUIIntoWidget(\n\tviewWriter: DowncastWriter,\n\tbuttonTitles: { before: string; after: string },\n\twidgetViewElement: ViewElement ) {\n\tconst typeAroundWrapper = viewWriter.createUIElement( 'div', {\n\t\tclass: 'ck ck-reset_all ck-widget__type-around'\n\t}, function( domDocument ) {\n\t\tconst wrapperDomElement = this.toDomElement( domDocument );\n\n\t\tinjectButtons( wrapperDomElement, buttonTitles );\n\t\tinjectFakeCaret( wrapperDomElement );\n\n\t\treturn wrapperDomElement;\n\t} );\n\n\t// Inject the type around wrapper into the widget's wrapper.\n\tviewWriter.insert( viewWriter.createPositionAt( widgetViewElement, 'end' ), typeAroundWrapper );\n}\n\n/**\n * FYI: Not using the IconView class because each instance would need to be destroyed to avoid memory leaks\n * and it's pretty hard to figure out when a view (widget) is gone for good so it's cheaper to use raw\n * <svg> here.\n */\nfunction injectButtons( wrapperDomElement: HTMLElement, buttonTitles: { before: string; after: string } ) {\n\tfor ( const position of POSSIBLE_INSERTION_POSITIONS ) {\n\t\tconst buttonTemplate = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-widget__type-around__button',\n\t\t\t\t\t`ck-widget__type-around__button_${ position }`\n\t\t\t\t],\n\t\t\t\ttitle: buttonTitles[ position ],\n\t\t\t\t'aria-hidden': 'true'\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\twrapperDomElement.ownerDocument.importNode( RETURN_ARROW_ICON_ELEMENT, true )\n\t\t\t]\n\t\t} );\n\n\t\twrapperDomElement.appendChild( buttonTemplate.render() );\n\t}\n}\n\nfunction injectFakeCaret( wrapperDomElement: HTMLElement ) {\n\tconst caretTemplate = new Template( {\n\t\ttag: 'div',\n\t\tattributes: {\n\t\t\tclass: [\n\t\t\t\t'ck',\n\t\t\t\t'ck-widget__type-around__fake-caret'\n\t\t\t]\n\t\t}\n\t} );\n\n\twrapperDomElement.appendChild( caretTemplate.render() );\n}\n\n/**\n * Returns the ancestor of an element closest to the root which is empty. For instance,\n * for `<baz>`:\n *\n * ```\n * <foo>abc<bar><baz></baz></bar></foo>\n * ```\n *\n * it returns `<bar>`.\n */\nfunction getDeepestEmptyElementAncestor( schema: Schema, element: Element ) {\n\tlet deepestEmptyAncestor = element;\n\n\tfor ( const ancestor of element.getAncestors( { parentFirst: true } ) ) {\n\t\tif ( ( ancestor as any ).childCount > 1 || schema.isLimit( ancestor ) ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tdeepestEmptyAncestor = ancestor as Element;\n\t}\n\n\treturn deepestEmptyAncestor;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/verticalnavigation\n */\n\nimport {\n\tkeyCodes,\n\tRect,\n\ttype GetCallback\n} from '@ckeditor/ckeditor5-utils';\n\nimport type {\n\tDocumentSelection,\n\tEditingController,\n\tModel,\n\tPosition,\n\tRange,\n\tSchema,\n\tSelection,\n\tViewDocumentArrowKeyEvent\n} from '@ckeditor/ckeditor5-engine';\n\n/**\n * Returns 'keydown' handler for up/down arrow keys that modifies the caret movement if it's in a text line next to an object.\n *\n * @param editing The editing controller.\n */\nexport default function verticalNavigationHandler(\n\tediting: EditingController\n): GetCallback<ViewDocumentArrowKeyEvent> {\n\tconst model = editing.model;\n\n\treturn ( evt, data ) => {\n\t\tconst arrowUpPressed = data.keyCode == keyCodes.arrowup;\n\t\tconst arrowDownPressed = data.keyCode == keyCodes.arrowdown;\n\t\tconst expandSelection = data.shiftKey;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( !arrowUpPressed && !arrowDownPressed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isForward = arrowDownPressed;\n\n\t\t// Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n\t\t// Selection for sure will not approach any object.\n\t\tif ( expandSelection && selectionWillShrink( selection, isForward ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find a range between selection and closest limit element.\n\t\tconst range = findTextRangeFromSelection( editing, selection, isForward );\n\n\t\t// There is no selection position inside the limit element.\n\t\tif ( !range ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If already at the edge of a limit element.\n\t\tif ( range.isCollapsed ) {\n\t\t\t// A collapsed selection at limit edge - nothing more to do.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// A non collapsed selection is at the limit edge while expanding the selection - let others do their stuff.\n\t\t\telse if ( expandSelection ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// If the range is a single line (there is no word wrapping) then move the selection to the position closest to the limit element.\n\t\t//\n\t\t// We can't move the selection directly to the isObject element (eg. table cell) because of dual position at the end/beginning\n\t\t// of wrapped line (it's at the same time at the end of one line and at the start of the next line).\n\t\tif ( range.isCollapsed || isSingleLineRange( editing, range, isForward ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\tconst newPosition = isForward ? range.end : range.start;\n\n\t\t\t\tif ( expandSelection ) {\n\t\t\t\t\tconst newSelection = model.createSelection( selection.anchor );\n\t\t\t\t\tnewSelection.setFocus( newPosition );\n\n\t\t\t\t\twriter.setSelection( newSelection );\n\t\t\t\t} else {\n\t\t\t\t\twriter.setSelection( newPosition );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tevt.stop();\n\t\t\tdata.preventDefault();\n\t\t\tdata.stopPropagation();\n\t\t}\n\t};\n}\n\n/**\n * Finds the range between selection and closest limit element (in the direction of navigation).\n * The position next to limit element is adjusted to the closest allowed `$text` position.\n *\n * Returns `null` if, according to the schema, the resulting range cannot contain a `$text` element.\n *\n * @param editing The editing controller.\n * @param selection The current selection.\n * @param isForward The expected navigation direction.\n */\nfunction findTextRangeFromSelection( editing: EditingController, selection: Selection | DocumentSelection, isForward: boolean ) {\n\tconst model = editing.model;\n\n\tif ( isForward ) {\n\t\tconst startPosition = selection.isCollapsed ? selection.focus! : selection.getLastPosition()!;\n\t\tconst endPosition = getNearestNonInlineLimit( model, startPosition, 'forward' );\n\n\t\t// There is no limit element, browser should handle this.\n\t\tif ( !endPosition ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = model.createRange( startPosition, endPosition );\n\t\tconst lastRangePosition = getNearestTextPosition( model.schema, range, 'backward' );\n\n\t\tif ( lastRangePosition ) {\n\t\t\treturn model.createRange( startPosition, lastRangePosition );\n\t\t}\n\n\t\treturn null;\n\t} else {\n\t\tconst endPosition = selection.isCollapsed ? selection.focus! : selection.getFirstPosition()!;\n\t\tconst startPosition = getNearestNonInlineLimit( model, endPosition, 'backward' );\n\n\t\t// There is no limit element, browser should handle this.\n\t\tif ( !startPosition ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = model.createRange( startPosition, endPosition );\n\t\tconst firstRangePosition = getNearestTextPosition( model.schema, range, 'forward' );\n\n\t\tif ( firstRangePosition ) {\n\t\t\treturn model.createRange( firstRangePosition, endPosition );\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n/**\n * Finds the limit element position that is closest to startPosition.\n *\n * @param direction Search direction.\n */\nfunction getNearestNonInlineLimit( model: Model, startPosition: Position, direction: 'forward' | 'backward' ) {\n\tconst schema = model.schema;\n\tconst range = model.createRangeIn( startPosition.root );\n\n\tconst walkerValueType = direction == 'forward' ? 'elementStart' : 'elementEnd';\n\n\tfor ( const { previousPosition, item, type } of range.getWalker( { startPosition, direction } ) ) {\n\t\tif ( schema.isLimit( item ) && !schema.isInline( item ) ) {\n\t\t\treturn previousPosition;\n\t\t}\n\n\t\t// Stop looking for isLimit element if the next element is a block element (it is for sure not single line).\n\t\tif ( type == walkerValueType && schema.isBlock( item ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Basing on the provided range, finds the first or last (depending on `direction`) position inside the range\n * that can contain `$text` (according to schema).\n *\n * @param schema The schema.\n * @param range The range to find the position in.\n * @param direction Search direction.\n * @returns The nearest selection position.\n *\n */\nfunction getNearestTextPosition( schema: Schema, range: Range, direction: 'forward' | 'backward' ) {\n\tconst position = direction == 'backward' ? range.end : range.start;\n\n\tif ( schema.checkChild( position, '$text' ) ) {\n\t\treturn position;\n\t}\n\n\tfor ( const { nextPosition } of range.getWalker( { direction } ) ) {\n\t\tif ( schema.checkChild( nextPosition, '$text' ) ) {\n\t\t\treturn nextPosition;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if the DOM range corresponding to the provided model range renders as a single line by analyzing DOMRects\n * (verifying if they visually wrap content to the next line).\n *\n * @param editing The editing controller.\n * @param modelRange The current table cell content range.\n * @param isForward The expected navigation direction.\n */\nfunction isSingleLineRange( editing: EditingController, modelRange: Range, isForward: boolean ) {\n\tconst model = editing.model;\n\tconst domConverter = editing.view.domConverter;\n\n\t// Wrapped lines contain exactly the same position at the end of current line\n\t// and at the beginning of next line. That position's client rect is at the end\n\t// of current line. In case of caret at first position of the last line that 'dual'\n\t// position would be detected as it's not the last line.\n\tif ( isForward ) {\n\t\tconst probe = model.createSelection( modelRange.start );\n\n\t\tmodel.modifySelection( probe );\n\n\t\t// If the new position is at the end of the container then we can't use this position\n\t\t// because it would provide incorrect result for eg caption of image and selection\n\t\t// just before end of it. Also in this case there is no \"dual\" position.\n\t\tif ( !probe.focus!.isAtEnd && !modelRange.start.isEqual( probe.focus! ) ) {\n\t\t\tmodelRange = model.createRange( probe.focus!, modelRange.end );\n\t\t}\n\t}\n\n\tconst viewRange = editing.mapper.toViewRange( modelRange );\n\tconst domRange = domConverter.viewRangeToDom( viewRange );\n\tconst rects = Rect.getDomRangeRects( domRange );\n\n\tlet boundaryVerticalPosition;\n\n\tfor ( const rect of rects ) {\n\t\tif ( boundaryVerticalPosition === undefined ) {\n\t\t\tboundaryVerticalPosition = Math.round( rect.bottom );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Let's check if this rect is in new line.\n\t\tif ( Math.round( rect.top ) >= boundaryVerticalPosition ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tboundaryVerticalPosition = Math.max( boundaryVerticalPosition, Math.round( rect.bottom ) );\n\t}\n\n\treturn true;\n}\n\nfunction selectionWillShrink( selection: DocumentSelection, isForward: boolean ) {\n\treturn !selection.isCollapsed && selection.isBackward == isForward;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widget\n */\n\nimport { Plugin } from '@ckeditor/ckeditor5-core';\n\nimport {\n\tMouseObserver,\n\tTreeWalker,\n\ttype DomEventData,\n\ttype DowncastSelectionEvent,\n\ttype DowncastWriter,\n\ttype Element,\n\ttype Node,\n\ttype ViewDocumentArrowKeyEvent,\n\ttype ViewDocumentMouseDownEvent,\n\ttype ViewElement,\n\ttype Schema,\n\ttype Position,\n\ttype EditingView,\n\ttype ViewDocumentTabEvent,\n\ttype ViewDocumentKeyDownEvent,\n\ttype ViewNode,\n\ttype ViewRange\n} from '@ckeditor/ckeditor5-engine';\n\nimport { Delete, type ViewDocumentDeleteEvent } from '@ckeditor/ckeditor5-typing';\n\nimport {\n\tenv,\n\tkeyCodes,\n\tgetLocalizedArrowKeyCodeDirection,\n\tgetRangeFromMouseEvent,\n\ttype EventInfo,\n\ttype KeystrokeInfo\n} from '@ckeditor/ckeditor5-utils';\n\nimport WidgetTypeAround from './widgettypearound/widgettypearound.js';\nimport verticalNavigationHandler from './verticalnavigation.js';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils.js';\n\nimport '../theme/widget.css';\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n */\nexport default class Widget extends Plugin {\n\t/**\n\t * Holds previously selected widgets.\n\t */\n\tprivate _previouslySelected = new Set<ViewElement>();\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'Widget' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ WidgetTypeAround, Delete ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst t = editor.t;\n\n\t\t// Model to view selection converter.\n\t\t// Converts selection placed over widget element to fake selection.\n\t\t//\n\t\t// By default, the selection is downcasted by the engine to surround the attribute element, even though its only\n\t\t// child is an inline widget. A similar thing also happens when a collapsed marker is rendered as a UI element\n\t\t// next to an inline widget: the view selection contains both the widget and the marker.\n\t\t//\n\t\t// This prevents creating a correct fake selection when this inline widget is selected. Normalize the selection\n\t\t// in these cases based on the model:\n\t\t//\n\t\t//\t\t[<attributeElement><inlineWidget /></attributeElement>] -> <attributeElement>[<inlineWidget />]</attributeElement>\n\t\t//\t\t[<uiElement></uiElement><inlineWidget />] -> <uiElement></uiElement>[<inlineWidget />]\n\t\t//\n\t\t// Thanks to this:\n\t\t//\n\t\t// * fake selection can be set correctly,\n\t\t// * any logic depending on (View)Selection#getSelectedElement() also works OK.\n\t\t//\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/9524.\n\t\tthis.editor.editing.downcastDispatcher.on<DowncastSelectionEvent>( 'selection', ( evt, data, conversionApi ) => {\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst modelSelection = data.selection;\n\n\t\t\t// The collapsed selection can't contain any widget.\n\t\t\tif ( modelSelection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedModelElement = modelSelection.getSelectedElement();\n\n\t\t\tif ( !selectedModelElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selectedViewElement = editor.editing.mapper.toViewElement( selectedModelElement )!;\n\n\t\t\tif ( !isWidget( selectedViewElement ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !conversionApi.consumable.consume( modelSelection, 'selection' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tviewWriter.setSelection( viewWriter.createRangeOn( selectedViewElement ), {\n\t\t\t\tfake: true,\n\t\t\t\tlabel: getLabel( selectedViewElement )\n\t\t\t} );\n\t\t} );\n\n\t\t// Mark all widgets inside the selection with the css class.\n\t\t// This handler is registered at the 'low' priority so it's triggered after the real selection conversion.\n\t\tthis.editor.editing.downcastDispatcher.on<DowncastSelectionEvent>( 'selection', ( evt, data, conversionApi ) => {\n\t\t\t// Remove selected class from previously selected widgets.\n\t\t\tthis._clearPreviouslySelectedWidgets( conversionApi.writer );\n\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\t\tlet lastMarked = null;\n\n\t\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t\t// Note: There could be multiple selected widgets in a range but no fake selection.\n\t\t\t\t// All of them must be marked as selected, for instance [<widget></widget><widget></widget>]\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tconst node = value.item as ViewElement;\n\t\t\t\t\t// Do not mark nested widgets in selected one. See: #4594\n\t\t\t\t\tif ( isWidget( node ) && !isChild( node, lastMarked ) ) {\n\t\t\t\t\t\tviewWriter.addClass( WIDGET_SELECTED_CLASS_NAME, node );\n\t\t\t\t\t\tthis._previouslySelected.add( node );\n\t\t\t\t\t\tlastMarked = node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// If mouse down is pressed on widget - create selection over whole widget.\n\t\tview.addObserver( MouseObserver );\n\t\tthis.listenTo<ViewDocumentMouseDownEvent>( viewDocument, 'mousedown', ( ...args ) => this._onMousedown( ...args ) );\n\n\t\t// There are two keydown listeners working on different priorities. This allows other\n\t\t// features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n\t\t// and customize the behavior even further in different content/selection scenarios.\n\t\t//\n\t\t// * The first listener handles changing the selection on arrow key press\n\t\t// if the widget is selected or if the selection is next to a widget and the widget\n\t\t// should become selected upon the arrow key press.\n\t\t//\n\t\t// * The second (late) listener makes sure the default browser action on arrow key press is\n\t\t// prevented when a widget is selected. This prevents the selection from being moved\n\t\t// from a fake selection container.\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>( viewDocument, 'arrowKey', ( ...args ) => {\n\t\t\tthis._handleSelectionChangeOnArrowKeyPress( ...args );\n\t\t}, { context: [ isWidget, '$text' ] } );\n\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>( viewDocument, 'arrowKey', ( ...args ) => {\n\t\t\tthis._preventDefaultOnArrowKeyPress( ...args );\n\t\t}, { context: '$root' } );\n\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>(\n\t\t\tviewDocument,\n\t\t\t'arrowKey',\n\t\t\tverticalNavigationHandler( this.editor.editing ),\n\t\t\t{ context: '$text' }\n\t\t);\n\n\t\t// Handle custom delete behaviour.\n\t\tthis.listenTo<ViewDocumentDeleteEvent>( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tif ( this._handleDelete( data.direction == 'forward' ) ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: '$root' } );\n\n\t\t// Handle Tab key while a widget is selected.\n\t\tthis.listenTo<ViewDocumentTabEvent>( viewDocument, 'tab', ( evt, data ) => {\n\t\t\t// This event could be triggered from inside the widget, but we are interested\n\t\t\t// only when the widget is selected itself.\n\t\t\tif ( evt.eventPhase != 'atTarget' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( data.shiftKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this._selectFirstNestedEditable() ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { context: isWidget, priority: 'low' } );\n\n\t\t// Handle Shift+Tab key while caret inside a widget editable.\n\t\tthis.listenTo<ViewDocumentTabEvent>( viewDocument, 'tab', ( evt, data ) => {\n\t\t\tif ( !data.shiftKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this._selectAncestorWidget() ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handle Esc key while inside a nested editable.\n\t\tthis.listenTo<ViewDocumentKeyDownEvent>( viewDocument, 'keydown', ( evt, data ) => {\n\t\t\tif ( data.keystroke != keyCodes.esc ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this._selectAncestorWidget() ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Add the information about the keystrokes to the accessibility database.\n\t\teditor.accessibility.addKeystrokeInfoGroup( {\n\t\t\tid: 'widget',\n\t\t\tlabel: t( 'Keystrokes that can be used when a widget is selected (for example: image, table, etc.)' ),\n\t\t\tkeystrokes: [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move focus from an editable area back to the parent widget' ),\n\t\t\t\t\tkeystroke: 'Esc'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Insert a new paragraph directly after a widget' ),\n\t\t\t\t\tkeystroke: 'Enter'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Insert a new paragraph directly before a widget' ),\n\t\t\t\t\tkeystroke: 'Shift+Enter'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move the caret to allow typing directly before a widget' ),\n\t\t\t\t\tkeystroke: [ [ 'arrowup' ], [ 'arrowleft' ] ]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move the caret to allow typing directly after a widget' ),\n\t\t\t\t\tkeystroke: [ [ 'arrowdown' ], [ 'arrowright' ] ]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n\t */\n\tprivate _onMousedown( eventInfo: EventInfo, domEventData: DomEventData<MouseEvent> ) {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tlet element: ViewElement | null = domEventData.target;\n\n\t\t// Some of DOM elements have no view element representation so it may be null.\n\t\tif ( !element ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If triple click should select entire paragraph.\n\t\tif ( domEventData.domEvent.detail >= 3 ) {\n\t\t\tif ( this._selectBlockContent( element ) ) {\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If target is not a widget element - check if one of the ancestors is.\n\t\tif ( !isWidget( element ) ) {\n\t\t\tconst editableOrWidgetElement = findClosestEditableOrWidgetAncestor( element );\n\n\t\t\tif ( !editableOrWidgetElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isWidget( editableOrWidgetElement ) ) {\n\t\t\t\telement = editableOrWidgetElement;\n\t\t\t} else {\n\t\t\t\t// Pick view range from the point where the mouse was clicked.\n\t\t\t\tconst clickTargetFromPoint = getElementFromMouseEvent( view, domEventData );\n\n\t\t\t\tif ( clickTargetFromPoint && isWidget( clickTargetFromPoint ) ) {\n\t\t\t\t\telement = clickTargetFromPoint;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// On Android selection would jump to the first table cell, on other devices\n\t\t// we can't block it (and don't need to) because of drag and drop support.\n\t\tif ( env.isAndroid ) {\n\t\t\tdomEventData.preventDefault();\n\t\t}\n\n\t\t// Focus editor if is not focused already.\n\t\tif ( !viewDocument.isFocused ) {\n\t\t\tview.focus();\n\t\t}\n\n\t\t// Create model selection over widget.\n\t\tconst modelElement = editor.editing.mapper.toModelElement( element );\n\n\t\tthis._setSelectionOverElement( modelElement! );\n\t}\n\n\t/**\n\t * Selects entire block content, e.g. on triple click it selects entire paragraph.\n\t */\n\tprivate _selectBlockContent( element: ViewElement ): boolean {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst schema = model.schema;\n\n\t\tconst viewElement = mapper.findMappedViewAncestor( this.editor.editing.view.createPositionAt( element, 0 ) );\n\t\tconst modelElement = findTextBlockAncestor( mapper.toModelElement( viewElement )!, model.schema );\n\n\t\tif ( !modelElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst nextTextBlock = !schema.isLimit( modelElement ) ?\n\t\t\t\tfindNextTextBlock( writer.createPositionAfter( modelElement ), schema ) :\n\t\t\t\tnull;\n\n\t\t\tconst start = writer.createPositionAt( modelElement, 0 );\n\t\t\tconst end = nextTextBlock ?\n\t\t\t\twriter.createPositionAt( nextTextBlock, 0 ) :\n\t\t\t\twriter.createPositionAt( modelElement, 'end' );\n\n\t\t\twriter.setSelection( writer.createRange( start, end ) );\n\t\t} );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and changes\n\t * the model selection when:\n\t *\n\t * * arrow key is pressed when the widget is selected,\n\t * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n\t *\n\t * See {@link #_preventDefaultOnArrowKeyPress}.\n\t */\n\tprivate _handleSelectionChangeOnArrowKeyPress( eventInfo: EventInfo, domEventData: DomEventData & KeystrokeInfo ) {\n\t\tconst keyCode = domEventData.keyCode;\n\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst objectElement = modelSelection.getSelectedElement();\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( keyCode, this.editor.locale.contentLanguageDirection );\n\t\tconst isForward = direction == 'down' || direction == 'right';\n\t\tconst isVerticalNavigation = direction == 'up' || direction == 'down';\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tconst position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n\t\t\tconst newRange = schema.getNearestSelectionRange( position!, isForward ? 'forward' : 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\teventInfo.stop();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Handle collapsing of the selection when there is any widget on the edge of selection.\n\t\t// This is needed because browsers have problems with collapsing such selection.\n\t\tif ( !modelSelection.isCollapsed && !domEventData.shiftKey ) {\n\t\t\tconst firstPosition = modelSelection.getFirstPosition();\n\t\t\tconst lastPosition = modelSelection.getLastPosition();\n\n\t\t\tconst firstSelectedNode = firstPosition!.nodeAfter;\n\t\t\tconst lastSelectedNode = lastPosition!.nodeBefore;\n\n\t\t\tif ( firstSelectedNode && schema.isObject( firstSelectedNode ) || lastSelectedNode && schema.isObject( lastSelectedNode ) ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( isForward ? lastPosition : firstPosition );\n\t\t\t\t} );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t\teventInfo.stop();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Return if not collapsed.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If selection is next to object element.\n\n\t\tconst objectElementNextToSelection = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElementNextToSelection && schema.isObject( objectElementNextToSelection ) ) {\n\t\t\t// Do not select an inline widget while handling up/down arrow.\n\t\t\tif ( schema.isInline( objectElementNextToSelection ) && isVerticalNavigation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._setSelectionOverElement( objectElementNextToSelection );\n\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and prevents\n\t * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n\t * container.\n\t *\n\t * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n\t */\n\tprivate _preventDefaultOnArrowKeyPress( eventInfo: EventInfo, domEventData: DomEventData ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst objectElement = model.document.selection.getSelectedElement();\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @param isForward Set to true if delete was performed in forward direction.\n\t * @returns Returns `true` if keys were handled correctly.\n\t */\n\tprivate _handleDelete( isForward: boolean ) {\n\t\tconst modelDocument = this.editor.model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\n\t\t// Do nothing when the read only mode is enabled.\n\t\tif ( !this.editor.model.canEditAt( modelSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do nothing on non-collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElement ) {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tlet previousNode = modelSelection.anchor!.parent;\n\n\t\t\t\t// Remove previous element if empty.\n\t\t\t\twhile ( previousNode.isEmpty ) {\n\t\t\t\t\tconst nodeToRemove = previousNode;\n\t\t\t\t\tpreviousNode = nodeToRemove.parent!;\n\n\t\t\t\t\twriter.remove( nodeToRemove as Element );\n\t\t\t\t}\n\n\t\t\t\tthis._setSelectionOverElement( objectElement );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n\t *\n\t * @internal\n\t */\n\tpublic _setSelectionOverElement( element: Node ): void {\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeOn( element ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\n\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~Schema schema} as `object`.\n\t *\n\t * @internal\n\t * @param forward Direction of checking.\n\t */\n\tpublic _getObjectElementNextToSelection( forward: boolean ): Element | null {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\n\t\t// Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n\t\t// to its current state after undo.\n\t\tconst probe = model.createSelection( modelSelection );\n\t\tmodel.modifySelection( probe, { direction: forward ? 'forward' : 'backward' } );\n\n\t\t// The selection didn't change so there is nothing there.\n\t\tif ( probe.isEqual( modelSelection ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst objectElement = forward ? probe.focus!.nodeBefore : probe.focus!.nodeAfter;\n\n\t\tif ( !!objectElement && schema.isObject( objectElement ) ) {\n\t\t\treturn objectElement as Element;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes CSS class from previously selected widgets.\n\t */\n\tprivate _clearPreviouslySelectedWidgets( writer: DowncastWriter ) {\n\t\tfor ( const widget of this._previouslySelected ) {\n\t\t\twriter.removeClass( WIDGET_SELECTED_CLASS_NAME, widget );\n\t\t}\n\n\t\tthis._previouslySelected.clear();\n\t}\n\n\t/**\n\t * Moves the document selection into the first nested editable.\n\t */\n\tprivate _selectFirstNestedEditable(): boolean {\n\t\tconst editor = this.editor;\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tfor ( const item of viewDocument.selection.getFirstRange()!.getItems() ) {\n\t\t\tif ( item.is( 'editableElement' ) ) {\n\t\t\t\tconst modelElement = editor.editing.mapper.toModelElement( item );\n\n\t\t\t\t/* istanbul ignore next -- @preserve */\n\t\t\t\tif ( !modelElement ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst position = editor.model.createPositionAt( modelElement, 0 );\n\t\t\t\tconst newRange = editor.model.schema.getNearestSelectionRange( position, 'forward' );\n\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Updates the document selection so that it selects first ancestor widget.\n\t */\n\tprivate _selectAncestorWidget(): boolean {\n\t\tconst editor = this.editor;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst selection = editor.editing.view.document.selection;\n\n\t\tconst positionParent = selection.getFirstPosition()!.parent;\n\n\t\tconst positionParentElement = positionParent.is( '$text' ) ?\n\t\t\tpositionParent.parent as ViewElement :\n\t\t\tpositionParent as ViewElement;\n\n\t\tconst viewElement = positionParentElement.findAncestor( isWidget );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst modelElement = mapper.toModelElement( viewElement );\n\n\t\t/* istanbul ignore next -- @preserve */\n\t\tif ( !modelElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\twriter.setSelection( modelElement, 'on' );\n\t\t} );\n\n\t\treturn true;\n\t}\n}\n\n/**\n * Finds the closest ancestor element that is either an editable element or a widget.\n *\n * @param element The element from which to start searching.\n * @returns The closest ancestor element that is either an editable element or a widget, or null if none is found.\n */\nfunction findClosestEditableOrWidgetAncestor( element: ViewElement ): ViewElement | null {\n\tlet currentElement: ViewElement | null = element;\n\n\twhile ( currentElement ) {\n\t\tif ( currentElement.is( 'editableElement' ) || isWidget( currentElement ) ) {\n\t\t\treturn currentElement;\n\t\t}\n\n\t\tcurrentElement = currentElement.parent as ViewElement | null;\n\t}\n\n\treturn null;\n}\n\n/**\n * Retrieves the ViewElement associated with a mouse event in the editing view.\n *\n * @param view The editing view.\n * @param domEventData The DOM event data containing the mouse event.\n * @returns The ViewElement associated with the mouse event, or null if not found.\n */\nfunction getElementFromMouseEvent( view: EditingView, domEventData: DomEventData<MouseEvent> ): ViewElement | null {\n\tconst domRange = getRangeFromMouseEvent( domEventData.domEvent );\n\tlet viewRange: ViewRange | null = null;\n\n\tif ( domRange ) {\n\t\tviewRange = view.domConverter.domRangeToView( domRange );\n\t} else {\n\t\t// Fallback to create range in target element. It happens frequently on Safari browser.\n\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/16978\n\t\tviewRange = view.createRange( view.createPositionAt( domEventData.target, 0 ) );\n\t}\n\n\tif ( !viewRange ) {\n\t\treturn null;\n\t}\n\n\tconst viewPosition = viewRange.start;\n\n\tif ( !viewPosition.parent ) {\n\t\treturn null;\n\t}\n\n\tlet viewNode = viewPosition.parent;\n\n\tif ( viewPosition.parent.is( 'editableElement' ) ) {\n\t\tif ( viewPosition.isAtEnd && viewPosition.nodeBefore ) {\n\t\t\t// Click after a widget tend to return position at the end of the editable element\n\t\t\t// so use the node before it if range is at the end of a parent.\n\t\t\tviewNode = viewPosition.nodeBefore as ViewNode;\n\t\t} else if ( viewPosition.isAtStart && viewPosition.nodeAfter ) {\n\t\t\t// Click before a widget tend to return position at the start of the editable element\n\t\t\t// so use the node after it if range is at the start of a parent.\n\t\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/16992\n\t\t\tviewNode = viewPosition.nodeAfter as ViewNode;\n\t\t}\n\t}\n\n\tif ( viewNode.is( '$text' ) ) {\n\t\treturn viewNode.parent as ViewElement;\n\t}\n\n\treturn viewNode as ViewElement;\n}\n\n/**\n * Checks whether the specified `element` is a child of the `parent` element.\n *\n * @param element An element to check.\n * @param parent A parent for the element.\n */\nfunction isChild( element: ViewElement, parent: ViewElement | null ) {\n\tif ( !parent ) {\n\t\treturn false;\n\t}\n\n\treturn Array.from( element.getAncestors() ).includes( parent );\n}\n\n/**\n * Returns nearest text block ancestor.\n */\nfunction findTextBlockAncestor( modelElement: Element, schema: Schema ): Element | null {\n\tfor ( const element of modelElement.getAncestors( { includeSelf: true, parentFirst: true } ) ) {\n\t\tif ( schema.checkChild( element as Element, '$text' ) ) {\n\t\t\treturn element as Element;\n\t\t}\n\n\t\t// Do not go beyond nested editable.\n\t\tif ( schema.isLimit( element ) && !schema.isObject( element ) ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns next text block where could put selection.\n */\nfunction findNextTextBlock( position: Position, schema: Schema ): Element | null {\n\tconst treeWalker = new TreeWalker( { startPosition: position } );\n\n\tfor ( const { item } of treeWalker ) {\n\t\tif ( schema.isLimit( item ) || !item.is( 'element' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( schema.checkChild( item, '$text' ) ) {\n\t\t\treturn item;\n\t\t}\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgettoolbarrepository\n */\n\nimport {\n\tPlugin,\n\ttype Editor,\n\ttype ToolbarConfigItem\n} from '@ckeditor/ckeditor5-core';\n\nimport type { ViewDocumentSelection, ViewElement } from '@ckeditor/ckeditor5-engine';\n\nimport {\n\tBalloonPanelView,\n\tContextualBalloon,\n\tToolbarView,\n\ttype BalloonToolbar,\n\ttype BalloonToolbarShowEvent,\n\ttype EditorUIUpdateEvent\n} from '@ckeditor/ckeditor5-ui';\n\nimport {\n\tCKEditorError,\n\tlogWarning,\n\ttype ObservableChangeEvent,\n\ttype RectSource\n} from '@ckeditor/ckeditor5-utils';\n\nimport { isWidget } from './utils.js';\n\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * ```ts\n * class ImageToolbar extends Plugin {\n * \tstatic get requires() {\n * \t\treturn [ WidgetToolbarRepository ];\n * \t}\n *\n * \tafterInit() {\n * \t\tconst editor = this.editor;\n * \t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n * \t\twidgetToolbarRepository.register( 'image', {\n * \t\t\titems: editor.config.get( 'image.toolbar' ),\n * \t\t\tgetRelatedElement: getClosestSelectedImageWidget\n * \t\t} );\n * \t}\n * }\n * ```\n */\nexport default class WidgetToolbarRepository extends Plugin {\n\t/**\n\t * A map of toolbar definitions.\n\t */\n\tprivate _toolbarDefinitions = new Map<string, WidgetRepositoryToolbarDefinition>();\n\n\tprivate _balloon!: ContextualBalloon;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ContextualBalloon ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'WidgetToolbarRepository' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Disables the default balloon toolbar for all widgets.\n\t\tif ( editor.plugins.has( 'BalloonToolbar' ) ) {\n\t\t\tconst balloonToolbar: BalloonToolbar = editor.plugins.get( 'BalloonToolbar' );\n\n\t\t\tthis.listenTo<BalloonToolbarShowEvent>( balloonToolbar, 'show', evt => {\n\t\t\t\tif ( isWidgetSelected( editor.editing.view.document.selection ) ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}, { priority: 'high' } );\n\t\t}\n\n\t\tthis._balloon = this.editor.plugins.get( 'ContextualBalloon' );\n\n\t\tthis.on<ObservableChangeEvent>( 'change:isEnabled', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t} );\n\n\t\tthis.listenTo<EditorUIUpdateEvent>( editor.ui, 'update', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t} );\n\n\t\t// UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n\t\tthis.listenTo<ObservableChangeEvent>( editor.ui.focusTracker, 'change:isFocused', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t}, { priority: 'low' } );\n\t}\n\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tfor ( const toolbarConfig of this._toolbarDefinitions.values() ) {\n\t\t\ttoolbarConfig.view.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param toolbarId An id for the toolbar. Used to\n\t * @param options.ariaLabel Label used by assistive technologies to describe this toolbar element.\n\t * @param options.items Array of toolbar items.\n\t * @param options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n\t * @param options.balloonClassName CSS class for the widget balloon.\n\t */\n\tpublic register(\n\t\ttoolbarId: string,\n\t\t{ ariaLabel, items, getRelatedElement, balloonClassName = 'ck-toolbar-container' }: {\n\t\t\tariaLabel?: string;\n\t\t\titems: Array<ToolbarConfigItem>;\n\t\t\tgetRelatedElement: ( selection: ViewDocumentSelection ) => ( ViewElement | null );\n\t\t\tballoonClassName?: string;\n\t\t}\n\t): void {\n\t\t// Trying to register a toolbar without any item.\n\t\tif ( !items.length ) {\n\t\t\t/**\n\t\t\t * When {@link module:widget/widgettoolbarrepository~WidgetToolbarRepository#register registering} a new widget toolbar, you\n\t\t\t * need to provide a non-empty array with the items that will be inserted into the toolbar.\n\t\t\t *\n\t\t\t * If you see this error when integrating the editor, you likely forgot to configure one of the widget toolbars.\n\t\t\t *\n\t\t\t * See for instance:\n\t\t\t *\n\t\t\t * * {@link module:table/tableconfig~TableConfig#contentToolbar `config.table.contentToolbar`}\n\t\t\t * * {@link module:image/imageconfig~ImageConfig#toolbar `config.image.toolbar`}\n\t\t\t *\n\t\t\t * @error widget-toolbar-no-items\n\t\t\t * @param toolbarId The id of the toolbar that has not been configured correctly.\n\t\t\t */\n\t\t\tlogWarning( 'widget-toolbar-no-items', { toolbarId } );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst toolbarView = new ToolbarView( editor.locale );\n\n\t\ttoolbarView.ariaLabel = ariaLabel || t( 'Widget toolbar' );\n\n\t\tif ( this._toolbarDefinitions.has( toolbarId ) ) {\n\t\t\t/**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param toolbarId Toolbar id.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'widget-toolbar-duplicated', this, { toolbarId } );\n\t\t}\n\n\t\tconst toolbarDefinition = {\n\t\t\tview: toolbarView,\n\t\t\tgetRelatedElement,\n\t\t\tballoonClassName,\n\t\t\titemsConfig: items,\n\t\t\tinitialized: false\n\t\t};\n\n\t\t// Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n\t\teditor.ui.addToolbar( toolbarView, {\n\t\t\tisContextual: true,\n\t\t\tbeforeFocus: () => {\n\t\t\t\tconst relatedElement = getRelatedElement( editor.editing.view.document.selection );\n\n\t\t\t\tif ( relatedElement ) {\n\t\t\t\t\tthis._showToolbar( toolbarDefinition, relatedElement );\n\t\t\t\t}\n\t\t\t},\n\t\t\tafterBlur: () => {\n\t\t\t\tthis._hideToolbar( toolbarDefinition );\n\t\t\t}\n\t\t} );\n\n\t\tthis._toolbarDefinitions.set( toolbarId, toolbarDefinition );\n\t}\n\n\t/**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t */\n\tprivate _updateToolbarsVisibility() {\n\t\tlet maxRelatedElementDepth = 0;\n\t\tlet deepestRelatedElement = null;\n\t\tlet deepestToolbarDefinition = null;\n\n\t\tfor ( const definition of this._toolbarDefinitions.values() ) {\n\t\t\tconst relatedElement = definition.getRelatedElement( this.editor.editing.view.document.selection );\n\n\t\t\tif ( !this.isEnabled || !relatedElement ) {\n\t\t\t\tif ( this._isToolbarInBalloon( definition ) ) {\n\t\t\t\t\tthis._hideToolbar( definition );\n\t\t\t\t}\n\t\t\t} else if ( !this.editor.ui.focusTracker.isFocused ) {\n\t\t\t\tif ( this._isToolbarVisible( definition ) ) {\n\t\t\t\t\tthis._hideToolbar( definition );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst relatedElementDepth = relatedElement.getAncestors().length;\n\n\t\t\t\t// Many toolbars can express willingness to be displayed but they do not know about\n\t\t\t\t// each other. Figure out which toolbar is deepest in the view tree to decide which\n\t\t\t\t// should be displayed. For instance, if a selected image is inside a table cell, display\n\t\t\t\t// the ImageToolbar rather than the TableToolbar (#60).\n\t\t\t\tif ( relatedElementDepth > maxRelatedElementDepth ) {\n\t\t\t\t\tmaxRelatedElementDepth = relatedElementDepth;\n\t\t\t\t\tdeepestRelatedElement = relatedElement;\n\t\t\t\t\tdeepestToolbarDefinition = definition;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( deepestToolbarDefinition ) {\n\t\t\tthis._showToolbar( deepestToolbarDefinition, deepestRelatedElement! );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the given toolbar.\n\t */\n\tprivate _hideToolbar( toolbarDefinition: WidgetRepositoryToolbarDefinition ) {\n\t\tthis._balloon.remove( toolbarDefinition.view );\n\t\tthis.stopListening( this._balloon, 'change:visibleView' );\n\t}\n\n\t/**\n\t * Shows up the toolbar if the toolbar is not visible.\n\t * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:ui/editorui/editorui~EditorUI#event:update}.\n\t */\n\tprivate _showToolbar( toolbarDefinition: WidgetRepositoryToolbarDefinition, relatedElement: ViewElement ) {\n\t\tif ( this._isToolbarVisible( toolbarDefinition ) ) {\n\t\t\trepositionContextualBalloon( this.editor, relatedElement );\n\t\t} else if ( !this._isToolbarInBalloon( toolbarDefinition ) ) {\n\t\t\tif ( !toolbarDefinition.initialized ) {\n\t\t\t\ttoolbarDefinition.initialized = true;\n\t\t\t\ttoolbarDefinition.view.fillFromConfig( toolbarDefinition.itemsConfig, this.editor.ui.componentFactory );\n\t\t\t}\n\n\t\t\tthis._balloon.add( {\n\t\t\t\tview: toolbarDefinition.view,\n\t\t\t\tposition: getBalloonPositionData( this.editor, relatedElement ),\n\t\t\t\tballoonClassName: toolbarDefinition.balloonClassName\n\t\t\t} );\n\n\t\t\t// Update toolbar position each time stack with toolbar view is switched to visible.\n\t\t\t// This is in a case target element has changed when toolbar was in invisible stack\n\t\t\t// e.g. target image was wrapped by a block quote.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n\t\t\tthis.listenTo<ObservableChangeEvent>( this._balloon, 'change:visibleView', () => {\n\t\t\t\tfor ( const definition of this._toolbarDefinitions.values() ) {\n\t\t\t\t\tif ( this._isToolbarVisible( definition ) ) {\n\t\t\t\t\t\tconst relatedElement = definition.getRelatedElement( this.editor.editing.view.document.selection );\n\t\t\t\t\t\trepositionContextualBalloon( this.editor, relatedElement! );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\tprivate _isToolbarVisible( toolbar: WidgetRepositoryToolbarDefinition ) {\n\t\treturn this._balloon.visibleView === toolbar.view;\n\t}\n\n\tprivate _isToolbarInBalloon( toolbar: WidgetRepositoryToolbarDefinition ) {\n\t\treturn this._balloon.hasView( toolbar.view );\n\t}\n}\n\nfunction repositionContextualBalloon( editor: Editor, relatedElement: ViewElement ) {\n\tconst balloon: ContextualBalloon = editor.plugins.get( 'ContextualBalloon' );\n\tconst position = getBalloonPositionData( editor, relatedElement );\n\n\tballoon.updatePosition( position );\n}\n\nfunction getBalloonPositionData( editor: Editor, relatedElement: ViewElement ) {\n\tconst editingView = editor.editing.view;\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\n\treturn {\n\t\ttarget: editingView.domConverter.mapViewToDom( relatedElement ) as RectSource | undefined,\n\t\tpositions: [\n\t\t\tdefaultPositions.northArrowSouth,\n\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\tdefaultPositions.northArrowSouthEast,\n\t\t\tdefaultPositions.southArrowNorth,\n\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\tdefaultPositions.southArrowNorthEast,\n\t\t\tdefaultPositions.viewportStickyNorth\n\t\t]\n\t};\n}\n\nfunction isWidgetSelected( selection: ViewDocumentSelection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\treturn !!( viewElement && isWidget( viewElement ) );\n}\n\n/**\n * The toolbar definition object used by the toolbar repository to manage toolbars.\n * It contains information necessary to display the toolbar in the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} and\n * update it during its life (display) cycle.\n */\ninterface WidgetRepositoryToolbarDefinition {\n\n\t/**\n\t * The UI view of the toolbar.\n\t */\n\tview: ToolbarView;\n\n\t/**\n\t * A function that returns an engine {@link module:engine/view/view~View}\n\t * element the toolbar is to be attached to. For instance, an image widget or a table widget (or `null` when\n\t * there is no such element). The function accepts an instance of {@link module:engine/view/selection~Selection}.\n\t */\n\tgetRelatedElement: ( selection: ViewDocumentSelection ) => ViewElement | null | undefined;\n\n\t/**\n\t * CSS class for the widget balloon when a toolbar is displayed.\n\t */\n\tballoonClassName: string;\n\n\titemsConfig: Array<ToolbarConfigItem>;\n\n\tinitialized: boolean;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\n\nimport { ObservableMixin, Rect } from '@ckeditor/ckeditor5-utils';\n\nimport type { ResizerOptions } from '../widgetresize.js';\nimport { calculateResizeHostPercentageWidth } from '../utils.js';\n\n/**\n * Stores the internal state of a single resizable object.\n */\nexport default class ResizeState extends /* #__PURE__ */ ObservableMixin() {\n\t/**\n\t * The position of the handle that initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc. or `null`\n\t * if unknown.\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public activeHandlePosition: string | null;\n\n\t/**\n\t * The width (percents) proposed, but not committed yet, in the current resize process.\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedWidthPercents: number | null;\n\n\t/**\n\t * The width (pixels) proposed, but not committed yet, in the current resize process.\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedWidth: number | null;\n\n\t/**\n\t * The height (pixels) proposed, but not committed yet, in the current resize process.\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedHeight: number | null;\n\n\t/**\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedHandleHostWidth: number | null;\n\n\t/**\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public proposedHandleHostHeight: number | null;\n\n\t/**\n\t * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n\t * traveled, so how much the image should be enlarged.\n\t * This information is only known after the DOM was rendered, so it will be updated later.\n\t *\n\t * @internal\n\t */\n\tpublic _referenceCoordinates: { x: number; y: number } | null;\n\n\t/**\n\t * Resizer options.\n\t */\n\tprivate readonly _options: ResizerOptions;\n\n\t/**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */\n\tprivate _originalWidth?: number;\n\n\t/**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */\n\tprivate _originalHeight?: number;\n\n\t/**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */\n\tprivate _originalWidthPercents?: number;\n\n\t/**\n\t * A width to height ratio of the resized image.\n\t *\n\t * @readonly\n\t */\n\tprivate _aspectRatio?: number;\n\n\t/**\n\t * @param options Resizer options.\n\t */\n\tconstructor( options: ResizerOptions ) {\n\t\tsuper();\n\n\t\tthis.set( 'activeHandlePosition', null );\n\t\tthis.set( 'proposedWidthPercents', null );\n\t\tthis.set( 'proposedWidth', null );\n\t\tthis.set( 'proposedHeight', null );\n\t\tthis.set( 'proposedHandleHostWidth', null );\n\t\tthis.set( 'proposedHandleHostHeight', null );\n\n\t\tthis._options = options;\n\t\tthis._referenceCoordinates = null;\n\t}\n\n\t/**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t */\n\tpublic get originalWidth(): number | undefined {\n\t\treturn this._originalWidth;\n\t}\n\n\t/**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t */\n\tpublic get originalHeight(): number | undefined {\n\t\treturn this._originalHeight;\n\t}\n\n\t/**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t */\n\tpublic get originalWidthPercents(): number | undefined {\n\t\treturn this._originalWidthPercents;\n\t}\n\n\t/**\n\t * A width to height ratio of the resized image.\n\t */\n\tpublic get aspectRatio(): number | undefined {\n\t\treturn this._aspectRatio;\n\t}\n\n\t/**\n\t *\n\t * @param domResizeHandle The handle used to calculate the reference point.\n\t */\n\tpublic begin( domResizeHandle: HTMLElement, domHandleHost: HTMLElement, domResizeHost: HTMLElement ): void {\n\t\tconst clientRect = new Rect( domHandleHost );\n\n\t\tthis.activeHandlePosition = getHandlePosition( domResizeHandle )!;\n\n\t\tthis._referenceCoordinates = getAbsoluteBoundaryPoint( domHandleHost, getOppositePosition( this.activeHandlePosition ) );\n\n\t\tthis._originalWidth = clientRect.width;\n\t\tthis._originalHeight = clientRect.height;\n\n\t\tthis._aspectRatio = clientRect.width / clientRect.height;\n\n\t\tconst widthStyle = domResizeHost.style.width;\n\n\t\tif ( widthStyle && widthStyle.match( /^\\d+(\\.\\d*)?%$/ ) ) {\n\t\t\tthis._originalWidthPercents = parseFloat( widthStyle );\n\t\t} else {\n\t\t\tthis._originalWidthPercents = calculateResizeHostPercentageWidth( domResizeHost, clientRect );\n\t\t}\n\t}\n\n\tpublic update( newSize: {\n\t\twidth: number;\n\t\theight: number;\n\t\twidthPercents: number;\n\t\thandleHostWidth: number;\n\t\thandleHostHeight: number;\n\t} ): void {\n\t\tthis.proposedWidth = newSize.width;\n\t\tthis.proposedHeight = newSize.height;\n\t\tthis.proposedWidthPercents = newSize.widthPercents;\n\n\t\tthis.proposedHandleHostWidth = newSize.handleHostWidth;\n\t\tthis.proposedHandleHostHeight = newSize.handleHostHeight;\n\t}\n}\n\n/**\n * Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n *\n * @param resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n */\nfunction getAbsoluteBoundaryPoint( element: HTMLElement, resizerPosition: string ) {\n\tconst elementRect = new Rect( element );\n\tconst positionParts = resizerPosition.split( '-' );\n\tconst ret = {\n\t\tx: positionParts[ 1 ] == 'right' ? elementRect.right : elementRect.left,\n\t\ty: positionParts[ 0 ] == 'bottom' ? elementRect.bottom : elementRect.top\n\t};\n\n\tret.x += element.ownerDocument.defaultView!.scrollX;\n\tret.y += element.ownerDocument.defaultView!.scrollY;\n\n\treturn ret;\n}\n\n/**\n * @param resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element.\n */\nfunction getResizerHandleClass( resizerPosition: string ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\n/**\n * Determines the position of a given resize handle.\n *\n * @param domHandle Handle used to calculate the reference point.\n * @returns Returns a string like `\"top-left\"` or `undefined` if not matched.\n */\nfunction getHandlePosition( domHandle: HTMLElement ) {\n\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\tfor ( const position of resizerPositions ) {\n\t\tif ( domHandle.classList.contains( getResizerHandleClass( position ) ) ) {\n\t\t\treturn position;\n\t\t}\n\t}\n}\n\n/**\n * @param position Like `\"top-left\"`.\n * @returns Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n */\nfunction getOppositePosition( position: string ) {\n\tconst parts = position.split( '-' );\n\tconst replacements: Record<string, string> = {\n\t\ttop: 'bottom',\n\t\tbottom: 'top',\n\t\tleft: 'right',\n\t\tright: 'left'\n\t};\n\n\treturn `${ replacements[ parts[ 0 ] ] }-${ replacements[ parts[ 1 ] ] }`;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgetresize/sizeview\n */\n\nimport { View } from '@ckeditor/ckeditor5-ui';\nimport type { ResizerOptions } from '../widgetresize.js';\nimport type ResizeState from './resizerstate.js';\n\n/**\n * A view displaying the proposed new element size during the resizing.\n */\nexport default class SizeView extends View {\n\t/**\n\t * The visibility of the view defined based on the existence of the host proposed dimensions.\n\t *\n\t * @internal\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public _isVisible: boolean;\n\n\t/**\n\t * The text that will be displayed in the `SizeView` child.\n\t * It can be formatted as the pixel values (e.g. 10x20) or the percentage value (e.g. 10%).\n\t *\n\t * @internal\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public _label: string;\n\n\t/**\n\t * The position of the view defined based on the host size and active handle position.\n\t *\n\t * @internal\n\t * @observable\n\t * @readonly\n\t */\n\tdeclare public _viewPosition: string;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-size-view',\n\t\t\t\t\tbind.to( '_viewPosition', value => value ? `ck-orientation-${ value }` : '' )\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tdisplay: bind.if( '_isVisible', 'none', visible => !visible )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: [ {\n\t\t\t\ttext: bind.to( '_label' )\n\t\t\t} ]\n\t\t} );\n\t}\n\n\t/**\n\t * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n\t *\n\t * @internal\n\t * @param options An object defining the resizer options, used for setting the proper size label.\n\t * @param resizeState The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n\t */\n\tpublic _bindToState( options: ResizerOptions, resizeState: ResizeState ): void {\n\t\tthis.bind( '_isVisible' ).to( resizeState, 'proposedWidth', resizeState, 'proposedHeight', ( width, height ) =>\n\t\t\twidth !== null && height !== null );\n\n\t\tthis.bind( '_label' ).to(\n\t\t\tresizeState, 'proposedHandleHostWidth',\n\t\t\tresizeState, 'proposedHandleHostHeight',\n\t\t\tresizeState, 'proposedWidthPercents',\n\t\t\t( width, height, widthPercents ) => {\n\t\t\t\tif ( options.unit === 'px' ) {\n\t\t\t\t\treturn `${ width }×${ height }`;\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ widthPercents }%`;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tthis.bind( '_viewPosition' ).to(\n\t\t\tresizeState, 'activeHandlePosition',\n\t\t\tresizeState, 'proposedHandleHostWidth',\n\t\t\tresizeState, 'proposedHandleHostHeight',\n\t\t\t// If the widget is too small to contain the size label, display the label above.\n\t\t\t( position, width, height ) => width! < 50 || height! < 50 ? 'above-center' : position!\n\t\t);\n\t}\n\n\t/**\n\t * A method used for cleaning up. It removes the bindings and hides the view.\n\t *\n\t * @internal\n\t */\n\tpublic _dismiss(): void {\n\t\tthis.unbind();\n\t\tthis._isVisible = false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgetresize/resizer\n */\n\nimport { Template } from '@ckeditor/ckeditor5-ui';\nimport {\n\tRect,\n\tObservableMixin,\n\tcompareArrays,\n\ttype ObservableChangeEvent,\n\ttype DecoratedMethodEvent\n} from '@ckeditor/ckeditor5-utils';\n\nimport ResizeState from './resizerstate.js';\nimport SizeView from './sizeview.js';\n\nimport type { ResizerOptions } from '../widgetresize.js';\nimport type { ViewElement } from '@ckeditor/ckeditor5-engine';\n\n/**\n * Represents a resizer for a single resizable object.\n */\nexport default class Resizer extends /* #__PURE__ */ ObservableMixin() {\n\t/**\n\t * Flag that indicates whether resizer can be used.\n\t *\n\t * @observable\n\t */\n\tdeclare public isEnabled: boolean;\n\n\t/**\n\t * Flag that indicates that resizer is currently focused.\n\t *\n\t * @observable\n\t */\n\tdeclare public isSelected: boolean;\n\n\t/**\n\t * Flag that indicates whether resizer is rendered (visible on the screen).\n\t *\n\t * @readonly\n\t * @observable\n\t */\n\tdeclare public isVisible: boolean;\n\n\t/**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */\n\tprivate _state!: ResizeState;\n\n\t/**\n\t * A view displaying the proposed new element size during the resizing.\n\t */\n\tprivate _sizeView!: SizeView;\n\n\t/**\n\t * Options passed to the {@link #constructor}.\n\t */\n\tprivate _options: ResizerOptions;\n\n\t/**\n\t * A wrapper that is controlled by the resizer. This is usually a widget element.\n\t */\n\tprivate _viewResizerWrapper: ViewElement | null = null;\n\n\t/**\n\t * The width of the resized {@link module:widget/widgetresize~ResizerOptions#viewElement viewElement} before the resizing started.\n\t */\n\tprivate _initialViewWidth: string | undefined;\n\n\t/**\n\t * @param options Resizer options.\n\t */\n\tconstructor( options: ResizerOptions ) {\n\t\tsuper();\n\n\t\tthis._options = options;\n\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isSelected', false );\n\n\t\tthis.bind( 'isVisible' ).to( this, 'isEnabled', this, 'isSelected', ( isEnabled, isSelected ) => isEnabled && isSelected );\n\n\t\tthis.decorate( 'begin' );\n\t\tthis.decorate( 'cancel' );\n\t\tthis.decorate( 'commit' );\n\t\tthis.decorate( 'updateSize' );\n\n\t\tthis.on( 'commit', event => {\n\t\t\t// State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n\t\t\t// cleaned up (#5195).\n\t\t\tif ( !this.state.proposedWidth && !this.state.proposedWidthPercents ) {\n\t\t\t\tthis._cleanup();\n\t\t\t\tevent.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */\n\tpublic get state(): ResizeState {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * Makes resizer visible in the UI.\n\t */\n\tpublic show(): void {\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.removeClass( 'ck-hidden', this._viewResizerWrapper! );\n\t\t} );\n\t}\n\n\t/**\n\t * Hides resizer in the UI.\n\t */\n\tpublic hide(): void {\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.addClass( 'ck-hidden', this._viewResizerWrapper! );\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches the resizer to the DOM.\n\t */\n\tpublic attach(): void {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst that = this;\n\t\tconst widgetElement = this._options.viewElement;\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\tconst viewResizerWrapper = writer.createUIElement( 'div', {\n\t\t\t\tclass: 'ck ck-reset_all ck-widget__resizer'\n\t\t\t}, function( domDocument ) {\n\t\t\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t\t\tthat._appendHandles( domElement );\n\t\t\t\tthat._appendSizeUI( domElement );\n\n\t\t\t\treturn domElement;\n\t\t\t} );\n\n\t\t\t// Append the resizer wrapper to the widget's wrapper.\n\t\t\twriter.insert( writer.createPositionAt( widgetElement, 'end' ), viewResizerWrapper );\n\t\t\twriter.addClass( 'ck-widget_with-resizer', widgetElement );\n\n\t\t\tthis._viewResizerWrapper = viewResizerWrapper;\n\n\t\t\tif ( !this.isVisible ) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t} );\n\n\t\tthis.on<ObservableChangeEvent>( 'change:isVisible', () => {\n\t\t\tif ( this.isVisible ) {\n\t\t\t\tthis.show();\n\t\t\t\tthis.redraw();\n\t\t\t} else {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Starts the resizing process.\n\t *\n\t * Creates a new {@link #state} for the current process.\n\t *\n\t * @fires begin\n\t * @param domResizeHandle Clicked handle.\n\t */\n\tpublic begin( domResizeHandle: HTMLElement ): void {\n\t\tthis._state = new ResizeState( this._options );\n\n\t\tthis._sizeView._bindToState( this._options, this.state );\n\n\t\tthis._initialViewWidth = this._options.viewElement.getStyle( 'width' );\n\n\t\tthis.state.begin( domResizeHandle, this._getHandleHost(), this._getResizeHost() );\n\t}\n\n\t/**\n\t * Updates the proposed size based on `domEventData`.\n\t *\n\t * @fires updateSize\n\t */\n\tpublic updateSize( domEventData: MouseEvent ): void {\n\t\tconst newSize = this._proposeNewSize( domEventData );\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\tconst unit = this._options.unit || '%';\n\t\t\tconst newWidth = ( unit === '%' ? newSize.widthPercents : newSize.width ) + unit;\n\n\t\t\twriter.setStyle( 'width', newWidth, this._options.viewElement );\n\t\t} );\n\n\t\t// Get an actual image width, and:\n\t\t// * reflect this size to the resize wrapper\n\t\t// * apply this **real** size to the state\n\t\tconst domHandleHost = this._getHandleHost();\n\t\tconst domHandleHostRect = new Rect( domHandleHost );\n\n\t\tconst handleHostWidth = Math.round( domHandleHostRect.width );\n\t\tconst handleHostHeight = Math.round( domHandleHostRect.height );\n\n\t\t// Handle max-width limitation.\n\t\tconst domResizeHostRect = new Rect( domHandleHost );\n\n\t\tnewSize.width = Math.round( domResizeHostRect.width );\n\t\tnewSize.height = Math.round( domResizeHostRect.height );\n\n\t\tthis.redraw( domHandleHostRect );\n\n\t\tthis.state.update( {\n\t\t\t...newSize,\n\t\t\thandleHostWidth,\n\t\t\thandleHostHeight\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the geometry proposed with the resizer.\n\t *\n\t * @fires commit\n\t */\n\tpublic commit(): void {\n\t\tconst unit = this._options.unit || '%';\n\t\tconst newValue = ( unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth ) + unit;\n\n\t\t// Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n\t\tthis._options.editor.editing.view.change( () => {\n\t\t\tthis._cleanup();\n\t\t\tthis._options.onCommit( newValue );\n\t\t} );\n\t}\n\n\t/**\n\t * Cancels and rejects the proposed resize dimensions, hiding the UI.\n\t *\n\t * @fires cancel\n\t */\n\tpublic cancel(): void {\n\t\tthis._cleanup();\n\t}\n\n\t/**\n\t * Destroys the resizer.\n\t */\n\tpublic destroy(): void {\n\t\tthis.cancel();\n\t}\n\n\t/**\n\t * Redraws the resizer.\n\t *\n\t * @param handleHostRect Handle host rectangle might be given to improve performance.\n\t */\n\tpublic redraw( handleHostRect?: Rect ): void {\n\t\tconst domWrapper = this._domResizerWrapper;\n\n\t\t// Refresh only if resizer exists in the DOM.\n\t\tif ( !existsInDom( domWrapper ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst widgetWrapper = domWrapper!.parentElement;\n\t\tconst handleHost = this._getHandleHost();\n\t\tconst resizerWrapper = this._viewResizerWrapper!;\n\t\tconst currentDimensions = [\n\t\t\tresizerWrapper.getStyle( 'width' ),\n\t\t\tresizerWrapper.getStyle( 'height' ),\n\t\t\tresizerWrapper.getStyle( 'left' ),\n\t\t\tresizerWrapper.getStyle( 'top' )\n\t\t];\n\t\tlet newDimensions: Array<string | undefined>;\n\n\t\tif ( widgetWrapper!.isSameNode( handleHost ) ) {\n\t\t\tconst clientRect = handleHostRect || new Rect( handleHost );\n\n\t\t\tnewDimensions = [\n\t\t\t\tclientRect.width + 'px',\n\t\t\t\tclientRect.height + 'px',\n\t\t\t\tundefined,\n\t\t\t\tundefined\n\t\t\t];\n\t\t}\n\t\t// In case a resizing host is not a widget wrapper, we need to compensate\n\t\t// for any additional offsets the resize host might have. E.g. wrapper padding\n\t\t// or simply another editable. By doing that the border and resizers are shown\n\t\t// only around the resize host.\n\t\telse {\n\t\t\tnewDimensions = [\n\t\t\t\thandleHost.offsetWidth + 'px',\n\t\t\t\thandleHost.offsetHeight + 'px',\n\t\t\t\thandleHost.offsetLeft + 'px',\n\t\t\t\thandleHost.offsetTop + 'px'\n\t\t\t];\n\t\t}\n\n\t\t// Make changes to the view only if the resizer should actually get new dimensions.\n\t\t// Otherwise, if View#change() was always called, this would cause EditorUI#update\n\t\t// loops because the WidgetResize plugin listens to EditorUI#update and updates\n\t\t// the resizer.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/7633\n\t\tif ( compareArrays( currentDimensions, newDimensions ) !== 'same' ) {\n\t\t\tthis._options.editor.editing.view.change( writer => {\n\t\t\t\twriter.setStyle( {\n\t\t\t\t\twidth: newDimensions[ 0 ]!,\n\t\t\t\t\theight: newDimensions[ 1 ]!,\n\t\t\t\t\tleft: newDimensions[ 2 ]!,\n\t\t\t\t\ttop: newDimensions[ 3 ]!\n\t\t\t\t}, resizerWrapper );\n\t\t\t} );\n\t\t}\n\t}\n\n\tpublic containsHandle( domElement: HTMLElement ): boolean {\n\t\treturn this._domResizerWrapper!.contains( domElement );\n\t}\n\n\tpublic static isResizeHandle( domElement: HTMLElement ): boolean {\n\t\treturn domElement.classList.contains( 'ck-widget__resizer__handle' );\n\t}\n\n\t/**\n\t * Cleans up the context state.\n\t */\n\tprivate _cleanup(): void {\n\t\tthis._sizeView._dismiss();\n\n\t\tconst editingView = this._options.editor.editing.view;\n\n\t\teditingView.change( writer => {\n\t\t\twriter.setStyle( 'width', this._initialViewWidth!, this._options.viewElement );\n\t\t} );\n\t}\n\n\t/**\n\t * Calculates the proposed size as the resize handles are dragged.\n\t *\n\t * @param domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n\t */\n\tprivate _proposeNewSize( domEventData: MouseEvent ): { width: number; height: number; widthPercents: number } {\n\t\tconst state = this.state;\n\t\tconst currentCoordinates = extractCoordinates( domEventData );\n\t\tconst isCentered = this._options.isCentered ? this._options.isCentered( this ) : true;\n\n\t\t// Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n\t\t// meaning that it has been shrunk.\n\t\t//\n\t\t// +----------------+--+\n\t\t// |                |  |\n\t\t// |       img      |  |\n\t\t// |  /handle host  |  |\n\t\t// +----------------+  | ^\n\t\t// |                   | | - enlarge y\n\t\t// +-------------------+ v\n\t\t// \t\t\t\t\t<-->\n\t\t// \t\t\t\t\t enlarge x\n\t\tconst enlargement = {\n\t\t\tx: state._referenceCoordinates!.x - ( currentCoordinates.x + state.originalWidth! ),\n\t\t\ty: ( currentCoordinates.y - state.originalHeight! ) - state._referenceCoordinates!.y\n\t\t};\n\n\t\tif ( isCentered && state.activeHandlePosition!.endsWith( '-right' ) ) {\n\t\t\tenlargement.x = currentCoordinates.x - ( state._referenceCoordinates!.x + state.originalWidth! );\n\t\t}\n\n\t\t// Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n\t\t// one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n\t\tif ( isCentered ) {\n\t\t\tenlargement.x *= 2;\n\t\t}\n\n\t\t// const resizeHost = this._getResizeHost();\n\n\t\t// The size proposed by the user. It does not consider the aspect ratio.\n\t\tlet width = Math.abs( state.originalWidth! + enlargement.x );\n\t\tlet height = Math.abs( state.originalHeight! + enlargement.y );\n\n\t\t// Dominant determination must take the ratio into account.\n\t\tconst dominant = width / state.aspectRatio! > height ? 'width' : 'height';\n\n\t\tif ( dominant == 'width' ) {\n\t\t\theight = width / state.aspectRatio!;\n\t\t} else {\n\t\t\twidth = height * state.aspectRatio!;\n\t\t}\n\n\t\treturn {\n\t\t\twidth: Math.round( width ),\n\t\t\theight: Math.round( height ),\n\t\t\twidthPercents: Math.min( Math.round( state.originalWidthPercents! / state.originalWidth! * width * 100 ) / 100, 100 )\n\t\t};\n\t}\n\n\t/**\n\t * Obtains the resize host.\n\t *\n\t * Resize host is an object that receives dimensions which are the result of resizing.\n\t */\n\tprivate _getResizeHost(): HTMLElement {\n\t\tconst widgetWrapper = this._domResizerWrapper!.parentElement;\n\n\t\treturn this._options.getResizeHost( widgetWrapper! );\n\t}\n\n\t/**\n\t * Obtains the handle host.\n\t *\n\t * Handle host is an object that the handles are aligned to.\n\t *\n\t * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n\t * contains an image and a caption. Only the image should be surrounded with handles.\n\t */\n\tprivate _getHandleHost(): HTMLElement {\n\t\tconst widgetWrapper = this._domResizerWrapper!.parentElement;\n\n\t\treturn this._options.getHandleHost( widgetWrapper! );\n\t}\n\n\t/**\n\t * DOM container of the entire resize UI.\n\t *\n\t * Note that this property will have a value only after the element bound with the resizer is rendered\n\t * (otherwise `null`).\n\t */\n\tprivate get _domResizerWrapper(): HTMLElement | null {\n\t\treturn this._options.editor.editing.view.domConverter.mapViewToDom( this._viewResizerWrapper! ) as any;\n\t}\n\n\t/**\n\t * Renders the resize handles in the DOM.\n\t *\n\t * @param domElement The resizer wrapper.\n\t */\n\tprivate _appendHandles( domElement: HTMLElement ) {\n\t\tconst resizerPositions = [ 'top-left', 'top-right', 'bottom-right', 'bottom-left' ];\n\n\t\tfor ( const currentPosition of resizerPositions ) {\n\t\t\tdomElement.appendChild( ( new Template( {\n\t\t\t\ttag: 'div',\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: `ck-widget__resizer__handle ${ getResizerClass( currentPosition ) }`\n\t\t\t\t}\n\t\t\t} ).render() ) );\n\t\t}\n\t}\n\n\t/**\n\t * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n\t */\n\tprivate _appendSizeUI( domElement: HTMLElement ) {\n\t\tthis._sizeView = new SizeView();\n\n\t\t// Make sure icon#element is rendered before passing to appendChild().\n\t\tthis._sizeView.render();\n\n\t\tdomElement.appendChild( this._sizeView.element! );\n\t}\n}\n\n/**\n * @eventName ~Resizer#begin\n */\nexport type ResizerBeginEvent = DecoratedMethodEvent<Resizer, 'begin'>;\n\n/**\n * @eventName ~Resizer#cancel\n */\nexport type ResizerCancelEvent = DecoratedMethodEvent<Resizer, 'cancel'>;\n\n/**\n * @eventName ~Resizer#commit\n */\nexport type ResizerCommitEvent = DecoratedMethodEvent<Resizer, 'commit'>;\n\n/**\n * @eventName ~Resizer#updateSize\n */\nexport type ResizerUpdateSizeEvent = DecoratedMethodEvent<Resizer, 'updateSize'>;\n\n/**\n * @param resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element\n */\nfunction getResizerClass( resizerPosition: string ) {\n\treturn `ck-widget__resizer__handle-${ resizerPosition }`;\n}\n\nfunction extractCoordinates( event: MouseEvent ) {\n\treturn {\n\t\tx: event.pageX,\n\t\ty: event.pageY\n\t};\n}\n\nfunction existsInDom( element: Node | DocumentFragment | undefined | null ) {\n\treturn element && element.ownerDocument && element.ownerDocument.contains( element );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module widget/widgetresize\n */\n\nimport Resizer, {\n\ttype ResizerBeginEvent,\n\ttype ResizerCancelEvent,\n\ttype ResizerCommitEvent\n} from './widgetresize/resizer.js';\n\nimport type WidgetToolbarRepository from './widgettoolbarrepository.js';\n\nimport {\n\tPlugin,\n\ttype Editor\n} from '@ckeditor/ckeditor5-core';\n\nimport {\n\tMouseObserver,\n\ttype DocumentChangeEvent,\n\ttype DomEventData,\n\ttype Element,\n\ttype ViewContainerElement,\n\ttype ViewDocumentMouseDownEvent,\n\ttype ViewSelectionChangeEvent\n} from '@ckeditor/ckeditor5-engine';\n\nimport type { EditorUIUpdateEvent } from '@ckeditor/ckeditor5-ui';\n\nimport {\n\tDomEmitterMixin,\n\tglobal,\n\ttype DomEmitter,\n\ttype EventInfo\n} from '@ckeditor/ckeditor5-utils';\n\nimport { throttle, type DebouncedFunc } from 'lodash-es';\n\nimport '../theme/widgetresize.css';\n\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n */\nexport default class WidgetResize extends Plugin {\n\t/**\n\t * The currently selected resizer.\n\t *\n\t * @observable\n\t */\n\tdeclare public selectedResizer: Resizer | null;\n\n\t/**\n\t * References an active resizer.\n\t *\n\t * Active resizer means a resizer which handle is actively used by the end user.\n\t *\n\t * @internal\n\t * @observable\n\t */\n\tdeclare public _activeResizer: Resizer | null;\n\n\t/**\n\t * A map of resizers created using this plugin instance.\n\t */\n\tprivate _resizers = new Map<ViewContainerElement, Resizer>();\n\n\tprivate _observer!: DomEmitter;\n\n\tprivate _redrawSelectedResizerThrottled!: DebouncedFunc<() => void>;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'WidgetResize' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editing = this.editor.editing;\n\t\tconst domDocument = global.window.document;\n\n\t\tthis.set( 'selectedResizer', null );\n\t\tthis.set( '_activeResizer', null );\n\n\t\tediting.view.addObserver( MouseObserver );\n\n\t\tthis._observer = new ( DomEmitterMixin() )();\n\n\t\tthis.listenTo<ViewDocumentMouseDownEvent>(\n\t\t\tediting.view.document,\n\t\t\t'mousedown',\n\t\t\tthis._mouseDownListener.bind( this ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tthis._observer.listenTo( domDocument, 'mousemove', this._mouseMoveListener.bind( this ) );\n\t\tthis._observer.listenTo( domDocument, 'mouseup', this._mouseUpListener.bind( this ) );\n\n\t\tthis._redrawSelectedResizerThrottled = throttle( () => this.redrawSelectedResizer(), 200 );\n\n\t\t// Redrawing on any change of the UI of the editor (including content changes).\n\t\tthis.editor.ui.on<EditorUIUpdateEvent>( 'update', this._redrawSelectedResizerThrottled );\n\n\t\t// Remove view widget-resizer mappings for widgets that have been removed from the document.\n\t\t// https://github.com/ckeditor/ckeditor5/issues/10156\n\t\t// https://github.com/ckeditor/ckeditor5/issues/10266\n\t\tthis.editor.model.document.on<DocumentChangeEvent>( 'change', () => {\n\t\t\tfor ( const [ viewElement, resizer ] of this._resizers ) {\n\t\t\t\tif ( !viewElement.isAttached() ) {\n\t\t\t\t\tthis._resizers.delete( viewElement );\n\t\t\t\t\tresizer.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n\t\tthis._observer.listenTo( global.window, 'resize', this._redrawSelectedResizerThrottled );\n\n\t\tconst viewSelection = this.editor.editing.view.document.selection;\n\n\t\tviewSelection.on<ViewSelectionChangeEvent>( 'change', () => {\n\t\t\tconst selectedElement = viewSelection.getSelectedElement() as ViewContainerElement;\n\n\t\t\tconst resizer = this.getResizerByViewElement( selectedElement ) || null;\n\t\t\tif ( resizer ) {\n\t\t\t\tthis.select( resizer );\n\t\t\t} else {\n\t\t\t\tthis.deselect();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Redraws the selected resizer if there is any selected resizer and if it is visible.\n\t */\n\tpublic redrawSelectedResizer(): void {\n\t\tif ( this.selectedResizer && this.selectedResizer.isVisible ) {\n\t\t\tthis.selectedResizer.redraw();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis._observer.stopListening();\n\n\t\tfor ( const resizer of this._resizers.values() ) {\n\t\t\tresizer.destroy();\n\t\t}\n\n\t\tthis._redrawSelectedResizerThrottled.cancel();\n\t}\n\n\t/**\n\t * Marks resizer as selected.\n\t */\n\tpublic select( resizer: Resizer ): void {\n\t\tthis.deselect();\n\t\tthis.selectedResizer = resizer;\n\t\tthis.selectedResizer.isSelected = true;\n\t}\n\n\t/**\n\t * Deselects currently set resizer.\n\t */\n\tpublic deselect(): void {\n\t\tif ( this.selectedResizer ) {\n\t\t\tthis.selectedResizer.isSelected = false;\n\t\t}\n\n\t\tthis.selectedResizer = null;\n\t}\n\n\t/**\n\t * @param options Resizer options.\n\t */\n\tpublic attachTo( options: ResizerOptions ): Resizer {\n\t\tconst resizer = new Resizer( options );\n\t\tconst plugins = this.editor.plugins;\n\n\t\tresizer.attach();\n\n\t\tif ( plugins.has( 'WidgetToolbarRepository' ) ) {\n\t\t\t// Hiding widget toolbar to improve the performance\n\t\t\t// (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n\t\t\tconst widgetToolbarRepository: WidgetToolbarRepository = plugins.get( 'WidgetToolbarRepository' );\n\n\t\t\tresizer.on<ResizerBeginEvent>( 'begin', () => {\n\t\t\t\twidgetToolbarRepository.forceDisabled( 'resize' );\n\t\t\t}, { priority: 'lowest' } );\n\n\t\t\tresizer.on<ResizerCancelEvent>( 'cancel', () => {\n\t\t\t\twidgetToolbarRepository.clearForceDisabled( 'resize' );\n\t\t\t}, { priority: 'highest' } );\n\n\t\t\tresizer.on<ResizerCommitEvent>( 'commit', () => {\n\t\t\t\twidgetToolbarRepository.clearForceDisabled( 'resize' );\n\t\t\t}, { priority: 'highest' } );\n\t\t}\n\n\t\tthis._resizers.set( options.viewElement, resizer );\n\n\t\tconst viewSelection = this.editor.editing.view.document.selection;\n\t\tconst selectedElement = viewSelection.getSelectedElement() as ViewContainerElement;\n\n\t\t// If the element the resizer is created for is currently focused, it should become visible.\n\t\tif ( this.getResizerByViewElement( selectedElement ) == resizer ) {\n\t\t\tthis.select( resizer );\n\t\t}\n\n\t\treturn resizer;\n\t}\n\n\t/**\n\t * Returns a resizer created for a given view element (widget element).\n\t *\n\t * @param viewElement View element associated with the resizer.\n\t */\n\tpublic getResizerByViewElement( viewElement: ViewContainerElement ): Resizer | undefined {\n\t\treturn this._resizers.get( viewElement );\n\t}\n\n\t/**\n\t * Returns a resizer that contains a given resize handle.\n\t */\n\tprivate _getResizerByHandle( domResizeHandle: HTMLElement ): Resizer | undefined {\n\t\tfor ( const resizer of this._resizers.values() ) {\n\t\t\tif ( resizer.containsHandle( domResizeHandle ) ) {\n\t\t\t\treturn resizer;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param domEventData Native DOM event.\n\t */\n\tprivate _mouseDownListener( event: EventInfo, domEventData: DomEventData ) {\n\t\tconst resizeHandle = domEventData.domTarget;\n\n\t\tif ( !Resizer.isResizeHandle( resizeHandle ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._activeResizer = this._getResizerByHandle( resizeHandle ) || null;\n\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.begin( resizeHandle );\n\n\t\t\t// Do not call other events when resizing. See: #6755.\n\t\t\tevent.stop();\n\t\t\tdomEventData.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * @param domEventData Native DOM event.\n\t */\n\tprivate _mouseMoveListener( event: unknown, domEventData: MouseEvent ) {\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.updateSize( domEventData );\n\t\t}\n\t}\n\n\tprivate _mouseUpListener(): void {\n\t\tif ( this._activeResizer ) {\n\t\t\tthis._activeResizer.commit();\n\t\t\tthis._activeResizer = null;\n\t\t}\n\t}\n}\n\n/**\n * Interface describing a resizer. It allows to specify the resizing host, custom logic for calculating aspect ratio, etc.\n */\nexport interface ResizerOptions {\n\n\t/**\n\t * Editor instance associated with the resizer.\n\t */\n\teditor: Editor;\n\n\tmodelElement: Element;\n\n\t/**\n\t * A view of an element to be resized. Typically it's the main widget's view instance.\n\t */\n\tviewElement: ViewContainerElement;\n\n\tunit?: 'px' | '%';\n\n\t/**\n\t * A callback to be executed once the resizing process is done.\n\t *\n\t * It receives a `Number` (`newValue`) as a parameter.\n\t *\n\t * For example, {@link module:image/imageresize~ImageResize} uses it to execute the resize image command\n\t * which puts the new value into the model.\n\t *\n\t * ```ts\n\t * {\n\t *\teditor,\n\t *\tmodelElement: data.item,\n\t *\tviewElement: widget,\n\t *\n\t *\tonCommit( newValue ) {\n\t *\t\teditor.execute( 'resizeImage', { width: newValue } );\n\t *\t}\n\t * };\n\t * ```\n\t */\n\tonCommit: ( newValue: string ) => void;\n\n\tgetResizeHost: ( widgetWrapper: HTMLElement ) => HTMLElement;\n\n\tgetHandleHost: ( widgetWrapper: HTMLElement ) => HTMLElement;\n\n\tisCentered?: ( resizer: Resizer ) => boolean;\n}\n"],"names":["HighlightStack","EmitterMixin","_stack","add","descriptor","writer","stack","oldTop","_insertDescriptor","newTop","compareDescriptors","fire","oldDescriptor","newDescriptor","remove","id","_removeDescriptor","index","findIndex","item","splice","i","shouldABeBeforeB","a","b","priority","classesToString","classes","Array","isArray","sort","join","WIDGET_CLASS_NAME","WIDGET_SELECTED_CLASS_NAME","isWidget","node","is","getCustomProperty","toWidget","element","options","CKEditorError","setAttribute","addClass","setCustomProperty","getFillerOffset","label","setLabel","hasSelectionHandle","addSelectionHandle","setHighlightHandling","addHighlight","toArray","attributes","key","removeHighlight","removeClass","removeAttribute","on","evt","data","addHighlightCallback","removeHighlightCallback","labelOrCreator","widgetLabel","push","getLabel","reduce","prev","current","toWidgetEditable","editable","isReadOnly","property","findOptimalInsertionRange","selection","model","selectedElement","getSelectedElement","typeAroundFakeCaretPosition","getTypeAroundFakeCaretPosition","createRange","createPositionAt","schema","viewToModelPositionOutsideModelElement","viewElementMatcher","mapper","viewPosition","viewParent","findMappedViewAncestor","modelParent","toModelElement","modelPosition","isAtStart","widgetElement","selectionHandle","createUIElement","class","domDocument","domElement","toDomElement","icon","IconView","set","dragHandleIcon","render","appendChild","insert","calculateResizeHostAncestorWidth","domResizeHost","getElementComputedWidth","width","paddingLeft","paddingRight","ownerDocument","defaultView","getComputedStyle","parseFloat","domResizeHostParent","parentElement","parentWidth","ancestorLevelLimit","currentLevel","checkedElement","isNaN","calculateResizeHostPercentageWidth","resizeHostRect","Rect","TYPE_AROUND_SELECTION_ATTRIBUTE","isTypeAroundWidget","viewElement","modelElement","isInline","getClosestTypeAroundDomButton","closest","getTypeAroundButtonPosition","classList","contains","getClosestWidgetViewElement","domConverter","widgetDomElement","mapDomToView","getAttribute","POSSIBLE_INSERTION_POSITIONS","RETURN_ARROW_ICON_ELEMENT","DOMParser","parseFromString","returnIcon","firstChild","PLUGIN_DISABLED_EDITING_ROOT_CLASS","WidgetTypeAround","Plugin","_currentFakeCaretModelElement","pluginName","isOfficialPlugin","requires","Enter","Delete","editor","editingView","editing","view","isEnabled","change","root","document","roots","removeSelectionAttribute","_enableTypeAroundUIInjection","_enableInsertingParagraphsOnButtonClick","_enableInsertingParagraphsOnEnterKeypress","_enableInsertingParagraphsOnTypingKeystroke","_enableTypeAroundFakeCaretActivationUsingKeyboardArrows","_enableDeleteIntegration","_enableInsertContentIntegration","_enableInsertObjectIntegration","_enableDeleteContentIntegration","destroy","_insertParagraph","widgetModelElement","position","attributesToCopy","getAttributesWithProperty","execute","focus","scrollToTheSelection","_listenToIfEnabled","emitter","event","callback","listenTo","args","modelSelection","selectedModelElement","t","locale","buttonTitles","before","after","downcastDispatcher","conversionApi","toViewElement","injectUIIntoWidget","domEventData","_handleArrowKeyPress","context","directChange","selectedViewElement","map","positionToWidgetCssClass","ui","focusTracker","name","isFocused","keyCode","isForward","isForwardArrowKeyCode","contentLanguageDirection","shouldStopAndPreventDefault","_handleArrowKeyPressOnSelectedWidget","isCollapsed","_handleArrowKeyPressWhenSelectionNextToAWidget","shiftKey","_handleArrowKeyPressWhenNonCollapsedSelection","preventDefault","stop","isLeavingWidget","setSelectionAttribute","widgetPlugin","plugins","get","modelElementNextToSelection","_getObjectElementNextToSelection","viewElementNextToSelection","_setSelectionOverElement","selectedModelNode","getLastPosition","nodeBefore","getFirstPosition","nodeAfter","selectedViewNode","setSelection","button","domTarget","buttonPosition","widgetViewElement","eventPhase","wasHandled","_insertParagraphAccordingToFakeCaretPosition","isSoft","viewDocument","env","isAndroid","direction","selectedModelWidget","isFakeCaretBefore","isDeleteForward","shouldDeleteEntireWidget","createSelection","range","getNearestSelectionRange","probe","start","modifySelection","isEqual","deepestEmptyRangeAncestor","getDeepestEmptyElementAncestor","parent","deleteContent","doNotAutoparagraph","documentSelection","content","selectable","result","insertContent","findOptimalPosition","viewWriter","typeAroundWrapper","wrapperDomElement","injectButtons","injectFakeCaret","buttonTemplate","Template","tag","title","children","importNode","caretTemplate","deepestEmptyAncestor","ancestor","getAncestors","parentFirst","childCount","isLimit","verticalNavigationHandler","arrowUpPressed","keyCodes","arrowup","arrowDownPressed","arrowdown","expandSelection","selectionWillShrink","findTextRangeFromSelection","isSingleLineRange","newPosition","end","newSelection","anchor","setFocus","stopPropagation","startPosition","endPosition","getNearestNonInlineLimit","lastRangePosition","getNearestTextPosition","firstRangePosition","createRangeIn","walkerValueType","previousPosition","type","getWalker","isBlock","checkChild","nextPosition","modelRange","isAtEnd","viewRange","toViewRange","domRange","viewRangeToDom","rects","getDomRangeRects","boundaryVerticalPosition","rect","undefined","Math","round","bottom","top","max","isBackward","Widget","_previouslySelected","Set","consumable","consume","createRangeOn","fake","_clearPreviouslySelectedWidgets","viewSelection","lastMarked","getRanges","value","isChild","addObserver","MouseObserver","_onMousedown","_handleSelectionChangeOnArrowKeyPress","_preventDefaultOnArrowKeyPress","_handleDelete","_selectFirstNestedEditable","_selectAncestorWidget","keystroke","esc","accessibility","addKeystrokeInfoGroup","keystrokes","eventInfo","target","domEvent","detail","_selectBlockContent","editableOrWidgetElement","findClosestEditableOrWidgetAncestor","clickTargetFromPoint","getElementFromMouseEvent","findTextBlockAncestor","nextTextBlock","findNextTextBlock","createPositionAfter","objectElement","getLocalizedArrowKeyCodeDirection","isVerticalNavigation","isObject","newRange","firstPosition","lastPosition","firstSelectedNode","lastSelectedNode","objectElementNextToSelection","modelDocument","canEditAt","previousNode","isEmpty","nodeToRemove","forward","widget","clear","getFirstRange","getItems","positionParent","positionParentElement","findAncestor","currentElement","getRangeFromMouseEvent","domRangeToView","viewNode","from","includes","includeSelf","treeWalker","TreeWalker","WidgetToolbarRepository","_toolbarDefinitions","Map","_balloon","ContextualBalloon","has","balloonToolbar","isWidgetSelected","_updateToolbarsVisibility","toolbarConfig","values","register","toolbarId","ariaLabel","items","getRelatedElement","balloonClassName","length","logWarning","toolbarView","ToolbarView","toolbarDefinition","itemsConfig","initialized","addToolbar","isContextual","beforeFocus","relatedElement","_showToolbar","afterBlur","_hideToolbar","maxRelatedElementDepth","deepestRelatedElement","deepestToolbarDefinition","definition","_isToolbarInBalloon","_isToolbarVisible","relatedElementDepth","stopListening","repositionContextualBalloon","fillFromConfig","componentFactory","getBalloonPositionData","toolbar","visibleView","hasView","balloon","updatePosition","defaultPositions","BalloonPanelView","mapViewToDom","positions","northArrowSouth","northArrowSouthWest","northArrowSouthEast","southArrowNorth","southArrowNorthWest","southArrowNorthEast","viewportStickyNorth","ResizeState","ObservableMixin","constructor","_options","_referenceCoordinates","originalWidth","_originalWidth","originalHeight","_originalHeight","originalWidthPercents","_originalWidthPercents","aspectRatio","_aspectRatio","domResizeHandle","domHandleHost","clientRect","activeHandlePosition","getHandlePosition","getAbsoluteBoundaryPoint","getOppositePosition","height","widthStyle","style","match","update","newSize","proposedWidth","proposedHeight","proposedWidthPercents","widthPercents","proposedHandleHostWidth","handleHostWidth","proposedHandleHostHeight","handleHostHeight","resizerPosition","elementRect","positionParts","split","ret","x","right","left","y","scrollX","scrollY","getResizerHandleClass","domHandle","resizerPositions","parts","replacements","SizeView","View","bind","bindTemplate","setTemplate","to","display","if","visible","text","_bindToState","resizeState","unit","unbind","_isVisible","Resizer","_viewResizerWrapper","isSelected","decorate","state","_cleanup","_state","that","viewResizerWrapper","_appendHandles","_appendSizeUI","isVisible","hide","show","redraw","begin","_sizeView","_initialViewWidth","getStyle","_getHandleHost","_getResizeHost","updateSize","_proposeNewSize","newWidth","setStyle","domHandleHostRect","domResizeHostRect","newValue","onCommit","cancel","handleHostRect","domWrapper","_domResizerWrapper","existsInDom","widgetWrapper","handleHost","resizerWrapper","currentDimensions","newDimensions","isSameNode","offsetWidth","offsetHeight","offsetLeft","offsetTop","compareArrays","containsHandle","isResizeHandle","_dismiss","currentCoordinates","extractCoordinates","isCentered","enlargement","endsWith","abs","dominant","min","getResizeHost","getHandleHost","currentPosition","getResizerClass","pageX","pageY","WidgetResize","_resizers","_observer","_redrawSelectedResizerThrottled","global","window","DomEmitterMixin","_mouseDownListener","_mouseMoveListener","_mouseUpListener","throttle","redrawSelectedResizer","resizer","isAttached","delete","getResizerByViewElement","select","deselect","selectedResizer","attachTo","attach","widgetToolbarRepository","forceDisabled","clearForceDisabled","_getResizerByHandle","resizeHandle","_activeResizer","commit"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11],"debugId":null}}]
}