{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js.map","sources":["file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/dist/index.js","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/converters/tableproperties.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/utils/common.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/converters/upcasttable.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablewalker.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/converters/downcast.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/inserttablecommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/insertrowcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/insertcolumncommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/splitcellcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/utils/structure.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/mergecellcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/removerowcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/removecolumncommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/constants.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/utils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableutils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/mergecellscommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/selectrowcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/commands/selectcolumncommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-headings-refresh-handler.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-cell-refresh-handler.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/ui/inserttableview.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableui.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableselection.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableclipboard.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablekeyboard.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablemouse/mouseeventsobserver.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablemouse.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/table.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/plaintableoutput.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/utils/ui/widget.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tabletoolbar.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/ui/colorinputview.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/utils/ui/table-properties.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/ui/formrowview.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/ui/tablecellpropertiesview.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/utils/ui/contextualballoon.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/utils/table-properties.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesui.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpropertycommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellwidth/commands/tablecellwidthcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellwidth/tablecellwidthediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellpaddingcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellheightcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbackgroundcolorcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellverticalalignmentcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellhorizontalalignmentcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderstylecommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellbordercolorcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/commands/tablecellborderwidthcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties/tablecellpropertiesediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecellproperties.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablepropertycommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablebackgroundcolorcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablebordercolorcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderstylecommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tableborderwidthcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablewidthcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tableheightcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/commands/tablealignmentcommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/ui/tablepropertiesview.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties/tablepropertiesui.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tableproperties.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/converters/table-caption-post-fixer.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption/utils.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption/toggletablecaptioncommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption/tablecaptionediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption/tablecaptionui.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecaption.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/tablewidthscommand.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/converters.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize/tablecolumnresizeediting.ts","file://D%3A/Gurpreet%20Singh/next.js/admin_next/node_modules/%40ckeditor/ckeditor5-table/src/tablecolumnresize.ts"],"sourcesContent":["import { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { toWidgetEditable, toWidget, Widget, isWidget, WidgetToolbarRepository } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { first, global, CKEditorError, KeystrokeHandler, FocusTracker, Collection, getLocalizedArrowKeyCodeDirection, Rect, DomEmitterMixin } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { View, addKeyboardHandlingForGrid, ButtonView, createDropdown, MenuBarMenuView, SwitchButtonView, SplitButtonView, addListToDropdown, ViewModel, ViewCollection, FocusCycler, InputTextView, ColorSelectorView, FormHeaderView, submitHandler, LabelView, LabeledFieldView, createLabeledDropdown, createLabeledInputText, ToolbarView, BalloonPanelView, ContextualBalloon, normalizeColorOptions, getLocalizedColorOptions, clickOutsideHandler } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { ClipboardMarkersUtils, ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { DomEventObserver, isColor, isLength, isPercentage, addBorderRules, addPaddingRules, addBackgroundRules, enablePlaceholder, Element } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { isObject, debounce, isEqual, throttle } from 'lodash-es';\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/converters/tableproperties\n */ /**\n * Conversion helper for upcasting attributes using normalized styles.\n *\n * @param options.modelAttribute The attribute to set.\n * @param options.styleName The style name to convert.\n * @param options.viewElement The view element name that should be converted.\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n * @param options.shouldUpcast The function which returns `true` if style should be upcasted from this element.\n */ function upcastStyleToAttribute(conversion, options) {\n    const { modelAttribute, styleName, viewElement, defaultValue, reduceBoxSides = false, shouldUpcast = ()=>true } = options;\n    conversion.for('upcast').attributeToAttribute({\n        view: {\n            name: viewElement,\n            styles: {\n                [styleName]: /[\\s\\S]+/\n            }\n        },\n        model: {\n            key: modelAttribute,\n            value: (viewElement)=>{\n                if (!shouldUpcast(viewElement)) {\n                    return;\n                }\n                const normalized = viewElement.getNormalizedStyle(styleName);\n                const value = reduceBoxSides ? reduceBoxSidesValue(normalized) : normalized;\n                if (defaultValue !== value) {\n                    return value;\n                }\n            }\n        }\n    });\n}\n/**\n * Conversion helper for upcasting border styles for view elements.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `borderColor` value.\n * @param defaultBorder.style The default `borderStyle` value.\n * @param defaultBorder.width The default `borderWidth` value.\n */ function upcastBorderStyles(conversion, viewElementName, modelAttributes, defaultBorder) {\n    conversion.for('upcast').add((dispatcher)=>dispatcher.on('element:' + viewElementName, (evt, data, conversionApi)=>{\n            // If the element was not converted by element-to-element converter,\n            // we should not try to convert the style. See #8393.\n            if (!data.modelRange) {\n                return;\n            }\n            // Check the most detailed properties. These will be always set directly or\n            // when using the \"group\" properties like: `border-(top|right|bottom|left)` or `border`.\n            const stylesToConsume = [\n                'border-top-width',\n                'border-top-color',\n                'border-top-style',\n                'border-bottom-width',\n                'border-bottom-color',\n                'border-bottom-style',\n                'border-right-width',\n                'border-right-color',\n                'border-right-style',\n                'border-left-width',\n                'border-left-color',\n                'border-left-style'\n            ].filter((styleName)=>data.viewItem.hasStyle(styleName));\n            if (!stylesToConsume.length) {\n                return;\n            }\n            const matcherPattern = {\n                styles: stylesToConsume\n            };\n            // Try to consume appropriate values from consumable values list.\n            if (!conversionApi.consumable.test(data.viewItem, matcherPattern)) {\n                return;\n            }\n            const modelElement = [\n                ...data.modelRange.getItems({\n                    shallow: true\n                })\n            ].pop();\n            conversionApi.consumable.consume(data.viewItem, matcherPattern);\n            const normalizedBorder = {\n                style: data.viewItem.getNormalizedStyle('border-style'),\n                color: data.viewItem.getNormalizedStyle('border-color'),\n                width: data.viewItem.getNormalizedStyle('border-width')\n            };\n            const reducedBorder = {\n                style: reduceBoxSidesValue(normalizedBorder.style),\n                color: reduceBoxSidesValue(normalizedBorder.color),\n                width: reduceBoxSidesValue(normalizedBorder.width)\n            };\n            if (reducedBorder.style !== defaultBorder.style) {\n                conversionApi.writer.setAttribute(modelAttributes.style, reducedBorder.style, modelElement);\n            }\n            if (reducedBorder.color !== defaultBorder.color) {\n                conversionApi.writer.setAttribute(modelAttributes.color, reducedBorder.color, modelElement);\n            }\n            if (reducedBorder.width !== defaultBorder.width) {\n                conversionApi.writer.setAttribute(modelAttributes.width, reducedBorder.width, modelElement);\n            }\n        }));\n}\n/**\n * Conversion helper for downcasting an attribute to a style.\n */ function downcastAttributeToStyle(conversion, options) {\n    const { modelElement, modelAttribute, styleName } = options;\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: modelElement,\n            key: modelAttribute\n        },\n        view: (modelAttributeValue)=>({\n                key: 'style',\n                value: {\n                    [styleName]: modelAttributeValue\n                }\n            })\n    });\n}\n/**\n * Conversion helper for downcasting attributes from the model table to a view table (not to `<figure>`).\n */ function downcastTableAttribute(conversion, options) {\n    const { modelAttribute, styleName } = options;\n    conversion.for('downcast').add((dispatcher)=>dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi)=>{\n            const { item, attributeNewValue } = data;\n            const { mapper, writer } = conversionApi;\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const table = [\n                ...mapper.toViewElement(item).getChildren()\n            ].find((child)=>child.is('element', 'table'));\n            if (attributeNewValue) {\n                writer.setStyle(styleName, attributeNewValue, table);\n            } else {\n                writer.removeStyle(styleName, table);\n            }\n        }));\n}\n/**\n * Reduces the full top, right, bottom, left object to a single string if all sides are equal.\n * Returns original style otherwise.\n */ function reduceBoxSidesValue(style) {\n    if (!style) {\n        return;\n    }\n    const sides = [\n        'top',\n        'right',\n        'bottom',\n        'left'\n    ];\n    const allSidesDefined = sides.every((side)=>style[side]);\n    if (!allSidesDefined) {\n        return style;\n    }\n    const topSideStyle = style.top;\n    const allSidesEqual = sides.every((side)=>style[side] === topSideStyle);\n    if (!allSidesEqual) {\n        return style;\n    }\n    return topSideStyle;\n}\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param key An attribute key.\n * @param value The new attribute value.\n * @param item A model item on which the attribute will be set.\n * @param defaultValue The default attribute value. If a value is lower or equal, it will be unset.\n */ function updateNumericAttribute(key, value, item, writer, defaultValue = 1) {\n    if (value !== undefined && value !== null && defaultValue !== undefined && defaultValue !== null && value > defaultValue) {\n        writer.setAttribute(key, value, item);\n    } else {\n        writer.removeAttribute(key, item);\n    }\n}\n/**\n * A common method to create an empty table cell. It creates a proper model structure as a table cell must have at least one block inside.\n *\n * @param writer The model writer.\n * @param insertPosition The position at which the table cell should be inserted.\n * @param attributes The element attributes.\n * @returns Created table cell.\n */ function createEmptyTableCell(writer, insertPosition, attributes = {}) {\n    const tableCell = writer.createElement('tableCell', attributes);\n    writer.insertElement('paragraph', tableCell);\n    writer.insert(tableCell, insertPosition);\n    return tableCell;\n}\n/**\n * Checks if a table cell belongs to the heading column section.\n */ function isHeadingColumnCell(tableUtils, tableCell) {\n    const table = tableCell.parent.parent;\n    const headingColumns = parseInt(table.getAttribute('headingColumns') || '0');\n    const { column } = tableUtils.getCellLocation(tableCell);\n    return !!headingColumns && column < headingColumns;\n}\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */ function enableProperty$1(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('tableCell', {\n        allowAttributes: [\n            modelAttribute\n        ]\n    });\n    upcastStyleToAttribute(conversion, {\n        viewElement: /^(td|th)$/,\n        ...options\n    });\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'tableCell',\n        ...options\n    });\n}\n/**\n * Depending on the position of the selection we either return the table under cursor or look for the table higher in the hierarchy.\n */ function getSelectionAffectedTable(selection) {\n    const selectedElement = selection.getSelectedElement();\n    // Is the command triggered from the `tableToolbar`?\n    if (selectedElement && selectedElement.is('element', 'table')) {\n        return selectedElement;\n    }\n    return selection.getFirstPosition().findAncestor('table');\n}\n\n/**\n * Returns a function that converts the table view representation:\n *\n * ```xml\n * <figure class=\"table\"><table>...</table></figure>\n * ```\n *\n * to the model representation:\n *\n * ```xml\n * <table></table>\n * ```\n */ function upcastTableFigure() {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            // Do not convert if this is not a \"table figure\".\n            if (!conversionApi.consumable.test(data.viewItem, {\n                name: true,\n                classes: 'table'\n            })) {\n                return;\n            }\n            // Find a table element inside the figure element.\n            const viewTable = getViewTableFromFigure(data.viewItem);\n            // Do not convert if table element is absent or was already converted.\n            if (!viewTable || !conversionApi.consumable.test(viewTable, {\n                name: true\n            })) {\n                return;\n            }\n            // Consume the figure to prevent other converters from processing it again.\n            conversionApi.consumable.consume(data.viewItem, {\n                name: true,\n                classes: 'table'\n            });\n            // Convert view table to model table.\n            const conversionResult = conversionApi.convertItem(viewTable, data.modelCursor);\n            // Get table element from conversion result.\n            const modelTable = first(conversionResult.modelRange.getItems());\n            // When table wasn't successfully converted then finish conversion.\n            if (!modelTable) {\n                // Revert consumed figure so other features can convert it.\n                conversionApi.consumable.revert(data.viewItem, {\n                    name: true,\n                    classes: 'table'\n                });\n                return;\n            }\n            conversionApi.convertChildren(data.viewItem, conversionApi.writer.createPositionAt(modelTable, 'end'));\n            conversionApi.updateConversionResult(modelTable, data);\n        });\n    };\n}\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns Conversion helper.\n */ function upcastTable() {\n    return (dispatcher)=>{\n        dispatcher.on('element:table', (evt, data, conversionApi)=>{\n            const viewTable = data.viewItem;\n            // When element was already consumed then skip it.\n            if (!conversionApi.consumable.test(viewTable, {\n                name: true\n            })) {\n                return;\n            }\n            const { rows, headingRows, headingColumns } = scanTable(viewTable);\n            // Only set attributes if values is greater then 0.\n            const attributes = {};\n            if (headingColumns) {\n                attributes.headingColumns = headingColumns;\n            }\n            if (headingRows) {\n                attributes.headingRows = headingRows;\n            }\n            const table = conversionApi.writer.createElement('table', attributes);\n            if (!conversionApi.safeInsert(table, data.modelCursor)) {\n                return;\n            }\n            conversionApi.consumable.consume(viewTable, {\n                name: true\n            });\n            // Upcast table rows in proper order (heading rows first).\n            rows.forEach((row)=>conversionApi.convertItem(row, conversionApi.writer.createPositionAt(table, 'end')));\n            // Convert everything else.\n            conversionApi.convertChildren(viewTable, conversionApi.writer.createPositionAt(table, 'end'));\n            // Create one row and one table cell for empty table.\n            if (table.isEmpty) {\n                const row = conversionApi.writer.createElement('tableRow');\n                conversionApi.writer.insert(row, conversionApi.writer.createPositionAt(table, 'end'));\n                createEmptyTableCell(conversionApi.writer, conversionApi.writer.createPositionAt(row, 'end'));\n            }\n            conversionApi.updateConversionResult(table, data);\n        });\n    };\n}\n/**\n * A conversion helper that skips empty <tr> elements from upcasting at the beginning of the table.\n *\n * An empty row is considered a table model error but when handling clipboard data there could be rows that contain only row-spanned cells\n * and empty TR-s are used to maintain the table structure (also {@link module:table/tablewalker~TableWalker} assumes that there are only\n * rows that have related `tableRow` elements).\n *\n * *Note:* Only the first empty rows are removed because they have no meaning and it solves the issue\n * of an improper table with all empty rows.\n *\n * @returns Conversion helper.\n */ function skipEmptyTableRow() {\n    return (dispatcher)=>{\n        dispatcher.on('element:tr', (evt, data)=>{\n            if (data.viewItem.isEmpty && data.modelCursor.index == 0) {\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    };\n}\n/**\n * A converter that ensures an empty paragraph is inserted in a table cell if no other content was converted.\n *\n * @returns Conversion helper.\n */ function ensureParagraphInTableCell(elementName) {\n    return (dispatcher)=>{\n        dispatcher.on(`element:${elementName}`, (evt, data, { writer })=>{\n            // The default converter will create a model range on converted table cell.\n            if (!data.modelRange) {\n                return;\n            }\n            const tableCell = data.modelRange.start.nodeAfter;\n            const modelCursor = writer.createPositionAt(tableCell, 0);\n            // Ensure a paragraph in the model for empty table cells for converted table cells.\n            if (data.viewItem.isEmpty) {\n                writer.insertElement('paragraph', modelCursor);\n                return;\n            }\n            const childNodes = Array.from(tableCell.getChildren());\n            // In case there are only markers inside the table cell then move them to the paragraph.\n            if (childNodes.every((node)=>node.is('element', '$marker'))) {\n                const paragraph = writer.createElement('paragraph');\n                writer.insert(paragraph, writer.createPositionAt(tableCell, 0));\n                for (const node of childNodes){\n                    writer.move(writer.createRangeOn(node), writer.createPositionAt(paragraph, 'end'));\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Get view `<table>` element from the view widget (`<figure>`).\n */ function getViewTableFromFigure(figureView) {\n    for (const figureChild of figureView.getChildren()){\n        if (figureChild.is('element', 'table')) {\n            return figureChild;\n        }\n    }\n}\n/**\n * Scans table rows and extracts required metadata from the table:\n *\n * headingRows    - The number of rows that go as table headers.\n * headingColumns - The maximum number of row headings.\n * rows           - Sorted `<tr>` elements as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n */ function scanTable(viewTable) {\n    let headingRows = 0;\n    let headingColumns = undefined;\n    // The `<tbody>` and `<thead>` sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more than one\n    // of them.\n    // As the model does not have these sections, rows from different sections must be sorted.\n    // For example, below is a valid HTML table:\n    //\n    // <table>\n    //   <tbody><tr><td>2</td></tr></tbody>\n    //   <thead><tr><td>1</td></tr></thead>\n    //   <tbody><tr><td>3</td></tr></tbody>\n    // </table>\n    //\n    // But browsers will render rows in order as: 1 as the heading and 2 and 3 as the body.\n    const headRows = [];\n    const bodyRows = [];\n    // Currently the editor does not support more then one <thead> section.\n    // Only the first <thead> from the view will be used as a heading row and the others will be converted to body rows.\n    let firstTheadElement;\n    for (const tableChild of Array.from(viewTable.getChildren())){\n        // Only `<thead>`, `<tbody>` & `<tfoot>` from allowed table children can have `<tr>`s.\n        // The else is for future purposes (mainly `<caption>`).\n        if (tableChild.name !== 'tbody' && tableChild.name !== 'thead' && tableChild.name !== 'tfoot') {\n            continue;\n        }\n        // Save the first `<thead>` in the table as table header - all other ones will be converted to table body rows.\n        if (tableChild.name === 'thead' && !firstTheadElement) {\n            firstTheadElement = tableChild;\n        }\n        // There might be some extra empty text nodes between the `<tr>`s.\n        // Make sure further code operates on `tr`s only. (#145)\n        const trs = Array.from(tableChild.getChildren()).filter((el)=>el.is('element', 'tr'));\n        // Keep tracking of the previous row columns count to improve detection of heading rows.\n        let maxPrevColumns = null;\n        for (const tr of trs){\n            const trColumns = Array.from(tr.getChildren()).filter((el)=>el.is('element', 'td') || el.is('element', 'th'));\n            // This <tr> is a child of a first <thead> element.\n            if (firstTheadElement && tableChild === firstTheadElement || tableChild.name === 'tbody' && trColumns.length > 0 && // These conditions handles the case when the first column is a <th> element and it's the only column in the row.\n            // This case is problematic because it's not clear if this row should be a heading row or not, as it may be result\n            // of the cell span from the previous row.\n            // Issue: https://github.com/ckeditor/ckeditor5/issues/17556\n            (maxPrevColumns === null || trColumns.length === maxPrevColumns) && trColumns.every((e)=>e.is('element', 'th'))) {\n                headingRows++;\n                headRows.push(tr);\n            } else {\n                bodyRows.push(tr);\n                // For other rows check how many column headings this row has.\n                const headingCols = scanRowForHeadingColumns(tr);\n                if (!headingColumns || headingCols < headingColumns) {\n                    headingColumns = headingCols;\n                }\n            }\n            // We use the maximum number of columns to avoid false positives when detecting\n            // multiple rows with single column within `rowspan`. Without it the last row of `rowspan=3`\n            // would be detected as a heading row because it has only one column (identical to the previous row).\n            maxPrevColumns = Math.max(maxPrevColumns || 0, trColumns.length);\n        }\n    }\n    return {\n        headingRows,\n        headingColumns: headingColumns || 0,\n        rows: [\n            ...headRows,\n            ...bodyRows\n        ]\n    };\n}\n/**\n * Scans a `<tr>` element and its children for metadata:\n * - For heading row:\n *     - Adds this row to either the heading or the body rows.\n *     - Updates the number of heading rows.\n * - For body rows:\n *     - Calculates the number of column headings.\n */ function scanRowForHeadingColumns(tr) {\n    let headingColumns = 0;\n    let index = 0;\n    // Filter out empty text nodes from tr children.\n    const children = Array.from(tr.getChildren()).filter((child)=>child.name === 'th' || child.name === 'td');\n    // Count starting adjacent <th> elements of a <tr>.\n    while(index < children.length && children[index].name === 'th'){\n        const th = children[index];\n        // Adjust columns calculation by the number of spanned columns.\n        const colspan = parseInt(th.getAttribute('colspan') || '1');\n        headingColumns = headingColumns + colspan;\n        index++;\n    }\n    return headingColumns;\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/tablewalker\n */ /**\n * The table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableSlot} with proper table cell attributes.\n */ class TableWalker {\n    /**\n\t * The walker's table element.\n\t *\n\t * @internal\n\t */ _table;\n    /**\n\t * A row index from which this iterator will start.\n\t */ _startRow;\n    /**\n\t * A row index at which this iterator will end.\n\t */ _endRow;\n    /**\n\t * If set, the table walker will only output cells from a given column and following ones or cells that overlap them.\n\t */ _startColumn;\n    /**\n\t * If set, the table walker will only output cells up to a given column.\n\t */ _endColumn;\n    /**\n\t * Enables output of spanned cells that are normally not yielded.\n\t */ _includeAllSlots;\n    /**\n\t * Row indexes to skip from the iteration.\n\t */ _skipRows;\n    /**\n\t * The current row index.\n\t *\n\t * @internal\n\t */ _row;\n    /**\n\t * The index of the current row element in the table.\n\t *\n\t * @internal\n\t */ _rowIndex;\n    /**\n\t * The current column index.\n\t *\n\t * @internal\n\t */ _column;\n    /**\n\t * The cell index in a parent row. For spanned cells when {@link #_includeAllSlots} is set to `true`,\n\t * this represents the index of the next table cell.\n\t *\n\t * @internal\n\t */ _cellIndex;\n    /**\n\t * Holds a map of spanned cells in a table.\n\t */ _spannedCells;\n    /**\n\t * Index of the next column where a cell is anchored.\n\t */ _nextCellAtColumn;\n    /**\n\t * Indicates whether the iterator jumped to (or close to) the start row, ignoring rows that don't need to be traversed.\n\t */ _jumpedToStartRow = false;\n    /**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the constructor.\n\t * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeAllSlots` option to the constructor.\n\t *\n\t * The most important values of the iterator are column and row indexes of a cell.\n\t *\n\t * See {@link module:table/tablewalker~TableSlot} what values are returned by the table walker.\n\t *\n\t * To iterate over a given row:\n\t *\n\t * ```ts\n\t * const tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n\t *\n\t * for ( const tableSlot of tableWalker ) {\n\t *   console.log( 'A cell at row', tableSlot.row, 'and column', tableSlot.column );\n\t * }\n\t * ```\n\t *\n\t * For instance the code above for the following table:\n\t *\n\t *  +----+----+----+----+----+----+\n\t *  | 00      | 02 | 03 | 04 | 05 |\n\t *  |         +----+----+----+----+\n\t *  |         | 12      | 14 | 15 |\n\t *  |         +----+----+----+    +\n\t *  |         | 22           |    |\n\t *  |----+----+----+----+----+    +\n\t *  | 30 | 31 | 32 | 33 | 34 |    |\n\t *  +----+----+----+----+----+----+\n\t *\n\t * will log in the console:\n\t *\n\t *  'A cell at row 1 and column 2'\n\t *  'A cell at row 1 and column 4'\n\t *  'A cell at row 1 and column 5'\n\t *  'A cell at row 2 and column 2'\n\t *\n\t * To also iterate over spanned cells:\n\t *\n\t * ```ts\n\t * const tableWalker = new TableWalker( table, { row: 1, includeAllSlots: true } );\n\t *\n\t * for ( const tableSlot of tableWalker ) {\n\t *   console.log( 'Slot at', tableSlot.row, 'x', tableSlot.column, ':', tableSlot.isAnchor ? 'is anchored' : 'is spanned' );\n\t * }\n\t * ```\n\t *\n\t * will log in the console for the table from the previous example:\n\t *\n\t *  'Cell at 1 x 0 : is spanned'\n\t *  'Cell at 1 x 1 : is spanned'\n\t *  'Cell at 1 x 2 : is anchored'\n\t *  'Cell at 1 x 3 : is spanned'\n\t *  'Cell at 1 x 4 : is anchored'\n\t *  'Cell at 1 x 5 : is anchored'\n\t *\n\t * **Note**: Option `row` is a shortcut that sets both `startRow` and `endRow` to the same row.\n\t * (Use either `row` or `startRow` and `endRow` but never together). Similarly the `column` option sets both `startColumn`\n\t * and `endColumn` to the same column (Use either `column` or `startColumn` and `endColumn` but never together).\n\t *\n\t * @param table A table over which the walker iterates.\n\t * @param options An object with configuration.\n\t * @param options.row A row index for which this iterator will output cells. Can't be used together with `startRow` and `endRow`.\n\t * @param options.startRow A row index from which this iterator should start. Can't be used together with `row`. Default value is 0.\n\t * @param options.endRow A row index at which this iterator should end. Can't be used together with `row`.\n\t * @param options.column A column index for which this iterator will output cells.\n\t * Can't be used together with `startColumn` and `endColumn`.\n\t * @param options.startColumn A column index from which this iterator should start.\n\t * Can't be used together with `column`. Default value is 0.\n\t * @param options.endColumn A column index at which this iterator should end. Can't be used together with `column`.\n\t * @param options.includeAllSlots Also return values for spanned cells. Default value is \"false\".\n\t */ constructor(table, options = {}){\n        this._table = table;\n        this._startRow = options.row !== undefined ? options.row : options.startRow || 0;\n        this._endRow = options.row !== undefined ? options.row : options.endRow;\n        this._startColumn = options.column !== undefined ? options.column : options.startColumn || 0;\n        this._endColumn = options.column !== undefined ? options.column : options.endColumn;\n        this._includeAllSlots = !!options.includeAllSlots;\n        this._skipRows = new Set();\n        this._row = 0;\n        this._rowIndex = 0;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._spannedCells = new Map();\n        this._nextCellAtColumn = -1;\n    }\n    /**\n\t * Iterable interface.\n\t */ [Symbol.iterator]() {\n        return this;\n    }\n    /**\n\t * Gets the next table walker's value.\n\t *\n\t * @returns The next table walker's value.\n\t */ next() {\n        if (this._canJumpToStartRow()) {\n            this._jumpToNonSpannedRowClosestToStartRow();\n        }\n        const row = this._table.getChild(this._rowIndex);\n        // Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n        if (!row || this._isOverEndRow()) {\n            return {\n                done: true,\n                value: undefined\n            };\n        }\n        // We step over current element when it is not a tableRow instance.\n        if (!row.is('element', 'tableRow')) {\n            this._rowIndex++;\n            return this.next();\n        }\n        if (this._isOverEndColumn()) {\n            return this._advanceToNextRow();\n        }\n        let outValue = null;\n        const spanData = this._getSpanned();\n        if (spanData) {\n            if (this._includeAllSlots && !this._shouldSkipSlot()) {\n                outValue = this._formatOutValue(spanData.cell, spanData.row, spanData.column);\n            }\n        } else {\n            const cell = row.getChild(this._cellIndex);\n            if (!cell) {\n                // If there are no more cells left in row advance to the next row.\n                return this._advanceToNextRow();\n            }\n            const colspan = parseInt(cell.getAttribute('colspan') || '1');\n            const rowspan = parseInt(cell.getAttribute('rowspan') || '1');\n            // Record this cell spans if it's not 1x1 cell.\n            if (colspan > 1 || rowspan > 1) {\n                this._recordSpans(cell, rowspan, colspan);\n            }\n            if (!this._shouldSkipSlot()) {\n                outValue = this._formatOutValue(cell);\n            }\n            this._nextCellAtColumn = this._column + colspan;\n        }\n        // Advance to the next column before returning value.\n        this._column++;\n        if (this._column == this._nextCellAtColumn) {\n            this._cellIndex++;\n        }\n        // The current value will be returned only if current row and column are not skipped.\n        return outValue || this.next();\n    }\n    /**\n\t * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n\t * to output.\n\t *\n\t * @param row The row index to skip.\n\t */ skipRow(row) {\n        this._skipRows.add(row);\n    }\n    /**\n\t * Advances internal cursor to the next row.\n\t */ _advanceToNextRow() {\n        this._row++;\n        this._rowIndex++;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._nextCellAtColumn = -1;\n        return this.next();\n    }\n    /**\n\t * Checks if the current row is over {@link #_endRow}.\n\t */ _isOverEndRow() {\n        // If #_endRow is defined skip all rows after it.\n        return this._endRow !== undefined && this._row > this._endRow;\n    }\n    /**\n\t * Checks if the current cell is over {@link #_endColumn}\n\t */ _isOverEndColumn() {\n        // If #_endColumn is defined skip all cells after it.\n        return this._endColumn !== undefined && this._column > this._endColumn;\n    }\n    /**\n\t * A common method for formatting the iterator's output value.\n\t *\n\t * @param cell The table cell to output.\n\t * @param anchorRow The row index of a cell anchor slot.\n\t * @param anchorColumn The column index of a cell anchor slot.\n\t */ _formatOutValue(cell, anchorRow = this._row, anchorColumn = this._column) {\n        return {\n            done: false,\n            value: new TableSlot(this, cell, anchorRow, anchorColumn)\n        };\n    }\n    /**\n\t * Checks if the current slot should be skipped.\n\t */ _shouldSkipSlot() {\n        const rowIsMarkedAsSkipped = this._skipRows.has(this._row);\n        const rowIsBeforeStartRow = this._row < this._startRow;\n        const columnIsBeforeStartColumn = this._column < this._startColumn;\n        const columnIsAfterEndColumn = this._endColumn !== undefined && this._column > this._endColumn;\n        return rowIsMarkedAsSkipped || rowIsBeforeStartRow || columnIsBeforeStartColumn || columnIsAfterEndColumn;\n    }\n    /**\n\t * Returns the cell element that is spanned over the current cell location.\n\t */ _getSpanned() {\n        const rowMap = this._spannedCells.get(this._row);\n        // No spans for given row.\n        if (!rowMap) {\n            return null;\n        }\n        // If spans for given rows has entry for column it means that this location if spanned by other cell.\n        return rowMap.get(this._column) || null;\n    }\n    /**\n\t * Updates spanned cells map relative to the current cell location and its span dimensions.\n\t *\n\t * @param cell A cell that is spanned.\n\t * @param rowspan Cell height.\n\t * @param colspan Cell width.\n\t */ _recordSpans(cell, rowspan, colspan) {\n        const data = {\n            cell,\n            row: this._row,\n            column: this._column\n        };\n        for(let rowToUpdate = this._row; rowToUpdate < this._row + rowspan; rowToUpdate++){\n            for(let columnToUpdate = this._column; columnToUpdate < this._column + colspan; columnToUpdate++){\n                if (rowToUpdate != this._row || columnToUpdate != this._column) {\n                    this._markSpannedCell(rowToUpdate, columnToUpdate, data);\n                }\n            }\n        }\n    }\n    /**\n\t * Marks the cell location as spanned by another cell.\n\t *\n\t * @param row The row index of the cell location.\n\t * @param column The column index of the cell location.\n\t * @param data A spanned cell details (cell element, anchor row and column).\n\t */ _markSpannedCell(row, column, data) {\n        if (!this._spannedCells.has(row)) {\n            this._spannedCells.set(row, new Map());\n        }\n        const rowSpans = this._spannedCells.get(row);\n        rowSpans.set(column, data);\n    }\n    /**\n\t * Checks if part of the table can be skipped.\n\t */ _canJumpToStartRow() {\n        return !!this._startRow && this._startRow > 0 && !this._jumpedToStartRow;\n    }\n    /**\n\t * Sets the current row to `this._startRow` or the first row before it that has the number of cells\n\t * equal to the number of columns in the table.\n\t *\n\t * Example:\n\t * \t+----+----+----+\n\t *  | 00 | 01 | 02 |\n\t *  |----+----+----+\n\t *  | 10      | 12 |\n\t *  |         +----+\n\t *  |         | 22 |\n\t *  |         +----+\n\t *  |         | 32 | <--- Start row\n\t *  +----+----+----+\n\t *  | 40 | 41 | 42 |\n\t *  +----+----+----+\n\t *\n\t * If the 4th row is a `this._startRow`, this method will:\n\t * 1.) Count the number of columns this table has based on the first row (3 columns in this case).\n\t * 2.) Check if the 4th row contains 3 cells. It doesn't, so go to the row before it.\n\t * 3.) Check if the 3rd row contains 3 cells. It doesn't, so go to the row before it.\n\t * 4.) Check if the 2nd row contains 3 cells. It does, so set the current row to that row.\n\t *\n\t * Setting the current row this way is necessary to let the `next()`  method loop over the cells\n\t * spanning multiple rows or columns and update the `this._spannedCells` property.\n\t */ _jumpToNonSpannedRowClosestToStartRow() {\n        const firstRowLength = this._getRowLength(0);\n        for(let i = this._startRow; !this._jumpedToStartRow; i--){\n            if (firstRowLength === this._getRowLength(i)) {\n                this._row = i;\n                this._rowIndex = i;\n                this._jumpedToStartRow = true;\n            }\n        }\n    }\n    /**\n\t * Returns a number of columns in a row taking `colspan` into consideration.\n\t */ _getRowLength(rowIndex) {\n        const row = this._table.getChild(rowIndex);\n        return [\n            ...row.getChildren()\n        ].reduce((cols, row)=>{\n            return cols + parseInt(row.getAttribute('colspan') || '1');\n        }, 0);\n    }\n}\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n */ class TableSlot {\n    /**\n\t * The current table cell.\n\t */ cell;\n    /**\n\t * The row index of a table slot.\n\t */ row;\n    /**\n\t * The column index of a table slot.\n\t */ column;\n    /**\n\t * The row index of a cell anchor slot.\n\t */ cellAnchorRow;\n    /**\n\t * The column index of a cell anchor slot.\n\t */ cellAnchorColumn;\n    /**\n\t * The index of the current cell in the parent row.\n\t */ _cellIndex;\n    /**\n\t * The index of the current row element in the table.\n\t */ _rowIndex;\n    /**\n\t * The table element.\n\t */ _table;\n    /**\n\t * Creates an instance of the table walker value.\n\t *\n\t * @param tableWalker The table walker instance.\n\t * @param cell The current table cell.\n\t * @param anchorRow The row index of a cell anchor slot.\n\t * @param anchorColumn The column index of a cell anchor slot.\n\t */ constructor(tableWalker, cell, anchorRow, anchorColumn){\n        this.cell = cell;\n        this.row = tableWalker._row;\n        this.column = tableWalker._column;\n        this.cellAnchorRow = anchorRow;\n        this.cellAnchorColumn = anchorColumn;\n        this._cellIndex = tableWalker._cellIndex;\n        this._rowIndex = tableWalker._rowIndex;\n        this._table = tableWalker._table;\n    }\n    // @if CK_DEBUG // public get isSpanned(): unknown { return throwMissingGetterError( 'isSpanned' ); }\n    // @if CK_DEBUG // public get colspan(): unknown { return throwMissingGetterError( 'colspan' ); }\n    // @if CK_DEBUG // public get rowspan(): unknown { return throwMissingGetterError( 'rowspan' ); }\n    // @if CK_DEBUG // public get cellIndex(): unknown { return throwMissingGetterError( 'cellIndex' ); }\n    /**\n\t * Whether the cell is anchored in the current slot.\n\t */ get isAnchor() {\n        return this.row === this.cellAnchorRow && this.column === this.cellAnchorColumn;\n    }\n    /**\n\t * The width of a cell defined by a `colspan` attribute. If the model attribute is not present, it is set to `1`.\n\t */ get cellWidth() {\n        return parseInt(this.cell.getAttribute('colspan') || '1');\n    }\n    /**\n\t * The height of a cell defined by a `rowspan` attribute. If the model attribute is not present, it is set to `1`.\n\t */ get cellHeight() {\n        return parseInt(this.cell.getAttribute('rowspan') || '1');\n    }\n    /**\n\t * The index of the current row element in the table.\n\t */ get rowIndex() {\n        return this._rowIndex;\n    }\n    /**\n\t * Returns the {@link module:engine/model/position~Position} before the table slot.\n\t */ getPositionBefore() {\n        const model = this._table.root.document.model;\n        return model.createPositionAt(this._table.getChild(this.row), this._cellIndex);\n    }\n}\n /**\n * This `TableSlot`'s getter (property) was removed in CKEditor 5 v20.0.0.\n *\n * Check out the new `TableWalker`'s API in the documentation.\n *\n * @error tableslot-getter-removed\n * @param getterName\n */  // @if CK_DEBUG // function throwMissingGetterError( getterName: string ): void {\n // @if CK_DEBUG //\t\tthrow new CKEditorError( 'tableslot-getter-removed', null, {\n // @if CK_DEBUG //\t\t\tgetterName\n // @if CK_DEBUG //\t\t} );\n // @if CK_DEBUG // }\n\n/**\n * Model table element to view table element conversion helper.\n */ function downcastTable(tableUtils, options) {\n    return (table, { writer })=>{\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const tableElement = writer.createContainerElement('table', null, []);\n        const figureElement = writer.createContainerElement('figure', {\n            class: 'table'\n        }, tableElement);\n        // Table head slot.\n        if (headingRows > 0) {\n            writer.insert(writer.createPositionAt(tableElement, 'end'), writer.createContainerElement('thead', null, writer.createSlot((element)=>element.is('element', 'tableRow') && element.index < headingRows)));\n        }\n        // Table body slot.\n        if (headingRows < tableUtils.getRows(table)) {\n            writer.insert(writer.createPositionAt(tableElement, 'end'), writer.createContainerElement('tbody', null, writer.createSlot((element)=>element.is('element', 'tableRow') && element.index >= headingRows)));\n        }\n        // Dynamic slots.\n        for (const { positionOffset, filter } of options.additionalSlots){\n            writer.insert(writer.createPositionAt(tableElement, positionOffset), writer.createSlot(filter));\n        }\n        // Create a slot with items that don't fit into the table.\n        writer.insert(writer.createPositionAt(tableElement, 'after'), writer.createSlot((element)=>{\n            if (element.is('element', 'tableRow')) {\n                return false;\n            }\n            return !options.additionalSlots.some(({ filter })=>filter(element));\n        }));\n        return options.asWidget ? toTableWidget(figureElement, writer) : figureElement;\n    };\n}\n/**\n * Model table row element to view `<tr>` element conversion helper.\n *\n * @returns Element creator.\n */ function downcastRow() {\n    return (tableRow, { writer })=>{\n        return tableRow.isEmpty ? writer.createEmptyElement('tr') : writer.createContainerElement('tr');\n    };\n}\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */ function downcastCell(options = {}) {\n    return (tableCell, { writer })=>{\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowIndex = table.getChildIndex(tableRow);\n        const tableWalker = new TableWalker(table, {\n            row: rowIndex\n        });\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const headingColumns = table.getAttribute('headingColumns') || 0;\n        let result = null;\n        // We need to iterate over a table in order to get proper row & column values from a walker.\n        for (const tableSlot of tableWalker){\n            if (tableSlot.cell == tableCell) {\n                const isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n                const cellElementName = isHeading ? 'th' : 'td';\n                result = options.asWidget ? toWidgetEditable(writer.createEditableElement(cellElementName), writer) : writer.createContainerElement(cellElementName);\n                break;\n            }\n        }\n        return result;\n    };\n}\n/**\n * Overrides paragraph inside table cell conversion.\n *\n * This converter:\n * * should be used to override default paragraph conversion.\n * * It will only convert `<paragraph>` placed directly inside `<tableCell>`.\n * * For a single paragraph without attributes it returns `<span>` to simulate data table.\n * * For all other cases it returns `<p>` element.\n *\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */ function convertParagraphInTableCell(options = {}) {\n    return (modelElement, { writer })=>{\n        if (!modelElement.parent.is('element', 'tableCell')) {\n            return null;\n        }\n        if (!isSingleParagraphWithoutAttributes(modelElement)) {\n            return null;\n        }\n        if (options.asWidget) {\n            return writer.createContainerElement('span', {\n                class: 'ck-table-bogus-paragraph'\n            });\n        } else {\n            // Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n            const viewElement = writer.createContainerElement('p');\n            writer.setCustomProperty('dataPipeline:transparentRendering', true, viewElement);\n            return viewElement;\n        }\n    };\n}\n/**\n * Checks if given model `<paragraph>` is an only child of a parent (`<tableCell>`) and if it has any attribute set.\n *\n * The paragraph should be converted in the editing view to:\n *\n * * If returned `true` - to a `<span class=\"ck-table-bogus-paragraph\">`\n * * If returned `false` - to a `<p>`\n */ function isSingleParagraphWithoutAttributes(modelElement) {\n    const tableCell = modelElement.parent;\n    const isSingleParagraph = tableCell.childCount == 1;\n    return isSingleParagraph && !hasAnyAttribute(modelElement);\n}\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n * @param label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n */ function toTableWidget(viewElement, writer) {\n    writer.setCustomProperty('table', true, viewElement);\n    return toWidget(viewElement, writer, {\n        hasSelectionHandle: true\n    });\n}\n/**\n * Checks if an element has any attributes set.\n */ function hasAnyAttribute(element) {\n    for (const attributeKey of element.getAttributeKeys()){\n        // Ignore selection attributes stored on block elements.\n        if (attributeKey.startsWith('selection:') || attributeKey == 'htmlEmptyBlock') {\n            continue;\n        }\n        return true;\n    }\n    return false;\n}\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n * ```ts\n * editor.execute( 'insertTable', { rows: 20, columns: 5 } );\n * ```\n */ class InsertTableCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const schema = model.schema;\n        this.isEnabled = isAllowedInParent(selection, schema);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Inserts a table with the given number of rows and columns into the editor.\n\t *\n\t * @param options.rows The number of rows to create in the inserted table. Default value is 2.\n\t * @param options.columns The number of columns to create in the inserted table. Default value is 2.\n\t * @param options.headingRows The number of heading rows. If not provided it will default to\n\t * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.rows`} table config.\n\t * @param options.headingColumns The number of heading columns. If not provided it will default to\n\t * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.columns`} table config.\n\t * @fires execute\n\t */ execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const defaultRows = editor.config.get('table.defaultHeadings.rows');\n        const defaultColumns = editor.config.get('table.defaultHeadings.columns');\n        if (options.headingRows === undefined && defaultRows) {\n            options.headingRows = defaultRows;\n        }\n        if (options.headingColumns === undefined && defaultColumns) {\n            options.headingColumns = defaultColumns;\n        }\n        model.change((writer)=>{\n            const table = tableUtils.createTable(writer, options);\n            model.insertObject(table, null, null, {\n                findOptimalPosition: 'auto'\n            });\n            writer.setSelection(writer.createPositionAt(table.getNodeByPath([\n                0,\n                0,\n                0\n            ]), 0));\n        });\n    }\n}\n/**\n * Checks if the table is allowed in the parent.\n */ function isAllowedInParent(selection, schema) {\n    const positionParent = selection.getFirstPosition().parent;\n    const validParent = positionParent === positionParent.root ? positionParent : positionParent.parent;\n    return schema.checkChild(validParent, 'table');\n}\n\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowBelow' );\n * ```\n *\n * To insert a row above the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowAbove' );\n * ```\n */ class InsertRowCommand extends Command {\n    /**\n\t * The order of insertion relative to the row in which the caret is located.\n\t */ order;\n    /**\n\t * Creates a new `InsertRowCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.order The order of insertion relative to the row in which the caret is located.\n\t * Possible values: `\"above\"` and `\"below\"`. Default value is \"below\"\n\t */ constructor(editor, options = {}){\n        super(editor);\n        this.order = options.order || 'below';\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const selection = this.editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells(selection).length;\n        this.isEnabled = isAnyCellSelected;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const insertAbove = this.order === 'above';\n        const affectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const rowIndexes = tableUtils.getRowIndexes(affectedTableCells);\n        const row = insertAbove ? rowIndexes.first : rowIndexes.last;\n        const table = affectedTableCells[0].findAncestor('table');\n        tableUtils.insertRows(table, {\n            at: insertAbove ? row : row + 1,\n            copyStructureFromAbove: !insertAbove\n        });\n    }\n}\n\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnLeft' );\n * ```\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnRight' );\n * ```\n */ class InsertColumnCommand extends Command {\n    /**\n\t * The order of insertion relative to the column in which the caret is located.\n\t */ order;\n    /**\n\t * Creates a new `InsertColumnCommand` instance.\n\t *\n\t * @param editor An editor on which this command will be used.\n\t * @param options.order The order of insertion relative to the column in which the caret is located.\n\t * Possible values: `\"left\"` and `\"right\"`. Default value is \"right\".\n\t */ constructor(editor, options = {}){\n        super(editor);\n        this.order = options.order || 'right';\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const selection = this.editor.model.document.selection;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells(selection).length;\n        this.isEnabled = isAnyCellSelected;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n\t * in which the selection is set.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const tableUtils = editor.plugins.get('TableUtils');\n        const insertBefore = this.order === 'left';\n        const affectedTableCells = tableUtils.getSelectionAffectedTableCells(selection);\n        const columnIndexes = tableUtils.getColumnIndexes(affectedTableCells);\n        const column = insertBefore ? columnIndexes.first : columnIndexes.last;\n        const table = affectedTableCells[0].findAncestor('table');\n        tableUtils.insertColumns(table, {\n            columns: 1,\n            at: insertBefore ? column : column + 1\n        });\n    }\n}\n\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n * ```ts\n * editor.execute( 'splitTableCellVertically' );\n * ```\n */ class SplitCellCommand extends Command {\n    /**\n\t * The direction that indicates which cell will be split.\n\t */ direction;\n    /**\n\t * Creates a new `SplitCellCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n\t */ constructor(editor, options = {}){\n        super(editor);\n        this.direction = options.direction || 'horizontally';\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length === 1;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection)[0];\n        const isHorizontal = this.direction === 'horizontally';\n        if (isHorizontal) {\n            tableUtils.splitCellHorizontally(tableCell, 2);\n        } else {\n            tableUtils.splitCellVertically(tableCell, 2);\n        }\n    }\n}\n\n/**\n * Returns a cropped table according to given dimensions.\n\n * To return a cropped table that starts at first row and first column and end in third row and column:\n *\n * ```ts\n * const croppedTable = cropTableToDimensions( table, {\n *   startRow: 1,\n *   endRow: 3,\n *   startColumn: 1,\n *   endColumn: 3\n * }, writer );\n * ```\n *\n * Calling the code above for the table below:\n *\n *        0   1   2   3   4                      0   1   2\n *      ┌───┬───┬───┬───┬───┐\n *   0  │ a │ b │ c │ d │ e │\n *      ├───┴───┤   ├───┴───┤                  ┌───┬───┬───┐\n *   1  │ f     │   │ g     │                  │   │   │ g │  0\n *      ├───┬───┴───┼───┬───┤   will return:   ├───┴───┼───┤\n *   2  │ h │ i     │ j │ k │                  │ i     │ j │  1\n *      ├───┤       ├───┤   │                  │       ├───┤\n *   3  │ l │       │ m │   │                  │       │ m │  2\n *      ├───┼───┬───┤   ├───┤                  └───────┴───┘\n *   4  │ n │ o │ p │   │ q │\n *      └───┴───┴───┴───┴───┘\n */ function cropTableToDimensions(sourceTable, cropDimensions, writer) {\n    const { startRow, startColumn, endRow, endColumn } = cropDimensions;\n    // Create empty table with empty rows equal to crop height.\n    const croppedTable = writer.createElement('table');\n    const cropHeight = endRow - startRow + 1;\n    for(let i = 0; i < cropHeight; i++){\n        writer.insertElement('tableRow', croppedTable, 'end');\n    }\n    const tableMap = [\n        ...new TableWalker(sourceTable, {\n            startRow,\n            endRow,\n            startColumn,\n            endColumn,\n            includeAllSlots: true\n        })\n    ];\n    // Iterate over source table slots (including empty - spanned - ones).\n    for (const { row: sourceRow, column: sourceColumn, cell: tableCell, isAnchor, cellAnchorRow, cellAnchorColumn } of tableMap){\n        // Row index in cropped table.\n        const rowInCroppedTable = sourceRow - startRow;\n        const row = croppedTable.getChild(rowInCroppedTable);\n        // For empty slots: fill the gap with empty table cell.\n        if (!isAnchor) {\n            // But fill the gap only if the spanning cell is anchored outside cropped area.\n            // In the table from method jsdoc those cells are: \"c\" & \"f\".\n            if (cellAnchorRow < startRow || cellAnchorColumn < startColumn) {\n                createEmptyTableCell(writer, writer.createPositionAt(row, 'end'));\n            }\n        } else {\n            const tableCellCopy = writer.cloneElement(tableCell);\n            writer.append(tableCellCopy, row);\n            // Trim table if it exceeds cropped area.\n            // In the table from method jsdoc those cells are: \"g\" & \"m\".\n            trimTableCellIfNeeded(tableCellCopy, sourceRow, sourceColumn, endRow, endColumn, writer);\n        }\n    }\n    // Adjust heading rows & columns in cropped table if crop selection includes headings parts.\n    addHeadingsToCroppedTable(croppedTable, sourceTable, startRow, startColumn, writer);\n    return croppedTable;\n}\n/**\n * Returns slot info of cells that starts above and overlaps a given row.\n *\n * In a table below, passing `overlapRow = 3`\n *\n *     ┌───┬───┬───┬───┬───┐\n *  0  │ a │ b │ c │ d │ e │\n *     │   ├───┼───┼───┼───┤\n *  1  │   │ f │ g │ h │ i │\n *     ├───┤   ├───┼───┤   │\n *  2  │ j │   │ k │ l │   │\n *     │   │   │   ├───┼───┤\n *  3  │   │   │   │ m │ n │  <- overlap row to check\n *     ├───┼───┤   │   ├───│\n *  4  │ o │ p │   │   │ q │\n *     └───┴───┴───┴───┴───┘\n *\n * will return slot info for cells: \"j\", \"f\", \"k\".\n *\n * @param table The table to check.\n * @param overlapRow The index of the row to check.\n * @param startRow row to start analysis. Use it when it is known that the cells above that row will not overlap. Default value is 0.\n */ function getVerticallyOverlappingCells(table, overlapRow, startRow = 0) {\n    const cells = [];\n    const tableWalker = new TableWalker(table, {\n        startRow,\n        endRow: overlapRow - 1\n    });\n    for (const slotInfo of tableWalker){\n        const { row, cellHeight } = slotInfo;\n        const cellEndRow = row + cellHeight - 1;\n        if (row < overlapRow && overlapRow <= cellEndRow) {\n            cells.push(slotInfo);\n        }\n    }\n    return cells;\n}\n/**\n * Splits the table cell horizontally.\n *\n * @returns Created table cell, if any were created.\n */ function splitHorizontally(tableCell, splitRow, writer) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = tableRow.index;\n    const rowspan = parseInt(tableCell.getAttribute('rowspan'));\n    const newRowspan = splitRow - rowIndex;\n    const newCellAttributes = {};\n    const newCellRowSpan = rowspan - newRowspan;\n    if (newCellRowSpan > 1) {\n        newCellAttributes.rowspan = newCellRowSpan;\n    }\n    const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n    if (colspan > 1) {\n        newCellAttributes.colspan = colspan;\n    }\n    const startRow = rowIndex;\n    const endRow = startRow + newRowspan;\n    const tableMap = [\n        ...new TableWalker(table, {\n            startRow,\n            endRow,\n            includeAllSlots: true\n        })\n    ];\n    let newCell = null;\n    let columnIndex;\n    for (const tableSlot of tableMap){\n        const { row, column, cell } = tableSlot;\n        if (cell === tableCell && columnIndex === undefined) {\n            columnIndex = column;\n        }\n        if (columnIndex !== undefined && columnIndex === column && row === endRow) {\n            newCell = createEmptyTableCell(writer, tableSlot.getPositionBefore(), newCellAttributes);\n        }\n    }\n    // Update the rowspan attribute after updating table.\n    updateNumericAttribute('rowspan', newRowspan, tableCell, writer);\n    return newCell;\n}\n/**\n * Returns slot info of cells that starts before and overlaps a given column.\n *\n * In a table below, passing `overlapColumn = 3`\n *\n *    0   1   2   3   4\n *  ┌───────┬───────┬───┐\n *  │ a     │ b     │ c │\n *  │───┬───┴───────┼───┤\n *  │ d │ e         │ f │\n *  ├───┼───┬───────┴───┤\n *  │ g │ h │ i         │\n *  ├───┼───┼───┬───────┤\n *  │ j │ k │ l │ m     │\n *  ├───┼───┴───┼───┬───┤\n *  │ n │ o     │ p │ q │\n *  └───┴───────┴───┴───┘\n *                ^\n *                Overlap column to check\n *\n * will return slot info for cells: \"b\", \"e\", \"i\".\n *\n * @param table The table to check.\n * @param overlapColumn The index of the column to check.\n */ function getHorizontallyOverlappingCells(table, overlapColumn) {\n    const cellsToSplit = [];\n    const tableWalker = new TableWalker(table);\n    for (const slotInfo of tableWalker){\n        const { column, cellWidth } = slotInfo;\n        const cellEndColumn = column + cellWidth - 1;\n        if (column < overlapColumn && overlapColumn <= cellEndColumn) {\n            cellsToSplit.push(slotInfo);\n        }\n    }\n    return cellsToSplit;\n}\n/**\n * Splits the table cell vertically.\n *\n * @param columnIndex The table cell column index.\n * @param splitColumn The index of column to split cell on.\n * @returns Created table cell.\n */ function splitVertically(tableCell, columnIndex, splitColumn, writer) {\n    const colspan = parseInt(tableCell.getAttribute('colspan'));\n    const newColspan = splitColumn - columnIndex;\n    const newCellAttributes = {};\n    const newCellColSpan = colspan - newColspan;\n    if (newCellColSpan > 1) {\n        newCellAttributes.colspan = newCellColSpan;\n    }\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    if (rowspan > 1) {\n        newCellAttributes.rowspan = rowspan;\n    }\n    const newCell = createEmptyTableCell(writer, writer.createPositionAfter(tableCell), newCellAttributes);\n    // Update the colspan attribute after updating table.\n    updateNumericAttribute('colspan', newColspan, tableCell, writer);\n    return newCell;\n}\n/**\n * Adjusts table cell dimensions to not exceed limit row and column.\n *\n * If table cell width (or height) covers a column (or row) that is after a limit column (or row)\n * this method will trim \"colspan\" (or \"rowspan\") attribute so the table cell will fit in a defined limits.\n */ function trimTableCellIfNeeded(tableCell, cellRow, cellColumn, limitRow, limitColumn, writer) {\n    const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const endColumn = cellColumn + colspan - 1;\n    if (endColumn > limitColumn) {\n        const trimmedSpan = limitColumn - cellColumn + 1;\n        updateNumericAttribute('colspan', trimmedSpan, tableCell, writer, 1);\n    }\n    const endRow = cellRow + rowspan - 1;\n    if (endRow > limitRow) {\n        const trimmedSpan = limitRow - cellRow + 1;\n        updateNumericAttribute('rowspan', trimmedSpan, tableCell, writer, 1);\n    }\n}\n/**\n * Sets proper heading attributes to a cropped table.\n */ function addHeadingsToCroppedTable(croppedTable, sourceTable, startRow, startColumn, writer) {\n    const headingRows = parseInt(sourceTable.getAttribute('headingRows') || '0');\n    if (headingRows > 0) {\n        const headingRowsInCrop = headingRows - startRow;\n        updateNumericAttribute('headingRows', headingRowsInCrop, croppedTable, writer, 0);\n    }\n    const headingColumns = parseInt(sourceTable.getAttribute('headingColumns') || '0');\n    if (headingColumns > 0) {\n        const headingColumnsInCrop = headingColumns - startColumn;\n        updateNumericAttribute('headingColumns', headingColumnsInCrop, croppedTable, writer, 0);\n    }\n}\n/**\n * Removes columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+----+----+----+\n *     | 00 | 01      | 03 | 04      | 06 |\n *     +----+----+----+----+         +----+\n *     | 10 | 11      | 13 |         | 16 |\n *     +----+----+----+----+----+----+----+\n *     | 20 | 21      | 23 | 24      | 26 |\n *     +----+----+----+----+----+----+----+\n *                  ^--- empty ---^\n *\n * Will remove columns 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a column from a table use {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`}.\n *\n * @internal\n * @returns True if removed some columns.\n */ function removeEmptyColumns(table, tableUtils) {\n    const width = tableUtils.getColumns(table);\n    const columnsMap = new Array(width).fill(0);\n    for (const { column } of new TableWalker(table)){\n        columnsMap[column]++;\n    }\n    const emptyColumns = columnsMap.reduce((result, cellsCount, column)=>{\n        return cellsCount ? result : [\n            ...result,\n            column\n        ];\n    }, []);\n    if (emptyColumns.length > 0) {\n        // Remove only last empty column because it will recurrently trigger removing empty rows.\n        const emptyColumn = emptyColumns[emptyColumns.length - 1];\n        // @if CK_DEBUG_TABLE // console.log( `Removing empty column: ${ emptyColumn }.` );\n        tableUtils.removeColumns(table, {\n            at: emptyColumn\n        });\n        return true;\n    }\n    return false;\n}\n/**\n * Removes rows that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+\n *     | 00 | 01 | 02 |\n *     +----+----+----+\n *     | 10 | 11 | 12 |\n *     +    +    +    +\n *     |    |    |    | <-- empty\n *     +----+----+----+\n *     | 30 | 31 | 32 |\n *     +----+----+----+\n *     | 40      | 42 |\n *     +         +    +\n *     |         |    | <-- empty\n *     +----+----+----+\n *     | 60 | 61 | 62 |\n *     +----+----+----+\n *\n * Will remove rows 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a row from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`}.\n *\n * @internal\n * @returns True if removed some rows.\n */ function removeEmptyRows(table, tableUtils) {\n    const emptyRows = [];\n    const tableRowCount = tableUtils.getRows(table);\n    for(let rowIndex = 0; rowIndex < tableRowCount; rowIndex++){\n        const tableRow = table.getChild(rowIndex);\n        if (tableRow.isEmpty) {\n            emptyRows.push(rowIndex);\n        }\n    }\n    if (emptyRows.length > 0) {\n        // Remove only last empty row because it will recurrently trigger removing empty columns.\n        const emptyRow = emptyRows[emptyRows.length - 1];\n        // @if CK_DEBUG_TABLE // console.log( `Removing empty row: ${ emptyRow }.` );\n        tableUtils.removeRows(table, {\n            at: emptyRow\n        });\n        return true;\n    }\n    return false;\n}\n/**\n * Removes rows and columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+\n *     | 00      | 02      |\n *     +----+----+         +\n *     | 10      |         |\n *     +----+----+----+----+\n *     | 20      | 22 | 23 |\n *     +         +    +    +\n *     |         |    |    | <-- empty row\n *     +----+----+----+----+\n *             ^--- empty column\n *\n * Will remove row 3 and column 1.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a rows from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`} and\n * {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`} to remove a column.\n *\n * @internal\n */ function removeEmptyRowsColumns(table, tableUtils) {\n    const removedColumns = removeEmptyColumns(table, tableUtils);\n    // If there was some columns removed then cleaning empty rows was already triggered.\n    if (!removedColumns) {\n        removeEmptyRows(table, tableUtils);\n    }\n}\n/**\n * Returns adjusted last row index if selection covers part of a row with empty slots (spanned by other cells).\n * The `dimensions.lastRow` is equal to last row index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *        +---+---+---+---+\n *      0 | a | b | c | d |\n *        +   +   +---+---+\n *      1 |   | e | f | g |\n *        +   +---+   +---+\n *      2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n *        +   +   +   +   +    so we need to return 3, not 2\n *      3 |   |   |   |   |\n *        +---+---+---+---+\n *\n * @returns Adjusted last row index.\n */ function adjustLastRowIndex(table, dimensions) {\n    const lastRowMap = Array.from(new TableWalker(table, {\n        startColumn: dimensions.firstColumn,\n        endColumn: dimensions.lastColumn,\n        row: dimensions.lastRow\n    }));\n    const everyCellHasSingleRowspan = lastRowMap.every(({ cellHeight })=>cellHeight === 1);\n    // It is a \"flat\" row, so the last row index is OK.\n    if (everyCellHasSingleRowspan) {\n        return dimensions.lastRow;\n    }\n    // Otherwise get any cell's rowspan and adjust the last row index.\n    const rowspanAdjustment = lastRowMap[0].cellHeight - 1;\n    return dimensions.lastRow + rowspanAdjustment;\n}\n/**\n * Returns adjusted last column index if selection covers part of a column with empty slots (spanned by other cells).\n * The `dimensions.lastColumn` is equal to last column index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *       0   1   2   3\n *     +---+---+---+---+\n *     | a             |\n *     +---+---+---+---+\n *     | b | c | d     |\n *     +---+---+---+---+\n *     | e     | f     |\n *     +---+---+---+---+\n *     | g | h         |\n *     +---+---+---+---+\n *               ^\n *              last column, each cell has colspan = 2, so we need to return 3, not 2\n *\n * @returns Adjusted last column index.\n */ function adjustLastColumnIndex(table, dimensions) {\n    const lastColumnMap = Array.from(new TableWalker(table, {\n        startRow: dimensions.firstRow,\n        endRow: dimensions.lastRow,\n        column: dimensions.lastColumn\n    }));\n    const everyCellHasSingleColspan = lastColumnMap.every(({ cellWidth })=>cellWidth === 1);\n    // It is a \"flat\" column, so the last column index is OK.\n    if (everyCellHasSingleColspan) {\n        return dimensions.lastColumn;\n    }\n    // Otherwise get any cell's colspan and adjust the last column index.\n    const colspanAdjustment = lastColumnMap[0].cellWidth - 1;\n    return dimensions.lastColumn + colspanAdjustment;\n}\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n * ```ts\n * editor.execute( 'mergeTableCellRight' );\n * ```\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n */ class MergeCellCommand extends Command {\n    /**\n\t * The direction that indicates which cell will be merged with the currently selected one.\n\t */ direction;\n    /**\n\t * Whether the merge is horizontal (left/right) or vertical (up/down).\n\t */ isHorizontal;\n    /**\n\t * Creates a new `MergeCellCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.direction Indicates which cell to merge with the currently selected one.\n\t * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n\t */ constructor(editor, options){\n        super(editor);\n        this.direction = options.direction;\n        this.isHorizontal = this.direction == 'right' || this.direction == 'left';\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const cellToMerge = this._getMergeableCell();\n        this.value = cellToMerge;\n        this.isEnabled = !!cellToMerge;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getTableCellsContainingSelection(doc.selection)[0];\n        const cellToMerge = this.value;\n        const direction = this.direction;\n        model.change((writer)=>{\n            const isMergeNext = direction == 'right' || direction == 'down';\n            // The merge mechanism is always the same so sort cells to be merged.\n            const cellToExpand = isMergeNext ? tableCell : cellToMerge;\n            const cellToRemove = isMergeNext ? cellToMerge : tableCell;\n            // Cache the parent of cell to remove for later check.\n            const removedTableCellRow = cellToRemove.parent;\n            mergeTableCells$1(cellToRemove, cellToExpand, writer);\n            const spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n            const cellSpan = parseInt(tableCell.getAttribute(spanAttribute) || '1');\n            const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || '1');\n            // Update table cell span attribute and merge set selection on merged contents.\n            writer.setAttribute(spanAttribute, cellSpan + cellToMergeSpan, cellToExpand);\n            writer.setSelection(writer.createRangeIn(cellToExpand));\n            const tableUtils = this.editor.plugins.get('TableUtils');\n            const table = removedTableCellRow.findAncestor('table');\n            // Remove empty rows and columns after merging.\n            removeEmptyRowsColumns(table, tableUtils);\n        });\n    }\n    /**\n\t * Returns a cell that can be merged with the current cell depending on the command's direction.\n\t */ _getMergeableCell() {\n        const model = this.editor.model;\n        const doc = model.document;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCell = tableUtils.getTableCellsContainingSelection(doc.selection)[0];\n        if (!tableCell) {\n            return;\n        }\n        // First get the cell on proper direction.\n        const cellToMerge = this.isHorizontal ? getHorizontalCell(tableCell, this.direction, tableUtils) : getVerticalCell(tableCell, this.direction, tableUtils);\n        if (!cellToMerge) {\n            return;\n        }\n        // If found check if the span perpendicular to merge direction is equal on both cells.\n        const spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n        const span = parseInt(tableCell.getAttribute(spanAttribute) || '1');\n        const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || '1');\n        if (cellToMergeSpan === span) {\n            return cellToMerge;\n        }\n    }\n}\n/**\n * Returns the cell that can be merged horizontally.\n */ function getHorizontalCell(tableCell, direction, tableUtils) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n    const hasHeadingColumns = (table.getAttribute('headingColumns') || 0) > 0;\n    if (!horizontalCell) {\n        return;\n    }\n    // Sort cells:\n    const cellOnLeft = direction == 'right' ? tableCell : horizontalCell;\n    const cellOnRight = direction == 'right' ? horizontalCell : tableCell;\n    // Get their column indexes:\n    const { column: leftCellColumn } = tableUtils.getCellLocation(cellOnLeft);\n    const { column: rightCellColumn } = tableUtils.getCellLocation(cellOnRight);\n    const leftCellSpan = parseInt(cellOnLeft.getAttribute('colspan') || '1');\n    const isCellOnLeftInHeadingColumn = isHeadingColumnCell(tableUtils, cellOnLeft);\n    const isCellOnRightInHeadingColumn = isHeadingColumnCell(tableUtils, cellOnRight);\n    // We cannot merge heading columns cells with regular cells.\n    if (hasHeadingColumns && isCellOnLeftInHeadingColumn != isCellOnRightInHeadingColumn) {\n        return;\n    }\n    // The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n    const cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n    // If the right cell's column index is different it means that there are rowspanned cells between them.\n    return cellsAreTouching ? horizontalCell : undefined;\n}\n/**\n * Returns the cell that can be merged vertically.\n */ function getVerticalCell(tableCell, direction, tableUtils) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = table.getChildIndex(tableRow);\n    // Don't search for mergeable cell if direction points out of the table.\n    if (direction == 'down' && rowIndex === tableUtils.getRows(table) - 1 || direction == 'up' && rowIndex === 0) {\n        return null;\n    }\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const headingRows = table.getAttribute('headingRows') || 0;\n    const isMergeWithBodyCell = direction == 'down' && rowIndex + rowspan === headingRows;\n    const isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n    // Don't search for mergeable cell if direction points out of the current table section.\n    if (headingRows && (isMergeWithBodyCell || isMergeWithHeadCell)) {\n        return null;\n    }\n    const currentCellRowSpan = parseInt(tableCell.getAttribute('rowspan') || '1');\n    const rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n    const tableMap = [\n        ...new TableWalker(table, {\n            endRow: rowOfCellToMerge\n        })\n    ];\n    const currentCellData = tableMap.find((value)=>value.cell === tableCell);\n    const mergeColumn = currentCellData.column;\n    const cellToMergeData = tableMap.find(({ row, cellHeight, column })=>{\n        if (column !== mergeColumn) {\n            return false;\n        }\n        if (direction == 'down') {\n            // If merging a cell below the mergeRow is already calculated.\n            return row === rowOfCellToMerge;\n        } else {\n            // If merging a cell above calculate if it spans to mergeRow.\n            return rowOfCellToMerge === row + cellHeight;\n        }\n    });\n    return cellToMergeData && cellToMergeData.cell ? cellToMergeData.cell : null;\n}\n/**\n * Merges two table cells. It will ensure that after merging cells with an empty paragraph, the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have the contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */ function mergeTableCells$1(cellToRemove, cellToExpand, writer) {\n    if (!isEmpty$2(cellToRemove)) {\n        if (isEmpty$2(cellToExpand)) {\n            writer.remove(writer.createRangeIn(cellToExpand));\n        }\n        writer.move(writer.createRangeIn(cellToRemove), writer.createPositionAt(cellToExpand, 'end'));\n    }\n    // Remove merged table cell.\n    writer.remove(cellToRemove);\n}\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */ function isEmpty$2(tableCell) {\n    const firstTableChild = tableCell.getChild(0);\n    return tableCell.childCount == 1 && firstTableChild.is('element', 'paragraph') && firstTableChild.isEmpty;\n}\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableRow' );\n * ```\n */ class RemoveRowCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        const firstCell = selectedCells[0];\n        if (firstCell) {\n            const table = firstCell.findAncestor('table');\n            const tableRowCount = tableUtils.getRows(table);\n            const lastRowIndex = tableRowCount - 1;\n            const selectedRowIndexes = tableUtils.getRowIndexes(selectedCells);\n            const areAllRowsSelected = selectedRowIndexes.first === 0 && selectedRowIndexes.last === lastRowIndex;\n            // Disallow selecting whole table -> delete whole table should be used instead.\n            this.isEnabled = !areAllRowsSelected;\n        } else {\n            this.isEnabled = false;\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const removedRowIndexes = tableUtils.getRowIndexes(referenceCells);\n        const firstCell = referenceCells[0];\n        const table = firstCell.findAncestor('table');\n        const columnIndexToFocus = tableUtils.getCellLocation(firstCell).column;\n        model.change((writer)=>{\n            const rowsToRemove = removedRowIndexes.last - removedRowIndexes.first + 1;\n            tableUtils.removeRows(table, {\n                at: removedRowIndexes.first,\n                rows: rowsToRemove\n            });\n            const cellToFocus = getCellToFocus$1(table, removedRowIndexes.first, columnIndexToFocus, tableUtils.getRows(table));\n            writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n        });\n    }\n}\n/**\n * Returns a cell that should be focused before removing the row, belonging to the same column as the currently focused cell.\n * - If the row was not the last one, the cell to focus will be in the row that followed it (before removal).\n * - If the row was the last one, the cell to focus will be in the row that preceded it (before removal).\n */ function getCellToFocus$1(table, removedRowIndex, columnToFocus, tableRowCount) {\n    // Don't go beyond last row's index.\n    const row = table.getChild(Math.min(removedRowIndex, tableRowCount - 1));\n    // Default to first table cell.\n    let cellToFocus = row.getChild(0);\n    let column = 0;\n    for (const tableCell of row.getChildren()){\n        if (column > columnToFocus) {\n            return cellToFocus;\n        }\n        cellToFocus = tableCell;\n        column += parseInt(tableCell.getAttribute('colspan') || '1');\n    }\n    return cellToFocus;\n}\n\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableColumn' );\n * ```\n */ class RemoveColumnCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        const firstCell = selectedCells[0];\n        if (firstCell) {\n            const table = firstCell.findAncestor('table');\n            const tableColumnCount = tableUtils.getColumns(table);\n            const { first, last } = tableUtils.getColumnIndexes(selectedCells);\n            this.isEnabled = last - first < tableColumnCount - 1;\n        } else {\n            this.isEnabled = false;\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const [firstCell, lastCell] = getBoundaryCells(this.editor.model.document.selection, tableUtils);\n        const table = firstCell.parent.parent;\n        // Cache the table before removing or updating colspans.\n        const tableMap = [\n            ...new TableWalker(table)\n        ];\n        // Store column indexes of removed columns.\n        const removedColumnIndexes = {\n            first: tableMap.find((value)=>value.cell === firstCell).column,\n            last: tableMap.find((value)=>value.cell === lastCell).column\n        };\n        const cellToFocus = getCellToFocus(tableMap, firstCell, lastCell, removedColumnIndexes);\n        this.editor.model.change((writer)=>{\n            const columnsToRemove = removedColumnIndexes.last - removedColumnIndexes.first + 1;\n            tableUtils.removeColumns(table, {\n                at: removedColumnIndexes.first,\n                columns: columnsToRemove\n            });\n            writer.setSelection(writer.createPositionAt(cellToFocus, 0));\n        });\n    }\n}\n/**\n * Returns a proper table cell to focus after removing a column.\n * - selection is on last table cell it will return previous cell.\n */ function getCellToFocus(tableMap, firstCell, lastCell, removedColumnIndexes) {\n    const colspan = parseInt(lastCell.getAttribute('colspan') || '1');\n    // If the table cell is spanned over 2+ columns - it will be truncated so the selection should\n    // stay in that cell.\n    if (colspan > 1) {\n        return lastCell;\n    } else if (firstCell.previousSibling || lastCell.nextSibling) {\n        return lastCell.nextSibling || firstCell.previousSibling;\n    } else {\n        // Look for any cell in a column that precedes the first removed column.\n        if (removedColumnIndexes.first) {\n            return tableMap.reverse().find(({ column })=>{\n                return column < removedColumnIndexes.first;\n            }).cell;\n        } else {\n            return tableMap.reverse().find(({ column })=>{\n                return column > removedColumnIndexes.last;\n            }).cell;\n        }\n    }\n}\n/**\n * Returns helper object returning the first and the last cell contained in given selection, based on DOM order.\n */ function getBoundaryCells(selection, tableUtils) {\n    const referenceCells = tableUtils.getSelectionAffectedTableCells(selection);\n    const firstCell = referenceCells[0];\n    const lastCell = referenceCells.pop();\n    const returnValue = [\n        firstCell,\n        lastCell\n    ];\n    return firstCell.isBefore(lastCell) ? returnValue : returnValue.reverse();\n}\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n * ```ts\n * editor.execute( 'setTableRowHeader' );\n * ```\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n */ class SetHeaderRowCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const isInTable = selectedCells.length > 0;\n        this.isEnabled = isInTable;\n        this.value = isInTable && selectedCells.every((cell)=>this._isInHeading(cell, cell.parent.parent));\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n\t *\n\t * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n\t *\n\t * @fires execute\n\t * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header rows according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */ execute(options = {}) {\n        if (options.forceValue === this.value) {\n            return;\n        }\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const table = selectedCells[0].findAncestor('table');\n        const { first, last } = tableUtils.getRowIndexes(selectedCells);\n        const headingRowsToSet = this.value ? first : last + 1;\n        const currentHeadingRows = table.getAttribute('headingRows') || 0;\n        model.change((writer)=>{\n            if (headingRowsToSet) {\n                // Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n                // Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n                const startRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n                const overlappingCells = getVerticallyOverlappingCells(table, headingRowsToSet, startRow);\n                for (const { cell } of overlappingCells){\n                    splitHorizontally(cell, headingRowsToSet, writer);\n                }\n            }\n            updateNumericAttribute('headingRows', headingRowsToSet, table, writer, 0);\n        });\n    }\n    /**\n\t * Checks if a table cell is in the heading section.\n\t */ _isInHeading(tableCell, table) {\n        const headingRows = parseInt(table.getAttribute('headingRows') || '0');\n        return !!headingRows && tableCell.parent.index < headingRows;\n    }\n}\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n * ```ts\n * editor.execute( 'setTableColumnHeader' );\n * ```\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n */ class SetHeaderColumnCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const isInTable = selectedCells.length > 0;\n        this.isEnabled = isInTable;\n        this.value = isInTable && selectedCells.every((cell)=>isHeadingColumnCell(tableUtils, cell));\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header columns according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */ execute(options = {}) {\n        if (options.forceValue === this.value) {\n            return;\n        }\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const table = selectedCells[0].findAncestor('table');\n        const { first, last } = tableUtils.getColumnIndexes(selectedCells);\n        const headingColumnsToSet = this.value ? first : last + 1;\n        model.change((writer)=>{\n            if (headingColumnsToSet) {\n                // Changing heading columns requires to check if any of a heading cell is overlapping horizontally the table head.\n                // Any table cell that has a colspan attribute > 1 will not exceed the table head so we need to fix it in columns before.\n                const overlappingCells = getHorizontallyOverlappingCells(table, headingColumnsToSet);\n                for (const { cell, column } of overlappingCells){\n                    splitVertically(cell, column, headingColumnsToSet, writer);\n                }\n            }\n            updateNumericAttribute('headingColumns', headingColumnsToSet, table, writer, 0);\n        });\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/tablecolumnresize/constants\n */ /**\n * The minimum column width given as a percentage value. Used in situations when the table is not yet rendered, so it is impossible to\n * calculate how many percentage of the table width would be {@link ~COLUMN_MIN_WIDTH_IN_PIXELS minimum column width in pixels}.\n */ const COLUMN_MIN_WIDTH_AS_PERCENTAGE = 5;\n/**\n * The minimum column width in pixels when the maximum table width is known.\n */ const COLUMN_MIN_WIDTH_IN_PIXELS = 40;\n/**\n * Determines how many digits after the decimal point are used to store the column width as a percentage value.\n */ const COLUMN_WIDTH_PRECISION = 2;\n\n/**\n * Returns all the inserted or changed table model elements in a given change set. Only the tables\n * with 'columnsWidth' attribute are taken into account. The returned set may be empty.\n *\n * Most notably if an entire table is removed it will not be included in returned set.\n *\n * @param model The model to collect the affected elements from.\n * @returns A set of table model elements.\n */ function getChangedResizedTables(model) {\n    const affectedTables = new Set();\n    for (const change of model.document.differ.getChanges()){\n        let referencePosition = null;\n        // Checks if the particular change from the differ is:\n        // - an insertion or removal of a table, a row or a cell,\n        // - an attribute change on a table, a row or a cell.\n        switch(change.type){\n            case 'insert':\n                referencePosition = [\n                    'table',\n                    'tableRow',\n                    'tableCell'\n                ].includes(change.name) ? change.position : null;\n                break;\n            case 'remove':\n                // If the whole table is removed, there's no need to update its column widths (#12201).\n                referencePosition = [\n                    'tableRow',\n                    'tableCell'\n                ].includes(change.name) ? change.position : null;\n                break;\n            case 'attribute':\n                if (change.range.start.nodeAfter) {\n                    referencePosition = [\n                        'table',\n                        'tableRow',\n                        'tableCell'\n                    ].includes(change.range.start.nodeAfter.name) ? change.range.start : null;\n                }\n                break;\n        }\n        if (!referencePosition) {\n            continue;\n        }\n        const tableNode = referencePosition.nodeAfter && referencePosition.nodeAfter.is('element', 'table') ? referencePosition.nodeAfter : referencePosition.findAncestor('table');\n        // We iterate over the whole table looking for the nested tables that are also affected.\n        for (const node of model.createRangeOn(tableNode).getItems()){\n            if (!node.is('element', 'table')) {\n                continue;\n            }\n            if (!getColumnGroupElement(node)) {\n                continue;\n            }\n            affectedTables.add(node);\n        }\n    }\n    return affectedTables;\n}\n/**\n * Calculates the percentage of the minimum column width given in pixels for a given table.\n *\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The minimal column width in percentage.\n */ function getColumnMinWidthAsPercentage(modelTable, editor) {\n    return COLUMN_MIN_WIDTH_IN_PIXELS * 100 / getTableWidthInPixels(modelTable, editor);\n}\n/**\n * Calculates the table width in pixels.\n *\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The width of the table in pixels.\n */ function getTableWidthInPixels(modelTable, editor) {\n    // It is possible for a table to not have a <tbody> element - see #11878.\n    const referenceElement = getChildrenViewElement(modelTable, 'tbody', editor) || getChildrenViewElement(modelTable, 'thead', editor);\n    const domReferenceElement = editor.editing.view.domConverter.mapViewToDom(referenceElement);\n    return getElementWidthInPixels(domReferenceElement);\n}\n/**\n * Returns the a view element with a given name that is nested directly in a `<table>` element\n * related to a given `modelTable`.\n *\n * @param elementName Name of a view to be looked for, e.g. `'colgroup`', `'thead`'.\n * @returns Matched view or `undefined` otherwise.\n */ function getChildrenViewElement(modelTable, elementName, editor) {\n    const viewFigure = editor.editing.mapper.toViewElement(modelTable);\n    const viewTable = [\n        ...viewFigure.getChildren()\n    ].find((node)=>node.is('element', 'table'));\n    return [\n        ...viewTable.getChildren()\n    ].find((node)=>node.is('element', elementName));\n}\n/**\n * Returns the computed width (in pixels) of the DOM element without padding and borders.\n *\n * @param domElement A DOM element.\n * @returns The width of the DOM element in pixels.\n */ function getElementWidthInPixels(domElement) {\n    const styles = global.window.getComputedStyle(domElement);\n    // In the 'border-box' box sizing algorithm, the element's width\n    // already includes the padding and border width (#12335).\n    if (styles.boxSizing === 'border-box') {\n        return parseFloat(styles.width) - parseFloat(styles.paddingLeft) - parseFloat(styles.paddingRight) - parseFloat(styles.borderLeftWidth) - parseFloat(styles.borderRightWidth);\n    } else {\n        return parseFloat(styles.width);\n    }\n}\n/**\n * Returns the column indexes on the left and right edges of a cell. They differ if the cell spans\n * across multiple columns.\n *\n * @param cell A table cell model element.\n * @param tableUtils The Table Utils plugin instance.\n * @returns An object containing the indexes of the left and right edges of the cell.\n */ function getColumnEdgesIndexes(cell, tableUtils) {\n    const cellColumnIndex = tableUtils.getCellLocation(cell).column;\n    const cellWidth = cell.getAttribute('colspan') || 1;\n    return {\n        leftEdge: cellColumnIndex,\n        rightEdge: cellColumnIndex + cellWidth - 1\n    };\n}\n/**\n * Rounds the provided value to a fixed-point number with defined number of digits after the decimal point.\n *\n * @param value A number to be rounded.\n * @returns The rounded number.\n */ function toPrecision(value) {\n    const multiplier = Math.pow(10, COLUMN_WIDTH_PRECISION);\n    const number = typeof value === 'number' ? value : parseFloat(value);\n    return Math.round(number * multiplier) / multiplier;\n}\n/**\n * Clamps the number within the inclusive lower (min) and upper (max) bounds. Returned number is rounded using the\n * {@link ~toPrecision `toPrecision()`} function.\n *\n * @param number A number to be clamped.\n * @param min A lower bound.\n * @param max An upper bound.\n * @returns The clamped number.\n */ function clamp(number, min, max) {\n    if (number <= min) {\n        return toPrecision(min);\n    }\n    if (number >= max) {\n        return toPrecision(max);\n    }\n    return toPrecision(number);\n}\n/**\n * Creates an array with defined length and fills all elements with defined value.\n *\n * @param length The length of the array.\n * @param value The value to fill the array with.\n * @returns An array with defined length and filled with defined value.\n */ function createFilledArray(length, value) {\n    return Array(length).fill(value);\n}\n/**\n * Sums all array values that can be parsed to a float.\n *\n * @param array An array of numbers.\n * @returns The sum of all array values.\n */ function sumArray(array) {\n    return array.map((value)=>typeof value === 'number' ? value : parseFloat(value)).filter((value)=>!Number.isNaN(value)).reduce((result, item)=>result + item, 0);\n}\n/**\n * Makes sure that the sum of the widths from all columns is 100%. If the sum of all the widths is not equal 100%, all the widths are\n * changed proportionally so that they all sum back to 100%. If there are columns without specified width, the amount remaining\n * after assigning the known widths will be distributed equally between them.\n *\n * @param columnWidths An array of column widths.\n * @returns An array of column widths guaranteed to sum up to 100%.\n */ function normalizeColumnWidths(columnWidths) {\n    const widths = columnWidths.map((width)=>{\n        if (width === 'auto') {\n            return width;\n        }\n        return parseFloat(width.replace('%', ''));\n    });\n    let normalizedWidths = calculateMissingColumnWidths(widths);\n    const totalWidth = sumArray(normalizedWidths);\n    if (totalWidth !== 100) {\n        normalizedWidths = normalizedWidths// Adjust all the columns proportionally.\n        .map((width)=>toPrecision(width * 100 / totalWidth))// Due to rounding of numbers it may happen that the sum of the widths of all columns will not be exactly 100%.\n        // Therefore, the width of the last column is explicitly adjusted (narrowed or expanded), since all the columns\n        // have been proportionally changed already.\n        .map((columnWidth, columnIndex, width)=>{\n            const isLastColumn = columnIndex === width.length - 1;\n            if (!isLastColumn) {\n                return columnWidth;\n            }\n            const totalWidth = sumArray(width);\n            return toPrecision(columnWidth + 100 - totalWidth);\n        });\n    }\n    return normalizedWidths.map((width)=>width + '%');\n}\n/**\n * Initializes the column widths by parsing the attribute value and calculating the uninitialized column widths. The special value 'auto'\n * indicates that width for the column must be calculated. The width of such uninitialized column is calculated as follows:\n * - If there is enough free space in the table for all uninitialized columns to have at least the minimum allowed width for all of them,\n *   then set this width equally for all uninitialized columns.\n * - Otherwise, just set the minimum allowed width for all uninitialized columns. The sum of all column widths will be greater than 100%,\n *   but then it will be adjusted proportionally to 100% in {@link #normalizeColumnWidths `normalizeColumnWidths()`}.\n *\n * @param columnWidths An array of column widths.\n * @returns An array with 'auto' values replaced with calculated widths.\n */ function calculateMissingColumnWidths(columnWidths) {\n    const numberOfUninitializedColumns = columnWidths.filter((columnWidth)=>columnWidth === 'auto').length;\n    if (numberOfUninitializedColumns === 0) {\n        return columnWidths.map((columnWidth)=>toPrecision(columnWidth));\n    }\n    const totalWidthOfInitializedColumns = sumArray(columnWidths);\n    const widthForUninitializedColumn = Math.max((100 - totalWidthOfInitializedColumns) / numberOfUninitializedColumns, COLUMN_MIN_WIDTH_AS_PERCENTAGE);\n    return columnWidths.map((columnWidth)=>columnWidth === 'auto' ? widthForUninitializedColumn : columnWidth).map((columnWidth)=>toPrecision(columnWidth));\n}\n/**\n * Calculates the total horizontal space taken by the cell. That includes:\n *  * width,\n *  * left and red padding,\n *  * border width.\n *\n * @param domCell A DOM cell element.\n * @returns Width in pixels without `px` at the end.\n */ function getDomCellOuterWidth(domCell) {\n    const styles = global.window.getComputedStyle(domCell);\n    // In the 'border-box' box sizing algorithm, the element's width\n    // already includes the padding and border width (#12335).\n    if (styles.boxSizing === 'border-box') {\n        return parseInt(styles.width);\n    } else {\n        return parseFloat(styles.width) + parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight) + parseFloat(styles.borderWidth);\n    }\n}\n/**\n * Updates column elements to match columns widths.\n *\n * @param columns\n * @param tableColumnGroup\n * @param normalizedWidths\n * @param writer\n */ function updateColumnElements(columns, tableColumnGroup, normalizedWidths, writer) {\n    for(let i = 0; i < Math.max(normalizedWidths.length, columns.length); i++){\n        const column = columns[i];\n        const columnWidth = normalizedWidths[i];\n        if (!columnWidth) {\n            // Number of `<tableColumn>` elements exceeds actual number of columns.\n            writer.remove(column);\n        } else if (!column) {\n            // There is fewer `<tableColumn>` elements than actual columns.\n            writer.appendElement('tableColumn', {\n                columnWidth\n            }, tableColumnGroup);\n        } else {\n            // Update column width.\n            writer.setAttribute('columnWidth', columnWidth, column);\n        }\n    }\n}\n/**\n * Returns a 'tableColumnGroup' element from the 'table'.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns A 'tableColumnGroup' element.\n */ function getColumnGroupElement(element) {\n    if (element.is('element', 'tableColumnGroup')) {\n        return element;\n    }\n    const children = element.getChildren();\n    return Array.from(children).find((element)=>element.is('element', 'tableColumnGroup'));\n}\n/**\n * Returns an array of 'tableColumn' elements. It may be empty if there's no `tableColumnGroup` element.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of 'tableColumn' elements.\n */ function getTableColumnElements(element) {\n    const columnGroupElement = getColumnGroupElement(element);\n    if (!columnGroupElement) {\n        return [];\n    }\n    return Array.from(columnGroupElement.getChildren());\n}\n/**\n * Returns an array of table column widths.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of table column widths.\n */ function getTableColumnsWidths(element) {\n    return getTableColumnElements(element).map((column)=>column.getAttribute('columnWidth'));\n}\n/**\n * Translates the `colSpan` model attribute into additional column widths and returns the resulting array.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @param writer A writer instance.\n * @returns An array of table column widths.\n */ function translateColSpanAttribute(element, writer) {\n    const tableColumnElements = getTableColumnElements(element);\n    return tableColumnElements.reduce((acc, element)=>{\n        const columnWidth = element.getAttribute('columnWidth');\n        const colSpan = element.getAttribute('colSpan');\n        if (!colSpan) {\n            acc.push(columnWidth);\n            return acc;\n        }\n        // Translate the `colSpan` model attribute on to the proper number of column widths\n        // and remove it from the element.\n        // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n        for(let i = 0; i < colSpan; i++){\n            acc.push(columnWidth);\n        }\n        writer.removeAttribute('colSpan', element);\n        return acc;\n    }, []);\n}\n\n/**\n * The table utilities plugin.\n */ class TableUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this.decorate('insertColumns');\n        this.decorate('insertRows');\n    }\n    /**\n\t * Returns the table cell location as an object with table row and table column indexes.\n\t *\n\t * For instance, in the table below:\n\t *\n\t *      0   1   2   3\n\t *    +---+---+---+---+\n\t *  0 | a     | b | c |\n\t *    +       +   +---+\n\t *  1 |       |   | d |\n\t *    +---+---+   +---+\n\t *  2 | e     |   | f |\n\t *    +---+---+---+---+\n\t *\n\t * the method will return:\n\t *\n\t * ```ts\n\t * const cellA = table.getNodeByPath( [ 0, 0 ] );\n\t * editor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n\t * // will return { row: 0, column: 0 }\n\t *\n\t * const cellD = table.getNodeByPath( [ 1, 0 ] );\n\t * editor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n\t * // will return { row: 1, column: 3 }\n\t * ```\n\t *\n\t * @returns Returns a `{row, column}` object.\n\t */ getCellLocation(tableCell) {\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowIndex = table.getChildIndex(tableRow);\n        const tableWalker = new TableWalker(table, {\n            row: rowIndex\n        });\n        for (const { cell, row, column } of tableWalker){\n            if (cell === tableCell) {\n                return {\n                    row,\n                    column\n                };\n            }\n        }\n        // Should be unreachable code.\n        /* istanbul ignore next -- @preserve */ return undefined;\n    }\n    /**\n\t * Creates an empty table with a proper structure. The table needs to be inserted into the model,\n\t * for example, by using the {@link module:engine/model/model~Model#insertContent} function.\n\t *\n\t * ```ts\n\t * model.change( ( writer ) => {\n\t *   // Create a table of 2 rows and 7 columns:\n\t *   const table = tableUtils.createTable( writer, { rows: 2, columns: 7 } );\n\t *\n\t *   // Insert a table to the model at the best position taking the current selection:\n\t *   model.insertContent( table );\n\t * }\n\t * ```\n\t *\n\t * @param writer The model writer.\n\t * @param options.rows The number of rows to create. Default value is 2.\n\t * @param options.columns The number of columns to create. Default value is 2.\n\t * @param options.headingRows The number of heading rows. Default value is 0.\n\t * @param options.headingColumns The number of heading columns. Default value is 0.\n\t * @returns The created table element.\n\t */ createTable(writer, options) {\n        const table = writer.createElement('table');\n        const rows = options.rows || 2;\n        const columns = options.columns || 2;\n        createEmptyRows(writer, table, 0, rows, columns);\n        if (options.headingRows) {\n            updateNumericAttribute('headingRows', Math.min(options.headingRows, rows), table, writer, 0);\n        }\n        if (options.headingColumns) {\n            updateNumericAttribute('headingColumns', Math.min(options.headingColumns, columns), table, writer, 0);\n        }\n        return table;\n    }\n    /**\n\t * Inserts rows into a table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n\t * ```\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *  row index\n\t *    0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n\t *      | a | b | c |       `rows` = 2,    | a | b | c |\n\t *    1 +   +---+---+   <-- insert here    +   +---+---+ 1\n\t *      |   | d | e |                      |   |   |   |\n\t *    2 +   +---+---+       will give:     +   +---+---+ 2\n\t *      |   | f | g |                      |   |   |   |\n\t *    3 +---+---+---+                      +   +---+---+ 3\n\t *                                         |   | d | e |\n\t *                                         +   +---+---+ 4\n\t *                                         +   + f | g |\n\t *                                         +---+---+---+ 5\n\t *\n\t * @param table The table model element where the rows will be inserted.\n\t * @param options.at The row index at which the rows will be inserted.  Default value is 0.\n\t * @param options.rows The number of rows to insert.  Default value is 1.\n\t * @param options.copyStructureFromAbove The flag for copying row structure. Note that\n\t * the row structure will not be copied if this option is not provided.\n\t */ insertRows(table, options = {}) {\n        const model = this.editor.model;\n        const insertAt = options.at || 0;\n        const rowsToInsert = options.rows || 1;\n        const isCopyStructure = options.copyStructureFromAbove !== undefined;\n        const copyStructureFrom = options.copyStructureFromAbove ? insertAt - 1 : insertAt;\n        const rows = this.getRows(table);\n        const columns = this.getColumns(table);\n        if (insertAt > rows) {\n            /**\n\t\t\t * The `options.at` points at a row position that does not exist.\n\t\t\t *\n\t\t\t * @error tableutils-insertrows-insert-out-of-range\n\t\t\t */ throw new CKEditorError('tableutils-insertrows-insert-out-of-range', this, {\n                options\n            });\n        }\n        model.change((writer)=>{\n            const headingRows = table.getAttribute('headingRows') || 0;\n            // Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n            if (headingRows > insertAt) {\n                updateNumericAttribute('headingRows', headingRows + rowsToInsert, table, writer, 0);\n            }\n            // Inserting at the end or at the beginning of a table doesn't require to calculate anything special.\n            if (!isCopyStructure && (insertAt === 0 || insertAt === rows)) {\n                createEmptyRows(writer, table, insertAt, rowsToInsert, columns);\n                return;\n            }\n            // Iterate over all the rows above the inserted rows in order to check for the row-spanned cells.\n            const walkerEndRow = isCopyStructure ? Math.max(insertAt, copyStructureFrom) : insertAt;\n            const tableIterator = new TableWalker(table, {\n                endRow: walkerEndRow\n            });\n            // Store spans of the reference row to reproduce it's structure. This array is column number indexed.\n            const rowColSpansMap = new Array(columns).fill(1);\n            for (const { row, column, cellHeight, cellWidth, cell } of tableIterator){\n                const lastCellRow = row + cellHeight - 1;\n                const isOverlappingInsertedRow = row < insertAt && insertAt <= lastCellRow;\n                const isReferenceRow = row <= copyStructureFrom && copyStructureFrom <= lastCellRow;\n                // If the cell is row-spanned and overlaps the inserted row, then reserve space for it in the row map.\n                if (isOverlappingInsertedRow) {\n                    // This cell overlaps the inserted rows so we need to expand it further.\n                    writer.setAttribute('rowspan', cellHeight + rowsToInsert, cell);\n                    // Mark this cell with negative number to indicate how many cells should be skipped when adding the new cells.\n                    rowColSpansMap[column] = -cellWidth;\n                } else if (isCopyStructure && isReferenceRow) {\n                    rowColSpansMap[column] = cellWidth;\n                }\n            }\n            for(let rowIndex = 0; rowIndex < rowsToInsert; rowIndex++){\n                const tableRow = writer.createElement('tableRow');\n                writer.insert(tableRow, table, insertAt);\n                for(let cellIndex = 0; cellIndex < rowColSpansMap.length; cellIndex++){\n                    const colspan = rowColSpansMap[cellIndex];\n                    const insertPosition = writer.createPositionAt(tableRow, 'end');\n                    // Insert the empty cell only if this slot is not row-spanned from any other cell.\n                    if (colspan > 0) {\n                        createEmptyTableCell(writer, insertPosition, colspan > 1 ? {\n                            colspan\n                        } : undefined);\n                    }\n                    // Skip the col-spanned slots, there won't be any cells.\n                    cellIndex += Math.abs(colspan) - 1;\n                }\n            }\n        });\n    }\n    /**\n\t * Inserts columns into a table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n\t * ```\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *  0   1   2   3                   0   1   2   3   4   5\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *  | a     | b |                   | a             | b |\n\t *  +       +---+                   +               +---+\n\t *  |       | c |                   |               | c |\n\t *  +---+---+---+     will give:    +---+---+---+---+---+\n\t *  | d | e | f |                   | d |   |   | e | f |\n\t *  +---+   +---+                   +---+---+---+   +---+\n\t *  | g |   | h |                   | g |   |   |   | h |\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *  | i         |                   | i                 |\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *      ^---- insert here, `at` = 1, `columns` = 2\n\t *\n\t * @param table The table model element where the columns will be inserted.\n\t * @param options.at The column index at which the columns will be inserted. Default value is 0.\n\t * @param options.columns The number of columns to insert. Default value is 1.\n\t */ insertColumns(table, options = {}) {\n        const model = this.editor.model;\n        const insertAt = options.at || 0;\n        const columnsToInsert = options.columns || 1;\n        model.change((writer)=>{\n            const headingColumns = table.getAttribute('headingColumns');\n            // Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n            if (insertAt < headingColumns) {\n                writer.setAttribute('headingColumns', headingColumns + columnsToInsert, table);\n            }\n            const tableColumns = this.getColumns(table);\n            // Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n            if (insertAt === 0 || tableColumns === insertAt) {\n                for (const tableRow of table.getChildren()){\n                    // Ignore non-row elements inside the table (e.g. caption).\n                    if (!tableRow.is('element', 'tableRow')) {\n                        continue;\n                    }\n                    createCells(columnsToInsert, writer, writer.createPositionAt(tableRow, insertAt ? 'end' : 0));\n                }\n                return;\n            }\n            const tableWalker = new TableWalker(table, {\n                column: insertAt,\n                includeAllSlots: true\n            });\n            for (const tableSlot of tableWalker){\n                const { row, cell, cellAnchorColumn, cellAnchorRow, cellWidth, cellHeight } = tableSlot;\n                // When iterating over column the table walker outputs either:\n                // - cells at given column index (cell \"e\" from method docs),\n                // - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeAllSlots: true`),\n                // - or a cell from the same row which spans over this column (cell \"a\").\n                if (cellAnchorColumn < insertAt) {\n                    // If cell is anchored in previous column, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n                    // For such cells expand them by a number of columns inserted.\n                    writer.setAttribute('colspan', cellWidth + columnsToInsert, cell);\n                    // This cell will overlap cells in rows below so skip them (because of `includeAllSlots` option) - (cell \"a\")\n                    const lastCellRow = cellAnchorRow + cellHeight - 1;\n                    for(let i = row; i <= lastCellRow; i++){\n                        tableWalker.skipRow(i);\n                    }\n                } else {\n                    // It's either cell at this column index or spanned cell by a row-spanned cell from row above.\n                    // In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n                    createCells(columnsToInsert, writer, tableSlot.getPositionBefore());\n                }\n            }\n        });\n    }\n    /**\n\t * Removes rows from the given `table`.\n\t *\n\t * This method re-calculates the table geometry including `rowspan` attribute of table cells overlapping removed rows\n\t * and table headings values.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).removeRows( table, { at: 1, rows: 2 } );\n\t * ```\n\t *\n\t * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n\t *\n\t *  row index\n\t *      ┌───┬───┬───┐        `at` = 1        ┌───┬───┬───┐\n\t *    0 │ a │ b │ c │        `rows` = 2      │ a │ b │ c │ 0\n\t *      │   ├───┼───┤                        │   ├───┼───┤\n\t *    1 │   │ d │ e │  <-- remove from here  │   │ d │ g │ 1\n\t *      │   │   ├───┤        will give:      ├───┼───┼───┤\n\t *    2 │   │   │ f │                        │ h │ i │ j │ 2\n\t *      │   │   ├───┤                        └───┴───┴───┘\n\t *    3 │   │   │ g │\n\t *      ├───┼───┼───┤\n\t *    4 │ h │ i │ j │\n\t *      └───┴───┴───┘\n\t *\n\t * @param options.at The row index at which the removing rows will start.\n\t * @param options.rows The number of rows to remove. Default value is 1.\n\t */ removeRows(table, options) {\n        const model = this.editor.model;\n        const rowsToRemove = options.rows || 1;\n        const rowCount = this.getRows(table);\n        const first = options.at;\n        const last = first + rowsToRemove - 1;\n        if (last > rowCount - 1) {\n            /**\n\t\t\t * The `options.at` param must point at existing row and `options.rows` must not exceed the rows in the table.\n\t\t\t *\n\t\t\t * @error tableutils-removerows-row-index-out-of-range\n\t\t\t */ throw new CKEditorError('tableutils-removerows-row-index-out-of-range', this, {\n                table,\n                options\n            });\n        }\n        model.change((writer)=>{\n            const indexesObject = {\n                first,\n                last\n            };\n            // Removing rows from the table require that most calculations to be done prior to changing table structure.\n            // Preparations must be done in the same enqueueChange callback to use the current table structure.\n            // 1. Preparation - get row-spanned cells that have to be modified after removing rows.\n            const { cellsToMove, cellsToTrim } = getCellsToMoveAndTrimOnRemoveRow(table, indexesObject);\n            // 2. Execution\n            // 2a. Move cells from removed rows that extends over a removed section - must be done before removing rows.\n            // This will fill any gaps in a rows below that previously were empty because of row-spanned cells.\n            if (cellsToMove.size) {\n                const rowAfterRemovedSection = last + 1;\n                moveCellsToRow(table, rowAfterRemovedSection, cellsToMove, writer);\n            }\n            // 2b. Remove all required rows.\n            for(let i = last; i >= first; i--){\n                writer.remove(table.getChild(i));\n            }\n            // 2c. Update cells from rows above that overlap removed section. Similar to step 2 but does not involve moving cells.\n            for (const { rowspan, cell } of cellsToTrim){\n                updateNumericAttribute('rowspan', rowspan, cell, writer);\n            }\n            // 2d. Adjust heading rows if removed rows were in a heading section.\n            updateHeadingRows(table, indexesObject, writer);\n            // 2e. Remove empty columns (without anchored cells) if there are any.\n            if (!removeEmptyColumns(table, this)) {\n                // If there wasn't any empty columns then we still need to check if this wasn't called\n                // because of cleaning empty rows and we only removed one of them.\n                removeEmptyRows(table, this);\n            }\n        });\n    }\n    /**\n\t * Removes columns from the given `table`.\n\t *\n\t * This method re-calculates the table geometry including the `colspan` attribute of table cells overlapping removed columns\n\t * and table headings values.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).removeColumns( table, { at: 1, columns: 2 } );\n\t * ```\n\t *\n\t * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n\t *\n\t *    0   1   2   3   4                       0   1   2\n\t *  ┌───────────────┬───┐                   ┌───────┬───┐\n\t *  │ a             │ b │                   │ a     │ b │\n\t *  │               ├───┤                   │       ├───┤\n\t *  │               │ c │                   │       │ c │\n\t *  ├───┬───┬───┬───┼───┤     will give:    ├───┬───┼───┤\n\t *  │ d │ e │ f │ g │ h │                   │ d │ g │ h │\n\t *  ├───┼───┼───┤   ├───┤                   ├───┤   ├───┤\n\t *  │ i │ j │ k │   │ l │                   │ i │   │ l │\n\t *  ├───┴───┴───┴───┴───┤                   ├───┴───┴───┤\n\t *  │ m                 │                   │ m         │\n\t *  └───────────────────┘                   └───────────┘\n\t *        ^---- remove from here, `at` = 1, `columns` = 2\n\t *\n\t * @param options.at The row index at which the removing columns will start.\n\t * @param options.columns The number of columns to remove.\n\t */ removeColumns(table, options) {\n        const model = this.editor.model;\n        const first = options.at;\n        const columnsToRemove = options.columns || 1;\n        const last = options.at + columnsToRemove - 1;\n        model.change((writer)=>{\n            adjustHeadingColumns(table, {\n                first,\n                last\n            }, writer);\n            const tableColumns = getTableColumnElements(table);\n            for(let removedColumnIndex = last; removedColumnIndex >= first; removedColumnIndex--){\n                for (const { cell, column, cellWidth } of [\n                    ...new TableWalker(table)\n                ]){\n                    // If colspaned cell overlaps removed column decrease its span.\n                    if (column <= removedColumnIndex && cellWidth > 1 && column + cellWidth > removedColumnIndex) {\n                        updateNumericAttribute('colspan', cellWidth - 1, cell, writer);\n                    } else if (column === removedColumnIndex) {\n                        // The cell in removed column has colspan of 1.\n                        writer.remove(cell);\n                    }\n                }\n                // If table has `tableColumn` elements, we need to update it manually.\n                // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for details.\n                if (tableColumns[removedColumnIndex]) {\n                    // If the removed column is the first one then we need to add its width to the next column.\n                    // Otherwise we add it to the previous column.\n                    const adjacentColumn = removedColumnIndex === 0 ? tableColumns[1] : tableColumns[removedColumnIndex - 1];\n                    const removedColumnWidth = parseFloat(tableColumns[removedColumnIndex].getAttribute('columnWidth'));\n                    const adjacentColumnWidth = parseFloat(adjacentColumn.getAttribute('columnWidth'));\n                    writer.remove(tableColumns[removedColumnIndex]);\n                    // Add the removed column width (in %) to the adjacent column.\n                    writer.setAttribute('columnWidth', removedColumnWidth + adjacentColumnWidth + '%', adjacentColumn);\n                }\n            }\n            // Remove empty rows that could appear after removing columns.\n            if (!removeEmptyRows(table, this)) {\n                // If there wasn't any empty rows then we still need to check if this wasn't called\n                // because of cleaning empty columns and we only removed one of them.\n                removeEmptyColumns(table, this);\n            }\n        });\n    }\n    /**\n\t * Divides a table cell vertically into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating colspans of other cells in a column\n\t * and inserting cells (columns) after that cell.\n\t *\n\t * In the table below, if cell \"a\" is split into 3 cells:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * it will result in the table below:\n\t *\n\t *  +---+---+---+---+---+\n\t *  | a |   |   | b | c |\n\t *  +---+---+---+---+---+\n\t *  | d         | e | f |\n\t *  +---+---+---+---+---+\n\t *\n\t * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n\t *\n\t * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *  +---+---+---+\n\t *  | a         |\n\t *  +---+---+---+\n\t *  | b | c | d |\n\t *  +---+---+---+\n\t *\n\t * Splitting cell \"a\" with `colspan=3` into 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n\t *\n\t *  +---+---+---+\n\t *  | a     |   |\n\t *  +---+---+---+\n\t *  | b | c | d |\n\t *  +---+---+---+\n\t */ splitCellVertically(tableCell, numberOfCells = 2) {\n        const model = this.editor.model;\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n        const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n        model.change((writer)=>{\n            // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n            if (colspan > 1) {\n                // Get spans of new (inserted) cells and span to update of split cell.\n                const { newCellsSpan, updatedSpan } = breakSpanEvenly(colspan, numberOfCells);\n                updateNumericAttribute('colspan', updatedSpan, tableCell, writer);\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                if (newCellsSpan > 1) {\n                    newCellsAttributes.colspan = newCellsSpan;\n                }\n                // Copy rowspan of split cell.\n                if (rowspan > 1) {\n                    newCellsAttributes.rowspan = rowspan;\n                }\n                const cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n                createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n            }\n            // Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n            if (colspan < numberOfCells) {\n                const cellsToInsert = numberOfCells - colspan;\n                // First step: expand cells on the same column as split cell.\n                const tableMap = [\n                    ...new TableWalker(table)\n                ];\n                // Get the column index of split cell.\n                const { column: splitCellColumn } = tableMap.find(({ cell })=>cell === tableCell);\n                // Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n                const cellsToUpdate = tableMap.filter(({ cell, cellWidth, column })=>{\n                    const isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n                    const spansOverColumn = column < splitCellColumn && column + cellWidth > splitCellColumn;\n                    return isOnSameColumn || spansOverColumn;\n                });\n                // Expand cells vertically.\n                for (const { cell, cellWidth } of cellsToUpdate){\n                    writer.setAttribute('colspan', cellWidth + cellsToInsert, cell);\n                }\n                // Second step: create columns after split cell.\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                // Copy rowspan of split cell.\n                if (rowspan > 1) {\n                    newCellsAttributes.rowspan = rowspan;\n                }\n                createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n                const headingColumns = table.getAttribute('headingColumns') || 0;\n                // Update heading section if split cell is in heading section.\n                if (headingColumns > splitCellColumn) {\n                    updateNumericAttribute('headingColumns', headingColumns + cellsToInsert, table, writer);\n                }\n            }\n        });\n    }\n    /**\n\t * Divides a table cell horizontally into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n\t * below.\n\t *\n\t * If in the table below cell \"b\" is split into 3 cells:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * It will result in the table below:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+   +\n\t *  |   |   |   |\n\t *  +   +---+   +\n\t *  |   |   |   |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n\t *\n\t * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+---+\n\t *  |   | d | e |\n\t *  +   +---+---+\n\t *  |   | f | g |\n\t *  +   +---+---+\n\t *  |   | h | i |\n\t *  +---+---+---+\n\t *\n\t * Splitting cell \"a\" with `rowspan=4` into 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+---+\n\t *  |   | d | e |\n\t *  +---+---+---+\n\t *  |   | f | g |\n\t *  +---+---+---+\n\t *  |   | h | i |\n\t *  +---+---+---+\n\t */ splitCellHorizontally(tableCell, numberOfCells = 2) {\n        const model = this.editor.model;\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const splitCellRow = table.getChildIndex(tableRow);\n        const rowspan = parseInt(tableCell.getAttribute('rowspan') || '1');\n        const colspan = parseInt(tableCell.getAttribute('colspan') || '1');\n        model.change((writer)=>{\n            // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n            if (rowspan > 1) {\n                // Cache table map before updating table.\n                const tableMap = [\n                    ...new TableWalker(table, {\n                        startRow: splitCellRow,\n                        endRow: splitCellRow + rowspan - 1,\n                        includeAllSlots: true\n                    })\n                ];\n                // Get spans of new (inserted) cells and span to update of split cell.\n                const { newCellsSpan, updatedSpan } = breakSpanEvenly(rowspan, numberOfCells);\n                updateNumericAttribute('rowspan', updatedSpan, tableCell, writer);\n                const { column: cellColumn } = tableMap.find(({ cell })=>cell === tableCell);\n                // Each inserted cell will have the same attributes:\n                const newCellsAttributes = {};\n                // Do not store default value in the model.\n                if (newCellsSpan > 1) {\n                    newCellsAttributes.rowspan = newCellsSpan;\n                }\n                // Copy colspan of split cell.\n                if (colspan > 1) {\n                    newCellsAttributes.colspan = colspan;\n                }\n                // Accumulator that stores distance from the last inserted cell span.\n                // It helps with evenly splitting larger cell spans (for example 10 cells collapsing into 3 cells).\n                // We split these cells into 3, 3, 4 cells and we have to call `createCells` only when distance between\n                // these cells is equal or greater than the new cells span size.\n                let distanceFromLastCellSpan = 0;\n                for (const tableSlot of tableMap){\n                    const { column, row } = tableSlot;\n                    // As both newly created cells and the split cell might have rowspan,\n                    // the insertion of new cells must go to appropriate rows:\n                    //\n                    // 1. It's a row after split cell + it's height.\n                    const isAfterSplitCell = row >= splitCellRow + updatedSpan;\n                    // 2. Is on the same column.\n                    const isOnSameColumn = column === cellColumn;\n                    // Reset distance from the last cell span if we are on the same column and we exceeded the new cells span size.\n                    if (distanceFromLastCellSpan >= newCellsSpan && isOnSameColumn) {\n                        distanceFromLastCellSpan = 0;\n                    }\n                    if (isAfterSplitCell && isOnSameColumn) {\n                        // Create new cells only if the distance from the last cell span is equal or greater than the new cells span.\n                        if (!distanceFromLastCellSpan) {\n                            createCells(1, writer, tableSlot.getPositionBefore(), newCellsAttributes);\n                        }\n                        // Increase the distance from the last cell span.\n                        distanceFromLastCellSpan++;\n                    }\n                }\n            }\n            // Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n            if (rowspan < numberOfCells) {\n                // We already split the cell in check one so here we split to the remaining number of cells only.\n                const cellsToInsert = numberOfCells - rowspan;\n                // This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n                const tableMap = [\n                    ...new TableWalker(table, {\n                        startRow: 0,\n                        endRow: splitCellRow\n                    })\n                ];\n                // First step: expand cells.\n                for (const { cell, cellHeight, row } of tableMap){\n                    // Expand rowspan of cells that are either:\n                    // - on the same row as current cell,\n                    // - or are below split cell row and overlaps that row.\n                    if (cell !== tableCell && row + cellHeight > splitCellRow) {\n                        const rowspanToSet = cellHeight + cellsToInsert;\n                        writer.setAttribute('rowspan', rowspanToSet, cell);\n                    }\n                }\n                // Second step: create rows with single cell below split cell.\n                const newCellsAttributes = {};\n                // Copy colspan of split cell.\n                if (colspan > 1) {\n                    newCellsAttributes.colspan = colspan;\n                }\n                createEmptyRows(writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes);\n                // Update heading section if split cell is in heading section.\n                const headingRows = table.getAttribute('headingRows') || 0;\n                if (headingRows > splitCellRow) {\n                    updateNumericAttribute('headingRows', headingRows + cellsToInsert, table, writer);\n                }\n            }\n        });\n    }\n    /**\n\t * Returns the number of columns for a given table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).getColumns( table );\n\t * ```\n\t *\n\t * @param table The table to analyze.\n\t */ getColumns(table) {\n        // Analyze first row only as all the rows should have the same width.\n        // Using the first row without checking if it's a tableRow because we expect\n        // that table will have only tableRow model elements at the beginning.\n        const row = table.getChild(0);\n        return [\n            ...row.getChildren()\n        ]// $marker elements can also be children of a row too (when TrackChanges is on). Don't include them in the count.\n        .filter((node)=>node.is('element', 'tableCell')).reduce((columns, row)=>{\n            const columnWidth = parseInt(row.getAttribute('colspan') || '1');\n            return columns + columnWidth;\n        }, 0);\n    }\n    /**\n\t * Returns the number of rows for a given table. Any other element present in the table model is omitted.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).getRows( table );\n\t * ```\n\t *\n\t * @param table The table to analyze.\n\t */ getRows(table) {\n        // Rowspan not included due to #6427.\n        return Array.from(table.getChildren()).reduce((rowCount, child)=>child.is('element', 'tableRow') ? rowCount + 1 : rowCount, 0);\n    }\n    /**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the options.\n\t * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeAllSlots` option.\n\t *\n\t * @internal\n\t * @param table A table over which the walker iterates.\n\t * @param options An object with configuration.\n\t */ createTableWalker(table, options = {}) {\n        return new TableWalker(table, options);\n    }\n    /**\n\t * Returns all model table cells that are fully selected (from the outside)\n\t * within the provided model selection's ranges.\n\t *\n\t * To obtain the cells selected from the inside, use\n\t * {@link #getTableCellsContainingSelection}.\n\t */ getSelectedTableCells(selection) {\n        const cells = [];\n        for (const range of this.sortRanges(selection.getRanges())){\n            const element = range.getContainedElement();\n            if (element && element.is('element', 'tableCell')) {\n                cells.push(element);\n            }\n        }\n        return cells;\n    }\n    /**\n\t * Returns all model table cells that the provided model selection's ranges\n\t * {@link module:engine/model/range~Range#start} inside.\n\t *\n\t * To obtain the cells selected from the outside, use\n\t * {@link #getSelectedTableCells}.\n\t */ getTableCellsContainingSelection(selection) {\n        const cells = [];\n        for (const range of selection.getRanges()){\n            const cellWithSelection = range.start.findAncestor('tableCell');\n            if (cellWithSelection) {\n                cells.push(cellWithSelection);\n            }\n        }\n        return cells;\n    }\n    /**\n\t * Returns all model table cells that are either completely selected\n\t * by selection ranges or host selection range\n\t * {@link module:engine/model/range~Range#start start positions} inside them.\n\t *\n\t * Combines {@link #getTableCellsContainingSelection} and\n\t * {@link #getSelectedTableCells}.\n\t */ getSelectionAffectedTableCells(selection) {\n        const selectedCells = this.getSelectedTableCells(selection);\n        if (selectedCells.length) {\n            return selectedCells;\n        }\n        return this.getTableCellsContainingSelection(selection);\n    }\n    /**\n\t * Returns an object with the `first` and `last` row index contained in the given `tableCells`.\n\t *\n\t * ```ts\n\t * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n\t *\n\t * const { first, last } = getRowIndexes( selectedTableCells );\n\t *\n\t * console.log( `Selected rows: ${ first } to ${ last }` );\n\t * ```\n\t *\n\t * @returns Returns an object with the `first` and `last` table row indexes.\n\t */ getRowIndexes(tableCells) {\n        const indexes = tableCells.map((cell)=>cell.parent.index);\n        return this._getFirstLastIndexesObject(indexes);\n    }\n    /**\n\t * Returns an object with the `first` and `last` column index contained in the given `tableCells`.\n\t *\n\t * ```ts\n\t * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n\t *\n\t * const { first, last } = getColumnIndexes( selectedTableCells );\n\t *\n\t * console.log( `Selected columns: ${ first } to ${ last }` );\n\t * ```\n\t *\n\t * @returns Returns an object with the `first` and `last` table column indexes.\n\t */ getColumnIndexes(tableCells) {\n        const table = tableCells[0].findAncestor('table');\n        const tableMap = [\n            ...new TableWalker(table)\n        ];\n        const indexes = tableMap.filter((entry)=>tableCells.includes(entry.cell)).map((entry)=>entry.column);\n        return this._getFirstLastIndexesObject(indexes);\n    }\n    /**\n\t * Checks if the selection contains cells that do not exceed rectangular selection.\n\t *\n\t * In a table below:\n\t *\n\t *  ┌───┬───┬───┬───┐\n\t *  │ a │ b │ c │ d │\n\t *  ├───┴───┼───┤   │\n\t *  │ e     │ f │   │\n\t *  │       ├───┼───┤\n\t *  │       │ g │ h │\n\t *  └───────┴───┴───┘\n\t *\n\t * Valid selections are these which create a solid rectangle (without gaps), such as:\n\t *   - a, b (two horizontal cells)\n\t *   - c, f (two vertical cells)\n\t *   - a, b, e (cell \"e\" spans over four cells)\n\t *   - c, d, f (cell d spans over a cell in the row below)\n\t *\n\t * While an invalid selection would be:\n\t *   - a, c (the unselected cell \"b\" creates a gap)\n\t *   - f, g, h (cell \"d\" spans over a cell from the row of \"f\" cell - thus creates a gap)\n\t */ isSelectionRectangular(selectedTableCells) {\n        if (selectedTableCells.length < 2 || !this._areCellInTheSameTableSection(selectedTableCells)) {\n            return false;\n        }\n        // A valid selection is a fully occupied rectangle composed of table cells.\n        // Below we will calculate the area of a selected table cells and the area of valid selection.\n        // The area of a valid selection is defined by top-left and bottom-right cells.\n        const rows = new Set();\n        const columns = new Set();\n        let areaOfSelectedCells = 0;\n        for (const tableCell of selectedTableCells){\n            const { row, column } = this.getCellLocation(tableCell);\n            const rowspan = parseInt(tableCell.getAttribute('rowspan')) || 1;\n            const colspan = parseInt(tableCell.getAttribute('colspan')) || 1;\n            // Record row & column indexes of current cell.\n            rows.add(row);\n            columns.add(column);\n            // For cells that spans over multiple rows add also the last row that this cell spans over.\n            if (rowspan > 1) {\n                rows.add(row + rowspan - 1);\n            }\n            // For cells that spans over multiple columns add also the last column that this cell spans over.\n            if (colspan > 1) {\n                columns.add(column + colspan - 1);\n            }\n            areaOfSelectedCells += rowspan * colspan;\n        }\n        // We can only merge table cells that are in adjacent rows...\n        const areaOfValidSelection = getBiggestRectangleArea(rows, columns);\n        return areaOfValidSelection == areaOfSelectedCells;\n    }\n    /**\n\t * Returns array of sorted ranges.\n\t */ sortRanges(ranges) {\n        return Array.from(ranges).sort(compareRangeOrder);\n    }\n    /**\n\t * Helper method to get an object with `first` and `last` indexes from an unsorted array of indexes.\n\t */ _getFirstLastIndexesObject(indexes) {\n        const allIndexesSorted = indexes.sort((indexA, indexB)=>indexA - indexB);\n        const first = allIndexesSorted[0];\n        const last = allIndexesSorted[allIndexesSorted.length - 1];\n        return {\n            first,\n            last\n        };\n    }\n    /**\n\t * Checks if the selection does not mix a header (column or row) with other cells.\n\t *\n\t * For instance, in the table below valid selections consist of cells with the same letter only.\n\t * So, a-a (same heading row and column) or d-d (body cells) are valid while c-d or a-b are not.\n\t *\n\t * header columns\n\t *    ↓   ↓\n\t *  ┌───┬───┬───┬───┐\n\t *  │ a │ a │ b │ b │  ← header row\n\t *  ├───┼───┼───┼───┤\n\t *  │ c │ c │ d │ d │\n\t *  ├───┼───┼───┼───┤\n\t *  │ c │ c │ d │ d │\n\t *  └───┴───┴───┴───┘\n\t */ _areCellInTheSameTableSection(tableCells) {\n        const table = tableCells[0].findAncestor('table');\n        const rowIndexes = this.getRowIndexes(tableCells);\n        const headingRows = parseInt(table.getAttribute('headingRows')) || 0;\n        // Calculating row indexes is a bit cheaper so if this check fails we can't merge.\n        if (!this._areIndexesInSameSection(rowIndexes, headingRows)) {\n            return false;\n        }\n        const columnIndexes = this.getColumnIndexes(tableCells);\n        const headingColumns = parseInt(table.getAttribute('headingColumns')) || 0;\n        // Similarly cells must be in same column section.\n        return this._areIndexesInSameSection(columnIndexes, headingColumns);\n    }\n    /**\n\t * Unified check if table rows/columns indexes are in the same heading/body section.\n\t */ _areIndexesInSameSection({ first, last }, headingSectionSize) {\n        const firstCellIsInHeading = first < headingSectionSize;\n        const lastCellIsInHeading = last < headingSectionSize;\n        return firstCellIsInHeading === lastCellIsInHeading;\n    }\n}\n/**\n * Creates empty rows at the given index in an existing table.\n *\n * @param insertAt The row index of row insertion.\n * @param rows The number of rows to create.\n * @param tableCellToInsert The number of cells to insert in each row.\n */ function createEmptyRows(writer, table, insertAt, rows, tableCellToInsert, attributes = {}) {\n    for(let i = 0; i < rows; i++){\n        const tableRow = writer.createElement('tableRow');\n        writer.insert(tableRow, table, insertAt);\n        createCells(tableCellToInsert, writer, writer.createPositionAt(tableRow, 'end'), attributes);\n    }\n}\n/**\n * Creates cells at a given position.\n *\n * @param cells The number of cells to create\n */ function createCells(cells, writer, insertPosition, attributes = {}) {\n    for(let i = 0; i < cells; i++){\n        createEmptyTableCell(writer, insertPosition, attributes);\n    }\n}\n/**\n * Evenly distributes the span of a cell to a number of provided cells.\n * The resulting spans will always be integer values.\n *\n * For instance breaking a span of 7 into 3 cells will return:\n *\n * ```ts\n * { newCellsSpan: 2, updatedSpan: 3 }\n * ```\n *\n * as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n *\n * @param span The span value do break.\n * @param numberOfCells The number of resulting spans.\n */ function breakSpanEvenly(span, numberOfCells) {\n    if (span < numberOfCells) {\n        return {\n            newCellsSpan: 1,\n            updatedSpan: 1\n        };\n    }\n    const newCellsSpan = Math.floor(span / numberOfCells);\n    const updatedSpan = span - newCellsSpan * numberOfCells + newCellsSpan;\n    return {\n        newCellsSpan,\n        updatedSpan\n    };\n}\n/**\n * Updates heading columns attribute if removing a row from head section.\n */ function adjustHeadingColumns(table, removedColumnIndexes, writer) {\n    const headingColumns = table.getAttribute('headingColumns') || 0;\n    if (headingColumns && removedColumnIndexes.first < headingColumns) {\n        const headingsRemoved = Math.min(headingColumns - 1 /* Other numbers are 0-based */ , removedColumnIndexes.last) - removedColumnIndexes.first + 1;\n        writer.setAttribute('headingColumns', headingColumns - headingsRemoved, table);\n    }\n}\n/**\n * Calculates a new heading rows value for removing rows from heading section.\n */ function updateHeadingRows(table, { first, last }, writer) {\n    const headingRows = table.getAttribute('headingRows') || 0;\n    if (first < headingRows) {\n        const newRows = last < headingRows ? headingRows - (last - first + 1) : first;\n        updateNumericAttribute('headingRows', newRows, table, writer, 0);\n    }\n}\n/**\n * Finds cells that will be:\n * - trimmed - Cells that are \"above\" removed rows sections and overlap the removed section - their rowspan must be trimmed.\n * - moved - Cells from removed rows section might stick out of. These cells are moved to the next row after a removed section.\n *\n * Sample table with overlapping & sticking out cells:\n *\n *      +----+----+----+----+----+\n *      | 00 | 01 | 02 | 03 | 04 |\n *      +----+    +    +    +    +\n *      | 10 |    |    |    |    |\n *      +----+----+    +    +    +\n *      | 20 | 21 |    |    |    | <-- removed row\n *      +    +    +----+    +    +\n *      |    |    | 32 |    |    | <-- removed row\n *      +----+    +    +----+    +\n *      | 40 |    |    | 43 |    |\n *      +----+----+----+----+----+\n *\n * In a table above:\n * - cells to trim: '02', '03' & '04'.\n * - cells to move: '21' & '32'.\n */ function getCellsToMoveAndTrimOnRemoveRow(table, { first, last }) {\n    const cellsToMove = new Map();\n    const cellsToTrim = [];\n    for (const { row, column, cellHeight, cell } of new TableWalker(table, {\n        endRow: last\n    })){\n        const lastRowOfCell = row + cellHeight - 1;\n        const isCellStickingOutFromRemovedRows = row >= first && row <= last && lastRowOfCell > last;\n        if (isCellStickingOutFromRemovedRows) {\n            const rowspanInRemovedSection = last - row + 1;\n            const rowSpanToSet = cellHeight - rowspanInRemovedSection;\n            cellsToMove.set(column, {\n                cell,\n                rowspan: rowSpanToSet\n            });\n        }\n        const isCellOverlappingRemovedRows = row < first && lastRowOfCell >= first;\n        if (isCellOverlappingRemovedRows) {\n            let rowspanAdjustment;\n            // Cell fully covers removed section - trim it by removed rows count.\n            if (lastRowOfCell >= last) {\n                rowspanAdjustment = last - first + 1;\n            } else {\n                rowspanAdjustment = lastRowOfCell - first + 1;\n            }\n            cellsToTrim.push({\n                cell,\n                rowspan: cellHeight - rowspanAdjustment\n            });\n        }\n    }\n    return {\n        cellsToMove,\n        cellsToTrim\n    };\n}\nfunction moveCellsToRow(table, targetRowIndex, cellsToMove, writer) {\n    const tableWalker = new TableWalker(table, {\n        includeAllSlots: true,\n        row: targetRowIndex\n    });\n    const tableRowMap = [\n        ...tableWalker\n    ];\n    const row = table.getChild(targetRowIndex);\n    let previousCell;\n    for (const { column, cell, isAnchor } of tableRowMap){\n        if (cellsToMove.has(column)) {\n            const { cell: cellToMove, rowspan } = cellsToMove.get(column);\n            const targetPosition = previousCell ? writer.createPositionAfter(previousCell) : writer.createPositionAt(row, 0);\n            writer.move(writer.createRangeOn(cellToMove), targetPosition);\n            updateNumericAttribute('rowspan', rowspan, cellToMove, writer);\n            previousCell = cellToMove;\n        } else if (isAnchor) {\n            // If cell is spanned then `cell` holds reference to overlapping cell. See ckeditor/ckeditor5#6502.\n            previousCell = cell;\n        }\n    }\n}\nfunction compareRangeOrder(rangeA, rangeB) {\n    // Since table cell ranges are disjoint, it's enough to check their start positions.\n    const posA = rangeA.start;\n    const posB = rangeB.start;\n    // Checking for equal position (returning 0) is not needed because this would be either:\n    // a. Intersecting range (not allowed by model)\n    // b. Collapsed range on the same position (allowed by model but should not happen).\n    return posA.isBefore(posB) ? -1 : 1;\n}\n/**\n * Calculates the area of a maximum rectangle that can span over the provided row & column indexes.\n */ function getBiggestRectangleArea(rows, columns) {\n    const rowsIndexes = Array.from(rows.values());\n    const columnIndexes = Array.from(columns.values());\n    const lastRow = Math.max(...rowsIndexes);\n    const firstRow = Math.min(...rowsIndexes);\n    const lastColumn = Math.max(...columnIndexes);\n    const firstColumn = Math.min(...columnIndexes);\n    return (lastRow - firstRow + 1) * (lastColumn - firstColumn + 1);\n}\n\n/**\n * The merge cells command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCells'` editor command.\n *\n * For example, to merge selected table cells:\n *\n * ```ts\n * editor.execute( 'mergeTableCells' );\n * ```\n */ class MergeCellsCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selectedTableCells = tableUtils.getSelectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = tableUtils.isSelectionRectangular(selectedTableCells);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        model.change((writer)=>{\n            const selectedTableCells = tableUtils.getSelectedTableCells(model.document.selection);\n            // All cells will be merged into the first one.\n            const firstTableCell = selectedTableCells.shift();\n            // Update target cell dimensions.\n            const { mergeWidth, mergeHeight } = getMergeDimensions(firstTableCell, selectedTableCells, tableUtils);\n            updateNumericAttribute('colspan', mergeWidth, firstTableCell, writer);\n            updateNumericAttribute('rowspan', mergeHeight, firstTableCell, writer);\n            for (const tableCell of selectedTableCells){\n                mergeTableCells(tableCell, firstTableCell, writer);\n            }\n            const table = firstTableCell.findAncestor('table');\n            // Remove rows and columns that become empty (have no anchored cells).\n            removeEmptyRowsColumns(table, tableUtils);\n            writer.setSelection(firstTableCell, 'in');\n        });\n    }\n}\n/**\n *  Merges two table cells. It will ensure that after merging cells with empty paragraphs the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */ function mergeTableCells(cellBeingMerged, targetCell, writer) {\n    if (!isEmpty$1(cellBeingMerged)) {\n        if (isEmpty$1(targetCell)) {\n            writer.remove(writer.createRangeIn(targetCell));\n        }\n        writer.move(writer.createRangeIn(cellBeingMerged), writer.createPositionAt(targetCell, 'end'));\n    }\n    // Remove merged table cell.\n    writer.remove(cellBeingMerged);\n}\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */ function isEmpty$1(tableCell) {\n    const firstTableChild = tableCell.getChild(0);\n    return tableCell.childCount == 1 && firstTableChild.is('element', 'paragraph') && firstTableChild.isEmpty;\n}\nfunction getMergeDimensions(firstTableCell, selectedTableCells, tableUtils) {\n    let maxWidthOffset = 0;\n    let maxHeightOffset = 0;\n    for (const tableCell of selectedTableCells){\n        const { row, column } = tableUtils.getCellLocation(tableCell);\n        maxWidthOffset = getMaxOffset(tableCell, column, maxWidthOffset, 'colspan');\n        maxHeightOffset = getMaxOffset(tableCell, row, maxHeightOffset, 'rowspan');\n    }\n    // Update table cell span attribute and merge set selection on a merged contents.\n    const { row: firstCellRow, column: firstCellColumn } = tableUtils.getCellLocation(firstTableCell);\n    const mergeWidth = maxWidthOffset - firstCellColumn;\n    const mergeHeight = maxHeightOffset - firstCellRow;\n    return {\n        mergeWidth,\n        mergeHeight\n    };\n}\nfunction getMaxOffset(tableCell, start, currentMaxOffset, which) {\n    const dimensionValue = parseInt(tableCell.getAttribute(which) || '1');\n    return Math.max(currentMaxOffset, start + dimensionValue);\n}\n\n/**\n * The select row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableRow'` editor command.\n *\n * To select the rows containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableRow' );\n * ```\n */ class SelectRowCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length > 0;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const rowIndexes = tableUtils.getRowIndexes(referenceCells);\n        const table = referenceCells[0].findAncestor('table');\n        const rangesToSelect = [];\n        for(let rowIndex = rowIndexes.first; rowIndex <= rowIndexes.last; rowIndex++){\n            for (const cell of table.getChild(rowIndex).getChildren()){\n                rangesToSelect.push(model.createRangeOn(cell));\n            }\n        }\n        model.change((writer)=>{\n            writer.setSelection(rangesToSelect);\n        });\n    }\n}\n\n/**\n * The select column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableColumn'` editor command.\n *\n * To select the columns containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableColumn' );\n * ```\n */ class SelectColumnCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedCells = tableUtils.getSelectionAffectedTableCells(this.editor.model.document.selection);\n        this.isEnabled = selectedCells.length > 0;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const model = this.editor.model;\n        const referenceCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const firstCell = referenceCells[0];\n        const lastCell = referenceCells.pop();\n        const table = firstCell.findAncestor('table');\n        const startLocation = tableUtils.getCellLocation(firstCell);\n        const endLocation = tableUtils.getCellLocation(lastCell);\n        const startColumn = Math.min(startLocation.column, endLocation.column);\n        const endColumn = Math.max(startLocation.column, endLocation.column);\n        const rangesToSelect = [];\n        for (const cellInfo of new TableWalker(table, {\n            startColumn,\n            endColumn\n        })){\n            rangesToSelect.push(model.createRangeOn(cellInfo.cell));\n        }\n        model.change((writer)=>{\n            writer.setSelection(rangesToSelect);\n        });\n    }\n}\n\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of the table cells extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as a child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extend beyond their section.\n * 2. It will add empty table cells to the rows that are narrower than the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or a part of a table) to the editor from external sources.\n *\n * For example, see the following table which has a cell (FOO) with the rowspan attribute (2):\n *\n * ```xml\n * <table headingRows=\"1\">\n *   <tableRow>\n *     <tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *     <tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *   </tableRow>\n *   <tableRow>\n *     <tableCell><paragraph>BAZ</paragraph></tableCell>\n *     <tableCell><paragraph>XYZ</paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * It will be rendered in the view as:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * In the above example the table will be rendered as a table with two rows: one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would extend from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is the default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ in the content will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table row sizes (the number of columns).\n * The size of a table row is calculated by counting column spans of table cells, both horizontal (from the same row) and\n * vertical (from the rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header: it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and the second with colspan (2).\n * The table cell (FOO) does not extend beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * ## Collaboration and undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without a deeper analysis of the nature of the change. As such, it might lead\n * to a structure which was not intended by the user. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which the editor content might not return to the original state.\n *\n * This will usually happen when one or more users change the size of the table.\n *\n * As an example see the table below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * and the user actions:\n *\n * 1. Both users have a table with two rows and two columns.\n * 2. User A adds a column at the end of the table. This will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table. This will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * The last row is shorter then others so the table post-fixer will add an empty row to the last row:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by the post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * Unfortunately undo does not know the nature of the changes and depending on which user applies the post-fixer changes, undoing them\n * might lead to a broken table. If User B undoes inserting the column to the table, the undo engine will undo only the operations of\n * inserting empty cells to rows from the initial table state (row 1 and 2) but the cell in the post-fixed row will remain:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * After undo, the table post-fixer will detect that two rows are shorter than others and will fix the table to:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n */ function injectTableLayoutPostFixer(model) {\n    model.document.registerPostFixer((writer)=>tableLayoutPostFixer(writer, model));\n}\n/**\n * The table layout post-fixer.\n */ function tableLayoutPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    // Do not analyze the same table more then once - may happen for multiple changes in the same table.\n    const analyzedTables = new Set();\n    for (const entry of changes){\n        let table = null;\n        if (entry.type == 'insert' && entry.name == 'table') {\n            table = entry.position.nodeAfter;\n        }\n        // Fix table on adding/removing table cells and rows.\n        if ((entry.type == 'insert' || entry.type == 'remove') && (entry.name == 'tableRow' || entry.name == 'tableCell')) {\n            table = entry.position.findAncestor('table');\n        }\n        // Fix table on any table's attribute change - including attributes of table cells.\n        if (isTableAttributeEntry(entry)) {\n            table = entry.range.start.findAncestor('table');\n        }\n        if (table && !analyzedTables.has(table)) {\n            // Step 1: correct rowspans of table cells if necessary.\n            // The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n            wasFixed = fixTableCellsRowspan(table, writer) || wasFixed;\n            // Step 2: fix table rows sizes.\n            wasFixed = fixTableRowsSizes(table, writer) || wasFixed;\n            analyzedTables.add(table);\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes the invalid value of the `rowspan` attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n *\n * @returns Returns `true` if the table was fixed.\n */ function fixTableCellsRowspan(table, writer) {\n    let wasFixed = false;\n    const cellsToTrim = findCellsToTrim(table);\n    if (cellsToTrim.length) {\n        // @if CK_DEBUG_TABLE // console.log( `Post-fixing table: trimming cells row-spans (${ cellsToTrim.length }).` );\n        wasFixed = true;\n        for (const data of cellsToTrim){\n            updateNumericAttribute('rowspan', data.rowspan, data.cell, writer, 1);\n        }\n    }\n    return wasFixed;\n}\n/**\n * Makes all table rows in a table the same size.\n *\n * @returns Returns `true` if the table was fixed.\n */ function fixTableRowsSizes(table, writer) {\n    let wasFixed = false;\n    const childrenLengths = getChildrenLengths(table);\n    const rowsToRemove = [];\n    // Find empty rows.\n    for (const [rowIndex, size] of childrenLengths.entries()){\n        // Ignore all non-row models.\n        if (!size && table.getChild(rowIndex).is('element', 'tableRow')) {\n            rowsToRemove.push(rowIndex);\n        }\n    }\n    // Remove empty rows.\n    if (rowsToRemove.length) {\n        // @if CK_DEBUG_TABLE // console.log( `Post-fixing table: remove empty rows (${ rowsToRemove.length }).` );\n        wasFixed = true;\n        for (const rowIndex of rowsToRemove.reverse()){\n            writer.remove(table.getChild(rowIndex));\n            childrenLengths.splice(rowIndex, 1);\n        }\n    }\n    // Filter out everything that's not a table row.\n    const rowsLengths = childrenLengths.filter((row, rowIndex)=>table.getChild(rowIndex).is('element', 'tableRow'));\n    // Verify if all the rows have the same number of columns.\n    const tableSize = rowsLengths[0];\n    const isValid = rowsLengths.every((length)=>length === tableSize);\n    if (!isValid) {\n        // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: adding missing cells.' );\n        // Find the maximum number of columns.\n        const maxColumns = rowsLengths.reduce((prev, current)=>current > prev ? current : prev, 0);\n        for (const [rowIndex, size] of rowsLengths.entries()){\n            const columnsToInsert = maxColumns - size;\n            if (columnsToInsert) {\n                for(let i = 0; i < columnsToInsert; i++){\n                    createEmptyTableCell(writer, writer.createPositionAt(table.getChild(rowIndex), 'end'));\n                }\n                wasFixed = true;\n            }\n        }\n    }\n    return wasFixed;\n}\n/**\n * Searches for table cells that extend beyond the table section to which they belong to. It will return an array of objects\n * that stores table cells to be trimmed and the correct value of the `rowspan` attribute to set.\n */ function findCellsToTrim(table) {\n    const headingRows = parseInt(table.getAttribute('headingRows') || '0');\n    const maxRows = Array.from(table.getChildren()).reduce((count, row)=>row.is('element', 'tableRow') ? count + 1 : count, 0);\n    const cellsToTrim = [];\n    for (const { row, cell, cellHeight } of new TableWalker(table)){\n        // Skip cells that do not expand over its row.\n        if (cellHeight < 2) {\n            continue;\n        }\n        const isInHeader = row < headingRows;\n        // Row limit is either end of header section or whole table as table body is after the header.\n        const rowLimit = isInHeader ? headingRows : maxRows;\n        // If table cell expands over its limit reduce it height to proper value.\n        if (row + cellHeight > rowLimit) {\n            const newRowspan = rowLimit - row;\n            cellsToTrim.push({\n                cell,\n                rowspan: newRowspan\n            });\n        }\n    }\n    return cellsToTrim;\n}\n/**\n * Returns an array with lengths of rows assigned to the corresponding row index.\n */ function getChildrenLengths(table) {\n    // TableWalker will not provide items for the empty rows, we need to pre-fill this array.\n    const lengths = new Array(table.childCount).fill(0);\n    for (const { rowIndex } of new TableWalker(table, {\n        includeAllSlots: true\n    })){\n        lengths[rowIndex]++;\n    }\n    return lengths;\n}\n/**\n * Checks if the differ entry for an attribute change is one of the table's attributes.\n */ function isTableAttributeEntry(entry) {\n    if (entry.type !== 'attribute') {\n        return false;\n    }\n    const key = entry.attributeKey;\n    return key === 'headingRows' || key === 'colspan' || key === 'rowspan';\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/converters/table-cell-paragraph-post-fixer\n */ /**\n * Injects a table cell post-fixer into the model which inserts a `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have an empty `paragraph` as a child.\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * Will be fixed to:\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell><paragraph></paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n */ function injectTableCellParagraphPostFixer(model) {\n    model.document.registerPostFixer((writer)=>tableCellContentsPostFixer(writer, model));\n}\n/**\n * The table cell contents post-fixer.\n */ function tableCellContentsPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    for (const entry of changes){\n        if (entry.type == 'insert' && entry.name == 'table') {\n            wasFixed = fixTable(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if (entry.type == 'insert' && entry.name == 'tableRow') {\n            wasFixed = fixTableRow(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if (entry.type == 'insert' && entry.name == 'tableCell') {\n            wasFixed = fixTableCellContent(entry.position.nodeAfter, writer) || wasFixed;\n        }\n        if ((entry.type == 'remove' || entry.type == 'insert') && checkTableCellChange(entry)) {\n            wasFixed = fixTableCellContent(entry.position.parent, writer) || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cells in a table.\n */ function fixTable(table, writer) {\n    let wasFixed = false;\n    for (const row of table.getChildren()){\n        if (row.is('element', 'tableRow')) {\n            wasFixed = fixTableRow(row, writer) || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cells in a table row.\n */ function fixTableRow(tableRow, writer) {\n    let wasFixed = false;\n    for (const tableCell of tableRow.getChildren()){\n        wasFixed = fixTableCellContent(tableCell, writer) || wasFixed;\n    }\n    return wasFixed;\n}\n/**\n * Fixes all table cell content by:\n * - Adding a paragraph to a table cell without any child.\n * - Wrapping direct $text in a `<paragraph>`.\n */ function fixTableCellContent(tableCell, writer) {\n    // Insert paragraph to an empty table cell.\n    if (tableCell.childCount == 0) {\n        // @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: insert paragraph in empty cell.' );\n        writer.insertElement('paragraph', tableCell);\n        return true;\n    }\n    // Check table cell children for directly placed text nodes.\n    // Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n    const textNodes = Array.from(tableCell.getChildren()).filter((child)=>child.is('$text'));\n    // @if CK_DEBUG_TABLE // textNodes.length && console.log( 'Post-fixing table: wrap cell content with paragraph.' );\n    for (const child of textNodes){\n        writer.wrap(writer.createRangeOn(child), 'paragraph');\n    }\n    // Return true when there were text nodes to fix.\n    return !!textNodes.length;\n}\n/**\n * Checks if a differ change should fix the table cell. This happens on:\n * - Removing content from the table cell (i.e. `tableCell` can be left empty).\n * - Adding a text node directly into a table cell.\n */ function checkTableCellChange(entry) {\n    if (!entry.position.parent.is('element', 'tableCell')) {\n        return false;\n    }\n    return entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n\n/**\n * A table headings refresh handler which marks the table cells or rows in the differ to have it re-rendered\n * if the headings attribute changed.\n *\n * Table heading rows and heading columns are represented in the model by a `headingRows` and `headingColumns` attributes.\n *\n * When table headings attribute changes, all the cells/rows are marked to re-render to change between `<td>` and `<th>`.\n */ function tableHeadingsRefreshHandler(model, editing) {\n    const differ = model.document.differ;\n    for (const change of differ.getChanges()){\n        let table;\n        let isRowChange = false;\n        if (change.type == 'attribute') {\n            const element = change.range.start.nodeAfter;\n            if (!element || !element.is('element', 'table')) {\n                continue;\n            }\n            if (change.attributeKey != 'headingRows' && change.attributeKey != 'headingColumns') {\n                continue;\n            }\n            table = element;\n            isRowChange = change.attributeKey == 'headingRows';\n        } else if (change.name == 'tableRow' || change.name == 'tableCell') {\n            table = change.position.findAncestor('table');\n            isRowChange = change.name == 'tableRow';\n        }\n        if (!table) {\n            continue;\n        }\n        const headingRows = table.getAttribute('headingRows') || 0;\n        const headingColumns = table.getAttribute('headingColumns') || 0;\n        const tableWalker = new TableWalker(table);\n        for (const tableSlot of tableWalker){\n            const isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n            const expectedElementName = isHeading ? 'th' : 'td';\n            const viewElement = editing.mapper.toViewElement(tableSlot.cell);\n            if (viewElement && viewElement.is('element') && viewElement.name != expectedElementName) {\n                editing.reconvertItem(isRowChange ? tableSlot.cell.parent : tableSlot.cell);\n            }\n        }\n    }\n}\n\n/**\n * A table cell refresh handler which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it does not have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added, we need to ensure that the first `paragraph` is\n * re-rendered so it changes from `<span>` to `<p>`. The easiest way to do it is to re-render the entire table cell.\n */ function tableCellRefreshHandler(model, editing) {\n    const differ = model.document.differ;\n    // Stores cells to be refreshed, so the table cell will be refreshed once for multiple changes.\n    const cellsToCheck = new Set();\n    for (const change of differ.getChanges()){\n        const parent = change.type == 'attribute' ? change.range.start.parent : change.position.parent;\n        if (parent.is('element', 'tableCell')) {\n            cellsToCheck.add(parent);\n        }\n    }\n    for (const tableCell of cellsToCheck.values()){\n        const paragraphsToRefresh = Array.from(tableCell.getChildren()).filter((child)=>shouldRefresh(child, editing.mapper));\n        for (const paragraph of paragraphsToRefresh){\n            editing.reconvertItem(paragraph);\n        }\n    }\n}\n/**\n * Check if given model element needs refreshing.\n */ function shouldRefresh(child, mapper) {\n    if (!child.is('element', 'paragraph')) {\n        return false;\n    }\n    const viewElement = mapper.toViewElement(child);\n    if (!viewElement) {\n        return false;\n    }\n    return isSingleParagraphWithoutAttributes(child) !== viewElement.is('element', 'span');\n}\n\n/**\n * The table editing feature.\n */ class TableEditing extends Plugin {\n    /**\n\t * Handlers for creating additional slots in the table.\n\t */ _additionalSlots;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._additionalSlots = [];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const conversion = editor.conversion;\n        const tableUtils = editor.plugins.get(TableUtils);\n        schema.register('table', {\n            inheritAllFrom: '$blockObject',\n            allowAttributes: [\n                'headingRows',\n                'headingColumns'\n            ]\n        });\n        schema.register('tableRow', {\n            allowIn: 'table',\n            isLimit: true\n        });\n        schema.register('tableCell', {\n            allowContentOf: '$container',\n            allowIn: 'tableRow',\n            allowAttributes: [\n                'colspan',\n                'rowspan'\n            ],\n            isLimit: true,\n            isSelectable: true\n        });\n        // Figure conversion.\n        conversion.for('upcast').add(upcastTableFigure());\n        // Table conversion.\n        conversion.for('upcast').add(upcastTable());\n        conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: 'table',\n                attributes: [\n                    'headingRows'\n                ]\n            },\n            view: downcastTable(tableUtils, {\n                asWidget: true,\n                additionalSlots: this._additionalSlots\n            })\n        });\n        conversion.for('dataDowncast').elementToStructure({\n            model: {\n                name: 'table',\n                attributes: [\n                    'headingRows'\n                ]\n            },\n            view: downcastTable(tableUtils, {\n                additionalSlots: this._additionalSlots\n            })\n        });\n        // Table row conversion.\n        conversion.for('upcast').elementToElement({\n            model: 'tableRow',\n            view: 'tr'\n        });\n        conversion.for('upcast').add(skipEmptyTableRow());\n        conversion.for('downcast').elementToElement({\n            model: 'tableRow',\n            view: downcastRow()\n        });\n        // Table cell conversion.\n        conversion.for('upcast').elementToElement({\n            model: 'tableCell',\n            view: 'td'\n        });\n        conversion.for('upcast').elementToElement({\n            model: 'tableCell',\n            view: 'th'\n        });\n        conversion.for('upcast').add(ensureParagraphInTableCell('td'));\n        conversion.for('upcast').add(ensureParagraphInTableCell('th'));\n        conversion.for('editingDowncast').elementToElement({\n            model: 'tableCell',\n            view: downcastCell({\n                asWidget: true\n            })\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'tableCell',\n            view: downcastCell()\n        });\n        // Duplicates code - needed to properly refresh paragraph inside a table cell.\n        conversion.for('editingDowncast').elementToElement({\n            model: 'paragraph',\n            view: convertParagraphInTableCell({\n                asWidget: true\n            }),\n            converterPriority: 'high'\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'paragraph',\n            view: convertParagraphInTableCell(),\n            converterPriority: 'high'\n        });\n        // Table attributes conversion.\n        conversion.for('downcast').attributeToAttribute({\n            model: 'colspan',\n            view: 'colspan'\n        });\n        conversion.for('upcast').attributeToAttribute({\n            model: {\n                key: 'colspan',\n                value: upcastCellSpan('colspan')\n            },\n            view: 'colspan'\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: 'rowspan',\n            view: 'rowspan'\n        });\n        conversion.for('upcast').attributeToAttribute({\n            model: {\n                key: 'rowspan',\n                value: upcastCellSpan('rowspan')\n            },\n            view: 'rowspan'\n        });\n        // Define the config.\n        editor.config.define('table.defaultHeadings.rows', 0);\n        editor.config.define('table.defaultHeadings.columns', 0);\n        // Define all the commands.\n        editor.commands.add('insertTable', new InsertTableCommand(editor));\n        editor.commands.add('insertTableRowAbove', new InsertRowCommand(editor, {\n            order: 'above'\n        }));\n        editor.commands.add('insertTableRowBelow', new InsertRowCommand(editor, {\n            order: 'below'\n        }));\n        editor.commands.add('insertTableColumnLeft', new InsertColumnCommand(editor, {\n            order: 'left'\n        }));\n        editor.commands.add('insertTableColumnRight', new InsertColumnCommand(editor, {\n            order: 'right'\n        }));\n        editor.commands.add('removeTableRow', new RemoveRowCommand(editor));\n        editor.commands.add('removeTableColumn', new RemoveColumnCommand(editor));\n        editor.commands.add('splitTableCellVertically', new SplitCellCommand(editor, {\n            direction: 'vertically'\n        }));\n        editor.commands.add('splitTableCellHorizontally', new SplitCellCommand(editor, {\n            direction: 'horizontally'\n        }));\n        editor.commands.add('mergeTableCells', new MergeCellsCommand(editor));\n        editor.commands.add('mergeTableCellRight', new MergeCellCommand(editor, {\n            direction: 'right'\n        }));\n        editor.commands.add('mergeTableCellLeft', new MergeCellCommand(editor, {\n            direction: 'left'\n        }));\n        editor.commands.add('mergeTableCellDown', new MergeCellCommand(editor, {\n            direction: 'down'\n        }));\n        editor.commands.add('mergeTableCellUp', new MergeCellCommand(editor, {\n            direction: 'up'\n        }));\n        editor.commands.add('setTableColumnHeader', new SetHeaderColumnCommand(editor));\n        editor.commands.add('setTableRowHeader', new SetHeaderRowCommand(editor));\n        editor.commands.add('selectTableRow', new SelectRowCommand(editor));\n        editor.commands.add('selectTableColumn', new SelectColumnCommand(editor));\n        injectTableLayoutPostFixer(model);\n        injectTableCellParagraphPostFixer(model);\n        this.listenTo(model.document, 'change:data', ()=>{\n            tableHeadingsRefreshHandler(model, editor.editing);\n            tableCellRefreshHandler(model, editor.editing);\n        });\n    }\n    /**\n\t * Registers downcast handler for the additional table slot.\n\t */ registerAdditionalSlot(slotHandler) {\n        this._additionalSlots.push(slotHandler);\n    }\n}\n/**\n * Returns fixed colspan and rowspan attrbutes values.\n *\n * @param type colspan or rowspan.\n * @returns conversion value function.\n */ function upcastCellSpan(type) {\n    return (cell)=>{\n        const span = parseInt(cell.getAttribute(type));\n        if (Number.isNaN(span) || span <= 0) {\n            return null;\n        }\n        return span;\n    };\n}\n\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n */ class InsertTableView extends View {\n    /**\n\t * A collection of table size box items.\n\t */ items;\n    /**\n\t * Listen to `keydown` events fired in this view's main element.\n\t */ keystrokes;\n    /**\n\t * Tracks information about the DOM focus in the grid.\n\t */ focusTracker;\n    /**\n\t * @inheritDoc\n\t */ constructor(locale){\n        super(locale);\n        const bind = this.bindTemplate;\n        this.items = this._createGridCollection();\n        this.keystrokes = new KeystrokeHandler();\n        this.focusTracker = new FocusTracker();\n        this.set('rows', 0);\n        this.set('columns', 0);\n        this.bind('label').to(this, 'columns', this, 'rows', (columns, rows)=>`${rows} × ${columns}`);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck'\n                ]\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck-insert-table-dropdown__grid'\n                        ]\n                    },\n                    on: {\n                        'mouseover@.ck-insert-table-dropdown-grid-box': bind.to('boxover')\n                    },\n                    children: this.items\n                },\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-insert-table-dropdown__label'\n                        ],\n                        'aria-hidden': true\n                    },\n                    children: [\n                        {\n                            text: bind.to('label')\n                        }\n                    ]\n                }\n            ],\n            on: {\n                mousedown: bind.to((evt)=>{\n                    evt.preventDefault();\n                }),\n                click: bind.to(()=>{\n                    this.fire('execute');\n                })\n            }\n        });\n        // #rows and #columns are set via changes to #focusTracker on mouse over.\n        this.on('boxover', (evt, domEvt)=>{\n            const { row, column } = domEvt.target.dataset;\n            this.items.get((parseInt(row, 10) - 1) * 10 + (parseInt(column, 10) - 1)).focus();\n        });\n        // This allows the #rows and #columns to be updated when:\n        // * the user navigates the grid using the keyboard,\n        // * the user moves the mouse over grid items.\n        this.focusTracker.on('change:focusedElement', (evt, name, focusedElement)=>{\n            if (!focusedElement) {\n                return;\n            }\n            const { row, column } = focusedElement.dataset;\n            // As row & column indexes are zero-based transform it to number of selected rows & columns.\n            this.set({\n                rows: parseInt(row),\n                columns: parseInt(column)\n            });\n        });\n        this.on('change:columns', ()=>this._highlightGridBoxes());\n        this.on('change:rows', ()=>this._highlightGridBoxes());\n    }\n    render() {\n        super.render();\n        addKeyboardHandlingForGrid({\n            keystrokeHandler: this.keystrokes,\n            focusTracker: this.focusTracker,\n            gridItems: this.items,\n            numberOfColumns: 10,\n            uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n        });\n        for (const item of this.items){\n            this.focusTracker.add(item.element);\n        }\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Resets the rows and columns selection.\n\t */ reset() {\n        this.set({\n            rows: 1,\n            columns: 1\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ focus() {\n        this.items.get(0).focus();\n    }\n    /**\n\t * @inheritDoc\n\t */ focusLast() {\n        this.items.get(0).focus();\n    }\n    /**\n\t * Highlights grid boxes depending on rows and columns selected.\n\t */ _highlightGridBoxes() {\n        const rows = this.rows;\n        const columns = this.columns;\n        this.items.map((boxView, index)=>{\n            // Translate box index to the row & column index.\n            const itemRow = Math.floor(index / 10);\n            const itemColumn = index % 10;\n            // Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n            const isOn = itemRow < rows && itemColumn < columns;\n            boxView.set('isOn', isOn);\n        });\n    }\n    /**\n\t * Creates a new Button for the grid.\n\t *\n\t * @param locale The locale instance.\n\t * @param row Row number.\n\t * @param column Column number.\n\t * @param label The grid button label.\n\t */ _createGridButton(locale, row, column, label) {\n        const button = new ButtonView(locale);\n        button.set({\n            label,\n            class: 'ck-insert-table-dropdown-grid-box'\n        });\n        button.extendTemplate({\n            attributes: {\n                'data-row': row,\n                'data-column': column\n            }\n        });\n        return button;\n    }\n    /**\n\t * @returns A view collection containing boxes to be placed in a table grid.\n\t */ _createGridCollection() {\n        const boxes = [];\n        // Add grid boxes to table selection view.\n        for(let index = 0; index < 100; index++){\n            const row = Math.floor(index / 10);\n            const column = index % 10;\n            const label = `${row + 1} × ${column + 1}`;\n            boxes.push(this._createGridButton(this.locale, row + 1, column + 1, label));\n        }\n        return this.createCollection(boxes);\n    }\n}\n\nvar tableColumnIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M18 7v1H2V7h16zm0 5v1H2v-1h16z\\\" opacity=\\\".6\\\"/><path d=\\\"M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z\\\"/></svg>\";\n\nvar tableRowIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v16h-1V2z\\\" opacity=\\\".6\\\"/><path d=\\\"M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z\\\"/></svg>\";\n\nvar tableMergeCellIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z\\\"/></svg>\";\n\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'menuBar:insertTable'` menu bar menu,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` split button.\n *\n * The `'tableColumn'`, `'tableRow'` and `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n */ class TableUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        const contentLanguageDirection = editor.locale.contentLanguageDirection;\n        const isContentLtr = contentLanguageDirection === 'ltr';\n        editor.ui.componentFactory.add('insertTable', (locale)=>{\n            const command = editor.commands.get('insertTable');\n            const dropdownView = createDropdown(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: icons.table,\n                label: t('Insert table'),\n                tooltip: true\n            });\n            let insertTableView;\n            dropdownView.on('change:isOpen', ()=>{\n                if (insertTableView) {\n                    return;\n                }\n                // Prepare custom view for dropdown's panel.\n                insertTableView = new InsertTableView(locale);\n                dropdownView.panelView.children.add(insertTableView);\n                insertTableView.delegate('execute').to(dropdownView);\n                dropdownView.on('execute', ()=>{\n                    editor.execute('insertTable', {\n                        rows: insertTableView.rows,\n                        columns: insertTableView.columns\n                    });\n                    editor.editing.view.focus();\n                });\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('menuBar:insertTable', (locale)=>{\n            const command = editor.commands.get('insertTable');\n            const menuView = new MenuBarMenuView(locale);\n            const insertTableView = new InsertTableView(locale);\n            insertTableView.delegate('execute').to(menuView);\n            menuView.on('change:isOpen', (event, name, isOpen)=>{\n                if (!isOpen) {\n                    insertTableView.reset();\n                }\n            });\n            insertTableView.on('execute', ()=>{\n                editor.execute('insertTable', {\n                    rows: insertTableView.rows,\n                    columns: insertTableView.columns\n                });\n                editor.editing.view.focus();\n            });\n            menuView.buttonView.set({\n                label: t('Table'),\n                icon: icons.table\n            });\n            menuView.panelView.children.add(insertTableView);\n            menuView.bind('isEnabled').to(command);\n            return menuView;\n        });\n        editor.ui.componentFactory.add('tableColumn', (locale)=>{\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableColumnHeader',\n                        label: t('Header column'),\n                        bindIsOn: true\n                    }\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n                        label: t('Insert column left')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n                        label: t('Insert column right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableColumn',\n                        label: t('Delete column')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'selectTableColumn',\n                        label: t('Select column')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Column'), tableColumnIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('tableRow', (locale)=>{\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableRowHeader',\n                        label: t('Header row'),\n                        bindIsOn: true\n                    }\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowAbove',\n                        label: t('Insert row above')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowBelow',\n                        label: t('Insert row below')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableRow',\n                        label: t('Delete row')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'selectTableRow',\n                        label: t('Select row')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('Row'), tableRowIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('mergeTableCells', (locale)=>{\n            const options = [\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellUp',\n                        label: t('Merge cell up')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n                        label: t('Merge cell right')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellDown',\n                        label: t('Merge cell down')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n                        label: t('Merge cell left')\n                    }\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellVertically',\n                        label: t('Split cell vertically')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellHorizontally',\n                        label: t('Split cell horizontally')\n                    }\n                }\n            ];\n            return this._prepareMergeSplitButtonDropdown(t('Merge cells'), tableMergeCellIcon, options, locale);\n        });\n    }\n    /**\n\t * Creates a dropdown view from a set of options.\n\t *\n\t * @param label The dropdown button label.\n\t * @param icon An icon for the dropdown button.\n\t * @param options The list of options for the dropdown.\n\t */ _prepareDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale);\n        const commands = this._fillDropdownWithListOptions(dropdownView, options);\n        // Decorate dropdown's button.\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        // Make dropdown button disabled when all options are disabled.\n        dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled)=>{\n            return areEnabled.some((isEnabled)=>isEnabled);\n        });\n        this.listenTo(dropdownView, 'execute', (evt)=>{\n            editor.execute(evt.source.commandName);\n            // Toggling a switch button view should not move the focus to the editable.\n            if (!(evt.source instanceof SwitchButtonView)) {\n                editor.editing.view.focus();\n            }\n        });\n        return dropdownView;\n    }\n    /**\n\t * Creates a dropdown view with a {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} for\n\t * merge (and split)–related commands.\n\t *\n\t * @param label The dropdown button label.\n\t * @param icon An icon for the dropdown button.\n\t * @param options The list of options for the dropdown.\n\t */ _prepareMergeSplitButtonDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale, SplitButtonView);\n        const mergeCommandName = 'mergeTableCells';\n        // Main command.\n        const mergeCommand = editor.commands.get(mergeCommandName);\n        // Subcommands in the dropdown.\n        const commands = this._fillDropdownWithListOptions(dropdownView, options);\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true,\n            isEnabled: true\n        });\n        // Make dropdown button disabled when all options are disabled together with the main command.\n        dropdownView.bind('isEnabled').toMany([\n            mergeCommand,\n            ...commands\n        ], 'isEnabled', (...areEnabled)=>{\n            return areEnabled.some((isEnabled)=>isEnabled);\n        });\n        // Merge selected table cells when the main part of the split button is clicked.\n        this.listenTo(dropdownView.buttonView, 'execute', ()=>{\n            editor.execute(mergeCommandName);\n            editor.editing.view.focus();\n        });\n        // Execute commands for events coming from the list in the dropdown panel.\n        this.listenTo(dropdownView, 'execute', (evt)=>{\n            editor.execute(evt.source.commandName);\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    }\n    /**\n\t * Injects a {@link module:ui/list/listview~ListView} into the passed dropdown with buttons\n\t * which execute editor commands as configured in passed options.\n\t *\n\t * @param options The list of options for the dropdown.\n\t * @returns Commands the list options are interacting with.\n\t */ _fillDropdownWithListOptions(dropdownView, options) {\n        const editor = this.editor;\n        const commands = [];\n        const itemDefinitions = new Collection();\n        for (const option of options){\n            addListOption(option, editor, commands, itemDefinitions);\n        }\n        addListToDropdown(dropdownView, itemDefinitions);\n        return commands;\n    }\n}\n/**\n * Adds an option to a list view.\n *\n * @param option A configuration option.\n * @param commands The list of commands to update.\n * @param itemDefinitions A collection of dropdown items to update with the given option.\n */ function addListOption(option, editor, commands, itemDefinitions) {\n    if (option.type === 'button' || option.type === 'switchbutton') {\n        const model = option.model = new ViewModel(option.model);\n        const { commandName, bindIsOn } = option.model;\n        const command = editor.commands.get(commandName);\n        commands.push(command);\n        model.set({\n            commandName\n        });\n        model.bind('isEnabled').to(command);\n        if (bindIsOn) {\n            model.bind('isOn').to(command, 'value');\n        }\n        model.set({\n            withText: true\n        });\n    }\n    itemDefinitions.add(option);\n}\n\n/**\n * This plugin enables the advanced table cells, rows and columns selection.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */ class TableSelection extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableSelection';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableUtils,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        this.listenTo(model, 'deleteContent', (evt, args)=>this._handleDeleteContent(evt, args), {\n            priority: 'high'\n        });\n        this.listenTo(view.document, 'insertText', (evt, data)=>this._handleInsertTextEvent(evt, data), {\n            priority: 'high'\n        });\n        this._defineSelectionConverter();\n        this._enablePluginDisabling(); // sic!\n    }\n    /**\n\t * Returns the currently selected table cells or `null` if it is not a table cells selection.\n\t */ getSelectedTableCells() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selection = this.editor.model.document.selection;\n        const selectedCells = tableUtils.getSelectedTableCells(selection);\n        if (selectedCells.length == 0) {\n            return null;\n        }\n        // This should never happen, but let's know if it ever happens.\n        // @if CK_DEBUG //\tif ( selectedCells.length != selection.rangeCount ) {\n        // @if CK_DEBUG //\t\tconsole.warn( 'Mixed selection warning. The selection contains table cells and some other ranges.' );\n        // @if CK_DEBUG //\t}\n        return selectedCells;\n    }\n    /**\n\t * Returns the selected table fragment as a document fragment.\n\t */ getSelectionAsFragment() {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selectedCells = this.getSelectedTableCells();\n        if (!selectedCells) {\n            return null;\n        }\n        return this.editor.model.change((writer)=>{\n            const documentFragment = writer.createDocumentFragment();\n            const { first: firstColumn, last: lastColumn } = tableUtils.getColumnIndexes(selectedCells);\n            const { first: firstRow, last: lastRow } = tableUtils.getRowIndexes(selectedCells);\n            const sourceTable = selectedCells[0].findAncestor('table');\n            let adjustedLastRow = lastRow;\n            let adjustedLastColumn = lastColumn;\n            // If the selection is rectangular there could be a case of all cells in the last row/column spanned over\n            // next row/column so the real lastRow/lastColumn should be updated.\n            if (tableUtils.isSelectionRectangular(selectedCells)) {\n                const dimensions = {\n                    firstColumn,\n                    lastColumn,\n                    firstRow,\n                    lastRow\n                };\n                adjustedLastRow = adjustLastRowIndex(sourceTable, dimensions);\n                adjustedLastColumn = adjustLastColumnIndex(sourceTable, dimensions);\n            }\n            const cropDimensions = {\n                startRow: firstRow,\n                startColumn: firstColumn,\n                endRow: adjustedLastRow,\n                endColumn: adjustedLastColumn\n            };\n            const table = cropTableToDimensions(sourceTable, cropDimensions, writer);\n            writer.insert(table, documentFragment, 0);\n            return documentFragment;\n        });\n    }\n    /**\n\t * Sets the model selection based on given anchor and target cells (can be the same cell).\n\t * Takes care of setting the backward flag.\n\t *\n\t * ```ts\n\t * const modelRoot = editor.model.document.getRoot();\n\t * const firstCell = modelRoot.getNodeByPath( [ 0, 0, 0 ] );\n\t * const lastCell = modelRoot.getNodeByPath( [ 0, 0, 1 ] );\n\t *\n\t * const tableSelection = editor.plugins.get( 'TableSelection' );\n\t * tableSelection.setCellSelection( firstCell, lastCell );\n\t * ```\n\t */ setCellSelection(anchorCell, targetCell) {\n        const cellsToSelect = this._getCellsToSelect(anchorCell, targetCell);\n        this.editor.model.change((writer)=>{\n            writer.setSelection(cellsToSelect.cells.map((cell)=>writer.createRangeOn(cell)), {\n                backward: cellsToSelect.backward\n            });\n        });\n    }\n    /**\n\t * Returns the focus cell from the current selection.\n\t */ getFocusCell() {\n        const selection = this.editor.model.document.selection;\n        const focusCellRange = [\n            ...selection.getRanges()\n        ].pop();\n        const element = focusCellRange.getContainedElement();\n        if (element && element.is('element', 'tableCell')) {\n            return element;\n        }\n        return null;\n    }\n    /**\n\t * Returns the anchor cell from the current selection.\n\t */ getAnchorCell() {\n        const selection = this.editor.model.document.selection;\n        const anchorCellRange = first(selection.getRanges());\n        const element = anchorCellRange.getContainedElement();\n        if (element && element.is('element', 'tableCell')) {\n            return element;\n        }\n        return null;\n    }\n    /**\n\t * Defines a selection converter which marks the selected cells with a specific class.\n\t *\n\t * The real DOM selection is put in the last cell. Since the order of ranges is dependent on whether the\n\t * selection is backward or not, the last cell will usually be close to the \"focus\" end of the selection\n\t * (a selection has anchor and focus).\n\t *\n\t * The real DOM selection is then hidden with CSS.\n\t */ _defineSelectionConverter() {\n        const editor = this.editor;\n        const highlighted = new Set();\n        editor.conversion.for('editingDowncast').add((dispatcher)=>dispatcher.on('selection', (evt, data, conversionApi)=>{\n                const viewWriter = conversionApi.writer;\n                clearHighlightedTableCells(viewWriter);\n                const selectedCells = this.getSelectedTableCells();\n                if (!selectedCells) {\n                    return;\n                }\n                for (const tableCell of selectedCells){\n                    const viewElement = conversionApi.mapper.toViewElement(tableCell);\n                    viewWriter.addClass('ck-editor__editable_selected', viewElement);\n                    highlighted.add(viewElement);\n                }\n                const lastViewCell = conversionApi.mapper.toViewElement(selectedCells[selectedCells.length - 1]);\n                viewWriter.setSelection(lastViewCell, 0);\n            }, {\n                priority: 'lowest'\n            }));\n        function clearHighlightedTableCells(viewWriter) {\n            for (const previouslyHighlighted of highlighted){\n                viewWriter.removeClass('ck-editor__editable_selected', previouslyHighlighted);\n            }\n            highlighted.clear();\n        }\n    }\n    /**\n\t * Creates a listener that reacts to changes in {@link #isEnabled} and, if the plugin was disabled,\n\t * it collapses the multi-cell selection to a regular selection placed inside a table cell.\n\t *\n\t * This listener helps features that disable the table selection plugin bring the selection\n\t * to a clear state they can work with (for instance, because they don't support multiple cell selection).\n\t */ _enablePluginDisabling() {\n        const editor = this.editor;\n        this.on('change:isEnabled', ()=>{\n            if (!this.isEnabled) {\n                const selectedCells = this.getSelectedTableCells();\n                if (!selectedCells) {\n                    return;\n                }\n                editor.model.change((writer)=>{\n                    const position = writer.createPositionAt(selectedCells[0], 0);\n                    const range = editor.model.schema.getNearestSelectionRange(position);\n                    writer.setSelection(range);\n                });\n            }\n        });\n    }\n    /**\n\t * Overrides the default `model.deleteContent()` behavior over a selected table fragment.\n\t *\n\t * @param args Delete content method arguments.\n\t */ _handleDeleteContent(event, args) {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const selection = args[0];\n        const options = args[1];\n        const model = this.editor.model;\n        const isBackward = !options || options.direction == 'backward';\n        const selectedTableCells = tableUtils.getSelectedTableCells(selection);\n        if (!selectedTableCells.length) {\n            return;\n        }\n        event.stop();\n        model.change((writer)=>{\n            const tableCellToSelect = selectedTableCells[isBackward ? selectedTableCells.length - 1 : 0];\n            model.change((writer)=>{\n                for (const tableCell of selectedTableCells){\n                    model.deleteContent(writer.createSelection(tableCell, 'in'));\n                }\n            });\n            const rangeToSelect = model.schema.getNearestSelectionRange(writer.createPositionAt(tableCellToSelect, 0));\n            // Note: we ignore the case where rangeToSelect may be null because deleteContent() will always (unless someone broke it)\n            // create an empty paragraph to accommodate the selection.\n            if (selection.is('documentSelection')) {\n                writer.setSelection(rangeToSelect);\n            } else {\n                selection.setTo(rangeToSelect);\n            }\n        });\n    }\n    /**\n\t * This handler makes it possible to remove the content of all selected cells by starting to type.\n\t * If you take a look at {@link #_defineSelectionConverter} you will find out that despite the multi-cell selection being set\n\t * in the model, the view selection is collapsed in the last cell (because most browsers are unable to render multi-cell selections;\n\t * yes, it's a hack).\n\t *\n\t * When multiple cells are selected in the model and the user starts to type, the\n\t * {@link module:engine/view/document~Document#event:insertText} event carries information provided by the\n\t * beforeinput DOM  event, that in turn only knows about this collapsed DOM selection in the last cell.\n\t *\n\t * As a result, the selected cells have no chance to be cleaned up. To fix this, this listener intercepts\n\t * the event and injects the custom view selection in the data that translates correctly to the actual state\n\t * of the multi-cell selection in the model.\n\t *\n\t * @param data Insert text event data.\n\t */ _handleInsertTextEvent(evt, data) {\n        const editor = this.editor;\n        const selectedCells = this.getSelectedTableCells();\n        if (!selectedCells) {\n            return;\n        }\n        const view = editor.editing.view;\n        const mapper = editor.editing.mapper;\n        const viewRanges = selectedCells.map((tableCell)=>view.createRangeOn(mapper.toViewElement(tableCell)));\n        data.selection = view.createSelection(viewRanges);\n    }\n    /**\n\t * Returns an array of table cells that should be selected based on the\n\t * given anchor cell and target (focus) cell.\n\t *\n\t * The cells are returned in a reverse direction if the selection is backward.\n\t */ _getCellsToSelect(anchorCell, targetCell) {\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const startLocation = tableUtils.getCellLocation(anchorCell);\n        const endLocation = tableUtils.getCellLocation(targetCell);\n        const startRow = Math.min(startLocation.row, endLocation.row);\n        const endRow = Math.max(startLocation.row, endLocation.row);\n        const startColumn = Math.min(startLocation.column, endLocation.column);\n        const endColumn = Math.max(startLocation.column, endLocation.column);\n        // 2-dimensional array of the selected cells to ease flipping the order of cells for backward selections.\n        const selectionMap = new Array(endRow - startRow + 1).fill(null).map(()=>[]);\n        const walkerOptions = {\n            startRow,\n            endRow,\n            startColumn,\n            endColumn\n        };\n        for (const { row, cell } of new TableWalker(anchorCell.findAncestor('table'), walkerOptions)){\n            selectionMap[row - startRow].push(cell);\n        }\n        const flipVertically = endLocation.row < startLocation.row;\n        const flipHorizontally = endLocation.column < startLocation.column;\n        if (flipVertically) {\n            selectionMap.reverse();\n        }\n        if (flipHorizontally) {\n            selectionMap.forEach((row)=>row.reverse());\n        }\n        return {\n            cells: selectionMap.flat(),\n            backward: flipVertically || flipHorizontally\n        };\n    }\n}\n\n/**\n * This plugin adds support for copying/cutting/pasting fragments of tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */ class TableClipboard extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableClipboard';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardMarkersUtils,\n            ClipboardPipeline,\n            TableSelection,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        this.listenTo(viewDocument, 'copy', (evt, data)=>this._onCopyCut(evt, data));\n        this.listenTo(viewDocument, 'cut', (evt, data)=>this._onCopyCut(evt, data));\n        this.listenTo(editor.model, 'insertContent', (evt, [content, selectable])=>this._onInsertContent(evt, content, selectable), {\n            priority: 'high'\n        });\n        this.decorate('_replaceTableSlotCell');\n    }\n    /**\n\t * Copies table content to a clipboard on \"copy\" & \"cut\" events.\n\t *\n\t * @param evt An object containing information about the handled event.\n\t * @param data Clipboard event data.\n\t */ _onCopyCut(evt, data) {\n        const view = this.editor.editing.view;\n        const tableSelection = this.editor.plugins.get(TableSelection);\n        const clipboardMarkersUtils = this.editor.plugins.get(ClipboardMarkersUtils);\n        if (!tableSelection.getSelectedTableCells()) {\n            return;\n        }\n        if (evt.name == 'cut' && !this.editor.model.canEditAt(this.editor.model.document.selection)) {\n            return;\n        }\n        data.preventDefault();\n        evt.stop();\n        this.editor.model.enqueueChange({\n            isUndoable: evt.name === 'cut'\n        }, ()=>{\n            const documentFragment = clipboardMarkersUtils._copySelectedFragmentWithMarkers(evt.name, this.editor.model.document.selection, ()=>tableSelection.getSelectionAsFragment());\n            view.document.fire('clipboardOutput', {\n                dataTransfer: data.dataTransfer,\n                content: this.editor.data.toView(documentFragment),\n                method: evt.name\n            });\n        });\n    }\n    /**\n\t * Overrides default {@link module:engine/model/model~Model#insertContent `model.insertContent()`} method to handle pasting table inside\n\t * selected table fragment.\n\t *\n\t * Depending on selected table fragment:\n\t * - If a selected table fragment is smaller than paste table it will crop pasted table to match dimensions.\n\t * - If dimensions are equal it will replace selected table fragment with a pasted table contents.\n\t *\n\t * @param content The content to insert.\n\t * @param selectable The selection into which the content should be inserted.\n\t * If not provided the current model document selection will be used.\n\t */ _onInsertContent(evt, content, selectable) {\n        if (selectable && !selectable.is('documentSelection')) {\n            return;\n        }\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const clipboardMarkersUtils = this.editor.plugins.get(ClipboardMarkersUtils);\n        // We might need to crop table before inserting so reference might change.\n        const pastedTable = this.getTableIfOnlyTableInContent(content, model);\n        if (!pastedTable) {\n            return;\n        }\n        const selectedTableCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        if (!selectedTableCells.length) {\n            removeEmptyRowsColumns(pastedTable, tableUtils);\n            return;\n        }\n        // Override default model.insertContent() handling at this point.\n        evt.stop();\n        if (content.is('documentFragment')) {\n            clipboardMarkersUtils._pasteMarkersIntoTransformedElement(content.markers, (writer)=>this._replaceSelectedCells(pastedTable, selectedTableCells, writer));\n        } else {\n            this.editor.model.change((writer)=>{\n                this._replaceSelectedCells(pastedTable, selectedTableCells, writer);\n            });\n        }\n    }\n    /**\n\t * Inserts provided `selectedTableCells` into `pastedTable`.\n\t */ _replaceSelectedCells(pastedTable, selectedTableCells, writer) {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const pastedDimensions = {\n            width: tableUtils.getColumns(pastedTable),\n            height: tableUtils.getRows(pastedTable)\n        };\n        // Prepare the table for pasting.\n        const selection = prepareTableForPasting(selectedTableCells, pastedDimensions, writer, tableUtils);\n        // Beyond this point we operate on a fixed content table with rectangular selection and proper last row/column values.\n        const selectionHeight = selection.lastRow - selection.firstRow + 1;\n        const selectionWidth = selection.lastColumn - selection.firstColumn + 1;\n        // Crop pasted table if:\n        // - Pasted table dimensions exceeds selection area.\n        // - Pasted table has broken layout (ie some cells sticks out by the table dimensions established by the first and last row).\n        //\n        // Note: The table dimensions are established by the width of the first row and the total number of rows.\n        // It is possible to programmatically create a table that has rows which would have cells anchored beyond first row width but\n        // such table will not be created by other editing solutions.\n        const cropDimensions = {\n            startRow: 0,\n            startColumn: 0,\n            endRow: Math.min(selectionHeight, pastedDimensions.height) - 1,\n            endColumn: Math.min(selectionWidth, pastedDimensions.width) - 1\n        };\n        pastedTable = cropTableToDimensions(pastedTable, cropDimensions, writer);\n        // Content table to which we insert a pasted table.\n        const selectedTable = selectedTableCells[0].findAncestor('table');\n        const cellsToSelect = this._replaceSelectedCellsWithPasted(pastedTable, pastedDimensions, selectedTable, selection, writer);\n        if (this.editor.plugins.get('TableSelection').isEnabled) {\n            // Selection ranges must be sorted because the first and last selection ranges are considered\n            // as anchor/focus cell ranges for multi-cell selection.\n            const selectionRanges = tableUtils.sortRanges(cellsToSelect.map((cell)=>writer.createRangeOn(cell)));\n            writer.setSelection(selectionRanges);\n        } else {\n            // Set selection inside first cell if multi-cell selection is disabled.\n            writer.setSelection(cellsToSelect[0], 0);\n        }\n        return selectedTable;\n    }\n    /**\n\t * Replaces the part of selectedTable with pastedTable.\n\t */ _replaceSelectedCellsWithPasted(pastedTable, pastedDimensions, selectedTable, selection, writer) {\n        const { width: pastedWidth, height: pastedHeight } = pastedDimensions;\n        // Holds two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n        const pastedTableLocationMap = createLocationMap(pastedTable, pastedWidth, pastedHeight);\n        const selectedTableMap = [\n            ...new TableWalker(selectedTable, {\n                startRow: selection.firstRow,\n                endRow: selection.lastRow,\n                startColumn: selection.firstColumn,\n                endColumn: selection.lastColumn,\n                includeAllSlots: true\n            })\n        ];\n        // Selection must be set to pasted cells (some might be removed or new created).\n        const cellsToSelect = [];\n        // Store next cell insert position.\n        let insertPosition;\n        // Content table replace cells algorithm iterates over a selected table fragment and:\n        //\n        // - Removes existing table cells at current slot (location).\n        // - Inserts cell from a pasted table for a matched slots.\n        //\n        // This ensures proper table geometry after the paste\n        for (const tableSlot of selectedTableMap){\n            const { row, column } = tableSlot;\n            // Save the insert position for current row start.\n            if (column === selection.firstColumn) {\n                insertPosition = tableSlot.getPositionBefore();\n            }\n            // Map current table slot location to an pasted table slot location.\n            const pastedRow = row - selection.firstRow;\n            const pastedColumn = column - selection.firstColumn;\n            const pastedCell = pastedTableLocationMap[pastedRow % pastedHeight][pastedColumn % pastedWidth];\n            // Clone cell to insert (to duplicate its attributes and children).\n            // Cloning is required to support repeating pasted table content when inserting to a bigger selection.\n            const cellToInsert = pastedCell ? writer.cloneElement(pastedCell) : null;\n            // Replace the cell from the current slot with new table cell.\n            const newTableCell = this._replaceTableSlotCell(tableSlot, cellToInsert, insertPosition, writer);\n            // The cell was only removed.\n            if (!newTableCell) {\n                continue;\n            }\n            // Trim the cell if it's row/col-spans would exceed selection area.\n            trimTableCellIfNeeded(newTableCell, row, column, selection.lastRow, selection.lastColumn, writer);\n            cellsToSelect.push(newTableCell);\n            insertPosition = writer.createPositionAfter(newTableCell);\n        }\n        // If there are any headings, all the cells that overlap from heading must be splitted.\n        const headingRows = parseInt(selectedTable.getAttribute('headingRows') || '0');\n        const headingColumns = parseInt(selectedTable.getAttribute('headingColumns') || '0');\n        const areHeadingRowsIntersectingSelection = selection.firstRow < headingRows && headingRows <= selection.lastRow;\n        const areHeadingColumnsIntersectingSelection = selection.firstColumn < headingColumns && headingColumns <= selection.lastColumn;\n        if (areHeadingRowsIntersectingSelection) {\n            const columnsLimit = {\n                first: selection.firstColumn,\n                last: selection.lastColumn\n            };\n            const newCells = doHorizontalSplit(selectedTable, headingRows, columnsLimit, writer, selection.firstRow);\n            cellsToSelect.push(...newCells);\n        }\n        if (areHeadingColumnsIntersectingSelection) {\n            const rowsLimit = {\n                first: selection.firstRow,\n                last: selection.lastRow\n            };\n            const newCells = doVerticalSplit(selectedTable, headingColumns, rowsLimit, writer);\n            cellsToSelect.push(...newCells);\n        }\n        return cellsToSelect;\n    }\n    /**\n\t * Replaces a single table slot.\n\t *\n\t * @returns Inserted table cell or null if slot should remain empty.\n\t * @private\n\t */ _replaceTableSlotCell(tableSlot, cellToInsert, insertPosition, writer) {\n        const { cell, isAnchor } = tableSlot;\n        // If the slot is occupied by a cell in a selected table - remove it.\n        // The slot of this cell will be either:\n        // - Replaced by a pasted table cell.\n        // - Spanned by a previously pasted table cell.\n        if (isAnchor) {\n            writer.remove(cell);\n        }\n        // There is no cell to insert (might be spanned by other cell in a pasted table) - advance to the next content table slot.\n        if (!cellToInsert) {\n            return null;\n        }\n        writer.insert(cellToInsert, insertPosition);\n        return cellToInsert;\n    }\n    /**\n\t * Extracts the table for pasting into a table.\n\t *\n\t * @param content The content to insert.\n\t * @param model The editor model.\n\t */ getTableIfOnlyTableInContent(content, model) {\n        if (!content.is('documentFragment') && !content.is('element')) {\n            return null;\n        }\n        // Table passed directly.\n        if (content.is('element', 'table')) {\n            return content;\n        }\n        // We do not support mixed content when pasting table into table.\n        // See: https://github.com/ckeditor/ckeditor5/issues/6817.\n        if (content.childCount == 1 && content.getChild(0).is('element', 'table')) {\n            return content.getChild(0);\n        }\n        // If there are only whitespaces around a table then use that table for pasting.\n        const contentRange = model.createRangeIn(content);\n        for (const element of contentRange.getItems()){\n            if (element.is('element', 'table')) {\n                // Stop checking if there is some content before table.\n                const rangeBefore = model.createRange(contentRange.start, model.createPositionBefore(element));\n                if (model.hasContent(rangeBefore, {\n                    ignoreWhitespaces: true\n                })) {\n                    return null;\n                }\n                // Stop checking if there is some content after table.\n                const rangeAfter = model.createRange(model.createPositionAfter(element), contentRange.end);\n                if (model.hasContent(rangeAfter, {\n                    ignoreWhitespaces: true\n                })) {\n                    return null;\n                }\n                // There wasn't any content neither before nor after.\n                return element;\n            }\n        }\n        return null;\n    }\n}\n/**\n * Prepares a table for pasting and returns adjusted selection dimensions.\n */ function prepareTableForPasting(selectedTableCells, pastedDimensions, writer, tableUtils) {\n    const selectedTable = selectedTableCells[0].findAncestor('table');\n    const columnIndexes = tableUtils.getColumnIndexes(selectedTableCells);\n    const rowIndexes = tableUtils.getRowIndexes(selectedTableCells);\n    const selection = {\n        firstColumn: columnIndexes.first,\n        lastColumn: columnIndexes.last,\n        firstRow: rowIndexes.first,\n        lastRow: rowIndexes.last\n    };\n    // Single cell selected - expand selection to pasted table dimensions.\n    const shouldExpandSelection = selectedTableCells.length === 1;\n    if (shouldExpandSelection) {\n        selection.lastRow += pastedDimensions.height - 1;\n        selection.lastColumn += pastedDimensions.width - 1;\n        expandTableSize(selectedTable, selection.lastRow + 1, selection.lastColumn + 1, tableUtils);\n    }\n    // In case of expanding selection we do not reset the selection so in this case we will always try to fix selection\n    // like in the case of a non-rectangular area. This might be fixed by re-setting selected cells array but this shortcut is safe.\n    if (shouldExpandSelection || !tableUtils.isSelectionRectangular(selectedTableCells)) {\n        // For a non-rectangular selection (ie in which some cells sticks out from a virtual selection rectangle) we need to create\n        // a table layout that has a rectangular selection. This will split cells so the selection become rectangular.\n        // Beyond this point we will operate on fixed content table.\n        splitCellsToRectangularSelection(selectedTable, selection, writer);\n    } else {\n        selection.lastRow = adjustLastRowIndex(selectedTable, selection);\n        selection.lastColumn = adjustLastColumnIndex(selectedTable, selection);\n    }\n    return selection;\n}\n/**\n * Expand table (in place) to expected size.\n */ function expandTableSize(table, expectedHeight, expectedWidth, tableUtils) {\n    const tableWidth = tableUtils.getColumns(table);\n    const tableHeight = tableUtils.getRows(table);\n    if (expectedWidth > tableWidth) {\n        tableUtils.insertColumns(table, {\n            at: tableWidth,\n            columns: expectedWidth - tableWidth\n        });\n    }\n    if (expectedHeight > tableHeight) {\n        tableUtils.insertRows(table, {\n            at: tableHeight,\n            rows: expectedHeight - tableHeight\n        });\n    }\n}\n/**\n * Returns two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n *\n * At given row & column location it might be one of:\n *\n * * cell - cell from pasted table anchored at this location.\n * * null - if no cell is anchored at this location.\n *\n * For instance, from a table below:\n *\n *   +----+----+----+----+\n *   | 00 | 01 | 02 | 03 |\n *   +    +----+----+----+\n *   |    | 11      | 13 |\n *   +----+         +----+\n *   | 20 |         | 23 |\n *   +----+----+----+----+\n *\n * The method will return an array (numbers represents cell element):\n *\n * ```ts\n * const map = [\n *   [ '00', '01', '02', '03' ],\n *   [ null, '11', null, '13' ],\n *   [ '20', null, null, '23' ]\n * ]\n * ```\n *\n * This allows for a quick access to table at give row & column. For instance to access table cell \"13\" from pasted table call:\n *\n * ```ts\n * const cell = map[ 1 ][ 3 ]\n * ```\n */ function createLocationMap(table, width, height) {\n    // Create height x width (row x column) two-dimensional table to store cells.\n    const map = new Array(height).fill(null).map(()=>new Array(width).fill(null));\n    for (const { column, row, cell } of new TableWalker(table)){\n        map[row][column] = cell;\n    }\n    return map;\n}\n/**\n * Make selected cells rectangular by splitting the cells that stand out from a rectangular selection.\n *\n * In the table below a selection is shown with \"::\" and slots with anchor cells are named.\n *\n * +----+----+----+----+----+                    +----+----+----+----+----+\n * | 00 | 01 | 02 | 03      |                    | 00 | 01 | 02 | 03      |\n * +    +----+    +----+----+                    |    ::::::::::::::::----+\n * |    | 11 |    | 13 | 14 |                    |    ::11 |    | 13:: 14 |    <- first row\n * +----+----+    +    +----+                    +----::---|    |   ::----+\n * | 20 | 21 |    |    | 24 |   select cells:    | 20 ::21 |    |   :: 24 |\n * +----+----+    +----+----+     11 -> 33       +----::---|    |---::----+\n * | 30      |    | 33 | 34 |                    | 30 ::   |    | 33:: 34 |    <- last row\n * +         +    +----+    +                    |    ::::::::::::::::    +\n * |         |    | 43 |    |                    |         |    | 43 |    |\n * +----+----+----+----+----+                    +----+----+----+----+----+\n *                                                      ^          ^\n *                                                     first & last columns\n *\n * Will update table to:\n *\n *                       +----+----+----+----+----+\n *                       | 00 | 01 | 02 | 03      |\n *                       +    +----+----+----+----+\n *                       |    | 11 |    | 13 | 14 |\n *                       +----+----+    +    +----+\n *                       | 20 | 21 |    |    | 24 |\n *                       +----+----+    +----+----+\n *                       | 30 |    |    | 33 | 34 |\n *                       +    +----+----+----+    +\n *                       |    |    |    | 43 |    |\n *                       +----+----+----+----+----+\n *\n * In th example above:\n * - Cell \"02\" which have `rowspan = 4` must be trimmed at first and at after last row.\n * - Cell \"03\" which have `rowspan = 2` and `colspan = 2` must be trimmed at first column and after last row.\n * - Cells \"00\", \"03\" & \"30\" which cannot be cut by this algorithm as they are outside the trimmed area.\n * - Cell \"13\" cannot be cut as it is inside the trimmed area.\n */ function splitCellsToRectangularSelection(table, dimensions, writer) {\n    const { firstRow, lastRow, firstColumn, lastColumn } = dimensions;\n    const rowIndexes = {\n        first: firstRow,\n        last: lastRow\n    };\n    const columnIndexes = {\n        first: firstColumn,\n        last: lastColumn\n    };\n    // 1. Split cells vertically in two steps as first step might create cells that needs to split again.\n    doVerticalSplit(table, firstColumn, rowIndexes, writer);\n    doVerticalSplit(table, lastColumn + 1, rowIndexes, writer);\n    // 2. Split cells horizontally in two steps as first step might create cells that needs to split again.\n    doHorizontalSplit(table, firstRow, columnIndexes, writer);\n    doHorizontalSplit(table, lastRow + 1, columnIndexes, writer, firstRow);\n}\nfunction doHorizontalSplit(table, splitRow, limitColumns, writer, startRow = 0) {\n    // If selection starts at first row then no split is needed.\n    if (splitRow < 1) {\n        return;\n    }\n    const overlappingCells = getVerticallyOverlappingCells(table, splitRow, startRow);\n    // Filter out cells that are not touching insides of the rectangular selection.\n    const cellsToSplit = overlappingCells.filter(({ column, cellWidth })=>isAffectedBySelection(column, cellWidth, limitColumns));\n    return cellsToSplit.map(({ cell })=>splitHorizontally(cell, splitRow, writer));\n}\nfunction doVerticalSplit(table, splitColumn, limitRows, writer) {\n    // If selection starts at first column then no split is needed.\n    if (splitColumn < 1) {\n        return;\n    }\n    const overlappingCells = getHorizontallyOverlappingCells(table, splitColumn);\n    // Filter out cells that are not touching insides of the rectangular selection.\n    const cellsToSplit = overlappingCells.filter(({ row, cellHeight })=>isAffectedBySelection(row, cellHeight, limitRows));\n    return cellsToSplit.map(({ cell, column })=>splitVertically(cell, column, splitColumn, writer));\n}\n/**\n * Checks if cell at given row (column) is affected by a rectangular selection defined by first/last column (row).\n *\n * The same check is used for row as for column.\n */ function isAffectedBySelection(index, span, limit) {\n    const endIndex = index + span - 1;\n    const { first, last } = limit;\n    const isInsideSelection = index >= first && index <= last;\n    const overlapsSelectionFromOutside = index < first && endIndex >= first;\n    return isInsideSelection || overlapsSelectionFromOutside;\n}\n\n/**\n * This plugin enables keyboard navigation for tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */ class TableKeyboard extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableKeyboard';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableSelection,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const t = editor.t;\n        this.listenTo(viewDocument, 'arrowKey', (...args)=>this._onArrowKey(...args), {\n            context: 'table'\n        });\n        this.listenTo(viewDocument, 'tab', (...args)=>this._handleTabOnSelectedTable(...args), {\n            context: 'figure'\n        });\n        this.listenTo(viewDocument, 'tab', (...args)=>this._handleTab(...args), {\n            context: [\n                'th',\n                'td'\n            ]\n        });\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfoGroup({\n            id: 'table',\n            label: t('Keystrokes that can be used in a table cell'),\n            keystrokes: [\n                {\n                    label: t('Move the selection to the next cell'),\n                    keystroke: 'Tab'\n                },\n                {\n                    label: t('Move the selection to the previous cell'),\n                    keystroke: 'Shift+Tab'\n                },\n                {\n                    label: t('Insert a new table row (when in the last cell of a table)'),\n                    keystroke: 'Tab'\n                },\n                {\n                    label: t('Navigate through the table'),\n                    keystroke: [\n                        [\n                            'arrowup'\n                        ],\n                        [\n                            'arrowright'\n                        ],\n                        [\n                            'arrowdown'\n                        ],\n                        [\n                            'arrowleft'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:tab tab} events for the <kbd>Tab</kbd> key executed\n\t * when the table widget is selected.\n\t */ _handleTabOnSelectedTable(bubblingEventInfo, domEventData) {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        if (!selectedElement || !selectedElement.is('element', 'table')) {\n            return;\n        }\n        domEventData.preventDefault();\n        domEventData.stopPropagation();\n        bubblingEventInfo.stop();\n        editor.model.change((writer)=>{\n            writer.setSelection(writer.createRangeIn(selectedElement.getChild(0).getChild(0)));\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:tab tab} events for the <kbd>Tab</kbd> key executed\n\t * inside table cells.\n\t */ _handleTab(bubblingEventInfo, domEventData) {\n        const editor = this.editor;\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        const selection = editor.model.document.selection;\n        const isForward = !domEventData.shiftKey;\n        let tableCell = tableUtils.getTableCellsContainingSelection(selection)[0];\n        if (!tableCell) {\n            tableCell = tableSelection.getFocusCell();\n        }\n        if (!tableCell) {\n            return;\n        }\n        domEventData.preventDefault();\n        domEventData.stopPropagation();\n        bubblingEventInfo.stop();\n        const tableRow = tableCell.parent;\n        const table = tableRow.parent;\n        const currentRowIndex = table.getChildIndex(tableRow);\n        const currentCellIndex = tableRow.getChildIndex(tableCell);\n        const isFirstCellInRow = currentCellIndex === 0;\n        if (!isForward && isFirstCellInRow && currentRowIndex === 0) {\n            // Set the selection over the whole table if the selection was in the first table cell.\n            editor.model.change((writer)=>{\n                writer.setSelection(writer.createRangeOn(table));\n            });\n            return;\n        }\n        const isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n        const isLastRow = currentRowIndex === tableUtils.getRows(table) - 1;\n        if (isForward && isLastRow && isLastCellInRow) {\n            editor.execute('insertTableRowBelow');\n            // Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n            // or it got overwritten) set the selection over the whole table to mirror the first cell case.\n            if (currentRowIndex === tableUtils.getRows(table) - 1) {\n                editor.model.change((writer)=>{\n                    writer.setSelection(writer.createRangeOn(table));\n                });\n                return;\n            }\n        }\n        let cellToFocus;\n        // Move to the first cell in the next row.\n        if (isForward && isLastCellInRow) {\n            const nextRow = table.getChild(currentRowIndex + 1);\n            cellToFocus = nextRow.getChild(0);\n        } else if (!isForward && isFirstCellInRow) {\n            const previousRow = table.getChild(currentRowIndex - 1);\n            cellToFocus = previousRow.getChild(previousRow.childCount - 1);\n        } else {\n            cellToFocus = tableRow.getChild(currentCellIndex + (isForward ? 1 : -1));\n        }\n        editor.model.change((writer)=>{\n            writer.setSelection(writer.createRangeIn(cellToFocus));\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n\t */ _onArrowKey(eventInfo, domEventData) {\n        const editor = this.editor;\n        const keyCode = domEventData.keyCode;\n        const direction = getLocalizedArrowKeyCodeDirection(keyCode, editor.locale.contentLanguageDirection);\n        const wasHandled = this._handleArrowKeys(direction, domEventData.shiftKey);\n        if (wasHandled) {\n            domEventData.preventDefault();\n            domEventData.stopPropagation();\n            eventInfo.stop();\n        }\n    }\n    /**\n\t * Handles arrow keys to move the selection around the table.\n\t *\n\t * @param direction The direction of the arrow key.\n\t * @param expandSelection If the current selection should be expanded.\n\t * @returns Returns `true` if key was handled.\n\t */ _handleArrowKeys(direction, expandSelection) {\n        const tableUtils = this.editor.plugins.get(TableUtils);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const isForward = [\n            'right',\n            'down'\n        ].includes(direction);\n        // In case one or more table cells are selected (from outside),\n        // move the selection to a cell adjacent to the selected table fragment.\n        const selectedCells = tableUtils.getSelectedTableCells(selection);\n        if (selectedCells.length) {\n            let focusCell;\n            if (expandSelection) {\n                focusCell = tableSelection.getFocusCell();\n            } else {\n                focusCell = isForward ? selectedCells[selectedCells.length - 1] : selectedCells[0];\n            }\n            this._navigateFromCellInDirection(focusCell, direction, expandSelection);\n            return true;\n        }\n        // Abort if we're not in a table cell.\n        const tableCell = selection.focus.findAncestor('tableCell');\n        /* istanbul ignore if: paranoid check -- @preserve */ if (!tableCell) {\n            return false;\n        }\n        // When the selection is not collapsed.\n        if (!selection.isCollapsed) {\n            if (expandSelection) {\n                // Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n                // Selection for sure will not approach cell edge.\n                //\n                // With a special case when all cell content is selected - then selection should expand to the other cell.\n                // Note: When the entire cell gets selected using CTRL+A, the selection is always forward.\n                if (selection.isBackward == isForward && !selection.containsEntireContent(tableCell)) {\n                    return false;\n                }\n            } else {\n                const selectedElement = selection.getSelectedElement();\n                // It will collapse for non-object selected so it's not going to move to other cell.\n                if (!selectedElement || !model.schema.isObject(selectedElement)) {\n                    return false;\n                }\n            }\n        }\n        // Let's check if the selection is at the beginning/end of the cell.\n        if (this._isSelectionAtCellEdge(selection, tableCell, isForward)) {\n            this._navigateFromCellInDirection(tableCell, direction, expandSelection);\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Returns `true` if the selection is at the boundary of a table cell according to the navigation direction.\n\t *\n\t * @param selection The current selection.\n\t * @param tableCell The current table cell element.\n\t * @param isForward The expected navigation direction.\n\t */ _isSelectionAtCellEdge(selection, tableCell, isForward) {\n        const model = this.editor.model;\n        const schema = this.editor.model.schema;\n        const focus = isForward ? selection.getLastPosition() : selection.getFirstPosition();\n        // If the current limit element is not table cell we are for sure not at the cell edge.\n        // Also `modifySelection` will not let us out of it.\n        if (!schema.getLimitElement(focus).is('element', 'tableCell')) {\n            const boundaryPosition = model.createPositionAt(tableCell, isForward ? 'end' : 0);\n            return boundaryPosition.isTouching(focus);\n        }\n        const probe = model.createSelection(focus);\n        model.modifySelection(probe, {\n            direction: isForward ? 'forward' : 'backward'\n        });\n        // If there was no change in the focus position, then it's not possible to move the selection there.\n        return focus.isEqual(probe.focus);\n    }\n    /**\n\t * Moves the selection from the given table cell in the specified direction.\n\t *\n\t * @param focusCell The table cell that is current multi-cell selection focus.\n\t * @param direction Direction in which selection should move.\n\t * @param expandSelection If the current selection should be expanded. Default value is false.\n\t */ _navigateFromCellInDirection(focusCell, direction, expandSelection = false) {\n        const model = this.editor.model;\n        const table = focusCell.findAncestor('table');\n        const tableMap = [\n            ...new TableWalker(table, {\n                includeAllSlots: true\n            })\n        ];\n        const { row: lastRow, column: lastColumn } = tableMap[tableMap.length - 1];\n        const currentCellInfo = tableMap.find(({ cell })=>cell == focusCell);\n        let { row, column } = currentCellInfo;\n        switch(direction){\n            case 'left':\n                column--;\n                break;\n            case 'up':\n                row--;\n                break;\n            case 'right':\n                column += currentCellInfo.cellWidth;\n                break;\n            case 'down':\n                row += currentCellInfo.cellHeight;\n                break;\n        }\n        const isOutsideVertically = row < 0 || row > lastRow;\n        const isBeforeFirstCell = column < 0 && row <= 0;\n        const isAfterLastCell = column > lastColumn && row >= lastRow;\n        // Note that if the table cell at the end of a row is row-spanned then isAfterLastCell will never be true.\n        // However, we don't know if user was navigating on the last row or not, so let's stay in the table.\n        if (isOutsideVertically || isBeforeFirstCell || isAfterLastCell) {\n            model.change((writer)=>{\n                writer.setSelection(writer.createRangeOn(table));\n            });\n            return;\n        }\n        if (column < 0) {\n            column = expandSelection ? 0 : lastColumn;\n            row--;\n        } else if (column > lastColumn) {\n            column = expandSelection ? lastColumn : 0;\n            row++;\n        }\n        const cellToSelect = tableMap.find((cellInfo)=>cellInfo.row == row && cellInfo.column == column).cell;\n        const isForward = [\n            'right',\n            'down'\n        ].includes(direction);\n        const tableSelection = this.editor.plugins.get('TableSelection');\n        if (expandSelection && tableSelection.isEnabled) {\n            const anchorCell = tableSelection.getAnchorCell() || focusCell;\n            tableSelection.setCellSelection(anchorCell, cellToSelect);\n        } else {\n            const positionToSelect = model.createPositionAt(cellToSelect, isForward ? 0 : 'end');\n            model.change((writer)=>{\n                writer.setSelection(positionToSelect);\n            });\n        }\n    }\n}\n\n/**\n * The mouse selection event observer.\n *\n * It registers listeners for the following DOM events:\n *\n * - `'mousemove'`\n * - `'mouseleave'`\n *\n * Note that this observer is disabled by default. To enable this observer, it needs to be added to\n * {@link module:engine/view/view~View} using the {@link module:engine/view/view~View#addObserver} method.\n *\n * The observer is registered by the {@link module:table/tableselection~TableSelection} plugin.\n */ class MouseEventsObserver extends DomEventObserver {\n    domEventType = [\n        'mousemove',\n        'mouseleave'\n    ];\n    /**\n\t * @inheritDoc\n\t */ onDomEvent(domEvent) {\n        this.fire(domEvent.type, domEvent);\n    }\n}\n\n/**\n * This plugin enables a table cells' selection with the mouse.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */ class TableMouse extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableMouse';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableSelection,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Currently the MouseObserver only handles `mousedown` and `mouseup` events.\n        // TODO move to the engine?\n        editor.editing.view.addObserver(MouseEventsObserver);\n        this._enableShiftClickSelection();\n        this._enableMouseDragSelection();\n    }\n    /**\n\t * Enables making cells selection by <kbd>Shift</kbd>+click. Creates a selection from the cell which previously held\n\t * the selection to the cell which was clicked. It can be the same cell, in which case it selects a single cell.\n\t */ _enableShiftClickSelection() {\n        const editor = this.editor;\n        const tableUtils = editor.plugins.get(TableUtils);\n        let blockSelectionChange = false;\n        const tableSelection = editor.plugins.get(TableSelection);\n        this.listenTo(editor.editing.view.document, 'mousedown', (evt, domEventData)=>{\n            const selection = editor.model.document.selection;\n            if (!this.isEnabled || !tableSelection.isEnabled) {\n                return;\n            }\n            if (!domEventData.domEvent.shiftKey) {\n                return;\n            }\n            const anchorCell = tableSelection.getAnchorCell() || tableUtils.getTableCellsContainingSelection(selection)[0];\n            if (!anchorCell) {\n                return;\n            }\n            const targetCell = this._getModelTableCellFromDomEvent(domEventData);\n            if (targetCell && haveSameTableParent(anchorCell, targetCell)) {\n                blockSelectionChange = true;\n                tableSelection.setCellSelection(anchorCell, targetCell);\n                domEventData.preventDefault();\n            }\n        });\n        this.listenTo(editor.editing.view.document, 'mouseup', ()=>{\n            blockSelectionChange = false;\n        });\n        // We need to ignore a `selectionChange` event that is fired after we render our new table cells selection.\n        // When downcasting table cells selection to the view, we put the view selection in the last selected cell\n        // in a place that may not be natively a \"correct\" location. This is – we put it directly in the `<td>` element.\n        // All browsers fire the native `selectionchange` event.\n        // However, all browsers except Safari return the selection in the exact place where we put it\n        // (even though it's visually normalized). Safari returns `<td><p>^foo` that makes our selection observer\n        // fire our `selectionChange` event (because the view selection that we set in the first step differs from the DOM selection).\n        // Since `selectionChange` is fired, we automatically update the model selection that moves it that paragraph.\n        // This breaks our dear cells selection.\n        //\n        // Theoretically this issue concerns only Safari that is the only browser that do normalize the selection.\n        // However, to avoid code branching and to have a good coverage for this event blocker, I enabled it for all browsers.\n        //\n        // Note: I'm keeping the `blockSelectionChange` state separately for shift+click and mouse drag (exact same logic)\n        // so I don't have to try to analyze whether they don't overlap in some weird cases. Probably they don't.\n        // But I have other things to do, like writing this comment.\n        this.listenTo(editor.editing.view.document, 'selectionChange', (evt)=>{\n            if (blockSelectionChange) {\n                // @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n                evt.stop();\n            }\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Enables making cells selection by dragging.\n\t *\n\t * The selection is made only on mousemove. Mouse tracking is started on mousedown.\n\t * However, the cells selection is enabled only after the mouse cursor left the anchor cell.\n\t * Thanks to that normal text selection within one cell works just fine. However, you can still select\n\t * just one cell by leaving the anchor cell and moving back to it.\n\t */ _enableMouseDragSelection() {\n        const editor = this.editor;\n        let anchorCell, targetCell;\n        let beganCellSelection = false;\n        let blockSelectionChange = false;\n        const tableSelection = editor.plugins.get(TableSelection);\n        this.listenTo(editor.editing.view.document, 'mousedown', (evt, domEventData)=>{\n            if (!this.isEnabled || !tableSelection.isEnabled) {\n                return;\n            }\n            // Make sure to not conflict with the shift+click listener and any other possible handler.\n            if (domEventData.domEvent.shiftKey || domEventData.domEvent.ctrlKey || domEventData.domEvent.altKey) {\n                return;\n            }\n            anchorCell = this._getModelTableCellFromDomEvent(domEventData);\n        });\n        this.listenTo(editor.editing.view.document, 'mousemove', (evt, domEventData)=>{\n            if (!domEventData.domEvent.buttons) {\n                return;\n            }\n            if (!anchorCell) {\n                return;\n            }\n            const newTargetCell = this._getModelTableCellFromDomEvent(domEventData);\n            if (newTargetCell && haveSameTableParent(anchorCell, newTargetCell)) {\n                targetCell = newTargetCell;\n                // Switch to the cell selection mode after the mouse cursor left the anchor cell.\n                // Switch off only on mouseup (makes selecting a single cell possible).\n                if (!beganCellSelection && targetCell != anchorCell) {\n                    beganCellSelection = true;\n                }\n            }\n            // Yep, not making a cell selection yet. See method docs.\n            if (!beganCellSelection) {\n                return;\n            }\n            blockSelectionChange = true;\n            tableSelection.setCellSelection(anchorCell, targetCell);\n            domEventData.preventDefault();\n        });\n        this.listenTo(editor.editing.view.document, 'mouseup', ()=>{\n            beganCellSelection = false;\n            blockSelectionChange = false;\n            anchorCell = null;\n            targetCell = null;\n        });\n        // See the explanation in `_enableShiftClickSelection()`.\n        this.listenTo(editor.editing.view.document, 'selectionChange', (evt)=>{\n            if (blockSelectionChange) {\n                // @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n                evt.stop();\n            }\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Returns the model table cell element based on the target element of the passed DOM event.\n\t *\n\t * @returns Returns the table cell or `undefined`.\n\t */ _getModelTableCellFromDomEvent(domEventData) {\n        // Note: Work with positions (not element mapping) because the target element can be an attribute or other non-mapped element.\n        const viewTargetElement = domEventData.target;\n        const viewPosition = this.editor.editing.view.createPositionAt(viewTargetElement, 0);\n        const modelPosition = this.editor.editing.mapper.toModelPosition(viewPosition);\n        const modelElement = modelPosition.parent;\n        return modelElement.findAncestor('tableCell', {\n            includeSelf: true\n        });\n    }\n}\nfunction haveSameTableParent(cellA, cellB) {\n    return cellA.parent.parent == cellB.parent.parent;\n}\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/tables/tables Table feature documentation}.\n *\n * This is a \"glue\" plugin that loads the following table features:\n *\n * * {@link module:table/tableediting~TableEditing editing feature},\n * * {@link module:table/tableselection~TableSelection selection feature},\n * * {@link module:table/tablekeyboard~TableKeyboard keyboard navigation feature},\n * * {@link module:table/tablemouse~TableMouse mouse selection feature},\n * * {@link module:table/tableclipboard~TableClipboard clipboard feature},\n * * {@link module:table/tableui~TableUI UI feature}.\n */ class Table extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing,\n            TableUI,\n            TableSelection,\n            TableMouse,\n            TableKeyboard,\n            TableClipboard,\n            Widget\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Table';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The plain table output feature.\n */ class PlainTableOutput extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PlainTableOutput';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Table\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Override default table data downcast converter.\n        editor.conversion.for('dataDowncast').elementToStructure({\n            model: 'table',\n            view: downcastTableElement,\n            converterPriority: 'high'\n        });\n        // Make sure table <caption> is downcasted into <caption> in the data pipeline when necessary.\n        if (editor.plugins.has('TableCaption')) {\n            editor.conversion.for('dataDowncast').elementToElement({\n                model: 'caption',\n                view: (modelElement, { writer })=>{\n                    if (modelElement.parent.name === 'table') {\n                        return writer.createContainerElement('caption');\n                    }\n                },\n                converterPriority: 'high'\n            });\n        }\n        // Handle border-style, border-color, border-width and background-color table attributes.\n        if (editor.plugins.has('TableProperties')) {\n            downcastTableBorderAndBackgroundAttributes(editor);\n        }\n    }\n}\n/**\n * The plain table downcast converter callback.\n *\n * @param table Table model element.\n * @param conversionApi The conversion API object.\n * @returns Created element.\n */ function downcastTableElement(table, { writer }) {\n    const headingRows = table.getAttribute('headingRows') || 0;\n    // Table head rows slot.\n    const headRowsSlot = writer.createSlot((element)=>element.is('element', 'tableRow') && element.index < headingRows);\n    // Table body rows slot.\n    const bodyRowsSlot = writer.createSlot((element)=>element.is('element', 'tableRow') && element.index >= headingRows);\n    // Table children slot.\n    const childrenSlot = writer.createSlot((element)=>!element.is('element', 'tableRow'));\n    // Table <thead> element with all the heading rows.\n    const theadElement = writer.createContainerElement('thead', null, headRowsSlot);\n    // Table <tbody> element with all the body rows.\n    const tbodyElement = writer.createContainerElement('tbody', null, bodyRowsSlot);\n    // Table contents element containing <thead> and <tbody> when necessary.\n    const tableContentElements = [];\n    if (headingRows) {\n        tableContentElements.push(theadElement);\n    }\n    if (headingRows < table.childCount) {\n        tableContentElements.push(tbodyElement);\n    }\n    // Create table structure.\n    //\n    // <table>\n    //    {children-slot-like-caption}\n    //    <thead>\n    //        {table-head-rows-slot}\n    //    </thead>\n    //    <tbody>\n    //        {table-body-rows-slot}\n    //    </tbody>\n    // </table>\n    return writer.createContainerElement('table', null, [\n        childrenSlot,\n        ...tableContentElements\n    ]);\n}\n/**\n * Register table border and background attributes converters.\n */ function downcastTableBorderAndBackgroundAttributes(editor) {\n    const modelAttributes = {\n        'border-width': 'tableBorderWidth',\n        'border-color': 'tableBorderColor',\n        'border-style': 'tableBorderStyle',\n        'background-color': 'tableBackgroundColor'\n    };\n    for (const [styleName, modelAttribute] of Object.entries(modelAttributes)){\n        editor.conversion.for('dataDowncast').add((dispatcher)=>{\n            return dispatcher.on(`attribute:${modelAttribute}:table`, (evt, data, conversionApi)=>{\n                const { item, attributeNewValue } = data;\n                const { mapper, writer } = conversionApi;\n                if (!conversionApi.consumable.consume(item, evt.name)) {\n                    return;\n                }\n                const table = mapper.toViewElement(item);\n                if (attributeNewValue) {\n                    writer.setStyle(styleName, attributeNewValue, table);\n                } else {\n                    writer.removeStyle(styleName, table);\n                }\n            }, {\n                priority: 'high'\n            });\n        });\n    }\n}\n\n/**\n * Depending on the position of the selection either return the selected table or the table higher in the hierarchy.\n */ function getSelectionAffectedTableWidget(selection) {\n    const selectedTable = getSelectedTableWidget(selection);\n    if (selectedTable) {\n        return selectedTable;\n    }\n    return getTableWidgetAncestor(selection);\n}\n/**\n * Returns a table widget editing view element if one is selected.\n */ function getSelectedTableWidget(selection) {\n    const viewElement = selection.getSelectedElement();\n    if (viewElement && isTableWidget(viewElement)) {\n        return viewElement;\n    }\n    return null;\n}\n/**\n * Returns a table widget editing view element if one is among the selection's ancestors.\n */ function getTableWidgetAncestor(selection) {\n    const selectionPosition = selection.getFirstPosition();\n    if (!selectionPosition) {\n        return null;\n    }\n    let parent = selectionPosition.parent;\n    while(parent){\n        if (parent.is('element') && isTableWidget(parent)) {\n            return parent;\n        }\n        parent = parent.parent;\n    }\n    return null;\n}\n/**\n * Checks if a given view element is a table widget.\n */ function isTableWidget(viewElement) {\n    return !!viewElement.getCustomProperty('table') && isWidget(viewElement);\n}\n\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for the table cell content).\n *\n * The table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/tableconfig~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/tableconfig~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n */ class TableToolbar extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            WidgetToolbarRepository\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        const tableContentToolbarItems = editor.config.get('table.contentToolbar');\n        const tableToolbarItems = editor.config.get('table.tableToolbar');\n        if (tableContentToolbarItems) {\n            widgetToolbarRepository.register('tableContent', {\n                ariaLabel: t('Table toolbar'),\n                items: tableContentToolbarItems,\n                getRelatedElement: getTableWidgetAncestor\n            });\n        }\n        if (tableToolbarItems) {\n            widgetToolbarRepository.register('table', {\n                ariaLabel: t('Table toolbar'),\n                items: tableToolbarItems,\n                getRelatedElement: getSelectedTableWidget\n            });\n        }\n    }\n}\n\n/**\n * The color input view class. It allows the user to type in a color (hex, rgb, etc.)\n * or choose it from the configurable color palette with a preview.\n *\n * @internal\n */ class ColorInputView extends View {\n    /**\n\t * A cached reference to the options passed to the constructor.\n\t */ options;\n    /**\n\t * Tracks information about the DOM focus in the view.\n\t */ focusTracker;\n    /**\n\t * Helps cycling over focusable children in the input view.\n\t */ focusCycler;\n    /**\n\t * A collection of views that can be focused in the view.\n\t */ _focusables;\n    /**\n\t * An instance of the dropdown allowing to select a color from a grid.\n\t */ dropdownView;\n    /**\n\t * An instance of the input allowing the user to type a color value.\n\t */ inputView;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * The flag that indicates whether the user is still typing.\n\t * If set to true, it means that the text input field ({@link #inputView}) still has the focus.\n\t * So, we should interrupt the user by replacing the input's value.\n\t */ _stillTyping;\n    /**\n\t * Creates an instance of the color input view.\n\t *\n\t * @param locale The locale instance.\n\t * @param options The input options.\n\t * @param options.colorDefinitions The colors to be displayed in the palette inside the input's dropdown.\n\t * @param options.columns The number of columns in which the colors will be displayed.\n\t * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n\t * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n\t */ constructor(locale, options){\n        super(locale);\n        this.set('value', '');\n        this.set('isReadOnly', false);\n        this.set('isFocused', false);\n        this.set('isEmpty', true);\n        this.options = options;\n        this.focusTracker = new FocusTracker();\n        this._focusables = new ViewCollection();\n        this.dropdownView = this._createDropdownView();\n        this.inputView = this._createInputTextView();\n        this.keystrokes = new KeystrokeHandler();\n        this._stillTyping = false;\n        this.focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate items forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input-color'\n                ]\n            },\n            children: [\n                this.dropdownView,\n                this.inputView\n            ]\n        });\n        this.on('change:value', (evt, name, inputValue)=>this._setInputValue(inputValue));\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        [\n            this.inputView,\n            this.dropdownView.buttonView\n        ].forEach((view)=>{\n            this.focusTracker.add(view.element);\n            this._focusables.add(view);\n        });\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the view.\n\t */ focus(direction) {\n        if (direction === -1) {\n            this.focusCycler.focusLast();\n        } else {\n            this.focusCycler.focusFirst();\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Creates and configures the {@link #dropdownView}.\n\t */ _createDropdownView() {\n        const locale = this.locale;\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        const colorSelector = this._createColorSelector(locale);\n        const dropdown = createDropdown(locale);\n        const colorPreview = new View();\n        colorPreview.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-input-color__button__preview'\n                ],\n                style: {\n                    backgroundColor: bind.to('value')\n                }\n            },\n            children: [\n                {\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-input-color__button__preview__no-color-indicator',\n                            bind.if('value', 'ck-hidden', (value)=>value != '')\n                        ]\n                    }\n                }\n            ]\n        });\n        dropdown.buttonView.extendTemplate({\n            attributes: {\n                class: 'ck-input-color__button'\n            }\n        });\n        dropdown.buttonView.children.add(colorPreview);\n        dropdown.buttonView.label = t('Color picker');\n        dropdown.buttonView.tooltip = true;\n        dropdown.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n        dropdown.panelView.children.add(colorSelector);\n        dropdown.bind('isEnabled').to(this, 'isReadOnly', (value)=>!value);\n        dropdown.on('change:isOpen', (evt, name, isVisible)=>{\n            if (isVisible) {\n                colorSelector.updateSelectedColors();\n                colorSelector.showColorGridsFragment();\n            }\n        });\n        return dropdown;\n    }\n    /**\n\t * Creates and configures an instance of {@link module:ui/inputtext/inputtextview~InputTextView}.\n\t *\n\t * @returns A configured instance to be set as {@link #inputView}.\n\t */ _createInputTextView() {\n        const locale = this.locale;\n        const inputView = new InputTextView(locale);\n        inputView.extendTemplate({\n            on: {\n                blur: inputView.bindTemplate.to('blur')\n            }\n        });\n        inputView.value = this.value;\n        inputView.bind('isReadOnly', 'hasError').to(this);\n        this.bind('isFocused', 'isEmpty').to(inputView);\n        inputView.on('input', ()=>{\n            const inputValue = inputView.element.value;\n            // Check if the value matches one of our defined colors' label.\n            const mappedColor = this.options.colorDefinitions.find((def)=>inputValue === def.label);\n            this._stillTyping = true;\n            this.value = mappedColor && mappedColor.color || inputValue;\n        });\n        inputView.on('blur', ()=>{\n            this._stillTyping = false;\n            this._setInputValue(inputView.element.value);\n        });\n        inputView.delegate('input').to(this);\n        return inputView;\n    }\n    /**\n\t * Creates and configures the panel with \"color grid\" and \"color picker\" inside the {@link #dropdownView}.\n\t */ _createColorSelector(locale) {\n        const t = locale.t;\n        const defaultColor = this.options.defaultColorValue || '';\n        const removeColorButtonLabel = defaultColor ? t('Restore default') : t('Remove color');\n        const colorSelector = new ColorSelectorView(locale, {\n            colors: this.options.colorDefinitions,\n            columns: this.options.columns,\n            removeButtonLabel: removeColorButtonLabel,\n            colorPickerLabel: t('Color picker'),\n            colorPickerViewConfig: this.options.colorPickerConfig === false ? false : {\n                ...this.options.colorPickerConfig,\n                hideInput: true\n            }\n        });\n        colorSelector.appendUI();\n        colorSelector.on('execute', (evt, data)=>{\n            if (data.source === 'colorPickerSaveButton') {\n                this.dropdownView.isOpen = false;\n                return;\n            }\n            this.value = data.value || defaultColor;\n            // Trigger the listener that actually applies the set value.\n            this.fire('input');\n            if (data.source !== 'colorPicker') {\n                this.dropdownView.isOpen = false;\n            }\n        });\n        /**\n\t\t * Color is saved before changes in color picker. In case \"cancel button\" is pressed\n\t\t * this color will be applied.\n\t\t */ let backupColor = this.value;\n        colorSelector.on('colorPicker:cancel', ()=>{\n            /**\n\t\t\t * Revert color to previous value before changes in color picker.\n\t\t\t */ this.value = backupColor;\n            this.fire('input');\n            this.dropdownView.isOpen = false;\n        });\n        colorSelector.colorGridsFragmentView.colorPickerButtonView.on('execute', ()=>{\n            /**\n\t\t\t * Save color value before changes in color picker.\n\t\t\t */ backupColor = this.value;\n        });\n        colorSelector.bind('selectedColor').to(this, 'value');\n        return colorSelector;\n    }\n    /**\n\t * Sets {@link #inputView}'s value property to the color value or color label,\n\t * if there is one and the user is not typing.\n\t *\n\t * Handles cases like:\n\t *\n\t * * Someone picks the color in the grid.\n\t * * The color is set from the plugin level.\n\t *\n\t * @param inputValue Color value to be set.\n\t */ _setInputValue(inputValue) {\n        if (!this._stillTyping) {\n            const normalizedInputValue = normalizeColor(inputValue);\n            // Check if the value matches one of our defined colors.\n            const mappedColor = this.options.colorDefinitions.find((def)=>normalizedInputValue === normalizeColor(def.color));\n            if (mappedColor) {\n                this.inputView.value = mappedColor.label;\n            } else {\n                this.inputView.value = inputValue || '';\n            }\n        }\n    }\n}\n/**\n * Normalizes color value, by stripping extensive whitespace.\n * For example., transforms:\n * * `   rgb(  25 50    0 )` to `rgb(25 50 0)`,\n * * \"\\t  rgb(  25 ,  50,0 )\t\t\" to `rgb(25 50 0)`.\n *\n * @param colorString The value to be normalized.\n */ function normalizeColor(colorString) {\n    return colorString// Remove any whitespace right after `(` or `,`.\n    .replace(/([(,])\\s+/g, '$1')// Remove any whitespace at the beginning or right before the end, `)`, `,`, or another whitespace.\n    .replace(/^\\s+|\\s+(?=[),\\s]|$)/g, '')// Then, replace `,` or whitespace with a single space.\n    .replace(/,|\\s/g, ' ');\n}\n\nconst isEmpty = (val)=>val === '';\n/**\n * Returns an object containing pairs of CSS border style values and their localized UI\n * labels. Used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */ function getBorderStyleLabels(t) {\n    return {\n        none: t('None'),\n        solid: t('Solid'),\n        dotted: t('Dotted'),\n        dashed: t('Dashed'),\n        double: t('Double'),\n        groove: t('Groove'),\n        ridge: t('Ridge'),\n        inset: t('Inset'),\n        outset: t('Outset')\n    };\n}\n/**\n * Returns a localized error string that can be displayed next to color (background, border)\n * fields that have an invalid value.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */ function getLocalizedColorErrorText(t) {\n    return t('The color is invalid. Try \"#FF0000\" or \"rgb(255,0,0)\" or \"red\".');\n}\n/**\n * Returns a localized error string that can be displayed next to length (padding, border width)\n * fields that have an invalid value.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */ function getLocalizedLengthErrorText(t) {\n    return t('The value is invalid. Try \"10px\" or \"2em\" or simply \"2\".');\n}\n/**\n * Returns `true` when the passed value is an empty string or a valid CSS color expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isColor}.\n */ function colorFieldValidator(value) {\n    value = value.trim().toLowerCase();\n    return isEmpty(value) || isColor(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n * See {@link module:engine/view/styles/utils~isPercentage}.\n */ function lengthFieldValidator(value) {\n    value = value.trim();\n    return isEmpty(value) || isNumberString(value) || isLength(value) || isPercentage(value);\n}\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n */ function lineWidthFieldValidator(value) {\n    value = value.trim();\n    return isEmpty(value) || isNumberString(value) || isLength(value);\n}\n/**\n * Generates item definitions for a UI dropdown that allows changing the border style of a table or a table cell.\n *\n * @param defaultStyle The default border.\n */ function getBorderStyleDefinitions(view, defaultStyle) {\n    const itemDefinitions = new Collection();\n    const styleLabels = getBorderStyleLabels(view.t);\n    for(const style in styleLabels){\n        const definition = {\n            type: 'button',\n            model: new ViewModel({\n                _borderStyleValue: style,\n                label: styleLabels[style],\n                role: 'menuitemradio',\n                withText: true\n            })\n        };\n        if (style === 'none') {\n            definition.model.bind('isOn').to(view, 'borderStyle', (value)=>{\n                if (defaultStyle === 'none') {\n                    return !value;\n                }\n                return value === style;\n            });\n        } else {\n            definition.model.bind('isOn').to(view, 'borderStyle', (value)=>{\n                return value === style;\n            });\n        }\n        itemDefinitions.add(definition);\n    }\n    return itemDefinitions;\n}\n/**\n * A helper that fills a toolbar with buttons that:\n *\n * * have some labels,\n * * have some icons,\n * * set a certain UI view property value upon execution.\n *\n * @param nameToValue A function that maps a button name to a value. By default names are the same as values.\n */ function fillToolbar(options) {\n    const { view, icons, toolbar, labels, propertyName, nameToValue, defaultValue } = options;\n    for(const name in labels){\n        const button = new ButtonView(view.locale);\n        button.set({\n            role: 'radio',\n            isToggleable: true,\n            label: labels[name],\n            icon: icons[name],\n            tooltip: labels[name]\n        });\n        // If specified the `nameToValue()` callback, map the value based on the option's name.\n        const buttonValue = nameToValue ? nameToValue(name) : name;\n        button.bind('isOn').to(view, propertyName, (value)=>{\n            // `value` comes from `view[ propertyName ]`.\n            let valueToCompare = value;\n            // If it's empty, and the `defaultValue` is specified, use it instead.\n            if (value === '' && defaultValue) {\n                valueToCompare = defaultValue;\n            }\n            return buttonValue === valueToCompare;\n        });\n        button.on('execute', ()=>{\n            view[propertyName] = buttonValue;\n        });\n        toolbar.items.add(button);\n    }\n}\n/**\n * A default color palette used by various user interfaces related to tables, for instance,\n * by {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI} or\n * {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI}.\n *\n * The color palette follows the {@link module:table/tableconfig~TableColorConfig table color configuration format}\n * and contains the following color definitions:\n *\n * ```ts\n * const defaultColors = [\n *   {\n *     color: 'hsl(0, 0%, 0%)',\n *     label: 'Black'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 30%)',\n *     label: 'Dim grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 60%)',\n *     label: 'Grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 90%)',\n *     label: 'Light grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 100%)',\n *     label: 'White',\n *     hasBorder: true\n *   },\n *   {\n *     color: 'hsl(0, 75%, 60%)',\n *     label: 'Red'\n *   },\n *   {\n *     color: 'hsl(30, 75%, 60%)',\n *     label: 'Orange'\n *   },\n *   {\n *     color: 'hsl(60, 75%, 60%)',\n *     label: 'Yellow'\n *   },\n *   {\n *     color: 'hsl(90, 75%, 60%)',\n *     label: 'Light green'\n *   },\n *   {\n *     color: 'hsl(120, 75%, 60%)',\n *     label: 'Green'\n *   },\n *   {\n *     color: 'hsl(150, 75%, 60%)',\n *     label: 'Aquamarine'\n *   },\n *   {\n *     color: 'hsl(180, 75%, 60%)',\n *     label: 'Turquoise'\n *   },\n *   {\n *     color: 'hsl(210, 75%, 60%)',\n *     label: 'Light blue'\n *   },\n *   {\n *     color: 'hsl(240, 75%, 60%)',\n *     label: 'Blue'\n *   },\n *   {\n *     color: 'hsl(270, 75%, 60%)',\n *     label: 'Purple'\n *   }\n * ];\n * ```\n */ const defaultColors = [\n    {\n        color: 'hsl(0, 0%, 0%)',\n        label: 'Black'\n    },\n    {\n        color: 'hsl(0, 0%, 30%)',\n        label: 'Dim grey'\n    },\n    {\n        color: 'hsl(0, 0%, 60%)',\n        label: 'Grey'\n    },\n    {\n        color: 'hsl(0, 0%, 90%)',\n        label: 'Light grey'\n    },\n    {\n        color: 'hsl(0, 0%, 100%)',\n        label: 'White',\n        hasBorder: true\n    },\n    {\n        color: 'hsl(0, 75%, 60%)',\n        label: 'Red'\n    },\n    {\n        color: 'hsl(30, 75%, 60%)',\n        label: 'Orange'\n    },\n    {\n        color: 'hsl(60, 75%, 60%)',\n        label: 'Yellow'\n    },\n    {\n        color: 'hsl(90, 75%, 60%)',\n        label: 'Light green'\n    },\n    {\n        color: 'hsl(120, 75%, 60%)',\n        label: 'Green'\n    },\n    {\n        color: 'hsl(150, 75%, 60%)',\n        label: 'Aquamarine'\n    },\n    {\n        color: 'hsl(180, 75%, 60%)',\n        label: 'Turquoise'\n    },\n    {\n        color: 'hsl(210, 75%, 60%)',\n        label: 'Light blue'\n    },\n    {\n        color: 'hsl(240, 75%, 60%)',\n        label: 'Blue'\n    },\n    {\n        color: 'hsl(270, 75%, 60%)',\n        label: 'Purple'\n    }\n];\n/**\n * Returns a creator for a color input with a label.\n *\n * For given options, it returns a function that creates an instance of a\n * {@link module:table/ui/colorinputview~ColorInputView color input} logically related to\n * a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in the DOM.\n *\n * The helper does the following:\n *\n * * It sets the color input `id` and `ariaDescribedById` attributes.\n * * It binds the color input `isReadOnly` to the labeled view.\n * * It binds the color input `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when the user starts typing in the color input.\n *\n * Usage:\n *\n * ```ts\n * const colorInputCreator = getLabeledColorInputCreator( {\n *   colorConfig: [ ... ],\n *   columns: 3,\n * } );\n *\n * const labeledInputView = new LabeledFieldView( locale, colorInputCreator );\n * console.log( labeledInputView.view ); // A color input instance.\n * ```\n *\n * @internal\n * @param options Color input options.\n * @param options.colorConfig The configuration of the color palette displayed in the input's dropdown.\n * @param options.columns The configuration of the number of columns the color palette consists of in the input's dropdown.\n * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n * @param options.colorPickerConfig The configuration of the color picker. You could disable it or define your output format.\n */ function getLabeledColorInputCreator(options) {\n    return (labeledFieldView, viewUid, statusUid)=>{\n        const colorInputView = new ColorInputView(labeledFieldView.locale, {\n            colorDefinitions: colorConfigToColorGridDefinitions(options.colorConfig),\n            columns: options.columns,\n            defaultColorValue: options.defaultColorValue,\n            colorPickerConfig: options.colorPickerConfig\n        });\n        colorInputView.inputView.set({\n            id: viewUid,\n            ariaDescribedById: statusUid\n        });\n        colorInputView.bind('isReadOnly').to(labeledFieldView, 'isEnabled', (value)=>!value);\n        colorInputView.bind('hasError').to(labeledFieldView, 'errorText', (value)=>!!value);\n        colorInputView.on('input', ()=>{\n            // UX: Make the error text disappear and disable the error indicator as the user\n            // starts fixing the errors.\n            labeledFieldView.errorText = null;\n        });\n        labeledFieldView.bind('isEmpty', 'isFocused').to(colorInputView);\n        return colorInputView;\n    };\n}\n/**\n * A simple helper method to detect number strings.\n * I allows full number notation, so omitting 0 is not allowed:\n */ function isNumberString(value) {\n    const parsedValue = parseFloat(value);\n    return !Number.isNaN(parsedValue) && value === String(parsedValue);\n}\nfunction colorConfigToColorGridDefinitions(colorConfig) {\n    return colorConfig.map((item)=>({\n            color: item.model,\n            label: item.label,\n            options: {\n                hasBorder: item.hasBorder\n            }\n        }));\n}\n\n/**\n * The class representing a single row in a complex form,\n * used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}.\n *\n * **Note**: For now this class is private. When more use cases arrive (beyond ckeditor5-table),\n * it will become a component in ckeditor5-ui.\n *\n * @internal\n */ class FormRowView extends View {\n    /**\n\t * A collection of row items (buttons, dropdowns, etc.).\n\t */ children;\n    /**\n\t * Creates an instance of the form row class.\n\t *\n\t * @param locale The locale instance.\n\t * @param options.labelView When passed, the row gets the `group` and `aria-labelledby`\n\t * DOM attributes and gets described by the label.\n\t */ constructor(locale, options = {}){\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('class', options.class || null);\n        this.children = this.createCollection();\n        if (options.children) {\n            options.children.forEach((child)=>this.children.add(child));\n        }\n        this.set('_role', null);\n        this.set('_ariaLabelledBy', null);\n        if (options.labelView) {\n            this.set({\n                _role: 'group',\n                _ariaLabelledBy: options.labelView.id\n            });\n        }\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form__row',\n                    bind.to('class')\n                ],\n                role: bind.to('_role'),\n                'aria-labelledby': bind.to('_ariaLabelledBy')\n            },\n            children: this.children\n        });\n    }\n}\n\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n */ class TableCellPropertiesView extends View {\n    /**\n\t * Options passed to the view. See {@link #constructor} to learn more.\n\t */ options;\n    /**\n\t * Tracks information about the DOM focus in the form.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * A collection of child views in the form.\n\t */ children;\n    /**\n\t * A dropdown that allows selecting the style of the table cell border.\n\t */ borderStyleDropdown;\n    /**\n\t * An input that allows specifying the width of the table cell border.\n\t */ borderWidthInput;\n    /**\n\t * An input that allows specifying the color of the table cell border.\n\t */ borderColorInput;\n    /**\n\t * An input that allows specifying the table cell background color.\n\t */ backgroundInput;\n    /**\n\t * An input that allows specifying the table cell padding.\n\t */ paddingInput;\n    /**\n\t * An input that allows specifying the table cell width.\n\t */ widthInput;\n    /**\n\t * An input that allows specifying the table cell height.\n\t */ heightInput;\n    /**\n\t * A toolbar with buttons that allow changing the horizontal text alignment in a table cell.\n\t */ horizontalAlignmentToolbar;\n    /**\n\t * A toolbar with buttons that allow changing the vertical text alignment in a table cell.\n\t */ verticalAlignmentToolbar;\n    /**\n\t * The \"Save\" button view.\n\t */ saveButtonView;\n    /**\n\t * The \"Cancel\" button view.\n\t */ cancelButtonView;\n    /**\n\t * A collection of views that can be focused in the form.\n\t */ _focusables;\n    /**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */ _focusCycler;\n    /**\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Additional configuration of the view.\n\t * @param options.borderColors A configuration of the border color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#borderColorInput}.\n\t * @param options.backgroundColors A configuration of the background color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#backgroundInput}.\n\t * @param options.defaultTableCellProperties The default table cell properties.\n\t */ constructor(locale, options){\n        super(locale);\n        this.set({\n            borderStyle: '',\n            borderWidth: '',\n            borderColor: '',\n            padding: '',\n            backgroundColor: '',\n            width: '',\n            height: '',\n            horizontalAlignment: '',\n            verticalAlignment: ''\n        });\n        this.options = options;\n        const { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n        const { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n        const { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n        const { horizontalAlignmentToolbar, verticalAlignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.children = this.createCollection();\n        this.borderStyleDropdown = borderStyleDropdown;\n        this.borderWidthInput = borderWidthInput;\n        this.borderColorInput = borderColorInput;\n        this.backgroundInput = backgroundInput;\n        this.paddingInput = this._createPaddingField();\n        this.widthInput = widthInput;\n        this.heightInput = heightInput;\n        this.horizontalAlignmentToolbar = horizontalAlignmentToolbar;\n        this.verticalAlignmentToolbar = verticalAlignmentToolbar;\n        // Defer creating to make sure other fields are present and the Save button can\n        // bind its #isEnabled to their error messages so there's no way to save unless all\n        // fields are valid.\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        // Form header.\n        this.children.add(new FormHeaderView(locale, {\n            label: this.t('Cell properties')\n        }));\n        // Border row.\n        this.children.add(new FormRowView(locale, {\n            labelView: borderRowLabel,\n            children: [\n                borderRowLabel,\n                borderStyleDropdown,\n                borderColorInput,\n                borderWidthInput\n            ],\n            class: 'ck-table-form__border-row'\n        }));\n        // Background.\n        this.children.add(new FormRowView(locale, {\n            labelView: backgroundRowLabel,\n            children: [\n                backgroundRowLabel,\n                backgroundInput\n            ],\n            class: 'ck-table-form__background-row'\n        }));\n        // Dimensions row and padding.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                // Dimensions row.\n                new FormRowView(locale, {\n                    labelView: dimensionsLabel,\n                    children: [\n                        dimensionsLabel,\n                        widthInput,\n                        operatorLabel,\n                        heightInput\n                    ],\n                    class: 'ck-table-form__dimensions-row'\n                }),\n                // Padding row.\n                new FormRowView(locale, {\n                    children: [\n                        this.paddingInput\n                    ],\n                    class: 'ck-table-cell-properties-form__padding-row'\n                })\n            ]\n        }));\n        // Text alignment row.\n        this.children.add(new FormRowView(locale, {\n            labelView: alignmentLabel,\n            children: [\n                alignmentLabel,\n                horizontalAlignmentToolbar,\n                verticalAlignmentToolbar\n            ],\n            class: 'ck-table-cell-properties-form__alignment-row'\n        }));\n        // Action row.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                this.saveButtonView,\n                this.cancelButtonView\n            ],\n            class: 'ck-table-form__action-row'\n        }));\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form',\n                    'ck-table-form',\n                    'ck-table-cell-properties-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n        // which is of the \"submit\" DOM \"type\".\n        submitHandler({\n            view: this\n        });\n        // Maintain continuous focus cycling over views that have focusable children and focus cyclers themselves.\n        [\n            this.borderColorInput,\n            this.backgroundInput\n        ].forEach((view)=>{\n            this._focusCycler.chain(view.fieldView.focusCycler);\n        });\n        [\n            this.borderStyleDropdown,\n            this.borderColorInput,\n            this.borderWidthInput,\n            this.backgroundInput,\n            this.widthInput,\n            this.heightInput,\n            this.paddingInput,\n            this.horizontalAlignmentToolbar,\n            this.verticalAlignmentToolbar,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach((view)=>{\n            // Register the view as focusable.\n            this._focusables.add(view);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(view.element);\n        });\n        // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the fist focusable field in the form.\n\t */ focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t */ _createBorderFields() {\n        const defaultTableCellProperties = this.options.defaultTableCellProperties;\n        const defaultBorder = {\n            style: defaultTableCellProperties.borderStyle,\n            width: defaultTableCellProperties.borderWidth,\n            color: defaultTableCellProperties.borderColor\n        };\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.borderColors,\n            columns: 5,\n            defaultColorValue: defaultBorder.color,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const locale = this.locale;\n        const t = this.t;\n        const accessibleLabel = t('Style');\n        // -- Group label ---------------------------------------------\n        const borderRowLabel = new LabelView(locale);\n        borderRowLabel.text = t('Border');\n        // -- Style ---------------------------------------------------\n        const styleLabels = getBorderStyleLabels(t);\n        const borderStyleDropdown = new LabeledFieldView(locale, createLabeledDropdown);\n        borderStyleDropdown.set({\n            label: accessibleLabel,\n            class: 'ck-table-form__border-style'\n        });\n        borderStyleDropdown.fieldView.buttonView.set({\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false,\n            withText: true,\n            tooltip: accessibleLabel\n        });\n        borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', (value)=>{\n            return styleLabels[value ? value : 'none'];\n        });\n        borderStyleDropdown.fieldView.on('execute', (evt)=>{\n            this.borderStyle = evt.source._borderStyleValue;\n        });\n        borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', (value)=>!value);\n        addListToDropdown(borderStyleDropdown.fieldView, getBorderStyleDefinitions(this, defaultBorder.style), {\n            role: 'menu',\n            ariaLabel: accessibleLabel\n        });\n        // -- Width ---------------------------------------------------\n        const borderWidthInput = new LabeledFieldView(locale, createLabeledInputText);\n        borderWidthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__border-width'\n        });\n        borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n        borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet$1);\n        borderWidthInput.fieldView.on('input', ()=>{\n            this.borderWidth = borderWidthInput.fieldView.element.value;\n        });\n        // -- Color ---------------------------------------------------\n        const borderColorInput = new LabeledFieldView(locale, colorInputCreator);\n        borderColorInput.set({\n            label: t('Color'),\n            class: 'ck-table-form__border-color'\n        });\n        borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n        borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet$1);\n        borderColorInput.fieldView.on('input', ()=>{\n            this.borderColor = borderColorInput.fieldView.value;\n        });\n        // Reset the border color and width fields depending on the `border-style` value.\n        this.on('change:borderStyle', (evt, name, newValue, oldValue)=>{\n            // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n            // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n            if (!isBorderStyleSet$1(newValue)) {\n                this.borderColor = '';\n                this.borderWidth = '';\n            }\n            // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n            if (!isBorderStyleSet$1(oldValue)) {\n                this.borderColor = defaultBorder.color;\n                this.borderWidth = defaultBorder.width;\n            }\n        });\n        return {\n            borderRowLabel,\n            borderStyleDropdown,\n            borderColorInput,\n            borderWidthInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t */ _createBackgroundFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Group label ---------------------------------------------\n        const backgroundRowLabel = new LabelView(locale);\n        backgroundRowLabel.text = t('Background');\n        // -- Background color input -----------------------------------\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.backgroundColors,\n            columns: 5,\n            defaultColorValue: this.options.defaultTableCellProperties.backgroundColor,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const backgroundInput = new LabeledFieldView(locale, colorInputCreator);\n        backgroundInput.set({\n            label: t('Color'),\n            class: 'ck-table-cell-properties-form__background'\n        });\n        backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n        backgroundInput.fieldView.on('input', ()=>{\n            this.backgroundColor = backgroundInput.fieldView.value;\n        });\n        return {\n            backgroundRowLabel,\n            backgroundInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput}.\n\t * * {@link #heightInput}.\n\t */ _createDimensionFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const dimensionsLabel = new LabelView(locale);\n        dimensionsLabel.text = t('Dimensions');\n        // -- Width ---------------------------------------------------\n        const widthInput = new LabeledFieldView(locale, createLabeledInputText);\n        widthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__dimensions-row__width'\n        });\n        widthInput.fieldView.bind('value').to(this, 'width');\n        widthInput.fieldView.on('input', ()=>{\n            this.width = widthInput.fieldView.element.value;\n        });\n        // -- Operator ---------------------------------------------------\n        const operatorLabel = new View(locale);\n        operatorLabel.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck-table-form__dimension-operator'\n                ]\n            },\n            children: [\n                {\n                    text: '×'\n                }\n            ]\n        });\n        // -- Height ---------------------------------------------------\n        const heightInput = new LabeledFieldView(locale, createLabeledInputText);\n        heightInput.set({\n            label: t('Height'),\n            class: 'ck-table-form__dimensions-row__height'\n        });\n        heightInput.fieldView.bind('value').to(this, 'height');\n        heightInput.fieldView.on('input', ()=>{\n            this.height = heightInput.fieldView.element.value;\n        });\n        return {\n            dimensionsLabel,\n            widthInput,\n            operatorLabel,\n            heightInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #paddingInput}.\n\t */ _createPaddingField() {\n        const locale = this.locale;\n        const t = this.t;\n        const paddingInput = new LabeledFieldView(locale, createLabeledInputText);\n        paddingInput.set({\n            label: t('Padding'),\n            class: 'ck-table-cell-properties-form__padding'\n        });\n        paddingInput.fieldView.bind('value').to(this, 'padding');\n        paddingInput.fieldView.on('input', ()=>{\n            this.padding = paddingInput.fieldView.element.value;\n        });\n        return paddingInput;\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #horizontalAlignmentToolbar},\n\t * * {@link #verticalAlignmentToolbar}.\n\t */ _createAlignmentFields() {\n        const locale = this.locale;\n        const t = this.t;\n        const alignmentLabel = new LabelView(locale);\n        const ALIGNMENT_ICONS = {\n            left: icons.alignLeft,\n            center: icons.alignCenter,\n            right: icons.alignRight,\n            justify: icons.alignJustify,\n            top: icons.alignTop,\n            middle: icons.alignMiddle,\n            bottom: icons.alignBottom\n        };\n        alignmentLabel.text = t('Table cell text alignment');\n        // -- Horizontal ---------------------------------------------------\n        const horizontalAlignmentToolbar = new ToolbarView(locale);\n        const isContentRTL = locale.contentLanguageDirection === 'rtl';\n        horizontalAlignmentToolbar.set({\n            isCompact: true,\n            role: 'radiogroup',\n            ariaLabel: t('Horizontal text alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: horizontalAlignmentToolbar,\n            labels: this._horizontalAlignmentLabels,\n            propertyName: 'horizontalAlignment',\n            nameToValue: (name)=>{\n                // For the RTL content, we want to swap the buttons \"align to the left\" and \"align to the right\".\n                if (isContentRTL) {\n                    if (name === 'left') {\n                        return 'right';\n                    } else if (name === 'right') {\n                        return 'left';\n                    }\n                }\n                return name;\n            },\n            defaultValue: this.options.defaultTableCellProperties.horizontalAlignment\n        });\n        // -- Vertical -----------------------------------------------------\n        const verticalAlignmentToolbar = new ToolbarView(locale);\n        verticalAlignmentToolbar.set({\n            isCompact: true,\n            role: 'radiogroup',\n            ariaLabel: t('Vertical text alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: ALIGNMENT_ICONS,\n            toolbar: verticalAlignmentToolbar,\n            labels: this._verticalAlignmentLabels,\n            propertyName: 'verticalAlignment',\n            defaultValue: this.options.defaultTableCellProperties.verticalAlignment\n        });\n        return {\n            horizontalAlignmentToolbar,\n            verticalAlignmentToolbar,\n            alignmentLabel\n        };\n    }\n    /**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t */ _createActionButtons() {\n        const locale = this.locale;\n        const t = this.t;\n        const saveButtonView = new ButtonView(locale);\n        const cancelButtonView = new ButtonView(locale);\n        const fieldsThatShouldValidateToSave = [\n            this.borderWidthInput,\n            this.borderColorInput,\n            this.backgroundInput,\n            this.paddingInput\n        ];\n        saveButtonView.set({\n            label: t('Save'),\n            icon: icons.check,\n            class: 'ck-button-save',\n            type: 'submit',\n            withText: true\n        });\n        saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', (...errorTexts)=>{\n            return errorTexts.every((errorText)=>!errorText);\n        });\n        cancelButtonView.set({\n            label: t('Cancel'),\n            icon: icons.cancel,\n            class: 'ck-button-cancel',\n            withText: true\n        });\n        cancelButtonView.delegate('execute').to(this, 'cancel');\n        return {\n            saveButtonView,\n            cancelButtonView\n        };\n    }\n    /**\n\t * Provides localized labels for {@link #horizontalAlignmentToolbar} buttons.\n\t */ get _horizontalAlignmentLabels() {\n        const locale = this.locale;\n        const t = this.t;\n        const left = t('Align cell text to the left');\n        const center = t('Align cell text to the center');\n        const right = t('Align cell text to the right');\n        const justify = t('Justify cell text');\n        // Returns object with a proper order of labels.\n        if (locale.uiLanguageDirection === 'rtl') {\n            return {\n                right,\n                center,\n                left,\n                justify\n            };\n        } else {\n            return {\n                left,\n                center,\n                right,\n                justify\n            };\n        }\n    }\n    /**\n\t * Provides localized labels for {@link #verticalAlignmentToolbar} buttons.\n\t */ get _verticalAlignmentLabels() {\n        const t = this.t;\n        return {\n            top: t('Align cell text to the top'),\n            middle: t('Align cell text to the middle'),\n            bottom: t('Align cell text to the bottom')\n        };\n    }\n}\nfunction isBorderStyleSet$1(value) {\n    return value !== 'none';\n}\n\nconst BALLOON_POSITIONS = /* #__PURE__ */ (()=>[\n        BalloonPanelView.defaultPositions.northArrowSouth,\n        BalloonPanelView.defaultPositions.northArrowSouthWest,\n        BalloonPanelView.defaultPositions.northArrowSouthEast,\n        BalloonPanelView.defaultPositions.southArrowNorth,\n        BalloonPanelView.defaultPositions.southArrowNorthWest,\n        BalloonPanelView.defaultPositions.southArrowNorthEast,\n        BalloonPanelView.defaultPositions.viewportStickyNorth\n    ])();\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the table in the editor content, if one is selected.\n *\n * @param editor The editor instance.\n * @param target Either \"cell\" or \"table\". Determines the target the balloon will be attached to.\n */ function repositionContextualBalloon(editor, target) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    const selection = editor.editing.view.document.selection;\n    let position;\n    if (target === 'cell') {\n        if (getTableWidgetAncestor(selection)) {\n            position = getBalloonCellPositionData(editor);\n        }\n    } else if (getSelectionAffectedTableWidget(selection)) {\n        position = getBalloonTablePositionData(editor);\n    }\n    if (position) {\n        balloon.updatePosition(position);\n    }\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table in the editor content.\n *\n * @param editor The editor instance.\n */ function getBalloonTablePositionData(editor) {\n    const selection = editor.model.document.selection;\n    const modelTable = getSelectionAffectedTable(selection);\n    const viewTable = editor.editing.mapper.toViewElement(modelTable);\n    return {\n        target: editor.editing.view.domConverter.mapViewToDom(viewTable),\n        positions: BALLOON_POSITIONS\n    };\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table cell in the editor content.\n *\n * @param editor The editor instance.\n */ function getBalloonCellPositionData(editor) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const selection = editor.model.document.selection;\n    if (selection.rangeCount > 1) {\n        return {\n            target: ()=>createBoundingRect(selection.getRanges(), editor),\n            positions: BALLOON_POSITIONS\n        };\n    }\n    const modelTableCell = getTableCellAtPosition(selection.getFirstPosition());\n    const viewTableCell = mapper.toViewElement(modelTableCell);\n    return {\n        target: domConverter.mapViewToDom(viewTableCell),\n        positions: BALLOON_POSITIONS\n    };\n}\n/**\n * Returns the first selected table cell from a multi-cell or in-cell selection.\n *\n * @param position Document position.\n */ function getTableCellAtPosition(position) {\n    const isTableCellSelected = position.nodeAfter && position.nodeAfter.is('element', 'tableCell');\n    return isTableCellSelected ? position.nodeAfter : position.findAncestor('tableCell');\n}\n/**\n * Returns bounding rectangle for given model ranges.\n *\n * @param ranges Model ranges that the bounding rect should be returned for.\n * @param editor The editor instance.\n */ function createBoundingRect(ranges, editor) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const rects = Array.from(ranges).map((range)=>{\n        const modelTableCell = getTableCellAtPosition(range.start);\n        const viewTableCell = mapper.toViewElement(modelTableCell);\n        return new Rect(domConverter.mapViewToDom(viewTableCell));\n    });\n    return Rect.getBoundingRect(rects);\n}\n\nvar tableCellProperties = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m11.105 18-.17 1H2.5A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1h15A1.5 1.5 0 0 1 19 2.5v9.975l-.85-.124-.15-.302V8h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5h3.105zM2 12h5V8H2v4zm10-4H8v4h4V8zM2 2v5h5V2H2zm0 16h5v-5H2v5zM13 7h5V2h-5v5zM8 2v5h4V2H8z\\\" opacity=\\\".6\\\"/><path d=\\\"m15.5 11.5 1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM13 6a1 1 0 0 1 1 1v3.172a2.047 2.047 0 0 0-.293.443l-.858 1.736-1.916.28-.151.027A1.976 1.976 0 0 0 9.315 14H7a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm-1 2H8v4h4V8z\\\"/></svg>\";\n\n/**\n * Returns a string if all four values of box sides are equal.\n *\n * If a string is passed, it is treated as a single value (pass-through).\n *\n * ```ts\n * // Returns 'foo':\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'foo', left: 'foo' } );\n * getSingleValue( 'foo' );\n *\n * // Returns undefined:\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'bar', left: 'foo' } );\n * getSingleValue( { top: 'foo', right: 'foo' } );\n * ```\n */ function getSingleValue(objectOrString) {\n    if (!objectOrString || !isObject(objectOrString)) {\n        return objectOrString;\n    }\n    const { top, right, bottom, left } = objectOrString;\n    if (top == right && right == bottom && bottom == left) {\n        return top;\n    }\n}\n/**\n * Adds a unit to a value if the value is a number or a string representing a number.\n *\n * **Note**: It does nothing to non-numeric values.\n *\n * ```ts\n * getSingleValue( 25, 'px' ); // '25px'\n * getSingleValue( 25, 'em' ); // '25em'\n * getSingleValue( '25em', 'px' ); // '25em'\n * getSingleValue( 'foo', 'px' ); // 'foo'\n * ```\n *\n * @param defaultUnit A default unit added to a numeric value.\n */ function addDefaultUnitToNumericValue(value, defaultUnit) {\n    const numericValue = parseFloat(value);\n    if (Number.isNaN(numericValue)) {\n        return value;\n    }\n    if (String(numericValue) !== String(value)) {\n        return value;\n    }\n    return `${numericValue}${defaultUnit}`;\n}\n/**\n * Returns the normalized configuration.\n *\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */ function getNormalizedDefaultProperties(config, options = {}) {\n    const normalizedConfig = {\n        borderStyle: 'none',\n        borderWidth: '',\n        borderColor: '',\n        backgroundColor: '',\n        width: '',\n        height: '',\n        ...config\n    };\n    if (options.includeAlignmentProperty && !normalizedConfig.alignment) {\n        normalizedConfig.alignment = 'center';\n    }\n    if (options.includePaddingProperty && !normalizedConfig.padding) {\n        normalizedConfig.padding = '';\n    }\n    if (options.includeVerticalAlignmentProperty && !normalizedConfig.verticalAlignment) {\n        normalizedConfig.verticalAlignment = 'middle';\n    }\n    if (options.includeHorizontalAlignmentProperty && !normalizedConfig.horizontalAlignment) {\n        normalizedConfig.horizontalAlignment = options.isRightToLeftContent ? 'right' : 'left';\n    }\n    return normalizedConfig;\n}\n/**\n * Returns the normalized default table properties.\n *\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */ function getNormalizedDefaultTableProperties(config, options) {\n    return getNormalizedDefaultProperties({\n        // It adds support for border none in the table element, keep it in sync with the content styles\n        // See more: https://github.com/ckeditor/ckeditor5/issues/6841#issuecomment-1959195608\n        borderStyle: 'double',\n        borderColor: 'hsl(0, 0%, 70%)',\n        borderWidth: '1px',\n        ...config\n    }, options);\n}\n/**\n * Returns the normalized default cell properties.\n *\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */ function getNormalizedDefaultCellProperties(config, options) {\n    return getNormalizedDefaultProperties({\n        // It adds support for border none in the table element, keep it in sync with the content styles\n        // See more: https://github.com/ckeditor/ckeditor5/issues/6841#issuecomment-1959195608\n        borderStyle: 'solid',\n        borderColor: 'hsl(0, 0%, 75%)',\n        borderWidth: '1px',\n        ...config\n    }, options);\n}\n\nconst ERROR_TEXT_TIMEOUT$1 = 500;\n// Map of view properties and related commands.\nconst propertyToCommandMap$1 = {\n    borderStyle: 'tableCellBorderStyle',\n    borderColor: 'tableCellBorderColor',\n    borderWidth: 'tableCellBorderWidth',\n    height: 'tableCellHeight',\n    width: 'tableCellWidth',\n    padding: 'tableCellPadding',\n    backgroundColor: 'tableCellBackgroundColor',\n    horizontalAlignment: 'tableCellHorizontalAlignment',\n    verticalAlignment: 'tableCellVerticalAlignment'\n};\n/**\n * The table cell properties UI plugin. It introduces the `'tableCellProperties'` button\n * that opens a form allowing to specify the visual styling of a table cell.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */ class TableCellPropertiesUI extends Plugin {\n    /**\n\t * The default table cell properties.\n\t */ _defaultTableCellProperties;\n    /**\n\t * The contextual balloon plugin instance.\n\t */ _balloon;\n    /**\n\t * The cell properties form view displayed inside the balloon.\n\t */ view;\n    /**\n\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t */ _undoStepBatch;\n    /**\n\t * Flag used to indicate whether view is ready to execute update commands\n\t * (it finished loading initial data).\n\t */ _isReady;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCellPropertiesUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('table.tableCellProperties', {\n            borderColors: defaultColors,\n            backgroundColors: defaultColors\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._defaultTableCellProperties = getNormalizedDefaultCellProperties(editor.config.get('table.tableCellProperties.defaultProperties'), {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            includePaddingProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        this.view = null;\n        this._isReady = false;\n        editor.ui.componentFactory.add('tableCellProperties', (locale)=>{\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Cell properties'),\n                icon: tableCellProperties,\n                tooltip: true\n            });\n            this.listenTo(view, 'execute', ()=>this._showView());\n            const commands = Object.values(propertyToCommandMap$1).map((commandName)=>editor.commands.get(commandName));\n            view.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled)=>areEnabled.some((isCommandEnabled)=>isCommandEnabled));\n            return view;\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed.\n        // See https://github.com/ckeditor/ckeditor5/issues/1341.\n        if (this.view) {\n            this.view.destroy();\n        }\n    }\n    /**\n\t * Creates the {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView} instance.\n\t *\n\t * @returns The cell properties form view instance.\n\t */ _createPropertiesView() {\n        const editor = this.editor;\n        const config = editor.config.get('table.tableCellProperties');\n        const borderColorsConfig = normalizeColorOptions(config.borderColors);\n        const localizedBorderColors = getLocalizedColorOptions(editor.locale, borderColorsConfig);\n        const backgroundColorsConfig = normalizeColorOptions(config.backgroundColors);\n        const localizedBackgroundColors = getLocalizedColorOptions(editor.locale, backgroundColorsConfig);\n        const hasColorPicker = config.colorPicker !== false;\n        const view = new TableCellPropertiesView(editor.locale, {\n            borderColors: localizedBorderColors,\n            backgroundColors: localizedBackgroundColors,\n            defaultTableCellProperties: this._defaultTableCellProperties,\n            colorPickerConfig: hasColorPicker ? config.colorPicker || {} : false\n        });\n        const t = editor.t;\n        // Render the view so its #element is available for the clickOutsideHandler.\n        view.render();\n        this.listenTo(view, 'submit', ()=>{\n            this._hideView();\n        });\n        this.listenTo(view, 'cancel', ()=>{\n            // https://github.com/ckeditor/ckeditor5/issues/6180\n            if (this._undoStepBatch.operations.length) {\n                editor.execute('undo', this._undoStepBatch);\n            }\n            this._hideView();\n        });\n        // Close the balloon on Esc key press.\n        view.keystrokes.set('Esc', (data, cancel)=>{\n            this._hideView();\n            cancel();\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: view,\n            activator: ()=>this._isViewInBalloon,\n            contextElements: [\n                this._balloon.view.element\n            ],\n            callback: ()=>this._hideView()\n        });\n        const colorErrorText = getLocalizedColorErrorText(t);\n        const lengthErrorText = getLocalizedLengthErrorText(t);\n        // Create the \"UI -> editor data\" binding.\n        // These listeners update the editor data (via table commands) when any observable\n        // property of the view has changed. They also validate the value and display errors in the UI\n        // when necessary. This makes the view live, which means the changes are\n        // visible in the editing as soon as the user types or changes fields' values.\n        view.on('change:borderStyle', this._getPropertyChangeCallback('tableCellBorderStyle'));\n        view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderColorInput,\n            commandName: 'tableCellBorderColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderWidthInput,\n            commandName: 'tableCellBorderWidth',\n            errorText: lengthErrorText,\n            validator: lineWidthFieldValidator\n        }));\n        view.on('change:padding', this._getValidatedPropertyChangeCallback({\n            viewField: view.paddingInput,\n            commandName: 'tableCellPadding',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:width', this._getValidatedPropertyChangeCallback({\n            viewField: view.widthInput,\n            commandName: 'tableCellWidth',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:height', this._getValidatedPropertyChangeCallback({\n            viewField: view.heightInput,\n            commandName: 'tableCellHeight',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.backgroundInput,\n            commandName: 'tableCellBackgroundColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:horizontalAlignment', this._getPropertyChangeCallback('tableCellHorizontalAlignment'));\n        view.on('change:verticalAlignment', this._getPropertyChangeCallback('tableCellVerticalAlignment'));\n        return view;\n    }\n    /**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected cell property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t */ _fillViewFormFromCommandValues() {\n        const commands = this.editor.commands;\n        const borderStyleCommand = commands.get('tableCellBorderStyle');\n        Object.entries(propertyToCommandMap$1).map(([property, commandName])=>{\n            const defaultValue = this._defaultTableCellProperties[property] || '';\n            return [\n                property,\n                commands.get(commandName).value || defaultValue\n            ];\n        }).forEach(([property, value])=>{\n            // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n            if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n                return;\n            }\n            this.view.set(property, value);\n        });\n        this._isReady = true;\n    }\n    /**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, a new {@link #_undoStepBatch} is created. It contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t */ _showView() {\n        const editor = this.editor;\n        if (!this.view) {\n            this.view = this._createPropertiesView();\n        }\n        this.listenTo(editor.ui, 'update', ()=>{\n            this._updateView();\n        });\n        // Update the view with the model values.\n        this._fillViewFormFromCommandValues();\n        this._balloon.add({\n            view: this.view,\n            position: getBalloonCellPositionData(editor)\n        });\n        // Create a new batch. Clicking \"Cancel\" will undo this batch.\n        this._undoStepBatch = editor.model.createBatch();\n        // Basic a11y.\n        this.view.focus();\n    }\n    /**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t */ _hideView() {\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this._isReady = false;\n        // Blur any input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        this.view.saveButtonView.focus();\n        this._balloon.remove(this.view);\n        // Make sure the focus is not lost in the process by putting it directly\n        // into the editing view.\n        this.editor.editing.view.focus();\n    }\n    /**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table cell is no longer selected.\n\t */ _updateView() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        if (!getTableWidgetAncestor(viewDocument.selection)) {\n            this._hideView();\n        } else if (this._isViewVisible) {\n            repositionContextualBalloon(editor, 'cell');\n        }\n    }\n    /**\n\t * Returns `true` when the {@link #view} is visible in the {@link #_balloon}.\n\t */ get _isViewVisible() {\n        return !!this.view && this._balloon.visibleView === this.view;\n    }\n    /**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t */ get _isViewInBalloon() {\n        return !!this.view && this._balloon.hasView(this.view);\n    }\n    /**\n\t * Creates a callback that when executed upon the {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * @param defaultValue The default value of the command.\n\t */ _getPropertyChangeCallback(commandName) {\n        return (evt, propertyName, newValue)=>{\n            if (!this._isReady) {\n                return;\n            }\n            this.editor.execute(commandName, {\n                value: newValue,\n                batch: this._undoStepBatch\n            });\n        };\n    }\n    /**\n\t * Creates a callback that when executed upon the {@link #view view's} property change:\n\t * * Executes a related editor command with the new property value if the value is valid,\n\t * * Or sets the error text next to the invalid field, if the value did not pass the validation.\n\t */ _getValidatedPropertyChangeCallback(options) {\n        const { commandName, viewField, validator, errorText } = options;\n        const setErrorTextDebounced = debounce(()=>{\n            viewField.errorText = errorText;\n        }, ERROR_TEXT_TIMEOUT$1);\n        return (evt, propertyName, newValue)=>{\n            setErrorTextDebounced.cancel();\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            if (validator(newValue)) {\n                this.editor.execute(commandName, {\n                    value: newValue,\n                    batch: this._undoStepBatch\n                });\n                viewField.errorText = null;\n            } else {\n                setErrorTextDebounced();\n            }\n        };\n    }\n}\n\n/**\n * The table cell attribute command.\n *\n * The command is a base command for other table cell property commands.\n */ class TableCellPropertyCommand extends Command {\n    /**\n\t * The attribute that will be set by the command.\n\t */ attributeName;\n    /**\n\t * The default value for the attribute.\n\t */ _defaultValue;\n    /**\n\t * Creates a new `TableCellPropertyCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param attributeName Table cell attribute name.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, attributeName, defaultValue){\n        super(editor);\n        this.attributeName = attributeName;\n        this._defaultValue = defaultValue;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const selectedTableCells = tableUtils.getSelectionAffectedTableCells(editor.model.document.selection);\n        this.isEnabled = !!selectedTableCells.length;\n        this.value = this._getSingleValue(selectedTableCells);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.value If set, the command will set the attribute on selected table cells.\n\t * If it is not set, the command will remove the attribute from the selected table cells.\n\t * @param options.batch Pass the model batch instance to the command to aggregate changes,\n\t * for example to allow a single undo step for multiple executions.\n\t */ execute(options = {}) {\n        const { value, batch } = options;\n        const model = this.editor.model;\n        const tableUtils = this.editor.plugins.get('TableUtils');\n        const tableCells = tableUtils.getSelectionAffectedTableCells(model.document.selection);\n        const valueToSet = this._getValueToSet(value);\n        model.enqueueChange(batch, (writer)=>{\n            if (valueToSet) {\n                tableCells.forEach((tableCell)=>writer.setAttribute(this.attributeName, valueToSet, tableCell));\n            } else {\n                tableCells.forEach((tableCell)=>writer.removeAttribute(this.attributeName, tableCell));\n            }\n        });\n    }\n    /**\n\t * Returns the attribute value for a table cell.\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = tableCell.getAttribute(this.attributeName);\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t */ _getValueToSet(value) {\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * Returns a single value for all selected table cells. If the value is the same for all cells,\n\t * it will be returned (`undefined` otherwise).\n\t */ _getSingleValue(tableCells) {\n        const firstCellValue = this._getAttribute(tableCells[0]);\n        const everyCellHasAttribute = tableCells.every((tableCells)=>this._getAttribute(tableCells) === firstCellValue);\n        return everyCellHasAttribute ? firstCellValue : undefined;\n    }\n}\n\n/**\n * The table cell width command.\n *\n * The command is registered by the {@link module:table/tablecellwidth/tablecellwidthediting~TableCellWidthEditing} as\n * the `'tableCellWidth'` editor command.\n *\n * To change the width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds a default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */ class TableCellWidthCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellWidth', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table cell width editing feature.\n *\n * Introduces `tableCellWidth` table cell model attribute alongside with its converters\n * and a command.\n */ class TableCellWidthEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCellWidthEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const defaultTableCellProperties = getNormalizedDefaultCellProperties(editor.config.get('table.tableCellProperties.defaultProperties'));\n        enableProperty$1(editor.model.schema, editor.conversion, {\n            modelAttribute: 'tableCellWidth',\n            styleName: 'width',\n            defaultValue: defaultTableCellProperties.width\n        });\n        editor.commands.add('tableCellWidth', new TableCellWidthCommand(editor, defaultTableCellProperties.width));\n    }\n}\n\n/**\n * The table cell padding command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellPadding'` editor command.\n *\n * To change the padding of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `padding` attribute to `'5px'` in the model.\n */ class TableCellPaddingCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellPaddingCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellPadding', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n/**\n * The table cell height command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHeight'` editor command.\n *\n * To change the height of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */ class TableCellHeightCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellHeightCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellHeight', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n/**\n * The table cell background color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBackgroundColor'` editor command.\n *\n * To change the background color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */ class TableCellBackgroundColorCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellBackgroundColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellBackgroundColor', defaultValue);\n    }\n}\n\n/**\n * The table cell vertical alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellVerticalAlignment'` editor command.\n *\n * To change the vertical text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellVerticalAlignment', {\n *   value: 'top'\n * } );\n * ```\n *\n * The following values, corresponding to the\n * [`vertical-align` CSS attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align), are allowed:\n *\n * * `'top'`\n * * `'bottom'`\n *\n * The `'middle'` value is the default one so there is no need to set it.\n */ class TableCellVerticalAlignmentCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellVerticalAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellVerticalAlignment', defaultValue);\n    }\n}\n\n/**\n * The table cell horizontal alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHorizontalAlignment'` editor command.\n *\n * To change the horizontal text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHorizontalAlignment', {\n *  value: 'right'\n * } );\n * ```\n */ class TableCellHorizontalAlignmentCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellHorizontalAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellHorizontalAlignment', defaultValue);\n    }\n}\n\n/**\n * The table cell border style command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderStyle'` editor command.\n *\n * To change the border style of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */ class TableCellBorderStyleCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellBorderStyleCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellBorderStyle', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table cell border color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderColor'` editor command.\n *\n * To change the border color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */ class TableCellBorderColorCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellBorderColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellBorderColor', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table cell border width command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderWidth'` editor command.\n *\n * To change the border width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */ class TableCellBorderWidthCommand extends TableCellPropertyCommand {\n    /**\n\t * Creates a new `TableCellBorderWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableCellBorderWidth', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getAttribute(tableCell) {\n        if (!tableCell) {\n            return;\n        }\n        const value = getSingleValue(tableCell.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\nconst VALIGN_VALUES_REG_EXP = /^(top|middle|bottom)$/;\nconst ALIGN_VALUES_REG_EXP$1 = /^(left|center|right|justify)$/;\n/**\n * The table cell properties editing feature.\n *\n * Introduces table cell model attributes and their conversion:\n *\n * - border: `tableCellBorderStyle`, `tableCellBorderColor` and `tableCellBorderWidth`\n * - background color: `tableCellBackgroundColor`\n * - cell padding: `tableCellPadding`\n * - horizontal and vertical alignment: `tableCellHorizontalAlignment`, `tableCellVerticalAlignment`\n * - cell width and height: `tableCellWidth`, `tableCellHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` commands\n * - background color: the `'tableCellBackgroundColor'` command\n * - cell padding: the `'tableCellPadding'` command\n * - horizontal and vertical alignment: the `'tableCellHorizontalAlignment'` and `'tableCellVerticalAlignment'` commands\n * - width and height: the `'tableCellWidth'` and `'tableCellHeight'` commands\n */ class TableCellPropertiesEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCellPropertiesEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing,\n            TableCellWidthEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        editor.config.define('table.tableCellProperties.defaultProperties', {});\n        const defaultTableCellProperties = getNormalizedDefaultCellProperties(editor.config.get('table.tableCellProperties.defaultProperties'), {\n            includeVerticalAlignmentProperty: true,\n            includeHorizontalAlignmentProperty: true,\n            includePaddingProperty: true,\n            isRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n        });\n        editor.data.addStyleProcessorRules(addBorderRules);\n        enableBorderProperties$1(schema, conversion, {\n            color: defaultTableCellProperties.borderColor,\n            style: defaultTableCellProperties.borderStyle,\n            width: defaultTableCellProperties.borderWidth\n        });\n        editor.commands.add('tableCellBorderStyle', new TableCellBorderStyleCommand(editor, defaultTableCellProperties.borderStyle));\n        editor.commands.add('tableCellBorderColor', new TableCellBorderColorCommand(editor, defaultTableCellProperties.borderColor));\n        editor.commands.add('tableCellBorderWidth', new TableCellBorderWidthCommand(editor, defaultTableCellProperties.borderWidth));\n        enableProperty$1(schema, conversion, {\n            modelAttribute: 'tableCellHeight',\n            styleName: 'height',\n            defaultValue: defaultTableCellProperties.height\n        });\n        editor.commands.add('tableCellHeight', new TableCellHeightCommand(editor, defaultTableCellProperties.height));\n        editor.data.addStyleProcessorRules(addPaddingRules);\n        enableProperty$1(schema, conversion, {\n            modelAttribute: 'tableCellPadding',\n            styleName: 'padding',\n            reduceBoxSides: true,\n            defaultValue: defaultTableCellProperties.padding\n        });\n        editor.commands.add('tableCellPadding', new TableCellPaddingCommand(editor, defaultTableCellProperties.padding));\n        editor.data.addStyleProcessorRules(addBackgroundRules);\n        enableProperty$1(schema, conversion, {\n            modelAttribute: 'tableCellBackgroundColor',\n            styleName: 'background-color',\n            defaultValue: defaultTableCellProperties.backgroundColor\n        });\n        editor.commands.add('tableCellBackgroundColor', new TableCellBackgroundColorCommand(editor, defaultTableCellProperties.backgroundColor));\n        enableHorizontalAlignmentProperty(schema, conversion, defaultTableCellProperties.horizontalAlignment);\n        editor.commands.add('tableCellHorizontalAlignment', new TableCellHorizontalAlignmentCommand(editor, defaultTableCellProperties.horizontalAlignment));\n        enableVerticalAlignmentProperty(schema, conversion, defaultTableCellProperties.verticalAlignment);\n        editor.commands.add('tableCellVerticalAlignment', new TableCellVerticalAlignmentCommand(editor, defaultTableCellProperties.verticalAlignment));\n    }\n}\n/**\n * Enables the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` attributes for table cells.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableCellBorderColor` value.\n * @param defaultBorder.style The default `tableCellBorderStyle` value.\n * @param defaultBorder.width The default `tableCellBorderWidth` value.\n */ function enableBorderProperties$1(schema, conversion, defaultBorder) {\n    const modelAttributes = {\n        width: 'tableCellBorderWidth',\n        color: 'tableCellBorderColor',\n        style: 'tableCellBorderStyle'\n    };\n    schema.extend('tableCell', {\n        allowAttributes: Object.values(modelAttributes)\n    });\n    upcastBorderStyles(conversion, 'td', modelAttributes, defaultBorder);\n    upcastBorderStyles(conversion, 'th', modelAttributes, defaultBorder);\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'tableCell',\n        modelAttribute: modelAttributes.style,\n        styleName: 'border-style'\n    });\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'tableCell',\n        modelAttribute: modelAttributes.color,\n        styleName: 'border-color'\n    });\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'tableCell',\n        modelAttribute: modelAttributes.width,\n        styleName: 'border-width'\n    });\n}\n/**\n * Enables the `'tableCellHorizontalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default horizontal alignment value.\n */ function enableHorizontalAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('tableCell', {\n        allowAttributes: [\n            'tableCellHorizontalAlignment'\n        ]\n    });\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: 'tableCell',\n            key: 'tableCellHorizontalAlignment'\n        },\n        view: (alignment)=>({\n                key: 'style',\n                value: {\n                    'text-align': alignment\n                }\n            })\n    });\n    conversion.for('upcast')// Support for the `text-align:*;` CSS definition for the table cell alignment.\n    .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            styles: {\n                'text-align': ALIGN_VALUES_REG_EXP$1\n            }\n        },\n        model: {\n            key: 'tableCellHorizontalAlignment',\n            value: (viewElement)=>{\n                const align = viewElement.getStyle('text-align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    })// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n    .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            attributes: {\n                align: ALIGN_VALUES_REG_EXP$1\n            }\n        },\n        model: {\n            key: 'tableCellHorizontalAlignment',\n            value: (viewElement)=>{\n                const align = viewElement.getAttribute('align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    });\n}\n/**\n * Enables the `'verticalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default vertical alignment value.\n */ function enableVerticalAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('tableCell', {\n        allowAttributes: [\n            'tableCellVerticalAlignment'\n        ]\n    });\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: 'tableCell',\n            key: 'tableCellVerticalAlignment'\n        },\n        view: (alignment)=>({\n                key: 'style',\n                value: {\n                    'vertical-align': alignment\n                }\n            })\n    });\n    conversion.for('upcast')// Support for the `vertical-align:*;` CSS definition for the table cell alignment.\n    .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            styles: {\n                'vertical-align': VALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellVerticalAlignment',\n            value: (viewElement)=>{\n                const align = viewElement.getStyle('vertical-align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    })// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n    .attributeToAttribute({\n        view: {\n            name: /^(td|th)$/,\n            attributes: {\n                valign: VALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableCellVerticalAlignment',\n            value: (viewElement)=>{\n                const valign = viewElement.getAttribute('valign');\n                return valign === defaultValue ? null : valign;\n            }\n        }\n    });\n}\n\n/**\n * The table cell properties feature. Enables support for setting properties of table cells (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tableproperties~TableProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing table cell properties editing feature} and\n * the {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI table cell properties UI feature}.\n */ class TableCellProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCellProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableCellPropertiesEditing,\n            TableCellPropertiesUI\n        ];\n    }\n}\n\n/**\n * The table cell attribute command.\n *\n * This command is a base command for other table property commands.\n */ class TablePropertyCommand extends Command {\n    /**\n\t * The attribute that will be set by the command.\n\t */ attributeName;\n    /**\n\t * The default value for the attribute.\n\t */ _defaultValue;\n    /**\n\t * Creates a new `TablePropertyCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param attributeName Table cell attribute name.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, attributeName, defaultValue){\n        super(editor);\n        this.attributeName = attributeName;\n        this._defaultValue = defaultValue;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const table = getSelectionAffectedTable(selection);\n        this.isEnabled = !!table;\n        this.value = this._getValue(table);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.value If set, the command will set the attribute on the selected table.\n\t * If not set, the command will remove the attribute from the selected table.\n\t * @param options.batch Pass the model batch instance to the command to aggregate changes,\n\t * for example, to allow a single undo step for multiple executions.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const { value, batch } = options;\n        const table = getSelectionAffectedTable(selection);\n        const valueToSet = this._getValueToSet(value);\n        model.enqueueChange(batch, (writer)=>{\n            if (valueToSet) {\n                writer.setAttribute(this.attributeName, valueToSet, table);\n            } else {\n                writer.removeAttribute(this.attributeName, table);\n            }\n        });\n    }\n    /**\n\t * Returns the attribute value for a table.\n\t */ _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = table.getAttribute(this.attributeName);\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t */ _getValueToSet(value) {\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table background color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBackgroundColor'` editor command.\n *\n * To change the background color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */ class TableBackgroundColorCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableBackgroundColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableBackgroundColor', defaultValue);\n    }\n}\n\n/**\n * The table border color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderColor'` editor command.\n *\n * To change the border color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */ class TableBorderColorCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableBorderColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableBorderColor', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table style border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderStyle'` editor command.\n *\n * To change the border style of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */ class TableBorderStyleCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableBorderStyleCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableBorderStyle', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table width border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderWidth'` editor command.\n *\n * To change the border width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */ class TableBorderWidthCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableBorderWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableBorderWidth', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValue(table) {\n        if (!table) {\n            return;\n        }\n        const value = getSingleValue(table.getAttribute(this.attributeName));\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        const newValue = addDefaultUnitToNumericValue(value, 'px');\n        if (newValue === this._defaultValue) {\n            return;\n        }\n        return newValue;\n    }\n}\n\n/**\n * The table width command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableWidth'` editor command.\n *\n * To change the width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '400px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */ class TableWidthCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableWidth', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table height command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableHeight'` editor command.\n *\n * To change the height of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '500px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */ class TableHeightCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableHeightCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableHeight', defaultValue);\n    }\n    /**\n\t * @inheritDoc\n\t */ _getValueToSet(value) {\n        value = addDefaultUnitToNumericValue(value, 'px');\n        if (value === this._defaultValue) {\n            return;\n        }\n        return value;\n    }\n}\n\n/**\n * The table alignment command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableAlignment'` editor command.\n *\n * To change the alignment of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableAlignment', {\n *   value: 'right'\n * } );\n * ```\n */ class TableAlignmentCommand extends TablePropertyCommand {\n    /**\n\t * Creates a new `TableAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */ constructor(editor, defaultValue){\n        super(editor, 'tableAlignment', defaultValue);\n    }\n}\n\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right)$/;\nconst FLOAT_VALUES_REG_EXP = /^(left|none|right)$/;\n/**\n * The table properties editing feature.\n *\n * Introduces table's model attributes and their conversion:\n *\n * - border: `tableBorderStyle`, `tableBorderColor` and `tableBorderWidth`\n * - background color: `tableBackgroundColor`\n * - horizontal alignment: `tableAlignment`\n * - width & height: `tableWidth` & `tableHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: `'tableBorderStyle'`, `'tableBorderColor'` and `'tableBorderWidth'` commands\n * - background color: `'tableBackgroundColor'`\n * - horizontal alignment: `'tableAlignment'`\n * - width & height: `'tableWidth'` & `'tableHeight'`\n */ class TablePropertiesEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TablePropertiesEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        editor.config.define('table.tableProperties.defaultProperties', {});\n        const defaultTableProperties = getNormalizedDefaultTableProperties(editor.config.get('table.tableProperties.defaultProperties'), {\n            includeAlignmentProperty: true\n        });\n        editor.data.addStyleProcessorRules(addBorderRules);\n        enableBorderProperties(schema, conversion, {\n            color: defaultTableProperties.borderColor,\n            style: defaultTableProperties.borderStyle,\n            width: defaultTableProperties.borderWidth\n        });\n        editor.commands.add('tableBorderColor', new TableBorderColorCommand(editor, defaultTableProperties.borderColor));\n        editor.commands.add('tableBorderStyle', new TableBorderStyleCommand(editor, defaultTableProperties.borderStyle));\n        editor.commands.add('tableBorderWidth', new TableBorderWidthCommand(editor, defaultTableProperties.borderWidth));\n        enableAlignmentProperty(schema, conversion, defaultTableProperties.alignment);\n        editor.commands.add('tableAlignment', new TableAlignmentCommand(editor, defaultTableProperties.alignment));\n        enableTableToFigureProperty(schema, conversion, {\n            modelAttribute: 'tableWidth',\n            styleName: 'width',\n            defaultValue: defaultTableProperties.width\n        });\n        editor.commands.add('tableWidth', new TableWidthCommand(editor, defaultTableProperties.width));\n        enableTableToFigureProperty(schema, conversion, {\n            modelAttribute: 'tableHeight',\n            styleName: 'height',\n            defaultValue: defaultTableProperties.height\n        });\n        editor.commands.add('tableHeight', new TableHeightCommand(editor, defaultTableProperties.height));\n        editor.data.addStyleProcessorRules(addBackgroundRules);\n        enableProperty(schema, conversion, {\n            modelAttribute: 'tableBackgroundColor',\n            styleName: 'background-color',\n            defaultValue: defaultTableProperties.backgroundColor\n        });\n        editor.commands.add('tableBackgroundColor', new TableBackgroundColorCommand(editor, defaultTableProperties.backgroundColor));\n    }\n}\n/**\n * Enables `tableBorderStyle'`, `tableBorderColor'` and `tableBorderWidth'` attributes for table.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableBorderColor` value.\n * @param defaultBorder.style The default `tableBorderStyle` value.\n * @param defaultBorder.width The default `tableBorderWidth` value.\n */ function enableBorderProperties(schema, conversion, defaultBorder) {\n    const modelAttributes = {\n        width: 'tableBorderWidth',\n        color: 'tableBorderColor',\n        style: 'tableBorderStyle'\n    };\n    schema.extend('table', {\n        allowAttributes: Object.values(modelAttributes)\n    });\n    upcastBorderStyles(conversion, 'table', modelAttributes, defaultBorder);\n    downcastTableAttribute(conversion, {\n        modelAttribute: modelAttributes.color,\n        styleName: 'border-color'\n    });\n    downcastTableAttribute(conversion, {\n        modelAttribute: modelAttributes.style,\n        styleName: 'border-style'\n    });\n    downcastTableAttribute(conversion, {\n        modelAttribute: modelAttributes.width,\n        styleName: 'border-width'\n    });\n}\n/**\n * Enables the `'alignment'` attribute for table.\n *\n * @param defaultValue The default alignment value.\n */ function enableAlignmentProperty(schema, conversion, defaultValue) {\n    schema.extend('table', {\n        allowAttributes: [\n            'tableAlignment'\n        ]\n    });\n    conversion.for('downcast').attributeToAttribute({\n        model: {\n            name: 'table',\n            key: 'tableAlignment'\n        },\n        view: (alignment)=>({\n                key: 'style',\n                value: {\n                    // Model: `alignment:center` => CSS: `float:none`.\n                    float: alignment === 'center' ? 'none' : alignment\n                }\n            }),\n        converterPriority: 'high'\n    });\n    conversion.for('upcast')// Support for the `float:*;` CSS definition for the table alignment.\n    .attributeToAttribute({\n        view: {\n            name: /^(table|figure)$/,\n            styles: {\n                float: FLOAT_VALUES_REG_EXP\n            }\n        },\n        model: {\n            key: 'tableAlignment',\n            value: (viewElement)=>{\n                let align = viewElement.getStyle('float');\n                // CSS: `float:none` => Model: `alignment:center`.\n                if (align === 'none') {\n                    align = 'center';\n                }\n                return align === defaultValue ? null : align;\n            }\n        }\n    })// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n    .attributeToAttribute({\n        view: {\n            attributes: {\n                align: ALIGN_VALUES_REG_EXP\n            }\n        },\n        model: {\n            name: 'table',\n            key: 'tableAlignment',\n            value: (viewElement)=>{\n                const align = viewElement.getAttribute('align');\n                return align === defaultValue ? null : align;\n            }\n        }\n    });\n}\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */ function enableProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('table', {\n        allowAttributes: [\n            modelAttribute\n        ]\n    });\n    upcastStyleToAttribute(conversion, {\n        viewElement: 'table',\n        ...options\n    });\n    downcastTableAttribute(conversion, options);\n}\n/**\n * Enables conversion for an attribute for simple view (figure) to model (table) mappings.\n */ function enableTableToFigureProperty(schema, conversion, options) {\n    const { modelAttribute } = options;\n    schema.extend('table', {\n        allowAttributes: [\n            modelAttribute\n        ]\n    });\n    upcastStyleToAttribute(conversion, {\n        viewElement: /^(table|figure)$/,\n        shouldUpcast: (element)=>!(element.name == 'table' && element.parent.name == 'figure'),\n        ...options\n    });\n    downcastAttributeToStyle(conversion, {\n        modelElement: 'table',\n        ...options\n    });\n}\n\n/**\n * The class representing a table properties form, allowing users to customize\n * certain style aspects of a table, for instance, border, background color, alignment, etc..\n */ class TablePropertiesView extends View {\n    /**\n\t * Options passed to the view. See {@link #constructor} to learn more.\n\t */ options;\n    /**\n\t * Tracks information about the DOM focus in the form.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * A collection of child views in the form.\n\t */ children;\n    /**\n\t * A dropdown that allows selecting the style of the table border.\n\t */ borderStyleDropdown;\n    /**\n\t * An input that allows specifying the width of the table border.\n\t */ borderWidthInput;\n    /**\n\t * An input that allows specifying the color of the table border.\n\t */ borderColorInput;\n    /**\n\t * An input that allows specifying the table background color.\n\t */ backgroundInput;\n    /**\n\t * An input that allows specifying the table width.\n\t */ widthInput;\n    /**\n\t * An input that allows specifying the table height.\n\t */ heightInput;\n    /**\n\t * A toolbar with buttons that allow changing the alignment of an entire table.\n\t */ alignmentToolbar;\n    /**\n\t * The \"Save\" button view.\n\t */ saveButtonView;\n    /**\n\t * The \"Cancel\" button view.\n\t */ cancelButtonView;\n    /**\n\t * A collection of views that can be focused in the form.\n\t */ _focusables;\n    /**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */ _focusCycler;\n    /**\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Additional configuration of the view.\n\t */ constructor(locale, options){\n        super(locale);\n        this.set({\n            borderStyle: '',\n            borderWidth: '',\n            borderColor: '',\n            backgroundColor: '',\n            width: '',\n            height: '',\n            alignment: ''\n        });\n        this.options = options;\n        const { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n        const { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n        const { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n        const { alignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.children = this.createCollection();\n        this.borderStyleDropdown = borderStyleDropdown;\n        this.borderWidthInput = borderWidthInput;\n        this.borderColorInput = borderColorInput;\n        this.backgroundInput = backgroundInput;\n        this.widthInput = widthInput;\n        this.heightInput = heightInput;\n        this.alignmentToolbar = alignmentToolbar;\n        // Defer creating to make sure other fields are present and the Save button can\n        // bind its #isEnabled to their error messages so there's no way to save unless all\n        // fields are valid.\n        const { saveButtonView, cancelButtonView } = this._createActionButtons();\n        this.saveButtonView = saveButtonView;\n        this.cancelButtonView = cancelButtonView;\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        // Form header.\n        this.children.add(new FormHeaderView(locale, {\n            label: this.t('Table properties')\n        }));\n        // Border row.\n        this.children.add(new FormRowView(locale, {\n            labelView: borderRowLabel,\n            children: [\n                borderRowLabel,\n                borderStyleDropdown,\n                borderColorInput,\n                borderWidthInput\n            ],\n            class: 'ck-table-form__border-row'\n        }));\n        // Background row.\n        this.children.add(new FormRowView(locale, {\n            labelView: backgroundRowLabel,\n            children: [\n                backgroundRowLabel,\n                backgroundInput\n            ],\n            class: 'ck-table-form__background-row'\n        }));\n        this.children.add(new FormRowView(locale, {\n            children: [\n                // Dimensions row.\n                new FormRowView(locale, {\n                    labelView: dimensionsLabel,\n                    children: [\n                        dimensionsLabel,\n                        widthInput,\n                        operatorLabel,\n                        heightInput\n                    ],\n                    class: 'ck-table-form__dimensions-row'\n                }),\n                // Alignment row.\n                new FormRowView(locale, {\n                    labelView: alignmentLabel,\n                    children: [\n                        alignmentLabel,\n                        alignmentToolbar\n                    ],\n                    class: 'ck-table-properties-form__alignment-row'\n                })\n            ]\n        }));\n        // Action row.\n        this.children.add(new FormRowView(locale, {\n            children: [\n                this.saveButtonView,\n                this.cancelButtonView\n            ],\n            class: 'ck-table-form__action-row'\n        }));\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-form',\n                    'ck-table-form',\n                    'ck-table-properties-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        // Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n        // which is of the \"submit\" DOM \"type\".\n        submitHandler({\n            view: this\n        });\n        // Maintain continuous focus cycling over views that have focusable children and focus cyclers themselves.\n        [\n            this.borderColorInput,\n            this.backgroundInput\n        ].forEach((view)=>{\n            this._focusCycler.chain(view.fieldView.focusCycler);\n        });\n        [\n            this.borderStyleDropdown,\n            this.borderColorInput,\n            this.borderWidthInput,\n            this.backgroundInput,\n            this.widthInput,\n            this.heightInput,\n            this.alignmentToolbar,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach((view)=>{\n            // Register the view as focusable.\n            this._focusables.add(view);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(view.element);\n        });\n        // Mainly for closing using \"Esc\" and navigation using \"Tab\".\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the fist focusable field in the form.\n\t */ focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t */ _createBorderFields() {\n        const defaultTableProperties = this.options.defaultTableProperties;\n        const defaultBorder = {\n            style: defaultTableProperties.borderStyle,\n            width: defaultTableProperties.borderWidth,\n            color: defaultTableProperties.borderColor\n        };\n        const colorInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.borderColors,\n            columns: 5,\n            defaultColorValue: defaultBorder.color,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const locale = this.locale;\n        const t = this.t;\n        const accessibleLabel = t('Style');\n        // -- Group label ---------------------------------------------\n        const borderRowLabel = new LabelView(locale);\n        borderRowLabel.text = t('Border');\n        // -- Style ---------------------------------------------------\n        const styleLabels = getBorderStyleLabels(t);\n        const borderStyleDropdown = new LabeledFieldView(locale, createLabeledDropdown);\n        borderStyleDropdown.set({\n            label: accessibleLabel,\n            class: 'ck-table-form__border-style'\n        });\n        borderStyleDropdown.fieldView.buttonView.set({\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false,\n            withText: true,\n            tooltip: accessibleLabel\n        });\n        borderStyleDropdown.fieldView.buttonView.bind('label').to(this, 'borderStyle', (value)=>{\n            return styleLabels[value ? value : 'none'];\n        });\n        borderStyleDropdown.fieldView.on('execute', (evt)=>{\n            this.borderStyle = evt.source._borderStyleValue;\n        });\n        borderStyleDropdown.bind('isEmpty').to(this, 'borderStyle', (value)=>!value);\n        addListToDropdown(borderStyleDropdown.fieldView, getBorderStyleDefinitions(this, defaultBorder.style), {\n            role: 'menu',\n            ariaLabel: accessibleLabel\n        });\n        // -- Width ---------------------------------------------------\n        const borderWidthInput = new LabeledFieldView(locale, createLabeledInputText);\n        borderWidthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__border-width'\n        });\n        borderWidthInput.fieldView.bind('value').to(this, 'borderWidth');\n        borderWidthInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderWidthInput.fieldView.on('input', ()=>{\n            this.borderWidth = borderWidthInput.fieldView.element.value;\n        });\n        // -- Color ---------------------------------------------------\n        const borderColorInput = new LabeledFieldView(locale, colorInputCreator);\n        borderColorInput.set({\n            label: t('Color'),\n            class: 'ck-table-form__border-color'\n        });\n        borderColorInput.fieldView.bind('value').to(this, 'borderColor');\n        borderColorInput.bind('isEnabled').to(this, 'borderStyle', isBorderStyleSet);\n        borderColorInput.fieldView.on('input', ()=>{\n            this.borderColor = borderColorInput.fieldView.value;\n        });\n        // Reset the border color and width fields depending on the `border-style` value.\n        this.on('change:borderStyle', (evt, name, newValue, oldValue)=>{\n            // When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n            // See: https://github.com/ckeditor/ckeditor5/issues/6227.\n            if (!isBorderStyleSet(newValue)) {\n                this.borderColor = '';\n                this.borderWidth = '';\n            }\n            // When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n            if (!isBorderStyleSet(oldValue)) {\n                this.borderColor = defaultBorder.color;\n                this.borderWidth = defaultBorder.width;\n            }\n        });\n        return {\n            borderRowLabel,\n            borderStyleDropdown,\n            borderColorInput,\n            borderWidthInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t */ _createBackgroundFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Group label ---------------------------------------------\n        const backgroundRowLabel = new LabelView(locale);\n        backgroundRowLabel.text = t('Background');\n        // -- Background color input -----------------------------------\n        const backgroundInputCreator = getLabeledColorInputCreator({\n            colorConfig: this.options.backgroundColors,\n            columns: 5,\n            defaultColorValue: this.options.defaultTableProperties.backgroundColor,\n            colorPickerConfig: this.options.colorPickerConfig\n        });\n        const backgroundInput = new LabeledFieldView(locale, backgroundInputCreator);\n        backgroundInput.set({\n            label: t('Color'),\n            class: 'ck-table-properties-form__background'\n        });\n        backgroundInput.fieldView.bind('value').to(this, 'backgroundColor');\n        backgroundInput.fieldView.on('input', ()=>{\n            this.backgroundColor = backgroundInput.fieldView.value;\n        });\n        return {\n            backgroundRowLabel,\n            backgroundInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput},\n\t * * {@link #heightInput}.\n\t */ _createDimensionFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const dimensionsLabel = new LabelView(locale);\n        dimensionsLabel.text = t('Dimensions');\n        // -- Width ---------------------------------------------------\n        const widthInput = new LabeledFieldView(locale, createLabeledInputText);\n        widthInput.set({\n            label: t('Width'),\n            class: 'ck-table-form__dimensions-row__width'\n        });\n        widthInput.fieldView.bind('value').to(this, 'width');\n        widthInput.fieldView.on('input', ()=>{\n            this.width = widthInput.fieldView.element.value;\n        });\n        // -- Operator ---------------------------------------------------\n        const operatorLabel = new View(locale);\n        operatorLabel.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck-table-form__dimension-operator'\n                ]\n            },\n            children: [\n                {\n                    text: '×'\n                }\n            ]\n        });\n        // -- Height ---------------------------------------------------\n        const heightInput = new LabeledFieldView(locale, createLabeledInputText);\n        heightInput.set({\n            label: t('Height'),\n            class: 'ck-table-form__dimensions-row__height'\n        });\n        heightInput.fieldView.bind('value').to(this, 'height');\n        heightInput.fieldView.on('input', ()=>{\n            this.height = heightInput.fieldView.element.value;\n        });\n        return {\n            dimensionsLabel,\n            widthInput,\n            operatorLabel,\n            heightInput\n        };\n    }\n    /**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #alignmentToolbar}.\n\t */ _createAlignmentFields() {\n        const locale = this.locale;\n        const t = this.t;\n        // -- Label ---------------------------------------------------\n        const alignmentLabel = new LabelView(locale);\n        alignmentLabel.text = t('Alignment');\n        // -- Toolbar ---------------------------------------------------\n        const alignmentToolbar = new ToolbarView(locale);\n        alignmentToolbar.set({\n            role: 'radiogroup',\n            isCompact: true,\n            ariaLabel: t('Table alignment toolbar')\n        });\n        fillToolbar({\n            view: this,\n            icons: {\n                left: icons.objectLeft,\n                center: icons.objectCenter,\n                right: icons.objectRight\n            },\n            toolbar: alignmentToolbar,\n            labels: this._alignmentLabels,\n            propertyName: 'alignment',\n            defaultValue: this.options.defaultTableProperties.alignment\n        });\n        return {\n            alignmentLabel,\n            alignmentToolbar\n        };\n    }\n    /**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t */ _createActionButtons() {\n        const locale = this.locale;\n        const t = this.t;\n        const saveButtonView = new ButtonView(locale);\n        const cancelButtonView = new ButtonView(locale);\n        const fieldsThatShouldValidateToSave = [\n            this.borderWidthInput,\n            this.borderColorInput,\n            this.backgroundInput,\n            this.widthInput,\n            this.heightInput\n        ];\n        saveButtonView.set({\n            label: t('Save'),\n            icon: icons.check,\n            class: 'ck-button-save',\n            type: 'submit',\n            withText: true\n        });\n        saveButtonView.bind('isEnabled').toMany(fieldsThatShouldValidateToSave, 'errorText', (...errorTexts)=>{\n            return errorTexts.every((errorText)=>!errorText);\n        });\n        cancelButtonView.set({\n            label: t('Cancel'),\n            icon: icons.cancel,\n            class: 'ck-button-cancel',\n            withText: true\n        });\n        cancelButtonView.delegate('execute').to(this, 'cancel');\n        return {\n            saveButtonView,\n            cancelButtonView\n        };\n    }\n    /**\n\t * Provides localized labels for {@link #alignmentToolbar} buttons.\n\t */ get _alignmentLabels() {\n        const locale = this.locale;\n        const t = this.t;\n        const left = t('Align table to the left');\n        const center = t('Center table');\n        const right = t('Align table to the right');\n        // Returns object with a proper order of labels.\n        if (locale.uiLanguageDirection === 'rtl') {\n            return {\n                right,\n                center,\n                left\n            };\n        } else {\n            return {\n                left,\n                center,\n                right\n            };\n        }\n    }\n}\nfunction isBorderStyleSet(value) {\n    return value !== 'none';\n}\n\nvar tableProperties = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8 2v5h4V2h1v5h5v1h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5H7v-5H2v-1h5V8H2V7h5V2h1zm4 6H8v4h4V8z\\\" opacity=\\\".6\\\"/><path d=\\\"m15.5 11.5 1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM17 1a2 2 0 0 1 2 2v9.475l-.85-.124-.857-1.736a2.048 2.048 0 0 0-.292-.44L17 3H3v14h7.808l.402.392L10.935 19H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14z\\\"/></svg>\";\n\nconst ERROR_TEXT_TIMEOUT = 500;\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n    borderStyle: 'tableBorderStyle',\n    borderColor: 'tableBorderColor',\n    borderWidth: 'tableBorderWidth',\n    backgroundColor: 'tableBackgroundColor',\n    width: 'tableWidth',\n    height: 'tableHeight',\n    alignment: 'tableAlignment'\n};\n/**\n * The table properties UI plugin. It introduces the `'tableProperties'` button\n * that opens a form allowing to specify visual styling of an entire table.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */ class TablePropertiesUI extends Plugin {\n    /**\n\t * The default table properties.\n\t */ _defaultTableProperties;\n    /**\n\t * The contextual balloon plugin instance.\n\t */ _balloon;\n    /**\n\t * The properties form view displayed inside the balloon.\n\t */ view = null;\n    /**\n\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t */ _undoStepBatch;\n    /**\n\t * Flag used to indicate whether view is ready to execute update commands\n\t * (it finished loading initial data).\n\t */ _isReady;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TablePropertiesUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('table.tableProperties', {\n            borderColors: defaultColors,\n            backgroundColors: defaultColors\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._defaultTableProperties = getNormalizedDefaultTableProperties(editor.config.get('table.tableProperties.defaultProperties'), {\n            includeAlignmentProperty: true\n        });\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        editor.ui.componentFactory.add('tableProperties', (locale)=>{\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('Table properties'),\n                icon: tableProperties,\n                tooltip: true\n            });\n            this.listenTo(view, 'execute', ()=>this._showView());\n            const commands = Object.values(propertyToCommandMap).map((commandName)=>editor.commands.get(commandName));\n            view.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled)=>areEnabled.some((isCommandEnabled)=>isCommandEnabled));\n            return view;\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed.\n        // See https://github.com/ckeditor/ckeditor5/issues/1341.\n        if (this.view) {\n            this.view.destroy();\n        }\n    }\n    /**\n\t * Creates the {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} instance.\n\t *\n\t * @returns The table properties form view instance.\n\t */ _createPropertiesView() {\n        const editor = this.editor;\n        const config = editor.config.get('table.tableProperties');\n        const borderColorsConfig = normalizeColorOptions(config.borderColors);\n        const localizedBorderColors = getLocalizedColorOptions(editor.locale, borderColorsConfig);\n        const backgroundColorsConfig = normalizeColorOptions(config.backgroundColors);\n        const localizedBackgroundColors = getLocalizedColorOptions(editor.locale, backgroundColorsConfig);\n        const hasColorPicker = config.colorPicker !== false;\n        const view = new TablePropertiesView(editor.locale, {\n            borderColors: localizedBorderColors,\n            backgroundColors: localizedBackgroundColors,\n            defaultTableProperties: this._defaultTableProperties,\n            colorPickerConfig: hasColorPicker ? config.colorPicker || {} : false\n        });\n        const t = editor.t;\n        // Render the view so its #element is available for the clickOutsideHandler.\n        view.render();\n        this.listenTo(view, 'submit', ()=>{\n            this._hideView();\n        });\n        this.listenTo(view, 'cancel', ()=>{\n            // https://github.com/ckeditor/ckeditor5/issues/6180\n            if (this._undoStepBatch.operations.length) {\n                editor.execute('undo', this._undoStepBatch);\n            }\n            this._hideView();\n        });\n        // Close the balloon on Esc key press.\n        view.keystrokes.set('Esc', (data, cancel)=>{\n            this._hideView();\n            cancel();\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: view,\n            activator: ()=>this._isViewInBalloon,\n            contextElements: [\n                this._balloon.view.element\n            ],\n            callback: ()=>this._hideView()\n        });\n        const colorErrorText = getLocalizedColorErrorText(t);\n        const lengthErrorText = getLocalizedLengthErrorText(t);\n        // Create the \"UI -> editor data\" binding.\n        // These listeners update the editor data (via table commands) when any observable\n        // property of the view has changed. They also validate the value and display errors in the UI\n        // when necessary. This makes the view live, which means the changes are\n        // visible in the editing as soon as the user types or changes fields' values.\n        view.on('change:borderStyle', this._getPropertyChangeCallback('tableBorderStyle'));\n        view.on('change:borderColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderColorInput,\n            commandName: 'tableBorderColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:borderWidth', this._getValidatedPropertyChangeCallback({\n            viewField: view.borderWidthInput,\n            commandName: 'tableBorderWidth',\n            errorText: lengthErrorText,\n            validator: lineWidthFieldValidator\n        }));\n        view.on('change:backgroundColor', this._getValidatedPropertyChangeCallback({\n            viewField: view.backgroundInput,\n            commandName: 'tableBackgroundColor',\n            errorText: colorErrorText,\n            validator: colorFieldValidator\n        }));\n        view.on('change:width', this._getValidatedPropertyChangeCallback({\n            viewField: view.widthInput,\n            commandName: 'tableWidth',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:height', this._getValidatedPropertyChangeCallback({\n            viewField: view.heightInput,\n            commandName: 'tableHeight',\n            errorText: lengthErrorText,\n            validator: lengthFieldValidator\n        }));\n        view.on('change:alignment', this._getPropertyChangeCallback('tableAlignment'));\n        return view;\n    }\n    /**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected table property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t */ _fillViewFormFromCommandValues() {\n        const commands = this.editor.commands;\n        const borderStyleCommand = commands.get('tableBorderStyle');\n        Object.entries(propertyToCommandMap).map(([property, commandName])=>{\n            const propertyKey = property;\n            const defaultValue = this._defaultTableProperties[propertyKey] || '';\n            return [\n                propertyKey,\n                commands.get(commandName).value || defaultValue\n            ];\n        }).forEach(([property, value])=>{\n            // Do not set the `border-color` and `border-width` fields if `border-style:none`.\n            if ((property === 'borderColor' || property === 'borderWidth') && borderStyleCommand.value === 'none') {\n                return;\n            }\n            this.view.set(property, value);\n        });\n        this._isReady = true;\n    }\n    /**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, the new {@link #_undoStepBatch} is created that contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t */ _showView() {\n        const editor = this.editor;\n        if (!this.view) {\n            this.view = this._createPropertiesView();\n        }\n        this.listenTo(editor.ui, 'update', ()=>{\n            this._updateView();\n        });\n        // Update the view with the model values.\n        this._fillViewFormFromCommandValues();\n        this._balloon.add({\n            view: this.view,\n            position: getBalloonTablePositionData(editor)\n        });\n        // Create a new batch. Clicking \"Cancel\" will undo this batch.\n        this._undoStepBatch = editor.model.createBatch();\n        // Basic a11y.\n        this.view.focus();\n    }\n    /**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t */ _hideView() {\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this._isReady = false;\n        // Blur any input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        this.view.saveButtonView.focus();\n        this._balloon.remove(this.view);\n        // Make sure the focus is not lost in the process by putting it directly\n        // into the editing view.\n        this.editor.editing.view.focus();\n    }\n    /**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table is no longer selected.\n\t */ _updateView() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        if (!getSelectionAffectedTableWidget(viewDocument.selection)) {\n            this._hideView();\n        } else if (this._isViewVisible) {\n            repositionContextualBalloon(editor, 'table');\n        }\n    }\n    /**\n\t * Returns `true` when the {@link #view} is the visible in the {@link #_balloon}.\n\t */ get _isViewVisible() {\n        return !!this.view && this._balloon.visibleView === this.view;\n    }\n    /**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t */ get _isViewInBalloon() {\n        return !!this.view && this._balloon.hasView(this.view);\n    }\n    /**\n\t * Creates a callback that when executed upon {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * If new value will be set to the default value, the command will not be executed.\n\t *\n\t * @param commandName The command that will be executed.\n\t */ _getPropertyChangeCallback(commandName) {\n        return (evt, propertyName, newValue)=>{\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            this.editor.execute(commandName, {\n                value: newValue,\n                batch: this._undoStepBatch\n            });\n        };\n    }\n    /**\n\t * Creates a callback that when executed upon {@link #view view's} property change:\n\t * * executes a related editor command with the new property value if the value is valid,\n\t * * or sets the error text next to the invalid field, if the value did not pass the validation.\n\t */ _getValidatedPropertyChangeCallback(options) {\n        const { commandName, viewField, validator, errorText } = options;\n        const setErrorTextDebounced = debounce(()=>{\n            viewField.errorText = errorText;\n        }, ERROR_TEXT_TIMEOUT);\n        return (evt, propertyName, newValue)=>{\n            setErrorTextDebounced.cancel();\n            // Do not execute the command on initial call (opening the table properties view).\n            if (!this._isReady) {\n                return;\n            }\n            if (validator(newValue)) {\n                this.editor.execute(commandName, {\n                    value: newValue,\n                    batch: this._undoStepBatch\n                });\n                viewField.errorText = null;\n            } else {\n                setErrorTextDebounced();\n            }\n        };\n    }\n}\n\n/**\n * The table properties feature. Enables support for setting properties of tables (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tablecellproperties~TableCellProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing table properties editing feature} and\n * the {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI table properties UI feature}.\n */ class TableProperties extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableProperties';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TablePropertiesEditing,\n            TablePropertiesUI\n        ];\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */ /**\n * @module table/converters/table-caption-post-fixer\n */ /**\n * Injects a table caption post-fixer into the model.\n *\n * The role of the table caption post-fixer is to ensure that the table with caption have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * If there are many caption model element, they are merged into one model.\n * * A final, merged caption model is placed at the end of the table.\n */ function injectTableCaptionPostFixer(model) {\n    model.document.registerPostFixer((writer)=>tableCaptionPostFixer(writer, model));\n}\n/**\n * The table caption post-fixer.\n */ function tableCaptionPostFixer(writer, model) {\n    const changes = model.document.differ.getChanges();\n    let wasFixed = false;\n    for (const entry of changes){\n        if (entry.type != 'insert') {\n            continue;\n        }\n        const positionParent = entry.position.parent;\n        if (positionParent.is('element', 'table') || entry.name == 'table') {\n            const table = entry.name == 'table' ? entry.position.nodeAfter : positionParent;\n            const captionsToMerge = Array.from(table.getChildren()).filter((child)=>child.is('element', 'caption'));\n            const firstCaption = captionsToMerge.shift();\n            if (!firstCaption) {\n                continue;\n            }\n            // Move all the contents of the captions to the first one.\n            for (const caption of captionsToMerge){\n                writer.move(writer.createRangeIn(caption), firstCaption, 'end');\n                writer.remove(caption);\n            }\n            // Make sure the final caption is at the end of the table.\n            if (firstCaption.nextSibling) {\n                writer.move(writer.createRangeOn(firstCaption), table, 'end');\n                wasFixed = true;\n            }\n            // Do we merged captions and/or moved the single caption to the end of the table?\n            wasFixed = !!captionsToMerge.length || wasFixed;\n        }\n    }\n    return wasFixed;\n}\n\n/**\n * Checks if the provided model element is a `table`.\n *\n * @param modelElement Element to check if it is a table.\n */ function isTable(modelElement) {\n    return !!modelElement && modelElement.is('element', 'table');\n}\n/**\n * Returns the caption model element from a given table element. Returns `null` if no caption is found.\n *\n * @param tableModelElement Table element in which we will try to find a caption element.\n */ function getCaptionFromTableModelElement(tableModelElement) {\n    for (const node of tableModelElement.getChildren()){\n        if (node.is('element', 'caption')) {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n *\n * @param selection The selection checked for caption presence.\n */ function getCaptionFromModelSelection(selection) {\n    const tableElement = getSelectionAffectedTable(selection);\n    if (!tableElement) {\n        return null;\n    }\n    return getCaptionFromTableModelElement(tableElement);\n}\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a caption.\n *\n * There are two possible forms of the valid caption:\n *  - A `<figcaption>` element inside a `<figure class=\"table\">` element.\n *  - A `<caption>` inside a <table>.\n *\n * @returns Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element cannot be matched.\n */ function matchTableCaptionViewElement(element) {\n    const parent = element.parent;\n    if (element.name == 'figcaption' && parent && parent.is('element', 'figure') && parent.hasClass('table')) {\n        return {\n            name: true\n        };\n    }\n    if (element.name == 'caption' && parent && parent.is('element', 'table')) {\n        return {\n            name: true\n        };\n    }\n    return null;\n}\n\n/**\n * The toggle table caption command.\n *\n * This command is registered by {@link module:table/tablecaption/tablecaptionediting~TableCaptionEditing} as the\n * `'toggleTableCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the table caption of a selected table (depending on whether the caption is present or not),\n * * removes the table caption if the selection is anchored in one.\n *\n * ```ts\n * // Toggle the presence of the caption.\n * editor.execute( 'toggleTableCaption' );\n * ```\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n * ```ts\n * editor.execute( 'toggleTableCaption', { focusCaptionOnShow: true } );\n * ```\n */ class ToggleTableCaptionCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const tableElement = getSelectionAffectedTable(editor.model.document.selection);\n        this.isEnabled = !!tableElement;\n        if (!this.isEnabled) {\n            this.value = false;\n        } else {\n            this.value = !!getCaptionFromTableModelElement(tableElement);\n        }\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * ```ts\n\t * editor.execute( 'toggleTableCaption' );\n\t * ```\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.focusCaptionOnShow When true and the caption shows up, the selection will be moved into it straight away.\n\t * @fires execute\n\t */ execute({ focusCaptionOnShow = false } = {}) {\n        this.editor.model.change((writer)=>{\n            if (this.value) {\n                this._hideTableCaption(writer);\n            } else {\n                this._showTableCaption(writer, focusCaptionOnShow);\n            }\n        });\n    }\n    /**\n\t * Shows the table caption. Also:\n\t *\n\t * * it attempts to restore the caption content from the `TableCaptionEditing` caption registry,\n\t * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n\t *\n\t * @param focusCaptionOnShow Default focus behavior when showing the caption.\n\t */ _showTableCaption(writer, focusCaptionOnShow) {\n        const model = this.editor.model;\n        const tableElement = getSelectionAffectedTable(model.document.selection);\n        const tableCaptionEditing = this.editor.plugins.get('TableCaptionEditing');\n        const savedCaptionElement = tableCaptionEditing._getSavedCaption(tableElement);\n        // Try restoring the caption from the TableCaptionEditing plugin storage.\n        const newCaptionElement = savedCaptionElement || writer.createElement('caption');\n        model.insertContent(newCaptionElement, tableElement, 'end');\n        if (focusCaptionOnShow) {\n            writer.setSelection(newCaptionElement, 'in');\n        }\n    }\n    /**\n\t * Hides the caption of a selected table (or an table caption the selection is anchored to).\n\t *\n\t * The content of the caption is stored in the `TableCaptionEditing` caption registry to make this\n\t * a reversible action.\n\t */ _hideTableCaption(writer) {\n        const model = this.editor.model;\n        const tableElement = getSelectionAffectedTable(model.document.selection);\n        const tableCaptionEditing = this.editor.plugins.get('TableCaptionEditing');\n        const captionElement = getCaptionFromTableModelElement(tableElement);\n        // Store the caption content so it can be restored quickly if the user changes their mind.\n        tableCaptionEditing._saveCaption(tableElement, captionElement);\n        model.deleteContent(writer.createSelection(captionElement, 'on'));\n    }\n}\n\n/**\n * The table caption editing plugin.\n */ class TableCaptionEditing extends Plugin {\n    /**\n\t * A map that keeps saved JSONified table captions and table model elements they are\n\t * associated with.\n\t *\n\t * To learn more about this system, see {@link #_saveCaption}.\n\t */ _savedCaptionsMap;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCaptionEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._savedCaptionsMap = new WeakMap();\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const view = editor.editing.view;\n        const t = editor.t;\n        if (!schema.isRegistered('caption')) {\n            schema.register('caption', {\n                allowIn: 'table',\n                allowContentOf: '$block',\n                isLimit: true\n            });\n        } else {\n            schema.extend('caption', {\n                allowIn: 'table'\n            });\n        }\n        editor.commands.add('toggleTableCaption', new ToggleTableCaptionCommand(this.editor));\n        // View -> model converter for the data pipeline.\n        editor.conversion.for('upcast').elementToElement({\n            view: matchTableCaptionViewElement,\n            model: 'caption'\n        });\n        // Model -> view converter for the data pipeline.\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'caption',\n            view: (modelElement, { writer })=>{\n                if (!isTable(modelElement.parent)) {\n                    return null;\n                }\n                return writer.createContainerElement('figcaption');\n            }\n        });\n        // Model -> view converter for the editing pipeline.\n        editor.conversion.for('editingDowncast').elementToElement({\n            model: 'caption',\n            view: (modelElement, { writer })=>{\n                if (!isTable(modelElement.parent)) {\n                    return null;\n                }\n                const figcaptionElement = writer.createEditableElement('figcaption');\n                writer.setCustomProperty('tableCaption', true, figcaptionElement);\n                figcaptionElement.placeholder = t('Enter table caption');\n                enablePlaceholder({\n                    view,\n                    element: figcaptionElement,\n                    keepOnFocus: true\n                });\n                return toWidgetEditable(figcaptionElement, writer);\n            }\n        });\n        injectTableCaptionPostFixer(editor.model);\n    }\n    /**\n\t * Returns the saved {@link module:engine/model/element~Element#toJSON JSONified} caption\n\t * of a table model element.\n\t *\n\t * See {@link #_saveCaption}.\n\t *\n\t * @internal\n\t * @param tableModelElement The model element the caption should be returned for.\n\t * @returns The model caption element or `null` if there is none.\n\t */ _getSavedCaption(tableModelElement) {\n        const jsonObject = this._savedCaptionsMap.get(tableModelElement);\n        return jsonObject ? Element.fromJSON(jsonObject) : null;\n    }\n    /**\n\t * Saves a {@link module:engine/model/element~Element#toJSON JSONified} caption for\n\t * a table element to allow restoring it in the future.\n\t *\n\t * A caption is saved every time it gets hidden. The\n\t * user should be able to restore it on demand.\n\t *\n\t * **Note**: The caption cannot be stored in the table model element attribute because,\n\t * for instance, when the model state propagates to collaborators, the attribute would get\n\t * lost (mainly because it does not convert to anything when the caption is hidden) and\n\t * the states of collaborators' models would de-synchronize causing numerous issues.\n\t *\n\t * See {@link #_getSavedCaption}.\n\t *\n\t * @internal\n\t * @param tableModelElement The model element the caption is saved for.\n\t * @param caption The caption model element to be saved.\n\t */ _saveCaption(tableModelElement, caption) {\n        this._savedCaptionsMap.set(tableModelElement, caption.toJSON());\n    }\n}\n\n/**\n  * The table caption UI plugin. It introduces the `'toggleTableCaption'` UI button.\n  */ class TableCaptionUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCaptionUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const t = editor.t;\n        editor.ui.componentFactory.add('toggleTableCaption', (locale)=>{\n            const command = editor.commands.get('toggleTableCaption');\n            const view = new ButtonView(locale);\n            view.set({\n                icon: icons.caption,\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            view.bind('label').to(command, 'value', (value)=>value ? t('Toggle caption off') : t('Toggle caption on'));\n            this.listenTo(view, 'execute', ()=>{\n                editor.execute('toggleTableCaption', {\n                    focusCaptionOnShow: true\n                });\n                // Scroll to the selection and highlight the caption if the caption showed up.\n                if (command.value) {\n                    const modelCaptionElement = getCaptionFromModelSelection(editor.model.document.selection);\n                    const figcaptionElement = editor.editing.mapper.toViewElement(modelCaptionElement);\n                    if (!figcaptionElement) {\n                        return;\n                    }\n                    editingView.scrollToTheSelection();\n                    editingView.change((writer)=>{\n                        writer.addClass('table__caption_highlighted', figcaptionElement);\n                    });\n                }\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n\n/**\n * The table caption plugin.\n */ class TableCaption extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableCaption';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableCaptionEditing,\n            TableCaptionUI\n        ];\n    }\n}\n\n/**\n * Command used by the {@link module:table/tablecolumnresize~TableColumnResize Table column resize feature} that\n * updates the width of the whole table as well as its individual columns.\n */ class TableWidthsCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        // The command is always enabled as it doesn't care about the actual selection - table can be resized\n        // even if the selection is elsewhere.\n        this.isEnabled = true;\n    }\n    /**\n\t * Updated the `tableWidth` attribute of the table and the `columnWidth` attribute of the columns of that table.\n\t */ execute(options = {}) {\n        const { model, plugins } = this.editor;\n        let { table = model.document.selection.getSelectedElement(), columnWidths, tableWidth } = options;\n        if (columnWidths) {\n            // For backwards compatibility, columnWidths might be an array or a string of comma-separated values.\n            columnWidths = Array.isArray(columnWidths) ? columnWidths : columnWidths.split(',');\n        }\n        model.change((writer)=>{\n            if (tableWidth) {\n                writer.setAttribute('tableWidth', tableWidth, table);\n            } else {\n                writer.removeAttribute('tableWidth', table);\n            }\n            const tableColumnGroup = plugins.get('TableColumnResizeEditing').getColumnGroupElement(table);\n            if (!columnWidths && !tableColumnGroup) {\n                return;\n            }\n            if (!columnWidths) {\n                return writer.remove(tableColumnGroup);\n            }\n            const widths = normalizeColumnWidths(columnWidths);\n            if (!tableColumnGroup) {\n                const colGroupElement = writer.createElement('tableColumnGroup');\n                widths.forEach((columnWidth)=>writer.appendElement('tableColumn', {\n                        columnWidth\n                    }, colGroupElement));\n                writer.append(colGroupElement, table);\n            } else {\n                Array.from(tableColumnGroup.getChildren()).forEach((column, index)=>writer.setAttribute('columnWidth', widths[index], column));\n            }\n        });\n    }\n}\n\n/**\n * Returns a upcast helper that ensures the number of `<tableColumn>` elements corresponds to the actual number of columns in the table,\n * because the input data might have too few or too many <col> elements.\n */ function upcastColgroupElement(tableUtilsPlugin) {\n    return (dispatcher)=>dispatcher.on('element:colgroup', (evt, data, conversionApi)=>{\n            const modelTable = data.modelCursor.findAncestor('table');\n            const tableColumnGroup = getColumnGroupElement(modelTable);\n            if (!tableColumnGroup) {\n                return;\n            }\n            const columnElements = getTableColumnElements(tableColumnGroup);\n            const columnsCount = tableUtilsPlugin.getColumns(modelTable);\n            let columnWidths = translateColSpanAttribute(tableColumnGroup, conversionApi.writer);\n            // Fill the array with 'auto' values if the number of columns is higher than number of declared values.\n            columnWidths = Array.from({\n                length: columnsCount\n            }, (_, index)=>columnWidths[index] || 'auto');\n            if (columnWidths.length != columnElements.length || columnWidths.includes('auto')) {\n                updateColumnElements(columnElements, tableColumnGroup, normalizeColumnWidths(columnWidths), conversionApi.writer);\n            }\n        }, {\n            priority: 'low'\n        });\n}\n/**\n * Returns downcast helper for adding `ck-table-resized` class if there is a `<tableColumnGroup>` element inside the table.\n */ function downcastTableResizedClass() {\n    return (dispatcher)=>dispatcher.on('insert:table', (evt, data, conversionApi)=>{\n            const viewWriter = conversionApi.writer;\n            const modelTable = data.item;\n            const viewElement = conversionApi.mapper.toViewElement(modelTable);\n            const viewTable = viewElement.is('element', 'table') ? viewElement : Array.from(viewElement.getChildren()).find((viewChild)=>viewChild.is('element', 'table'));\n            const tableColumnGroup = getColumnGroupElement(modelTable);\n            if (tableColumnGroup) {\n                viewWriter.addClass('ck-table-resized', viewTable);\n            } else {\n                viewWriter.removeClass('ck-table-resized', viewTable);\n            }\n        }, {\n            priority: 'low'\n        });\n}\n\n/**\n * The table column resize editing plugin.\n */ class TableColumnResizeEditing extends Plugin {\n    /**\n\t * A flag indicating if the column resizing is in progress.\n\t */ _isResizingActive;\n    /**\n\t * A temporary storage for the required data needed to correctly calculate the widths of the resized columns. This storage is\n\t * initialized when column resizing begins, and is purged upon completion.\n\t */ _resizingData;\n    /**\n\t * DOM emitter.\n\t */ _domEmitter;\n    /**\n\t * A local reference to the {@link module:table/tableutils~TableUtils} plugin.\n\t */ _tableUtilsPlugin;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TableEditing,\n            TableUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableColumnResizeEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._isResizingActive = false;\n        this.set('_isResizingAllowed', true);\n        this._resizingData = null;\n        this._domEmitter = new (DomEmitterMixin())();\n        this._tableUtilsPlugin = editor.plugins.get('TableUtils');\n        this.on('change:_isResizingAllowed', (evt, name, value)=>{\n            // Toggling the `ck-column-resize_disabled` class shows and hides the resizers through CSS.\n            const classAction = value ? 'removeClass' : 'addClass';\n            editor.editing.view.change((writer)=>{\n                for (const root of editor.editing.view.document.roots){\n                    writer[classAction]('ck-column-resize_disabled', editor.editing.view.document.getRoot(root.rootName));\n                }\n            });\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this._extendSchema();\n        this._registerPostFixer();\n        this._registerConverters();\n        this._registerResizingListeners();\n        this._registerResizerInserter();\n        const editor = this.editor;\n        const columnResizePlugin = editor.plugins.get('TableColumnResize');\n        const tableEditing = editor.plugins.get('TableEditing');\n        tableEditing.registerAdditionalSlot({\n            filter: (element)=>element.is('element', 'tableColumnGroup'),\n            positionOffset: 0\n        });\n        const tableWidthsCommand = new TableWidthsCommand(editor);\n        // For backwards compatibility we have two commands that perform exactly the same operation.\n        editor.commands.add('resizeTableWidth', tableWidthsCommand);\n        editor.commands.add('resizeColumnWidths', tableWidthsCommand);\n        // Currently the states of column resize and table resize (which is actually the last column resize) features\n        // are bound together. They can be separated in the future by adding distinct listeners and applying\n        // different CSS classes (e.g. `ck-column-resize_disabled` and `ck-table-resize_disabled`) to the editor root.\n        // See #12148 for the details.\n        this.bind('_isResizingAllowed').to(editor, 'isReadOnly', columnResizePlugin, 'isEnabled', tableWidthsCommand, 'isEnabled', (isEditorReadOnly, isPluginEnabled, isTableWidthsCommandCommandEnabled)=>!isEditorReadOnly && isPluginEnabled && isTableWidthsCommandCommandEnabled);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        this._domEmitter.stopListening();\n        super.destroy();\n    }\n    /**\n\t * Returns a 'tableColumnGroup' element from the 'table'.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns A 'tableColumnGroup' element.\n\t */ getColumnGroupElement(element) {\n        return getColumnGroupElement(element);\n    }\n    /**\n\t * Returns an array of 'tableColumn' elements.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns An array of 'tableColumn' elements.\n\t */ getTableColumnElements(element) {\n        return getTableColumnElements(element);\n    }\n    /**\n\t * Returns an array of table column widths.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns An array of table column widths.\n\t */ getTableColumnsWidths(element) {\n        return getTableColumnsWidths(element);\n    }\n    /**\n\t * Registers new attributes for a table model element.\n\t */ _extendSchema() {\n        this.editor.model.schema.extend('table', {\n            allowAttributes: [\n                'tableWidth'\n            ]\n        });\n        this.editor.model.schema.register('tableColumnGroup', {\n            allowIn: 'table',\n            isLimit: true\n        });\n        this.editor.model.schema.register('tableColumn', {\n            allowIn: 'tableColumnGroup',\n            allowAttributes: [\n                'columnWidth',\n                'colSpan'\n            ],\n            isLimit: true\n        });\n    }\n    /**\n\t * Registers table column resize post-fixer.\n\t *\n\t * It checks if the change from the differ concerns a table-related element or attribute. For detected changes it:\n\t *  * Adjusts the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n\t *  * Checks if the `columnWidths` attribute gets updated accordingly after columns have been added or removed.\n\t */ _registerPostFixer() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.document.registerPostFixer((writer)=>{\n            let changed = false;\n            for (const table of getChangedResizedTables(model)){\n                const tableColumnGroup = this.getColumnGroupElement(table);\n                const columns = this.getTableColumnElements(tableColumnGroup);\n                const columnWidths = this.getTableColumnsWidths(tableColumnGroup);\n                // Adjust the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n                let normalizedWidths = normalizeColumnWidths(columnWidths);\n                // If the number of columns has changed, then we need to adjust the widths of the affected columns.\n                normalizedWidths = adjustColumnWidths(normalizedWidths, table, this);\n                if (isEqual(columnWidths, normalizedWidths)) {\n                    continue;\n                }\n                updateColumnElements(columns, tableColumnGroup, normalizedWidths, writer);\n                changed = true;\n            }\n            return changed;\n        });\n        /**\n\t\t * Adjusts if necessary the `columnWidths` in case if the number of column has changed.\n\t\t *\n\t\t * @param columnWidths Note: this array **may be modified** by the function.\n\t\t * @param table Table to be checked.\n\t\t */ function adjustColumnWidths(columnWidths, table, plugin) {\n            const newTableColumnsCount = plugin._tableUtilsPlugin.getColumns(table);\n            const columnsCountDelta = newTableColumnsCount - columnWidths.length;\n            if (columnsCountDelta === 0) {\n                return columnWidths;\n            }\n            const widths = columnWidths.map((width)=>Number(width.replace('%', '')));\n            // Collect all cells that are affected by the change.\n            const cellSet = getAffectedCells(plugin.editor.model.document.differ, table);\n            for (const cell of cellSet){\n                const currentColumnsDelta = newTableColumnsCount - widths.length;\n                if (currentColumnsDelta === 0) {\n                    continue;\n                }\n                // If the column count in the table changed, adjust the widths of the affected columns.\n                const hasMoreColumns = currentColumnsDelta > 0;\n                const currentColumnIndex = plugin._tableUtilsPlugin.getCellLocation(cell).column;\n                if (hasMoreColumns) {\n                    const columnMinWidthAsPercentage = getColumnMinWidthAsPercentage(table, plugin.editor);\n                    const columnWidthsToInsert = createFilledArray(currentColumnsDelta, columnMinWidthAsPercentage);\n                    widths.splice(currentColumnIndex, 0, ...columnWidthsToInsert);\n                } else {\n                    // Moves the widths of the removed columns to the preceding one.\n                    // Other editors either reduce the width of the whole table or adjust the widths\n                    // proportionally, so change of this behavior can be considered in the future.\n                    const removedColumnWidths = widths.splice(currentColumnIndex, Math.abs(currentColumnsDelta));\n                    widths[currentColumnIndex] += sumArray(removedColumnWidths);\n                }\n            }\n            return widths.map((width)=>width + '%');\n        }\n        /**\n\t\t * Returns a set of cells that have been changed in a given table.\n\t\t */ function getAffectedCells(differ, table) {\n            const cellSet = new Set();\n            for (const change of differ.getChanges()){\n                if (change.type == 'insert' && change.position.nodeAfter && change.position.nodeAfter.name == 'tableCell' && change.position.nodeAfter.getAncestors().includes(table)) {\n                    cellSet.add(change.position.nodeAfter);\n                } else if (change.type == 'remove') {\n                    // If the first cell was removed, use the node after the change position instead.\n                    const referenceNode = change.position.nodeBefore || change.position.nodeAfter;\n                    if (referenceNode.name == 'tableCell' && referenceNode.getAncestors().includes(table)) {\n                        cellSet.add(referenceNode);\n                    }\n                }\n            }\n            return cellSet;\n        }\n    }\n    /**\n\t * Registers table column resize converters.\n\t */ _registerConverters() {\n        const editor = this.editor;\n        const conversion = editor.conversion;\n        // Table width style\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'figure',\n                key: 'style',\n                value: {\n                    width: /[\\s\\S]+/\n                }\n            },\n            model: {\n                name: 'table',\n                key: 'tableWidth',\n                value: (viewElement)=>viewElement.getStyle('width')\n            }\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: {\n                name: 'table',\n                key: 'tableWidth'\n            },\n            view: (width)=>({\n                    name: 'figure',\n                    key: 'style',\n                    value: {\n                        width\n                    }\n                })\n        });\n        conversion.elementToElement({\n            model: 'tableColumnGroup',\n            view: 'colgroup'\n        });\n        conversion.elementToElement({\n            model: 'tableColumn',\n            view: 'col'\n        });\n        conversion.for('downcast').add(downcastTableResizedClass());\n        conversion.for('upcast').add(upcastColgroupElement(this._tableUtilsPlugin));\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'col',\n                styles: {\n                    width: /.*/\n                }\n            },\n            model: {\n                key: 'columnWidth',\n                value: (viewElement)=>{\n                    const viewColWidth = viewElement.getStyle('width');\n                    // 'pt' is the default unit for table column width pasted from MS Office.\n                    // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n                    if (!viewColWidth || !viewColWidth.endsWith('%') && !viewColWidth.endsWith('pt')) {\n                        return 'auto';\n                    }\n                    return viewColWidth;\n                }\n            }\n        });\n        // The `col[span]` attribute is present in tables pasted from MS Excel. We use it to set the temporary `colSpan` model attribute,\n        // which is consumed during the `colgroup` element upcast.\n        // See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'col',\n                key: 'span'\n            },\n            model: 'colSpan'\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: {\n                name: 'tableColumn',\n                key: 'columnWidth'\n            },\n            view: (width)=>({\n                    key: 'style',\n                    value: {\n                        width\n                    }\n                })\n        });\n    }\n    /**\n\t * Registers listeners to handle resizing process.\n\t */ _registerResizingListeners() {\n        const editingView = this.editor.editing.view;\n        editingView.addObserver(MouseEventsObserver);\n        editingView.document.on('mousedown', this._onMouseDownHandler.bind(this), {\n            priority: 'high'\n        });\n        this._domEmitter.listenTo(global.window.document, 'mousemove', throttle(this._onMouseMoveHandler.bind(this), 50));\n        this._domEmitter.listenTo(global.window.document, 'mouseup', this._onMouseUpHandler.bind(this));\n    }\n    /**\n\t * Handles the `mousedown` event on column resizer element:\n\t *  * calculates the initial column pixel widths,\n\t *  * inserts the `<colgroup>` element if it is not present in the `<table>`,\n\t *  * puts the necessary data in the temporary storage,\n\t *  * applies the attributes to the `<table>` view element.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param domEventData The data related to the DOM event.\n\t */ _onMouseDownHandler(eventInfo, domEventData) {\n        const target = domEventData.target;\n        if (!target.hasClass('ck-table-column-resizer')) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            return;\n        }\n        const editor = this.editor;\n        const modelTable = editor.editing.mapper.toModelElement(target.findAncestor('figure'));\n        // Do not resize if table model is in non-editable place.\n        if (!editor.model.canEditAt(modelTable)) {\n            return;\n        }\n        domEventData.preventDefault();\n        eventInfo.stop();\n        // The column widths are calculated upon mousedown to allow lazy applying the `columnWidths` attribute on the table.\n        const columnWidthsInPx = _calculateDomColumnWidths(modelTable, this._tableUtilsPlugin, editor);\n        const viewTable = target.findAncestor('table');\n        const editingView = editor.editing.view;\n        // Insert colgroup for the table that is resized for the first time.\n        if (!Array.from(viewTable.getChildren()).find((viewCol)=>viewCol.is('element', 'colgroup'))) {\n            editingView.change((viewWriter)=>{\n                _insertColgroupElement(viewWriter, columnWidthsInPx, viewTable);\n            });\n        }\n        this._isResizingActive = true;\n        this._resizingData = this._getResizingData(domEventData, columnWidthsInPx);\n        // At this point we change only the editor view - we don't want other users to see our changes yet,\n        // so we can't apply them in the model.\n        editingView.change((writer)=>_applyResizingAttributesToTable(writer, viewTable, this._resizingData));\n        /**\n\t\t * Calculates the DOM columns' widths. It is done by taking the width of the widest cell\n\t\t * from each table column (we rely on the  {@link module:table/tablewalker~TableWalker}\n\t\t * to determine which column the cell belongs to).\n\t\t *\n\t\t * @param modelTable A table which columns should be measured.\n\t\t * @param tableUtils The Table Utils plugin instance.\n\t\t * @param editor The editor instance.\n\t\t * @returns Columns' widths expressed in pixels (without unit).\n\t\t */ function _calculateDomColumnWidths(modelTable, tableUtilsPlugin, editor) {\n            const columnWidthsInPx = Array(tableUtilsPlugin.getColumns(modelTable));\n            const tableWalker = new TableWalker(modelTable);\n            for (const cellSlot of tableWalker){\n                const viewCell = editor.editing.mapper.toViewElement(cellSlot.cell);\n                const domCell = editor.editing.view.domConverter.mapViewToDom(viewCell);\n                const domCellWidth = getDomCellOuterWidth(domCell);\n                if (!columnWidthsInPx[cellSlot.column] || domCellWidth < columnWidthsInPx[cellSlot.column]) {\n                    columnWidthsInPx[cellSlot.column] = toPrecision(domCellWidth);\n                }\n            }\n            return columnWidthsInPx;\n        }\n        /**\n\t\t * Creates a `<colgroup>` element with `<col>`s and inserts it into a given view table.\n\t\t *\n\t\t * @param viewWriter A writer instance.\n\t\t * @param columnWidthsInPx Column widths.\n\t\t * @param viewTable A table view element.\n\t\t */ function _insertColgroupElement(viewWriter, columnWidthsInPx, viewTable) {\n            const colgroup = viewWriter.createContainerElement('colgroup');\n            for(let i = 0; i < columnWidthsInPx.length; i++){\n                const viewColElement = viewWriter.createEmptyElement('col');\n                const columnWidthInPc = `${toPrecision(columnWidthsInPx[i] / sumArray(columnWidthsInPx) * 100)}%`;\n                viewWriter.setStyle('width', columnWidthInPc, viewColElement);\n                viewWriter.insert(viewWriter.createPositionAt(colgroup, 'end'), viewColElement);\n            }\n            viewWriter.insert(viewWriter.createPositionAt(viewTable, 0), colgroup);\n        }\n        /**\n\t\t * Applies the style and classes to the view table as the resizing begun.\n\t\t *\n\t\t * @param viewWriter A writer instance.\n\t\t * @param viewTable A table containing the clicked resizer.\n\t\t * @param resizingData Data related to the resizing.\n\t\t */ function _applyResizingAttributesToTable(viewWriter, viewTable, resizingData) {\n            const figureInitialPcWidth = resizingData.widths.viewFigureWidth / resizingData.widths.viewFigureParentWidth;\n            viewWriter.addClass('ck-table-resized', viewTable);\n            viewWriter.addClass('ck-table-column-resizer__active', resizingData.elements.viewResizer);\n            viewWriter.setStyle('width', `${toPrecision(figureInitialPcWidth * 100)}%`, viewTable.findAncestor('figure'));\n        }\n    }\n    /**\n\t * Handles the `mousemove` event.\n\t *  * If resizing process is not in progress, it does nothing.\n\t *  * If resizing is active but not allowed, it stops the resizing process instantly calling the `mousedown` event handler.\n\t *  * Otherwise it dynamically updates the widths of the resized columns.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param mouseEventData The native DOM event.\n\t */ _onMouseMoveHandler(eventInfo, mouseEventData) {\n        if (!this._isResizingActive) {\n            return;\n        }\n        if (!this._isResizingAllowed) {\n            this._onMouseUpHandler();\n            return;\n        }\n        const { columnPosition, flags: { isRightEdge, isTableCentered, isLtrContent }, elements: { viewFigure, viewLeftColumn, viewRightColumn }, widths: { viewFigureParentWidth, tableWidth, leftColumnWidth, rightColumnWidth } } = this._resizingData;\n        const dxLowerBound = -leftColumnWidth + COLUMN_MIN_WIDTH_IN_PIXELS;\n        const dxUpperBound = isRightEdge ? viewFigureParentWidth - tableWidth : rightColumnWidth - COLUMN_MIN_WIDTH_IN_PIXELS;\n        // The multiplier is needed for calculating the proper movement offset:\n        // - it should negate the sign if content language direction is right-to-left,\n        // - it should double the offset if the table edge is resized and table is centered.\n        const multiplier = (isLtrContent ? 1 : -1) * (isRightEdge && isTableCentered ? 2 : 1);\n        const dx = clamp((mouseEventData.clientX - columnPosition) * multiplier, Math.min(dxLowerBound, 0), Math.max(dxUpperBound, 0));\n        if (dx === 0) {\n            return;\n        }\n        this.editor.editing.view.change((writer)=>{\n            const leftColumnWidthAsPercentage = toPrecision((leftColumnWidth + dx) * 100 / tableWidth);\n            writer.setStyle('width', `${leftColumnWidthAsPercentage}%`, viewLeftColumn);\n            if (isRightEdge) {\n                const tableWidthAsPercentage = toPrecision((tableWidth + dx) * 100 / viewFigureParentWidth);\n                writer.setStyle('width', `${tableWidthAsPercentage}%`, viewFigure);\n            } else {\n                const rightColumnWidthAsPercentage = toPrecision((rightColumnWidth - dx) * 100 / tableWidth);\n                writer.setStyle('width', `${rightColumnWidthAsPercentage}%`, viewRightColumn);\n            }\n        });\n    }\n    /**\n\t * Handles the `mouseup` event.\n\t *  * If resizing process is not in progress, it does nothing.\n\t *  * If resizing is active but not allowed, it cancels the resizing process restoring the original widths.\n\t *  * Otherwise it propagates the changes from view to the model by executing the adequate commands.\n\t */ _onMouseUpHandler() {\n        if (!this._isResizingActive) {\n            return;\n        }\n        const { viewResizer, modelTable, viewFigure, viewColgroup } = this._resizingData.elements;\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const tableColumnGroup = this.getColumnGroupElement(modelTable);\n        const viewColumns = Array.from(viewColgroup.getChildren()).filter((column)=>column.is('view:element'));\n        const columnWidthsAttributeOld = tableColumnGroup ? this.getTableColumnsWidths(tableColumnGroup) : null;\n        const columnWidthsAttributeNew = viewColumns.map((column)=>column.getStyle('width'));\n        const isColumnWidthsAttributeChanged = !isEqual(columnWidthsAttributeOld, columnWidthsAttributeNew);\n        const tableWidthAttributeOld = modelTable.getAttribute('tableWidth');\n        const tableWidthAttributeNew = viewFigure.getStyle('width');\n        const isTableWidthAttributeChanged = tableWidthAttributeOld !== tableWidthAttributeNew;\n        if (isColumnWidthsAttributeChanged || isTableWidthAttributeChanged) {\n            if (this._isResizingAllowed) {\n                editor.execute('resizeTableWidth', {\n                    table: modelTable,\n                    tableWidth: `${toPrecision(tableWidthAttributeNew)}%`,\n                    columnWidths: columnWidthsAttributeNew\n                });\n            } else {\n                // In read-only mode revert all changes in the editing view. The model is not touched so it does not need to be restored.\n                // This case can occur if the read-only mode kicks in during the resizing process.\n                editingView.change((writer)=>{\n                    // If table had resized columns before, restore the previous column widths.\n                    // Otherwise clean up the view from the temporary column resizing markup.\n                    if (columnWidthsAttributeOld) {\n                        for (const viewCol of viewColumns){\n                            writer.setStyle('width', columnWidthsAttributeOld.shift(), viewCol);\n                        }\n                    } else {\n                        writer.remove(viewColgroup);\n                    }\n                    if (isTableWidthAttributeChanged) {\n                        // If the whole table was already resized before, restore the previous table width.\n                        // Otherwise clean up the view from the temporary table resizing markup.\n                        if (tableWidthAttributeOld) {\n                            writer.setStyle('width', tableWidthAttributeOld, viewFigure);\n                        } else {\n                            writer.removeStyle('width', viewFigure);\n                        }\n                    }\n                    // If a table and its columns weren't resized before,\n                    // prune the remaining common resizing markup.\n                    if (!columnWidthsAttributeOld && !tableWidthAttributeOld) {\n                        writer.removeClass('ck-table-resized', [\n                            ...viewFigure.getChildren()\n                        ].find((element)=>element.name === 'table'));\n                    }\n                });\n            }\n        }\n        editingView.change((writer)=>{\n            writer.removeClass('ck-table-column-resizer__active', viewResizer);\n        });\n        this._isResizingActive = false;\n        this._resizingData = null;\n    }\n    /**\n\t * Retrieves and returns required data needed for the resizing process.\n\t *\n\t * @param domEventData The data of the `mousedown` event.\n\t * @param columnWidths The current widths of the columns.\n\t * @returns The data needed for the resizing process.\n\t */ _getResizingData(domEventData, columnWidths) {\n        const editor = this.editor;\n        const columnPosition = domEventData.domEvent.clientX;\n        const viewResizer = domEventData.target;\n        const viewLeftCell = viewResizer.findAncestor('td') || viewResizer.findAncestor('th');\n        const modelLeftCell = editor.editing.mapper.toModelElement(viewLeftCell);\n        const modelTable = modelLeftCell.findAncestor('table');\n        const leftColumnIndex = getColumnEdgesIndexes(modelLeftCell, this._tableUtilsPlugin).rightEdge;\n        const lastColumnIndex = this._tableUtilsPlugin.getColumns(modelTable) - 1;\n        const isRightEdge = leftColumnIndex === lastColumnIndex;\n        const isTableCentered = !modelTable.hasAttribute('tableAlignment');\n        const isLtrContent = editor.locale.contentLanguageDirection !== 'rtl';\n        const viewTable = viewLeftCell.findAncestor('table');\n        const viewFigure = viewTable.findAncestor('figure');\n        const viewColgroup = [\n            ...viewTable.getChildren()\n        ].find((viewCol)=>viewCol.is('element', 'colgroup'));\n        const viewLeftColumn = viewColgroup.getChild(leftColumnIndex);\n        const viewRightColumn = isRightEdge ? undefined : viewColgroup.getChild(leftColumnIndex + 1);\n        const viewFigureParentWidth = getElementWidthInPixels(editor.editing.view.domConverter.mapViewToDom(viewFigure.parent));\n        const viewFigureWidth = getElementWidthInPixels(editor.editing.view.domConverter.mapViewToDom(viewFigure));\n        const tableWidth = getTableWidthInPixels(modelTable, editor);\n        const leftColumnWidth = columnWidths[leftColumnIndex];\n        const rightColumnWidth = isRightEdge ? undefined : columnWidths[leftColumnIndex + 1];\n        return {\n            columnPosition,\n            flags: {\n                isRightEdge,\n                isTableCentered,\n                isLtrContent\n            },\n            elements: {\n                viewResizer,\n                modelTable,\n                viewFigure,\n                viewColgroup,\n                viewLeftColumn,\n                viewRightColumn\n            },\n            widths: {\n                viewFigureParentWidth,\n                viewFigureWidth,\n                tableWidth,\n                leftColumnWidth,\n                rightColumnWidth\n            }\n        };\n    }\n    /**\n\t * Registers a listener ensuring that each resizable cell have a resizer handle.\n\t */ _registerResizerInserter() {\n        this.editor.conversion.for('editingDowncast').add((dispatcher)=>{\n            dispatcher.on('insert:tableCell', (evt, data, conversionApi)=>{\n                const modelElement = data.item;\n                const viewElement = conversionApi.mapper.toViewElement(modelElement);\n                const viewWriter = conversionApi.writer;\n                viewWriter.insert(viewWriter.createPositionAt(viewElement, 'end'), viewWriter.createUIElement('div', {\n                    class: 'ck-table-column-resizer'\n                }));\n            }, {\n                priority: 'lowest'\n            });\n        });\n    }\n}\n\n/**\n * The table column resize feature.\n *\n * It provides the possibility to set the width of each column in a table using a resize handler.\n */ class TableColumnResize extends Plugin {\n    /**\n\t * @inheritDoc\n \t */ static get requires() {\n        return [\n            TableColumnResizeEditing,\n            TableCellWidthEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n \t */ static get pluginName() {\n        return 'TableColumnResize';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { PlainTableOutput, Table, TableCaption, TableCaptionEditing, TableCaptionUI, TableCellProperties, TableCellPropertiesEditing, TableCellPropertiesUI, TableCellWidthEditing, TableClipboard, TableColumnResize, TableColumnResizeEditing, TableEditing, TableKeyboard, TableMouse, TableProperties, TablePropertiesEditing, TablePropertiesUI, TableSelection, TableToolbar, TableUI, TableUtils };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/tableproperties\n */\n\nimport type { Conversion, ViewElement } from 'ckeditor5/src/engine.js';\n\n/**\n * Conversion helper for upcasting attributes using normalized styles.\n *\n * @param options.modelAttribute The attribute to set.\n * @param options.styleName The style name to convert.\n * @param options.viewElement The view element name that should be converted.\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n * @param options.shouldUpcast The function which returns `true` if style should be upcasted from this element.\n */\nexport function upcastStyleToAttribute(\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t\tviewElement: string | RegExp;\n\t\tdefaultValue: string;\n\t\treduceBoxSides?: boolean;\n\t\tshouldUpcast?: ( viewElement: ViewElement ) => boolean;\n\t}\n): void {\n\tconst {\n\t\tmodelAttribute,\n\t\tstyleName,\n\t\tviewElement,\n\t\tdefaultValue,\n\t\treduceBoxSides = false,\n\t\tshouldUpcast = () => true\n\t} = options;\n\n\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\tview: {\n\t\t\tname: viewElement,\n\t\t\tstyles: {\n\t\t\t\t[ styleName ]: /[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\tmodel: {\n\t\t\tkey: modelAttribute,\n\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\tif ( !shouldUpcast( viewElement ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst normalized = viewElement.getNormalizedStyle( styleName ) as Record<Side, string>;\n\t\t\t\tconst value = reduceBoxSides ? reduceBoxSidesValue( normalized ) : normalized;\n\n\t\t\t\tif ( defaultValue !== value ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n}\n\nexport interface StyleValues {\n\tcolor: string;\n\tstyle: string;\n\twidth: string;\n}\n\n/**\n * Conversion helper for upcasting border styles for view elements.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `borderColor` value.\n * @param defaultBorder.style The default `borderStyle` value.\n * @param defaultBorder.width The default `borderWidth` value.\n */\nexport function upcastBorderStyles(\n\tconversion: Conversion,\n\tviewElementName: string,\n\tmodelAttributes: StyleValues,\n\tdefaultBorder: StyleValues\n): void {\n\tconversion.for( 'upcast' ).add( dispatcher => dispatcher.on( 'element:' + viewElementName, ( evt, data, conversionApi ) => {\n\t\t// If the element was not converted by element-to-element converter,\n\t\t// we should not try to convert the style. See #8393.\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check the most detailed properties. These will be always set directly or\n\t\t// when using the \"group\" properties like: `border-(top|right|bottom|left)` or `border`.\n\t\tconst stylesToConsume = [\n\t\t\t'border-top-width',\n\t\t\t'border-top-color',\n\t\t\t'border-top-style',\n\t\t\t'border-bottom-width',\n\t\t\t'border-bottom-color',\n\t\t\t'border-bottom-style',\n\t\t\t'border-right-width',\n\t\t\t'border-right-color',\n\t\t\t'border-right-style',\n\t\t\t'border-left-width',\n\t\t\t'border-left-color',\n\t\t\t'border-left-style'\n\t\t].filter( styleName => data.viewItem.hasStyle( styleName ) );\n\n\t\tif ( !stylesToConsume.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst matcherPattern = {\n\t\t\tstyles: stylesToConsume\n\t\t};\n\n\t\t// Try to consume appropriate values from consumable values list.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, matcherPattern ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelElement = [ ...data.modelRange.getItems( { shallow: true } ) ].pop();\n\n\t\tconversionApi.consumable.consume( data.viewItem, matcherPattern );\n\n\t\tconst normalizedBorder = {\n\t\t\tstyle: data.viewItem.getNormalizedStyle( 'border-style' ),\n\t\t\tcolor: data.viewItem.getNormalizedStyle( 'border-color' ),\n\t\t\twidth: data.viewItem.getNormalizedStyle( 'border-width' )\n\t\t};\n\n\t\tconst reducedBorder = {\n\t\t\tstyle: reduceBoxSidesValue( normalizedBorder.style ),\n\t\t\tcolor: reduceBoxSidesValue( normalizedBorder.color ),\n\t\t\twidth: reduceBoxSidesValue( normalizedBorder.width )\n\t\t};\n\n\t\tif ( reducedBorder.style !== defaultBorder.style ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.style, reducedBorder.style, modelElement );\n\t\t}\n\n\t\tif ( reducedBorder.color !== defaultBorder.color ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.color, reducedBorder.color, modelElement );\n\t\t}\n\n\t\tif ( reducedBorder.width !== defaultBorder.width ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttributes.width, reducedBorder.width, modelElement );\n\t\t}\n\t} ) );\n}\n\n/**\n * Conversion helper for downcasting an attribute to a style.\n */\nexport function downcastAttributeToStyle(\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelElement: string;\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t}\n): void {\n\tconst { modelElement, modelAttribute, styleName } = options;\n\n\tconversion.for( 'downcast' ).attributeToAttribute( {\n\t\tmodel: {\n\t\t\tname: modelElement,\n\t\t\tkey: modelAttribute\n\t\t},\n\t\tview: modelAttributeValue => ( {\n\t\t\tkey: 'style',\n\t\t\tvalue: {\n\t\t\t\t[ styleName ]: modelAttributeValue\n\t\t\t}\n\t\t} )\n\t} );\n}\n\n/**\n * Conversion helper for downcasting attributes from the model table to a view table (not to `<figure>`).\n */\nexport function downcastTableAttribute(\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t}\n): void {\n\tconst { modelAttribute, styleName } = options;\n\n\tconversion.for( 'downcast' ).add( dispatcher => dispatcher.on( `attribute:${ modelAttribute }:table`, ( evt, data, conversionApi ) => {\n\t\tconst { item, attributeNewValue } = data;\n\t\tconst { mapper, writer } = conversionApi;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst table = [ ...mapper.toViewElement( item ).getChildren() ].find( child => child.is( 'element', 'table' ) );\n\n\t\tif ( attributeNewValue ) {\n\t\t\twriter.setStyle( styleName, attributeNewValue, table );\n\t\t} else {\n\t\t\twriter.removeStyle( styleName, table );\n\t\t}\n\t} ) );\n}\n\ntype Side = 'top' | 'right' | 'bottom' | 'left';\ntype Style = Record<Side, string>;\n\n/**\n * Reduces the full top, right, bottom, left object to a single string if all sides are equal.\n * Returns original style otherwise.\n */\nfunction reduceBoxSidesValue( style?: Style ): undefined | string | Style {\n\tif ( !style ) {\n\t\treturn;\n\t}\n\tconst sides: Array<Side> = [ 'top', 'right', 'bottom', 'left' ];\n\tconst allSidesDefined = sides.every( side => style[ side ] );\n\n\tif ( !allSidesDefined ) {\n\t\treturn style;\n\t}\n\n\tconst topSideStyle = style.top;\n\tconst allSidesEqual = sides.every( side => style[ side ] === topSideStyle );\n\n\tif ( !allSidesEqual ) {\n\t\treturn style;\n\t}\n\n\treturn topSideStyle;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/common\n */\n\nimport type {\n\tConversion,\n\tElement,\n\tItem,\n\tPosition,\n\tSchema,\n\tWriter,\n\tDocumentSelection\n} from 'ckeditor5/src/engine.js';\n\nimport { downcastAttributeToStyle, upcastStyleToAttribute } from './../converters/tableproperties.js';\nimport type TableUtils from '../tableutils.js';\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param key An attribute key.\n * @param value The new attribute value.\n * @param item A model item on which the attribute will be set.\n * @param defaultValue The default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute( key: string, value: unknown, item: Item, writer: Writer, defaultValue: unknown = 1 ): void {\n\tif ( value !== undefined && value !== null && defaultValue !== undefined && defaultValue !== null && value > defaultValue ) {\n\t\twriter.setAttribute( key, value, item );\n\t} else {\n\t\twriter.removeAttribute( key, item );\n\t}\n}\n\n/**\n * A common method to create an empty table cell. It creates a proper model structure as a table cell must have at least one block inside.\n *\n * @param writer The model writer.\n * @param insertPosition The position at which the table cell should be inserted.\n * @param attributes The element attributes.\n * @returns Created table cell.\n */\nexport function createEmptyTableCell( writer: Writer, insertPosition: Position, attributes: Record<string, unknown> = {} ): Element {\n\tconst tableCell = writer.createElement( 'tableCell', attributes );\n\n\twriter.insertElement( 'paragraph', tableCell );\n\twriter.insert( tableCell, insertPosition );\n\n\treturn tableCell;\n}\n\n/**\n * Checks if a table cell belongs to the heading column section.\n */\nexport function isHeadingColumnCell( tableUtils: TableUtils, tableCell: Element ): boolean {\n\tconst table = tableCell.parent!.parent as Element;\n\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) as string || '0' );\n\tconst { column } = tableUtils.getCellLocation( tableCell );\n\n\treturn !!headingColumns && column < headingColumns;\n}\n\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */\nexport function enableProperty(\n\tschema: Schema,\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t\tdefaultValue: string;\n\t\treduceBoxSides?: boolean;\n\t}\n): void {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\n\tupcastStyleToAttribute( conversion, { viewElement: /^(td|th)$/, ...options } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', ...options } );\n}\n\n/**\n * Depending on the position of the selection we either return the table under cursor or look for the table higher in the hierarchy.\n */\nexport function getSelectionAffectedTable( selection: DocumentSelection ): Element {\n\tconst selectedElement = selection.getSelectedElement();\n\n\t// Is the command triggered from the `tableToolbar`?\n\tif ( selectedElement && selectedElement.is( 'element', 'table' ) ) {\n\t\treturn selectedElement;\n\t}\n\n\treturn selection.getFirstPosition()!.findAncestor( 'table' )!;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/upcasttable\n */\n\nimport type { Element, UpcastDispatcher, UpcastElementEvent, ViewElement, ViewNode } from 'ckeditor5/src/engine.js';\n\nimport { createEmptyTableCell } from '../utils/common.js';\nimport { first } from 'ckeditor5/src/utils.js';\n\n/**\n * Returns a function that converts the table view representation:\n *\n * ```xml\n * <figure class=\"table\"><table>...</table></figure>\n * ```\n *\n * to the model representation:\n *\n * ```xml\n * <table></table>\n * ```\n */\nexport function upcastTableFigure() {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:figure', ( evt, data, conversionApi ) => {\n\t\t\t// Do not convert if this is not a \"table figure\".\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: true, classes: 'table' } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find a table element inside the figure element.\n\t\t\tconst viewTable = getViewTableFromFigure( data.viewItem );\n\n\t\t\t// Do not convert if table element is absent or was already converted.\n\t\t\tif ( !viewTable || !conversionApi.consumable.test( viewTable, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Consume the figure to prevent other converters from processing it again.\n\t\t\tconversionApi.consumable.consume( data.viewItem, { name: true, classes: 'table' } );\n\n\t\t\t// Convert view table to model table.\n\t\t\tconst conversionResult = conversionApi.convertItem( viewTable, data.modelCursor );\n\n\t\t\t// Get table element from conversion result.\n\t\t\tconst modelTable = first( conversionResult.modelRange!.getItems() as Iterator<Element> );\n\n\t\t\t// When table wasn't successfully converted then finish conversion.\n\t\t\tif ( !modelTable ) {\n\t\t\t\t// Revert consumed figure so other features can convert it.\n\t\t\t\tconversionApi.consumable.revert( data.viewItem, { name: true, classes: 'table' } );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelTable, 'end' ) );\n\t\t\tconversionApi.updateConversionResult( modelTable, data );\n\t\t} );\n\t};\n}\n\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns Conversion helper.\n */\nexport default function upcastTable() {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tconst viewTable = data.viewItem;\n\n\t\t\t// When element was already consumed then skip it.\n\t\t\tif ( !conversionApi.consumable.test( viewTable, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { rows, headingRows, headingColumns } = scanTable( viewTable );\n\n\t\t\t// Only set attributes if values is greater then 0.\n\t\t\tconst attributes: { headingColumns?: number; headingRows?: number } = {};\n\n\t\t\tif ( headingColumns ) {\n\t\t\t\tattributes.headingColumns = headingColumns;\n\t\t\t}\n\n\t\t\tif ( headingRows ) {\n\t\t\t\tattributes.headingRows = headingRows;\n\t\t\t}\n\n\t\t\tconst table = conversionApi.writer.createElement( 'table', attributes );\n\n\t\t\tif ( !conversionApi.safeInsert( table, data.modelCursor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.consumable.consume( viewTable, { name: true } );\n\n\t\t\t// Upcast table rows in proper order (heading rows first).\n\t\t\trows.forEach( row => conversionApi.convertItem( row, conversionApi.writer.createPositionAt( table, 'end' ) ) );\n\n\t\t\t// Convert everything else.\n\t\t\tconversionApi.convertChildren( viewTable, conversionApi.writer.createPositionAt( table, 'end' ) );\n\n\t\t\t// Create one row and one table cell for empty table.\n\t\t\tif ( table.isEmpty ) {\n\t\t\t\tconst row = conversionApi.writer.createElement( 'tableRow' );\n\t\t\t\tconversionApi.writer.insert( row, conversionApi.writer.createPositionAt( table, 'end' ) );\n\n\t\t\t\tcreateEmptyTableCell( conversionApi.writer, conversionApi.writer.createPositionAt( row, 'end' ) );\n\t\t\t}\n\n\t\t\tconversionApi.updateConversionResult( table, data );\n\t\t} );\n\t};\n}\n\n/**\n * A conversion helper that skips empty <tr> elements from upcasting at the beginning of the table.\n *\n * An empty row is considered a table model error but when handling clipboard data there could be rows that contain only row-spanned cells\n * and empty TR-s are used to maintain the table structure (also {@link module:table/tablewalker~TableWalker} assumes that there are only\n * rows that have related `tableRow` elements).\n *\n * *Note:* Only the first empty rows are removed because they have no meaning and it solves the issue\n * of an improper table with all empty rows.\n *\n * @returns Conversion helper.\n */\nexport function skipEmptyTableRow() {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( 'element:tr', ( evt, data ) => {\n\t\t\tif ( data.viewItem.isEmpty && data.modelCursor.index == 0 ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t};\n}\n\n/**\n * A converter that ensures an empty paragraph is inserted in a table cell if no other content was converted.\n *\n * @returns Conversion helper.\n */\nexport function ensureParagraphInTableCell( elementName: string ) {\n\treturn ( dispatcher: UpcastDispatcher ): void => {\n\t\tdispatcher.on<UpcastElementEvent>( `element:${ elementName }`, ( evt, data, { writer } ) => {\n\t\t\t// The default converter will create a model range on converted table cell.\n\t\t\tif ( !data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableCell = data.modelRange.start.nodeAfter as Element;\n\t\t\tconst modelCursor = writer.createPositionAt( tableCell, 0 );\n\n\t\t\t// Ensure a paragraph in the model for empty table cells for converted table cells.\n\t\t\tif ( data.viewItem.isEmpty ) {\n\t\t\t\twriter.insertElement( 'paragraph', modelCursor );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst childNodes = Array.from( tableCell.getChildren() );\n\n\t\t\t// In case there are only markers inside the table cell then move them to the paragraph.\n\t\t\tif ( childNodes.every( node => node.is( 'element', '$marker' ) ) ) {\n\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\t\t\twriter.insert( paragraph, writer.createPositionAt( tableCell, 0 ) );\n\n\t\t\t\tfor ( const node of childNodes ) {\n\t\t\t\t\twriter.move( writer.createRangeOn( node ), writer.createPositionAt( paragraph, 'end' ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t};\n}\n\n/**\n * Get view `<table>` element from the view widget (`<figure>`).\n */\nfunction getViewTableFromFigure( figureView: ViewElement ) {\n\tfor ( const figureChild of figureView.getChildren() ) {\n\t\tif ( figureChild.is( 'element', 'table' ) ) {\n\t\t\treturn figureChild;\n\t\t}\n\t}\n}\n\n/**\n * Scans table rows and extracts required metadata from the table:\n *\n * headingRows    - The number of rows that go as table headers.\n * headingColumns - The maximum number of row headings.\n * rows           - Sorted `<tr>` elements as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n */\nfunction scanTable( viewTable: ViewElement ) {\n\tlet headingRows = 0;\n\tlet headingColumns: number | undefined = undefined;\n\n\t// The `<tbody>` and `<thead>` sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more than one\n\t// of them.\n\t// As the model does not have these sections, rows from different sections must be sorted.\n\t// For example, below is a valid HTML table:\n\t//\n\t// <table>\n\t//   <tbody><tr><td>2</td></tr></tbody>\n\t//   <thead><tr><td>1</td></tr></thead>\n\t//   <tbody><tr><td>3</td></tr></tbody>\n\t// </table>\n\t//\n\t// But browsers will render rows in order as: 1 as the heading and 2 and 3 as the body.\n\tconst headRows = [];\n\tconst bodyRows = [];\n\n\t// Currently the editor does not support more then one <thead> section.\n\t// Only the first <thead> from the view will be used as a heading row and the others will be converted to body rows.\n\tlet firstTheadElement;\n\n\tfor ( const tableChild of Array.from( viewTable.getChildren() as IterableIterator<ViewElement> ) ) {\n\t\t// Only `<thead>`, `<tbody>` & `<tfoot>` from allowed table children can have `<tr>`s.\n\t\t// The else is for future purposes (mainly `<caption>`).\n\t\tif ( tableChild.name !== 'tbody' && tableChild.name !== 'thead' && tableChild.name !== 'tfoot' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Save the first `<thead>` in the table as table header - all other ones will be converted to table body rows.\n\t\tif ( tableChild.name === 'thead' && !firstTheadElement ) {\n\t\t\tfirstTheadElement = tableChild;\n\t\t}\n\n\t\t// There might be some extra empty text nodes between the `<tr>`s.\n\t\t// Make sure further code operates on `tr`s only. (#145)\n\t\tconst trs = Array.from( tableChild.getChildren() ).filter(\n\t\t\t( el: ViewNode ): el is ViewElement & { name: 'tr' } => el.is( 'element', 'tr' )\n\t\t);\n\n\t\t// Keep tracking of the previous row columns count to improve detection of heading rows.\n\t\tlet maxPrevColumns = null;\n\n\t\tfor ( const tr of trs ) {\n\t\t\tconst trColumns = Array\n\t\t\t\t.from( tr.getChildren() )\n\t\t\t\t.filter( el => el.is( 'element', 'td' ) || el.is( 'element', 'th' ) );\n\n\t\t\t// This <tr> is a child of a first <thead> element.\n\t\t\tif (\n\t\t\t\t( firstTheadElement && tableChild === firstTheadElement ) ||\n\t\t\t\t(\n\t\t\t\t\ttableChild.name === 'tbody' &&\n\t\t\t\t\ttrColumns.length > 0 &&\n\t\t\t\t\t// These conditions handles the case when the first column is a <th> element and it's the only column in the row.\n\t\t\t\t\t// This case is problematic because it's not clear if this row should be a heading row or not, as it may be result\n\t\t\t\t\t// of the cell span from the previous row.\n\t\t\t\t\t// Issue: https://github.com/ckeditor/ckeditor5/issues/17556\n\t\t\t\t\t( maxPrevColumns === null || trColumns.length === maxPrevColumns ) &&\n\t\t\t\t\ttrColumns.every( e => e.is( 'element', 'th' ) )\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\theadingRows++;\n\t\t\t\theadRows.push( tr );\n\t\t\t} else {\n\t\t\t\tbodyRows.push( tr );\n\t\t\t\t// For other rows check how many column headings this row has.\n\n\t\t\t\tconst headingCols = scanRowForHeadingColumns( tr );\n\n\t\t\t\tif ( !headingColumns || headingCols < headingColumns ) {\n\t\t\t\t\theadingColumns = headingCols;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We use the maximum number of columns to avoid false positives when detecting\n\t\t\t// multiple rows with single column within `rowspan`. Without it the last row of `rowspan=3`\n\t\t\t// would be detected as a heading row because it has only one column (identical to the previous row).\n\t\t\tmaxPrevColumns = Math.max( maxPrevColumns || 0, trColumns.length );\n\t\t}\n\t}\n\n\treturn {\n\t\theadingRows,\n\t\theadingColumns: headingColumns || 0,\n\t\trows: [ ...headRows, ...bodyRows ]\n\t};\n}\n\n/**\n * Scans a `<tr>` element and its children for metadata:\n * - For heading row:\n *     - Adds this row to either the heading or the body rows.\n *     - Updates the number of heading rows.\n * - For body rows:\n *     - Calculates the number of column headings.\n */\nfunction scanRowForHeadingColumns( tr: ViewElement ) {\n\tlet headingColumns = 0;\n\tlet index = 0;\n\n\t// Filter out empty text nodes from tr children.\n\tconst children = Array.from( tr.getChildren() as IterableIterator<ViewElement> )\n\t\t.filter( child => child.name === 'th' || child.name === 'td' );\n\n\t// Count starting adjacent <th> elements of a <tr>.\n\twhile ( index < children.length && children[ index ].name === 'th' ) {\n\t\tconst th = children[ index ];\n\n\t\t// Adjust columns calculation by the number of spanned columns.\n\t\tconst colspan = parseInt( th.getAttribute( 'colspan' ) as string || '1' );\n\n\t\theadingColumns = headingColumns + colspan;\n\t\tindex++;\n\t}\n\n\treturn headingColumns;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablewalker\n */\nimport type { Element, Position } from 'ckeditor5/src/engine.js';\n\n// @if CK_DEBUG // const CKEditorError = require( '@ckeditor/ckeditor5-utils/src/ckeditorerror' ).default;\n\ninterface CellData {\n\tcell: Element;\n\trow: number;\n\tcolumn: number;\n}\n\n/**\n * An object with configuration for `TableWalker`.\n */\nexport interface TableWalkerOptions {\n\n\t/**\n\t * A row index for which this iterator will output cells. Can't be used together with `startRow` and `endRow`.\n\t */\n\trow?: number | null;\n\n\t/**\n\t * A row index from which this iterator should start. Can't be used together with `row`. Default value is 0.\n\t */\n\tstartRow?: number;\n\n\t/**\n\t * A row index at which this iterator should end. Can't be used together with `row`.\n\t */\n\tendRow?: number;\n\n\t/**\n\t * A column index for which this iterator will output cells. Can't be used together with `startColumn` and `endColumn`.\n\t */\n\tcolumn?: number;\n\n\t/**\n\t * A column index from which this iterator should start. Can't be used together with `column`. Default value is 0.\n\t */\n\tstartColumn?: number;\n\n\t/**\n\t * A column index at which this iterator should end. Can't be used together with `column`.\n\t */\n\tendColumn?: number;\n\n\t/**\n\t * Also return values for spanned cells. Default value is false.\n\t */\n\tincludeAllSlots?: boolean;\n}\n\n/**\n * The table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableSlot} with proper table cell attributes.\n */\nexport default class TableWalker implements IterableIterator<TableSlot> {\n\t/**\n\t * The walker's table element.\n\t *\n\t * @internal\n\t */\n\tpublic readonly _table: Element;\n\n\t/**\n\t * A row index from which this iterator will start.\n\t */\n\tprivate readonly _startRow: number | null;\n\n\t/**\n\t * A row index at which this iterator will end.\n\t */\n\tprivate readonly _endRow?: number | null;\n\n\t/**\n\t * If set, the table walker will only output cells from a given column and following ones or cells that overlap them.\n\t */\n\tprivate readonly _startColumn: number;\n\n\t/**\n\t * If set, the table walker will only output cells up to a given column.\n\t */\n\tprivate readonly _endColumn?: number;\n\n\t/**\n\t * Enables output of spanned cells that are normally not yielded.\n\t */\n\tprivate readonly _includeAllSlots: boolean;\n\n\t/**\n\t * Row indexes to skip from the iteration.\n\t */\n\tprivate readonly _skipRows: Set<number>;\n\n\t/**\n\t * The current row index.\n\t *\n\t * @internal\n\t */\n\tpublic _row: number;\n\n\t/**\n\t * The index of the current row element in the table.\n\t *\n\t * @internal\n\t */\n\tpublic _rowIndex: number;\n\n\t/**\n\t * The current column index.\n\t *\n\t * @internal\n\t */\n\tpublic _column: number;\n\n\t/**\n\t * The cell index in a parent row. For spanned cells when {@link #_includeAllSlots} is set to `true`,\n\t * this represents the index of the next table cell.\n\t *\n\t * @internal\n\t */\n\tpublic _cellIndex: number;\n\n\t/**\n\t * Holds a map of spanned cells in a table.\n\t */\n\tprivate readonly _spannedCells: Map<number, Map<number, CellData>>;\n\n\t/**\n\t * Index of the next column where a cell is anchored.\n\t */\n\tprivate _nextCellAtColumn: number;\n\n\t/**\n\t * Indicates whether the iterator jumped to (or close to) the start row, ignoring rows that don't need to be traversed.\n\t */\n\tprivate _jumpedToStartRow = false;\n\n\t/**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the constructor.\n\t * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeAllSlots` option to the constructor.\n\t *\n\t * The most important values of the iterator are column and row indexes of a cell.\n\t *\n\t * See {@link module:table/tablewalker~TableSlot} what values are returned by the table walker.\n\t *\n\t * To iterate over a given row:\n\t *\n\t * ```ts\n\t * const tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n\t *\n\t * for ( const tableSlot of tableWalker ) {\n\t *   console.log( 'A cell at row', tableSlot.row, 'and column', tableSlot.column );\n\t * }\n\t * ```\n\t *\n\t * For instance the code above for the following table:\n\t *\n\t *  +----+----+----+----+----+----+\n\t *  | 00      | 02 | 03 | 04 | 05 |\n\t *  |         +----+----+----+----+\n\t *  |         | 12      | 14 | 15 |\n\t *  |         +----+----+----+    +\n\t *  |         | 22           |    |\n\t *  |----+----+----+----+----+    +\n\t *  | 30 | 31 | 32 | 33 | 34 |    |\n\t *  +----+----+----+----+----+----+\n\t *\n\t * will log in the console:\n\t *\n\t *  'A cell at row 1 and column 2'\n\t *  'A cell at row 1 and column 4'\n\t *  'A cell at row 1 and column 5'\n\t *  'A cell at row 2 and column 2'\n\t *\n\t * To also iterate over spanned cells:\n\t *\n\t * ```ts\n\t * const tableWalker = new TableWalker( table, { row: 1, includeAllSlots: true } );\n\t *\n\t * for ( const tableSlot of tableWalker ) {\n\t *   console.log( 'Slot at', tableSlot.row, 'x', tableSlot.column, ':', tableSlot.isAnchor ? 'is anchored' : 'is spanned' );\n\t * }\n\t * ```\n\t *\n\t * will log in the console for the table from the previous example:\n\t *\n\t *  'Cell at 1 x 0 : is spanned'\n\t *  'Cell at 1 x 1 : is spanned'\n\t *  'Cell at 1 x 2 : is anchored'\n\t *  'Cell at 1 x 3 : is spanned'\n\t *  'Cell at 1 x 4 : is anchored'\n\t *  'Cell at 1 x 5 : is anchored'\n\t *\n\t * **Note**: Option `row` is a shortcut that sets both `startRow` and `endRow` to the same row.\n\t * (Use either `row` or `startRow` and `endRow` but never together). Similarly the `column` option sets both `startColumn`\n\t * and `endColumn` to the same column (Use either `column` or `startColumn` and `endColumn` but never together).\n\t *\n\t * @param table A table over which the walker iterates.\n\t * @param options An object with configuration.\n\t * @param options.row A row index for which this iterator will output cells. Can't be used together with `startRow` and `endRow`.\n\t * @param options.startRow A row index from which this iterator should start. Can't be used together with `row`. Default value is 0.\n\t * @param options.endRow A row index at which this iterator should end. Can't be used together with `row`.\n\t * @param options.column A column index for which this iterator will output cells.\n\t * Can't be used together with `startColumn` and `endColumn`.\n\t * @param options.startColumn A column index from which this iterator should start.\n\t * Can't be used together with `column`. Default value is 0.\n\t * @param options.endColumn A column index at which this iterator should end. Can't be used together with `column`.\n\t * @param options.includeAllSlots Also return values for spanned cells. Default value is \"false\".\n\t */\n\tconstructor( table: Element, options: TableWalkerOptions = {} ) {\n\t\tthis._table = table;\n\t\tthis._startRow = options.row !== undefined ? options.row : options.startRow || 0;\n\t\tthis._endRow = options.row !== undefined ? options.row : options.endRow;\n\t\tthis._startColumn = options.column !== undefined ? options.column : options.startColumn || 0;\n\t\tthis._endColumn = options.column !== undefined ? options.column : options.endColumn;\n\t\tthis._includeAllSlots = !!options.includeAllSlots;\n\t\tthis._skipRows = new Set();\n\t\tthis._row = 0;\n\t\tthis._rowIndex = 0;\n\t\tthis._column = 0;\n\t\tthis._cellIndex = 0;\n\t\tthis._spannedCells = new Map();\n\t\tthis._nextCellAtColumn = -1;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t */\n\tpublic [ Symbol.iterator ](): IterableIterator<TableSlot> {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the next table walker's value.\n\t *\n\t * @returns The next table walker's value.\n\t */\n\tpublic next(): IteratorResult<TableSlot, undefined> {\n\t\tif ( this._canJumpToStartRow() ) {\n\t\t\tthis._jumpToNonSpannedRowClosestToStartRow();\n\t\t}\n\n\t\tconst row = this._table.getChild( this._rowIndex );\n\n\t\t// Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n\t\tif ( !row || this._isOverEndRow() ) {\n\t\t\treturn { done: true, value: undefined };\n\t\t}\n\n\t\t// We step over current element when it is not a tableRow instance.\n\t\tif ( !row.is( 'element', 'tableRow' ) ) {\n\t\t\tthis._rowIndex++;\n\n\t\t\treturn this.next();\n\t\t}\n\n\t\tif ( this._isOverEndColumn() ) {\n\t\t\treturn this._advanceToNextRow();\n\t\t}\n\n\t\tlet outValue: IteratorYieldResult<TableSlot> | null = null;\n\n\t\tconst spanData = this._getSpanned();\n\n\t\tif ( spanData ) {\n\t\t\tif ( this._includeAllSlots && !this._shouldSkipSlot() ) {\n\t\t\t\toutValue = this._formatOutValue( spanData.cell, spanData.row, spanData.column );\n\t\t\t}\n\t\t} else {\n\t\t\tconst cell = row.getChild( this._cellIndex ) as Element;\n\n\t\t\tif ( !cell ) {\n\t\t\t\t// If there are no more cells left in row advance to the next row.\n\t\t\t\treturn this._advanceToNextRow();\n\t\t\t}\n\n\t\t\tconst colspan = parseInt( cell.getAttribute( 'colspan' ) as string || '1' );\n\t\t\tconst rowspan = parseInt( cell.getAttribute( 'rowspan' ) as string || '1' );\n\n\t\t\t// Record this cell spans if it's not 1x1 cell.\n\t\t\tif ( colspan > 1 || rowspan > 1 ) {\n\t\t\t\tthis._recordSpans( cell, rowspan, colspan );\n\t\t\t}\n\n\t\t\tif ( !this._shouldSkipSlot() ) {\n\t\t\t\toutValue = this._formatOutValue( cell );\n\t\t\t}\n\n\t\t\tthis._nextCellAtColumn = this._column + colspan;\n\t\t}\n\n\t\t// Advance to the next column before returning value.\n\t\tthis._column++;\n\n\t\tif ( this._column == this._nextCellAtColumn ) {\n\t\t\tthis._cellIndex++;\n\t\t}\n\n\t\t// The current value will be returned only if current row and column are not skipped.\n\t\treturn outValue || this.next();\n\t}\n\n\t/**\n\t * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n\t * to output.\n\t *\n\t * @param row The row index to skip.\n\t */\n\tpublic skipRow( row: number ): void {\n\t\tthis._skipRows.add( row );\n\t}\n\n\t/**\n\t * Advances internal cursor to the next row.\n\t */\n\tprivate _advanceToNextRow() {\n\t\tthis._row++;\n\t\tthis._rowIndex++;\n\t\tthis._column = 0;\n\t\tthis._cellIndex = 0;\n\t\tthis._nextCellAtColumn = -1;\n\n\t\treturn this.next();\n\t}\n\n\t/**\n\t * Checks if the current row is over {@link #_endRow}.\n\t */\n\tprivate _isOverEndRow() {\n\t\t// If #_endRow is defined skip all rows after it.\n\t\treturn this._endRow !== undefined && this._row > this._endRow!;\n\t}\n\n\t/**\n\t * Checks if the current cell is over {@link #_endColumn}\n\t */\n\tprivate _isOverEndColumn() {\n\t\t// If #_endColumn is defined skip all cells after it.\n\t\treturn this._endColumn !== undefined && this._column > this._endColumn;\n\t}\n\n\t/**\n\t * A common method for formatting the iterator's output value.\n\t *\n\t * @param cell The table cell to output.\n\t * @param anchorRow The row index of a cell anchor slot.\n\t * @param anchorColumn The column index of a cell anchor slot.\n\t */\n\tprivate _formatOutValue( cell: Element, anchorRow = this._row, anchorColumn = this._column ): IteratorYieldResult<TableSlot> {\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: new TableSlot( this, cell, anchorRow, anchorColumn )\n\t\t};\n\t}\n\n\t/**\n\t * Checks if the current slot should be skipped.\n\t */\n\tprivate _shouldSkipSlot(): boolean {\n\t\tconst rowIsMarkedAsSkipped = this._skipRows.has( this._row );\n\t\tconst rowIsBeforeStartRow = this._row < this._startRow!;\n\n\t\tconst columnIsBeforeStartColumn = this._column < this._startColumn;\n\t\tconst columnIsAfterEndColumn = this._endColumn !== undefined && this._column > this._endColumn;\n\n\t\treturn rowIsMarkedAsSkipped || rowIsBeforeStartRow || columnIsBeforeStartColumn || columnIsAfterEndColumn;\n\t}\n\n\t/**\n\t * Returns the cell element that is spanned over the current cell location.\n\t */\n\tprivate _getSpanned(): CellData | null {\n\t\tconst rowMap = this._spannedCells.get( this._row );\n\n\t\t// No spans for given row.\n\t\tif ( !rowMap ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If spans for given rows has entry for column it means that this location if spanned by other cell.\n\t\treturn rowMap.get( this._column ) || null;\n\t}\n\n\t/**\n\t * Updates spanned cells map relative to the current cell location and its span dimensions.\n\t *\n\t * @param cell A cell that is spanned.\n\t * @param rowspan Cell height.\n\t * @param colspan Cell width.\n\t */\n\tprivate _recordSpans( cell: Element, rowspan: number, colspan: number ) {\n\t\tconst data = {\n\t\t\tcell,\n\t\t\trow: this._row,\n\t\t\tcolumn: this._column\n\t\t};\n\n\t\tfor ( let rowToUpdate = this._row; rowToUpdate < this._row + rowspan; rowToUpdate++ ) {\n\t\t\tfor ( let columnToUpdate = this._column; columnToUpdate < this._column + colspan; columnToUpdate++ ) {\n\t\t\t\tif ( rowToUpdate != this._row || columnToUpdate != this._column ) {\n\t\t\t\t\tthis._markSpannedCell( rowToUpdate, columnToUpdate, data );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Marks the cell location as spanned by another cell.\n\t *\n\t * @param row The row index of the cell location.\n\t * @param column The column index of the cell location.\n\t * @param data A spanned cell details (cell element, anchor row and column).\n\t */\n\tprivate _markSpannedCell( row: number, column: number, data: CellData ) {\n\t\tif ( !this._spannedCells.has( row ) ) {\n\t\t\tthis._spannedCells.set( row, new Map() );\n\t\t}\n\n\t\tconst rowSpans = this._spannedCells.get( row )!;\n\n\t\trowSpans.set( column, data );\n\t}\n\n\t/**\n\t * Checks if part of the table can be skipped.\n\t */\n\tprivate _canJumpToStartRow(): boolean {\n\t\treturn !!this._startRow &&\n\t\t\tthis._startRow > 0 &&\n\t\t\t!this._jumpedToStartRow;\n\t}\n\n\t/**\n\t * Sets the current row to `this._startRow` or the first row before it that has the number of cells\n\t * equal to the number of columns in the table.\n\t *\n\t * Example:\n\t * \t+----+----+----+\n\t *  | 00 | 01 | 02 |\n\t *  |----+----+----+\n\t *  | 10      | 12 |\n\t *  |         +----+\n\t *  |         | 22 |\n\t *  |         +----+\n\t *  |         | 32 | <--- Start row\n\t *  +----+----+----+\n\t *  | 40 | 41 | 42 |\n\t *  +----+----+----+\n\t *\n\t * If the 4th row is a `this._startRow`, this method will:\n\t * 1.) Count the number of columns this table has based on the first row (3 columns in this case).\n\t * 2.) Check if the 4th row contains 3 cells. It doesn't, so go to the row before it.\n\t * 3.) Check if the 3rd row contains 3 cells. It doesn't, so go to the row before it.\n\t * 4.) Check if the 2nd row contains 3 cells. It does, so set the current row to that row.\n\t *\n\t * Setting the current row this way is necessary to let the `next()`  method loop over the cells\n\t * spanning multiple rows or columns and update the `this._spannedCells` property.\n\t */\n\tprivate _jumpToNonSpannedRowClosestToStartRow(): void {\n\t\tconst firstRowLength = this._getRowLength( 0 );\n\n\t\tfor ( let i = this._startRow!; !this._jumpedToStartRow; i-- ) {\n\t\t\tif ( firstRowLength === this._getRowLength( i ) ) {\n\t\t\t\tthis._row = i;\n\t\t\t\tthis._rowIndex = i;\n\t\t\t\tthis._jumpedToStartRow = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a number of columns in a row taking `colspan` into consideration.\n\t */\n\tprivate _getRowLength( rowIndex: number ): number {\n\t\tconst row = this._table.getChild( rowIndex ) as Element;\n\n\t\treturn [ ...row.getChildren() ].reduce( ( cols, row ) => {\n\t\t\treturn cols + parseInt( row.getAttribute( 'colspan' ) as string || '1' );\n\t\t}, 0 );\n\t}\n}\n\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n */\nclass TableSlot {\n\t/**\n\t * The current table cell.\n\t */\n\tpublic readonly cell: Element;\n\n\t/**\n\t * The row index of a table slot.\n\t */\n\tpublic readonly row: number;\n\n\t/**\n\t * The column index of a table slot.\n\t */\n\tpublic readonly column: number;\n\n\t/**\n\t * The row index of a cell anchor slot.\n\t */\n\tpublic readonly cellAnchorRow: number;\n\n\t/**\n\t * The column index of a cell anchor slot.\n\t */\n\tpublic readonly cellAnchorColumn: number;\n\n\t/**\n\t * The index of the current cell in the parent row.\n\t */\n\tprivate readonly _cellIndex: number;\n\n\t/**\n\t * The index of the current row element in the table.\n\t */\n\tprivate readonly _rowIndex: number;\n\n\t/**\n\t * The table element.\n\t */\n\tprivate readonly _table: Element;\n\n\t/**\n\t * Creates an instance of the table walker value.\n\t *\n\t * @param tableWalker The table walker instance.\n\t * @param cell The current table cell.\n\t * @param anchorRow The row index of a cell anchor slot.\n\t * @param anchorColumn The column index of a cell anchor slot.\n\t */\n\tconstructor( tableWalker: TableWalker, cell: Element, anchorRow: number, anchorColumn: number ) {\n\t\tthis.cell = cell;\n\t\tthis.row = tableWalker._row;\n\t\tthis.column = tableWalker._column;\n\t\tthis.cellAnchorRow = anchorRow;\n\t\tthis.cellAnchorColumn = anchorColumn;\n\t\tthis._cellIndex = tableWalker._cellIndex;\n\t\tthis._rowIndex = tableWalker._rowIndex;\n\t\tthis._table = tableWalker._table;\n\t}\n\n\t// @if CK_DEBUG // public get isSpanned(): unknown { return throwMissingGetterError( 'isSpanned' ); }\n\t// @if CK_DEBUG // public get colspan(): unknown { return throwMissingGetterError( 'colspan' ); }\n\t// @if CK_DEBUG // public get rowspan(): unknown { return throwMissingGetterError( 'rowspan' ); }\n\t// @if CK_DEBUG // public get cellIndex(): unknown { return throwMissingGetterError( 'cellIndex' ); }\n\n\t/**\n\t * Whether the cell is anchored in the current slot.\n\t */\n\tpublic get isAnchor(): boolean {\n\t\treturn this.row === this.cellAnchorRow && this.column === this.cellAnchorColumn;\n\t}\n\n\t/**\n\t * The width of a cell defined by a `colspan` attribute. If the model attribute is not present, it is set to `1`.\n\t */\n\tpublic get cellWidth(): number {\n\t\treturn parseInt( this.cell.getAttribute( 'colspan' ) as string || '1' );\n\t}\n\n\t/**\n\t * The height of a cell defined by a `rowspan` attribute. If the model attribute is not present, it is set to `1`.\n\t */\n\tpublic get cellHeight(): number {\n\t\treturn parseInt( this.cell.getAttribute( 'rowspan' ) as string || '1' );\n\t}\n\n\t/**\n\t * The index of the current row element in the table.\n\t */\n\tpublic get rowIndex(): number {\n\t\treturn this._rowIndex;\n\t}\n\n\t/**\n\t * Returns the {@link module:engine/model/position~Position} before the table slot.\n\t */\n\tpublic getPositionBefore(): Position {\n\t\tconst model = this._table.root.document!.model;\n\n\t\treturn model.createPositionAt( this._table.getChild( this.row ) as Element, this._cellIndex );\n\t}\n}\n\nexport type { TableSlot };\n\n/**\n * This `TableSlot`'s getter (property) was removed in CKEditor 5 v20.0.0.\n *\n * Check out the new `TableWalker`'s API in the documentation.\n *\n * @error tableslot-getter-removed\n * @param getterName\n */\n// @if CK_DEBUG // function throwMissingGetterError( getterName: string ): void {\n// @if CK_DEBUG //\t\tthrow new CKEditorError( 'tableslot-getter-removed', null, {\n// @if CK_DEBUG //\t\t\tgetterName\n// @if CK_DEBUG //\t\t} );\n// @if CK_DEBUG // }\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/downcast\n */\n\nimport { toWidget, toWidgetEditable } from 'ckeditor5/src/widget.js';\nimport type { Node, ViewElement, Element, DowncastWriter, ElementCreatorFunction } from 'ckeditor5/src/engine.js';\n\nimport TableWalker from './../tablewalker.js';\nimport type TableUtils from '../tableutils.js';\nimport type { AdditionalSlot } from '../tableediting.js';\n\n/**\n * Model table element to view table element conversion helper.\n */\nexport function downcastTable( tableUtils: TableUtils, options: DowncastTableOptions ): ElementCreatorFunction {\n\treturn ( table, { writer } ) => {\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\t\tconst tableElement = writer.createContainerElement( 'table', null, [] );\n\t\tconst figureElement = writer.createContainerElement( 'figure', { class: 'table' }, tableElement );\n\n\t\t// Table head slot.\n\t\tif ( headingRows > 0 ) {\n\t\t\twriter.insert(\n\t\t\t\twriter.createPositionAt( tableElement, 'end' ),\n\t\t\t\twriter.createContainerElement(\n\t\t\t\t\t'thead',\n\t\t\t\t\tnull,\n\t\t\t\t\twriter.createSlot( element => element.is( 'element', 'tableRow' ) && element.index! < headingRows )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// Table body slot.\n\t\tif ( headingRows < tableUtils.getRows( table ) ) {\n\t\t\twriter.insert(\n\t\t\t\twriter.createPositionAt( tableElement, 'end' ),\n\t\t\t\twriter.createContainerElement(\n\t\t\t\t\t'tbody',\n\t\t\t\t\tnull,\n\t\t\t\t\twriter.createSlot( element => element.is( 'element', 'tableRow' ) && element.index! >= headingRows )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// Dynamic slots.\n\t\tfor ( const { positionOffset, filter } of options.additionalSlots ) {\n\t\t\twriter.insert(\n\t\t\t\twriter.createPositionAt( tableElement, positionOffset ),\n\t\t\t\twriter.createSlot( filter )\n\t\t\t);\n\t\t}\n\n\t\t// Create a slot with items that don't fit into the table.\n\t\twriter.insert(\n\t\t\twriter.createPositionAt( tableElement, 'after' ),\n\t\t\twriter.createSlot( element => {\n\t\t\t\tif ( element.is( 'element', 'tableRow' ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn !options.additionalSlots.some( ( { filter } ) => filter( element ) );\n\t\t\t} )\n\t\t);\n\n\t\treturn options.asWidget ? toTableWidget( figureElement, writer ) : figureElement;\n\t};\n}\n\n/**\n * Model table row element to view `<tr>` element conversion helper.\n *\n * @returns Element creator.\n */\nexport function downcastRow(): ElementCreatorFunction {\n\treturn ( tableRow, { writer } ) => {\n\t\treturn tableRow.isEmpty ?\n\t\t\twriter.createEmptyElement( 'tr' ) :\n\t\t\twriter.createContainerElement( 'tr' );\n\t};\n}\n\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */\nexport function downcastCell( options: { asWidget?: boolean } = {} ): ElementCreatorFunction {\n\treturn ( tableCell, { writer } ) => {\n\t\tconst tableRow = tableCell.parent as Element;\n\t\tconst table = tableRow.parent as Element;\n\t\tconst rowIndex = table.getChildIndex( tableRow )!;\n\n\t\tconst tableWalker = new TableWalker( table, { row: rowIndex } );\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number || 0;\n\n\t\tlet result: ViewElement | null = null;\n\n\t\t// We need to iterate over a table in order to get proper row & column values from a walker.\n\t\tfor ( const tableSlot of tableWalker ) {\n\t\t\tif ( tableSlot.cell == tableCell ) {\n\t\t\t\tconst isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n\t\t\t\tconst cellElementName = isHeading ? 'th' : 'td';\n\n\t\t\t\tresult = options.asWidget ?\n\t\t\t\t\ttoWidgetEditable( writer.createEditableElement( cellElementName ), writer ) :\n\t\t\t\t\twriter.createContainerElement( cellElementName );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\n/**\n * Overrides paragraph inside table cell conversion.\n *\n * This converter:\n * * should be used to override default paragraph conversion.\n * * It will only convert `<paragraph>` placed directly inside `<tableCell>`.\n * * For a single paragraph without attributes it returns `<span>` to simulate data table.\n * * For all other cases it returns `<p>` element.\n *\n * @param options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns Element creator.\n */\nexport function convertParagraphInTableCell( options: { asWidget?: boolean } = {} ): ElementCreatorFunction {\n\treturn ( modelElement, { writer } ) => {\n\t\tif ( !modelElement.parent!.is( 'element', 'tableCell' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( !isSingleParagraphWithoutAttributes( modelElement ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( options.asWidget ) {\n\t\t\treturn writer.createContainerElement( 'span', { class: 'ck-table-bogus-paragraph' } );\n\t\t} else {\n\t\t\t// Using `<p>` in case there are some markers on it and transparentRendering will render it anyway.\n\t\t\tconst viewElement = writer.createContainerElement( 'p' );\n\n\t\t\twriter.setCustomProperty( 'dataPipeline:transparentRendering', true, viewElement );\n\n\t\t\treturn viewElement;\n\t\t}\n\t};\n}\n\n/**\n * Checks if given model `<paragraph>` is an only child of a parent (`<tableCell>`) and if it has any attribute set.\n *\n * The paragraph should be converted in the editing view to:\n *\n * * If returned `true` - to a `<span class=\"ck-table-bogus-paragraph\">`\n * * If returned `false` - to a `<p>`\n */\nexport function isSingleParagraphWithoutAttributes( modelElement: Element ): boolean {\n\tconst tableCell = modelElement.parent!;\n\n\tconst isSingleParagraph = tableCell.childCount == 1;\n\n\treturn isSingleParagraph && !hasAnyAttribute( modelElement );\n}\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n * @param label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n */\nfunction toTableWidget( viewElement: ViewElement, writer: DowncastWriter ): ViewElement {\n\twriter.setCustomProperty( 'table', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { hasSelectionHandle: true } );\n}\n\n/**\n * Checks if an element has any attributes set.\n */\nfunction hasAnyAttribute( element: Node ): boolean {\n\tfor ( const attributeKey of element.getAttributeKeys() ) {\n\t\t// Ignore selection attributes stored on block elements.\n\t\tif ( attributeKey.startsWith( 'selection:' ) || attributeKey == 'htmlEmptyBlock' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport interface DowncastTableOptions {\n\n\t/**\n\t * If set to `true`, the downcast conversion will produce a widget.\n\t */\n\tasWidget?: boolean;\n\n\t/**\n\t * Array of additional slot handlers.\n\t */\n\tadditionalSlots: Array<AdditionalSlot>;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/inserttablecommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\n\nimport type {\n\tDocumentSelection,\n\tSchema,\n\tSelection,\n\tElement\n} from 'ckeditor5/src/engine.js';\nimport type TableUtils from '../tableutils.js';\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n * ```ts\n * editor.execute( 'insertTable', { rows: 20, columns: 5 } );\n * ```\n */\nexport default class InsertTableCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst schema = model.schema;\n\n\t\tthis.isEnabled = isAllowedInParent( selection, schema );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Inserts a table with the given number of rows and columns into the editor.\n\t *\n\t * @param options.rows The number of rows to create in the inserted table. Default value is 2.\n\t * @param options.columns The number of columns to create in the inserted table. Default value is 2.\n\t * @param options.headingRows The number of heading rows. If not provided it will default to\n\t * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.rows`} table config.\n\t * @param options.headingColumns The number of heading columns. If not provided it will default to\n\t * {@link module:table/tableconfig~TableConfig#defaultHeadings `config.table.defaultHeadings.columns`} table config.\n\t * @fires execute\n\t */\n\tpublic override execute(\n\t\toptions: {\n\t\t\trows?: number;\n\t\t\tcolumns?: number;\n\t\t\theadingRows?: number;\n\t\t\theadingColumns?: number;\n\t\t} = {}\n\t): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst tableUtils: TableUtils = editor.plugins.get( 'TableUtils' );\n\n\t\tconst defaultRows = editor.config.get( 'table.defaultHeadings.rows' );\n\t\tconst defaultColumns = editor.config.get( 'table.defaultHeadings.columns' );\n\n\t\tif ( options.headingRows === undefined && defaultRows ) {\n\t\t\toptions.headingRows = defaultRows;\n\t\t}\n\n\t\tif ( options.headingColumns === undefined && defaultColumns ) {\n\t\t\toptions.headingColumns = defaultColumns;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst table = tableUtils.createTable( writer, options );\n\n\t\t\tmodel.insertObject( table, null, null, { findOptimalPosition: 'auto' } );\n\n\t\t\twriter.setSelection( writer.createPositionAt( table.getNodeByPath( [ 0, 0, 0 ] ), 0 ) );\n\t\t} );\n\t}\n}\n\n/**\n * Checks if the table is allowed in the parent.\n */\nfunction isAllowedInParent( selection: Selection | DocumentSelection, schema: Schema ) {\n\tconst positionParent = selection.getFirstPosition()!.parent;\n\tconst validParent = positionParent === positionParent.root ? positionParent : positionParent.parent;\n\n\treturn schema.checkChild( validParent as Element, 'table' );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/insertrowcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type TableUtils from '../tableutils.js';\n\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowBelow' );\n * ```\n *\n * To insert a row above the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableRowAbove' );\n * ```\n */\nexport default class InsertRowCommand extends Command {\n\t/**\n\t * The order of insertion relative to the row in which the caret is located.\n\t */\n\tpublic readonly order: 'above' | 'below';\n\n\t/**\n\t * Creates a new `InsertRowCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.order The order of insertion relative to the row in which the caret is located.\n\t * Possible values: `\"above\"` and `\"below\"`. Default value is \"below\"\n\t */\n\tconstructor( editor: Editor, options: { order?: 'above' | 'below' } = {} ) {\n\t\tsuper( editor );\n\n\t\tthis.order = options.order || 'below';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells( selection ).length;\n\n\t\tthis.isEnabled = isAnyCellSelected;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = editor.plugins.get( 'TableUtils' );\n\t\tconst insertAbove = this.order === 'above';\n\n\t\tconst affectedTableCells = tableUtils.getSelectionAffectedTableCells( selection );\n\t\tconst rowIndexes = tableUtils.getRowIndexes( affectedTableCells );\n\n\t\tconst row = insertAbove ? rowIndexes.first : rowIndexes.last;\n\t\tconst table = affectedTableCells[ 0 ].findAncestor( 'table' )!;\n\n\t\ttableUtils.insertRows( table, { at: insertAbove ? row : row + 1, copyStructureFromAbove: !insertAbove } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/insertcolumncommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type TableUtils from '../tableutils.js';\n\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnLeft' );\n * ```\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n * ```ts\n * editor.execute( 'insertTableColumnRight' );\n * ```\n */\nexport default class InsertColumnCommand extends Command {\n\t/**\n\t * The order of insertion relative to the column in which the caret is located.\n\t */\n\tpublic readonly order: 'left' | 'right';\n\n\t/**\n\t * Creates a new `InsertColumnCommand` instance.\n\t *\n\t * @param editor An editor on which this command will be used.\n\t * @param options.order The order of insertion relative to the column in which the caret is located.\n\t * Possible values: `\"left\"` and `\"right\"`. Default value is \"right\".\n\t */\n\tconstructor( editor: Editor, options: { order?: 'left' | 'right' } = {} ) {\n\t\tsuper( editor );\n\n\t\tthis.order = options.order || 'right';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst isAnyCellSelected = !!tableUtils.getSelectionAffectedTableCells( selection ).length;\n\n\t\tthis.isEnabled = isAnyCellSelected;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n\t * in which the selection is set.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils: TableUtils = editor.plugins.get( 'TableUtils' );\n\t\tconst insertBefore = this.order === 'left';\n\n\t\tconst affectedTableCells = tableUtils.getSelectionAffectedTableCells( selection );\n\t\tconst columnIndexes = tableUtils.getColumnIndexes( affectedTableCells );\n\n\t\tconst column = insertBefore ? columnIndexes.first : columnIndexes.last;\n\t\tconst table = affectedTableCells[ 0 ].findAncestor( 'table' )!;\n\n\t\ttableUtils.insertColumns( table, { columns: 1, at: insertBefore ? column : column + 1 } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/splitcellcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type TableUtils from '../tableutils.js';\n\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n * ```ts\n * editor.execute( 'splitTableCellVertically' );\n * ```\n */\nexport default class SplitCellCommand extends Command {\n\t/**\n\t * The direction that indicates which cell will be split.\n\t */\n\tpublic readonly direction: 'horizontally' | 'vertically';\n\n\t/**\n\t * Creates a new `SplitCellCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n\t */\n\tconstructor( editor: Editor, options: { direction?: 'horizontally' | 'vertically' } = {} ) {\n\t\tsuper( editor );\n\n\t\tthis.direction = options.direction || 'horizontally';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = selectedCells.length === 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst tableCell = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection )[ 0 ];\n\t\tconst isHorizontal = this.direction === 'horizontally';\n\n\t\tif ( isHorizontal ) {\n\t\t\ttableUtils.splitCellHorizontally( tableCell, 2 );\n\t\t} else {\n\t\t\ttableUtils.splitCellVertically( tableCell, 2 );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/structure\n */\n\nimport type { Element, Node, Writer } from 'ckeditor5/src/engine.js';\n\nimport { default as TableWalker, type TableSlot } from '../tablewalker.js';\nimport { createEmptyTableCell, updateNumericAttribute } from './common.js';\nimport type TableUtils from '../tableutils.js';\n\ntype CellAttributes = {\n\trowspan?: number;\n\tcolspan?: number;\n};\n\n/**\n * Returns a cropped table according to given dimensions.\n\n * To return a cropped table that starts at first row and first column and end in third row and column:\n *\n * ```ts\n * const croppedTable = cropTableToDimensions( table, {\n *   startRow: 1,\n *   endRow: 3,\n *   startColumn: 1,\n *   endColumn: 3\n * }, writer );\n * ```\n *\n * Calling the code above for the table below:\n *\n *        0   1   2   3   4                      0   1   2\n *      ┌───┬───┬───┬───┬───┐\n *   0  │ a │ b │ c │ d │ e │\n *      ├───┴───┤   ├───┴───┤                  ┌───┬───┬───┐\n *   1  │ f     │   │ g     │                  │   │   │ g │  0\n *      ├───┬───┴───┼───┬───┤   will return:   ├───┴───┼───┤\n *   2  │ h │ i     │ j │ k │                  │ i     │ j │  1\n *      ├───┤       ├───┤   │                  │       ├───┤\n *   3  │ l │       │ m │   │                  │       │ m │  2\n *      ├───┼───┬───┤   ├───┤                  └───────┴───┘\n *   4  │ n │ o │ p │   │ q │\n *      └───┴───┴───┴───┴───┘\n */\nexport function cropTableToDimensions(\n\tsourceTable: Element,\n\tcropDimensions: {\n\t\tstartRow: number;\n\t\tstartColumn: number;\n\t\tendRow: number;\n\t\tendColumn: number;\n\t},\n\twriter: Writer\n): Element {\n\tconst { startRow, startColumn, endRow, endColumn } = cropDimensions;\n\n\t// Create empty table with empty rows equal to crop height.\n\tconst croppedTable = writer.createElement( 'table' );\n\tconst cropHeight = endRow - startRow + 1;\n\n\tfor ( let i = 0; i < cropHeight; i++ ) {\n\t\twriter.insertElement( 'tableRow', croppedTable, 'end' );\n\t}\n\n\tconst tableMap = [ ...new TableWalker( sourceTable, { startRow, endRow, startColumn, endColumn, includeAllSlots: true } ) ];\n\n\t// Iterate over source table slots (including empty - spanned - ones).\n\tfor ( const { row: sourceRow, column: sourceColumn, cell: tableCell, isAnchor, cellAnchorRow, cellAnchorColumn } of tableMap ) {\n\t\t// Row index in cropped table.\n\t\tconst rowInCroppedTable = sourceRow - startRow;\n\t\tconst row = croppedTable.getChild( rowInCroppedTable ) as Element;\n\n\t\t// For empty slots: fill the gap with empty table cell.\n\t\tif ( !isAnchor ) {\n\t\t\t// But fill the gap only if the spanning cell is anchored outside cropped area.\n\t\t\t// In the table from method jsdoc those cells are: \"c\" & \"f\".\n\t\t\tif ( cellAnchorRow < startRow || cellAnchorColumn < startColumn ) {\n\t\t\t\tcreateEmptyTableCell( writer, writer.createPositionAt( row, 'end' ) );\n\t\t\t}\n\t\t}\n\t\t// Otherwise clone the cell with all children and trim if it exceeds cropped area.\n\t\telse {\n\t\t\tconst tableCellCopy = writer.cloneElement( tableCell );\n\n\t\t\twriter.append( tableCellCopy, row );\n\n\t\t\t// Trim table if it exceeds cropped area.\n\t\t\t// In the table from method jsdoc those cells are: \"g\" & \"m\".\n\t\t\ttrimTableCellIfNeeded( tableCellCopy, sourceRow, sourceColumn, endRow, endColumn, writer );\n\t\t}\n\t}\n\n\t// Adjust heading rows & columns in cropped table if crop selection includes headings parts.\n\taddHeadingsToCroppedTable( croppedTable, sourceTable, startRow, startColumn, writer );\n\n\treturn croppedTable;\n}\n\n/**\n * Returns slot info of cells that starts above and overlaps a given row.\n *\n * In a table below, passing `overlapRow = 3`\n *\n *     ┌───┬───┬───┬───┬───┐\n *  0  │ a │ b │ c │ d │ e │\n *     │   ├───┼───┼───┼───┤\n *  1  │   │ f │ g │ h │ i │\n *     ├───┤   ├───┼───┤   │\n *  2  │ j │   │ k │ l │   │\n *     │   │   │   ├───┼───┤\n *  3  │   │   │   │ m │ n │  <- overlap row to check\n *     ├───┼───┤   │   ├───│\n *  4  │ o │ p │   │   │ q │\n *     └───┴───┴───┴───┴───┘\n *\n * will return slot info for cells: \"j\", \"f\", \"k\".\n *\n * @param table The table to check.\n * @param overlapRow The index of the row to check.\n * @param startRow row to start analysis. Use it when it is known that the cells above that row will not overlap. Default value is 0.\n */\nexport function getVerticallyOverlappingCells( table: Element, overlapRow: number, startRow: number = 0 ): Array<TableSlot> {\n\tconst cells: Array<TableSlot> = [];\n\n\tconst tableWalker = new TableWalker( table, { startRow, endRow: overlapRow - 1 } );\n\n\tfor ( const slotInfo of tableWalker ) {\n\t\tconst { row, cellHeight } = slotInfo;\n\t\tconst cellEndRow = row + cellHeight - 1;\n\n\t\tif ( row < overlapRow && overlapRow <= cellEndRow ) {\n\t\t\tcells.push( slotInfo );\n\t\t}\n\t}\n\n\treturn cells;\n}\n\n/**\n * Splits the table cell horizontally.\n *\n * @returns Created table cell, if any were created.\n */\nexport function splitHorizontally( tableCell: Element, splitRow: number, writer: Writer ): Element | null {\n\tconst tableRow = tableCell.parent as Node;\n\tconst table = tableRow.parent as Element;\n\tconst rowIndex = tableRow.index!;\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string );\n\tconst newRowspan = splitRow - rowIndex;\n\n\tconst newCellAttributes: CellAttributes = {};\n\tconst newCellRowSpan = rowspan - newRowspan;\n\n\tif ( newCellRowSpan > 1 ) {\n\t\tnewCellAttributes.rowspan = newCellRowSpan;\n\t}\n\n\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\n\tif ( colspan > 1 ) {\n\t\tnewCellAttributes.colspan = colspan;\n\t}\n\n\tconst startRow = rowIndex;\n\tconst endRow = startRow + newRowspan;\n\tconst tableMap = [ ...new TableWalker( table, { startRow, endRow, includeAllSlots: true } ) ];\n\n\tlet newCell = null;\n\tlet columnIndex;\n\n\tfor ( const tableSlot of tableMap ) {\n\t\tconst { row, column, cell } = tableSlot;\n\n\t\tif ( cell === tableCell && columnIndex === undefined ) {\n\t\t\tcolumnIndex = column;\n\t\t}\n\n\t\tif ( columnIndex !== undefined && columnIndex === column && row === endRow ) {\n\t\t\tnewCell = createEmptyTableCell( writer, tableSlot.getPositionBefore(), newCellAttributes );\n\t\t}\n\t}\n\n\t// Update the rowspan attribute after updating table.\n\tupdateNumericAttribute( 'rowspan', newRowspan, tableCell, writer );\n\n\treturn newCell;\n}\n\n/**\n * Returns slot info of cells that starts before and overlaps a given column.\n *\n * In a table below, passing `overlapColumn = 3`\n *\n *    0   1   2   3   4\n *  ┌───────┬───────┬───┐\n *  │ a     │ b     │ c │\n *  │───┬───┴───────┼───┤\n *  │ d │ e         │ f │\n *  ├───┼───┬───────┴───┤\n *  │ g │ h │ i         │\n *  ├───┼───┼───┬───────┤\n *  │ j │ k │ l │ m     │\n *  ├───┼───┴───┼───┬───┤\n *  │ n │ o     │ p │ q │\n *  └───┴───────┴───┴───┘\n *                ^\n *                Overlap column to check\n *\n * will return slot info for cells: \"b\", \"e\", \"i\".\n *\n * @param table The table to check.\n * @param overlapColumn The index of the column to check.\n */\nexport function getHorizontallyOverlappingCells( table: Element, overlapColumn: number ): Array<TableSlot> {\n\tconst cellsToSplit = [];\n\n\tconst tableWalker = new TableWalker( table );\n\n\tfor ( const slotInfo of tableWalker ) {\n\t\tconst { column, cellWidth } = slotInfo;\n\t\tconst cellEndColumn = column + cellWidth - 1;\n\n\t\tif ( column < overlapColumn && overlapColumn <= cellEndColumn ) {\n\t\t\tcellsToSplit.push( slotInfo );\n\t\t}\n\t}\n\n\treturn cellsToSplit;\n}\n\n/**\n * Splits the table cell vertically.\n *\n * @param columnIndex The table cell column index.\n * @param splitColumn The index of column to split cell on.\n * @returns Created table cell.\n */\nexport function splitVertically( tableCell: Element, columnIndex: number, splitColumn: number, writer: Writer ): Element {\n\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string );\n\tconst newColspan = splitColumn - columnIndex;\n\n\tconst newCellAttributes: CellAttributes = {};\n\tconst newCellColSpan = colspan - newColspan;\n\n\tif ( newCellColSpan > 1 ) {\n\t\tnewCellAttributes.colspan = newCellColSpan;\n\t}\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\n\tif ( rowspan > 1 ) {\n\t\tnewCellAttributes.rowspan = rowspan;\n\t}\n\n\tconst newCell = createEmptyTableCell( writer, writer.createPositionAfter( tableCell ), newCellAttributes );\n\n\t// Update the colspan attribute after updating table.\n\tupdateNumericAttribute( 'colspan', newColspan, tableCell, writer );\n\n\treturn newCell;\n}\n\n/**\n * Adjusts table cell dimensions to not exceed limit row and column.\n *\n * If table cell width (or height) covers a column (or row) that is after a limit column (or row)\n * this method will trim \"colspan\" (or \"rowspan\") attribute so the table cell will fit in a defined limits.\n */\nexport function trimTableCellIfNeeded(\n\ttableCell: Element,\n\tcellRow: number,\n\tcellColumn: number,\n\tlimitRow: number,\n\tlimitColumn: number,\n\twriter: Writer\n): void {\n\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\n\tconst endColumn = cellColumn + colspan - 1;\n\n\tif ( endColumn > limitColumn ) {\n\t\tconst trimmedSpan = limitColumn - cellColumn + 1;\n\n\t\tupdateNumericAttribute( 'colspan', trimmedSpan, tableCell, writer, 1 );\n\t}\n\n\tconst endRow = cellRow + rowspan - 1;\n\n\tif ( endRow > limitRow ) {\n\t\tconst trimmedSpan = limitRow - cellRow + 1;\n\n\t\tupdateNumericAttribute( 'rowspan', trimmedSpan, tableCell, writer, 1 );\n\t}\n}\n\n/**\n * Sets proper heading attributes to a cropped table.\n */\nfunction addHeadingsToCroppedTable( croppedTable: Element, sourceTable: Element, startRow: number, startColumn: number, writer: Writer ) {\n\tconst headingRows = parseInt( sourceTable.getAttribute( 'headingRows' ) as string || '0' );\n\n\tif ( headingRows > 0 ) {\n\t\tconst headingRowsInCrop = headingRows - startRow;\n\t\tupdateNumericAttribute( 'headingRows', headingRowsInCrop, croppedTable, writer, 0 );\n\t}\n\n\tconst headingColumns = parseInt( sourceTable.getAttribute( 'headingColumns' ) as string || '0' );\n\n\tif ( headingColumns > 0 ) {\n\t\tconst headingColumnsInCrop = headingColumns - startColumn;\n\t\tupdateNumericAttribute( 'headingColumns', headingColumnsInCrop, croppedTable, writer, 0 );\n\t}\n}\n\n/**\n * Removes columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+----+----+----+\n *     | 00 | 01      | 03 | 04      | 06 |\n *     +----+----+----+----+         +----+\n *     | 10 | 11      | 13 |         | 16 |\n *     +----+----+----+----+----+----+----+\n *     | 20 | 21      | 23 | 24      | 26 |\n *     +----+----+----+----+----+----+----+\n *                  ^--- empty ---^\n *\n * Will remove columns 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a column from a table use {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`}.\n *\n * @internal\n * @returns True if removed some columns.\n */\nexport function removeEmptyColumns( table: Element, tableUtils: TableUtils ): boolean {\n\tconst width = tableUtils.getColumns( table );\n\tconst columnsMap = new Array( width ).fill( 0 );\n\n\tfor ( const { column } of new TableWalker( table ) ) {\n\t\tcolumnsMap[ column ]++;\n\t}\n\n\tconst emptyColumns = columnsMap.reduce( ( result, cellsCount, column ) => {\n\t\treturn cellsCount ? result : [ ...result, column ];\n\t}, [] );\n\n\tif ( emptyColumns.length > 0 ) {\n\t\t// Remove only last empty column because it will recurrently trigger removing empty rows.\n\t\tconst emptyColumn = emptyColumns[ emptyColumns.length - 1 ];\n\n\t\t// @if CK_DEBUG_TABLE // console.log( `Removing empty column: ${ emptyColumn }.` );\n\t\ttableUtils.removeColumns( table, { at: emptyColumn } );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Removes rows that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+\n *     | 00 | 01 | 02 |\n *     +----+----+----+\n *     | 10 | 11 | 12 |\n *     +    +    +    +\n *     |    |    |    | <-- empty\n *     +----+----+----+\n *     | 30 | 31 | 32 |\n *     +----+----+----+\n *     | 40      | 42 |\n *     +         +    +\n *     |         |    | <-- empty\n *     +----+----+----+\n *     | 60 | 61 | 62 |\n *     +----+----+----+\n *\n * Will remove rows 2 and 5.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a row from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`}.\n *\n * @internal\n * @returns True if removed some rows.\n */\nexport function removeEmptyRows( table: Element, tableUtils: TableUtils ): boolean {\n\tconst emptyRows = [];\n\tconst tableRowCount = tableUtils.getRows( table );\n\n\tfor ( let rowIndex = 0; rowIndex < tableRowCount; rowIndex++ ) {\n\t\tconst tableRow = table.getChild( rowIndex ) as Element;\n\n\t\tif ( tableRow.isEmpty ) {\n\t\t\temptyRows.push( rowIndex );\n\t\t}\n\t}\n\n\tif ( emptyRows.length > 0 ) {\n\t\t// Remove only last empty row because it will recurrently trigger removing empty columns.\n\t\tconst emptyRow = emptyRows[ emptyRows.length - 1 ];\n\n\t\t// @if CK_DEBUG_TABLE // console.log( `Removing empty row: ${ emptyRow }.` );\n\t\ttableUtils.removeRows( table, { at: emptyRow } );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Removes rows and columns that have no cells anchored.\n *\n * In table below:\n *\n *     +----+----+----+----+\n *     | 00      | 02      |\n *     +----+----+         +\n *     | 10      |         |\n *     +----+----+----+----+\n *     | 20      | 22 | 23 |\n *     +         +    +    +\n *     |         |    |    | <-- empty row\n *     +----+----+----+----+\n *             ^--- empty column\n *\n * Will remove row 3 and column 1.\n *\n * **Note:** This is a low-level helper method for clearing invalid model state when doing table modifications.\n * To remove a rows from a table use {@link module:table/tableutils~TableUtils#removeRows `TableUtils.removeRows()`} and\n * {@link module:table/tableutils~TableUtils#removeColumns `TableUtils.removeColumns()`} to remove a column.\n *\n * @internal\n */\nexport function removeEmptyRowsColumns( table: Element, tableUtils: TableUtils ): void {\n\tconst removedColumns = removeEmptyColumns( table, tableUtils );\n\n\t// If there was some columns removed then cleaning empty rows was already triggered.\n\tif ( !removedColumns ) {\n\t\tremoveEmptyRows( table, tableUtils );\n\t}\n}\n\n/**\n * Returns adjusted last row index if selection covers part of a row with empty slots (spanned by other cells).\n * The `dimensions.lastRow` is equal to last row index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *        +---+---+---+---+\n *      0 | a | b | c | d |\n *        +   +   +---+---+\n *      1 |   | e | f | g |\n *        +   +---+   +---+\n *      2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n *        +   +   +   +   +    so we need to return 3, not 2\n *      3 |   |   |   |   |\n *        +---+---+---+---+\n *\n * @returns Adjusted last row index.\n */\nexport function adjustLastRowIndex(\n\ttable: Element,\n\tdimensions: {\n\t\tfirstRow: number;\n\t\tfirstColumn: number;\n\t\tlastRow: number;\n\t\tlastColumn: number;\n\t}\n): number {\n\tconst lastRowMap = Array.from( new TableWalker( table, {\n\t\tstartColumn: dimensions.firstColumn,\n\t\tendColumn: dimensions.lastColumn,\n\t\trow: dimensions.lastRow\n\t} ) );\n\n\tconst everyCellHasSingleRowspan = lastRowMap.every( ( { cellHeight } ) => cellHeight === 1 );\n\n\t// It is a \"flat\" row, so the last row index is OK.\n\tif ( everyCellHasSingleRowspan ) {\n\t\treturn dimensions.lastRow;\n\t}\n\n\t// Otherwise get any cell's rowspan and adjust the last row index.\n\tconst rowspanAdjustment = lastRowMap[ 0 ].cellHeight - 1;\n\treturn dimensions.lastRow + rowspanAdjustment;\n}\n\n/**\n * Returns adjusted last column index if selection covers part of a column with empty slots (spanned by other cells).\n * The `dimensions.lastColumn` is equal to last column index but selection might be bigger.\n *\n * This happens *only* on rectangular selection so we analyze a case like this:\n *\n *       0   1   2   3\n *     +---+---+---+---+\n *     | a             |\n *     +---+---+---+---+\n *     | b | c | d     |\n *     +---+---+---+---+\n *     | e     | f     |\n *     +---+---+---+---+\n *     | g | h         |\n *     +---+---+---+---+\n *               ^\n *              last column, each cell has colspan = 2, so we need to return 3, not 2\n *\n * @returns Adjusted last column index.\n */\nexport function adjustLastColumnIndex(\n\ttable: Element,\n\tdimensions: {\n\t\tfirstRow: number;\n\t\tfirstColumn: number;\n\t\tlastRow: number;\n\t\tlastColumn: number;\n\t}\n): number {\n\tconst lastColumnMap = Array.from( new TableWalker( table, {\n\t\tstartRow: dimensions.firstRow,\n\t\tendRow: dimensions.lastRow,\n\t\tcolumn: dimensions.lastColumn\n\t} ) );\n\n\tconst everyCellHasSingleColspan = lastColumnMap.every( ( { cellWidth } ) => cellWidth === 1 );\n\n\t// It is a \"flat\" column, so the last column index is OK.\n\tif ( everyCellHasSingleColspan ) {\n\t\treturn dimensions.lastColumn;\n\t}\n\n\t// Otherwise get any cell's colspan and adjust the last column index.\n\tconst colspanAdjustment = lastColumnMap[ 0 ].cellWidth - 1;\n\treturn dimensions.lastColumn + colspanAdjustment;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/mergecellcommand\n */\n\nimport type {\n\tElement,\n\tNode,\n\tWriter\n} from 'ckeditor5/src/engine.js';\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport TableWalker from '../tablewalker.js';\nimport { isHeadingColumnCell } from '../utils/common.js';\nimport { removeEmptyRowsColumns } from '../utils/structure.js';\nimport type { ArrowKeyCodeDirection } from 'ckeditor5/src/utils.js';\n\nimport type TableUtils from '../tableutils.js';\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n * ```ts\n * editor.execute( 'mergeTableCellRight' );\n * ```\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n */\nexport default class MergeCellCommand extends Command {\n\t/**\n\t * The direction that indicates which cell will be merged with the currently selected one.\n\t */\n\tpublic readonly direction: ArrowKeyCodeDirection;\n\n\t/**\n\t * Whether the merge is horizontal (left/right) or vertical (up/down).\n\t */\n\tpublic readonly isHorizontal: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic declare value: Node | undefined;\n\n\t/**\n\t * Creates a new `MergeCellCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param options.direction Indicates which cell to merge with the currently selected one.\n\t * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n\t */\n\tconstructor( editor: Editor, options: { direction: ArrowKeyCodeDirection } ) {\n\t\tsuper( editor );\n\n\t\tthis.direction = options.direction;\n\t\tthis.isHorizontal = this.direction == 'right' || this.direction == 'left';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst cellToMerge = this._getMergeableCell();\n\n\t\tthis.value = cellToMerge;\n\t\tthis.isEnabled = !!cellToMerge;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst tableCell = tableUtils.getTableCellsContainingSelection( doc.selection )[ 0 ];\n\n\t\tconst cellToMerge = this.value!;\n\t\tconst direction = this.direction;\n\n\t\tmodel.change( writer => {\n\t\t\tconst isMergeNext = direction == 'right' || direction == 'down';\n\n\t\t\t// The merge mechanism is always the same so sort cells to be merged.\n\t\t\tconst cellToExpand = ( isMergeNext ? tableCell : cellToMerge ) as Element;\n\t\t\tconst cellToRemove = ( isMergeNext ? cellToMerge : tableCell ) as Element;\n\n\t\t\t// Cache the parent of cell to remove for later check.\n\t\t\tconst removedTableCellRow = cellToRemove.parent as Element;\n\n\t\t\tmergeTableCells( cellToRemove, cellToExpand, writer );\n\n\t\t\tconst spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n\t\t\tconst cellSpan = parseInt( tableCell.getAttribute( spanAttribute ) as string || '1' );\n\t\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) as string || '1' );\n\n\t\t\t// Update table cell span attribute and merge set selection on merged contents.\n\t\t\twriter.setAttribute( spanAttribute, cellSpan + cellToMergeSpan, cellToExpand );\n\t\t\twriter.setSelection( writer.createRangeIn( cellToExpand ) );\n\n\t\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\t\tconst table = removedTableCellRow.findAncestor( 'table' )!;\n\n\t\t\t// Remove empty rows and columns after merging.\n\t\t\tremoveEmptyRowsColumns( table, tableUtils );\n\t\t} );\n\t}\n\n\t/**\n\t * Returns a cell that can be merged with the current cell depending on the command's direction.\n\t */\n\tprivate _getMergeableCell(): Node | undefined {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst tableCell = tableUtils.getTableCellsContainingSelection( doc.selection )[ 0 ];\n\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// First get the cell on proper direction.\n\t\tconst cellToMerge = this.isHorizontal ?\n\t\t\tgetHorizontalCell( tableCell, this.direction, tableUtils ) :\n\t\t\tgetVerticalCell( tableCell, this.direction, tableUtils );\n\n\t\tif ( !cellToMerge ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If found check if the span perpendicular to merge direction is equal on both cells.\n\t\tconst spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n\t\tconst span = parseInt( tableCell.getAttribute( spanAttribute ) as string || '1' );\n\n\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) as string || '1' );\n\n\t\tif ( cellToMergeSpan === span ) {\n\t\t\treturn cellToMerge;\n\t\t}\n\t}\n}\n\n/**\n * Returns the cell that can be merged horizontally.\n */\nfunction getHorizontalCell( tableCell: Element, direction: ArrowKeyCodeDirection, tableUtils: TableUtils ) {\n\tconst tableRow = tableCell.parent!;\n\tconst table = tableRow.parent as Element;\n\tconst horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n\tconst hasHeadingColumns = ( table.getAttribute( 'headingColumns' ) as number || 0 ) > 0;\n\n\tif ( !horizontalCell ) {\n\t\treturn;\n\t}\n\n\t// Sort cells:\n\tconst cellOnLeft = ( direction == 'right' ? tableCell : horizontalCell ) as Element;\n\tconst cellOnRight = ( direction == 'right' ? horizontalCell : tableCell ) as Element;\n\n\t// Get their column indexes:\n\tconst { column: leftCellColumn } = tableUtils.getCellLocation( cellOnLeft );\n\tconst { column: rightCellColumn } = tableUtils.getCellLocation( cellOnRight );\n\n\tconst leftCellSpan = parseInt( cellOnLeft.getAttribute( 'colspan' ) as string || '1' );\n\n\tconst isCellOnLeftInHeadingColumn = isHeadingColumnCell( tableUtils, cellOnLeft );\n\tconst isCellOnRightInHeadingColumn = isHeadingColumnCell( tableUtils, cellOnRight );\n\n\t// We cannot merge heading columns cells with regular cells.\n\tif ( hasHeadingColumns && isCellOnLeftInHeadingColumn != isCellOnRightInHeadingColumn ) {\n\t\treturn;\n\t}\n\n\t// The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n\tconst cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n\n\t// If the right cell's column index is different it means that there are rowspanned cells between them.\n\treturn cellsAreTouching ? horizontalCell : undefined;\n}\n\n/**\n * Returns the cell that can be merged vertically.\n */\nfunction getVerticalCell( tableCell: Element, direction: ArrowKeyCodeDirection, tableUtils: TableUtils ): Node | null {\n\tconst tableRow = tableCell.parent as Element;\n\tconst table = tableRow.parent as Element;\n\n\tconst rowIndex = table.getChildIndex( tableRow )!;\n\n\t// Don't search for mergeable cell if direction points out of the table.\n\tif ( ( direction == 'down' && rowIndex === tableUtils.getRows( table ) - 1 ) || ( direction == 'up' && rowIndex === 0 ) ) {\n\t\treturn null;\n\t}\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\tconst isMergeWithBodyCell = direction == 'down' && ( rowIndex + rowspan ) === headingRows;\n\tconst isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n\n\t// Don't search for mergeable cell if direction points out of the current table section.\n\tif ( headingRows && ( isMergeWithBodyCell || isMergeWithHeadCell ) ) {\n\t\treturn null;\n\t}\n\n\tconst currentCellRowSpan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\tconst rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n\n\tconst tableMap = [ ...new TableWalker( table, { endRow: rowOfCellToMerge } ) ];\n\n\tconst currentCellData = tableMap.find( value => value.cell === tableCell )!;\n\tconst mergeColumn = currentCellData.column;\n\n\tconst cellToMergeData = tableMap.find( ( { row, cellHeight, column } ) => {\n\t\tif ( column !== mergeColumn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( direction == 'down' ) {\n\t\t\t// If merging a cell below the mergeRow is already calculated.\n\t\t\treturn row === rowOfCellToMerge;\n\t\t} else {\n\t\t\t// If merging a cell above calculate if it spans to mergeRow.\n\t\t\treturn rowOfCellToMerge === row + cellHeight;\n\t\t}\n\t} );\n\n\treturn cellToMergeData && cellToMergeData.cell ? cellToMergeData.cell : null;\n}\n\n/**\n * Merges two table cells. It will ensure that after merging cells with an empty paragraph, the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have the contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */\nfunction mergeTableCells( cellToRemove: Element, cellToExpand: Element, writer: Writer ) {\n\tif ( !isEmpty( cellToRemove ) ) {\n\t\tif ( isEmpty( cellToExpand ) ) {\n\t\t\twriter.remove( writer.createRangeIn( cellToExpand ) );\n\t\t}\n\n\t\twriter.move( writer.createRangeIn( cellToRemove ), writer.createPositionAt( cellToExpand, 'end' ) );\n\t}\n\n\t// Remove merged table cell.\n\twriter.remove( cellToRemove );\n}\n\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */\nfunction isEmpty( tableCell: Element ): boolean {\n\tconst firstTableChild = tableCell.getChild( 0 ) as Element;\n\n\treturn tableCell.childCount == 1 && firstTableChild.is( 'element', 'paragraph' ) && firstTableChild.isEmpty;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/removerowcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type { Element, Node } from 'ckeditor5/src/engine.js';\nimport type TableUtils from '../tableutils.js';\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableRow' );\n * ```\n */\nexport default class RemoveRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\t\tconst firstCell = selectedCells[ 0 ];\n\n\t\tif ( firstCell ) {\n\t\t\tconst table = firstCell.findAncestor( 'table' )!;\n\t\t\tconst tableRowCount = tableUtils.getRows( table );\n\t\t\tconst lastRowIndex = tableRowCount - 1;\n\n\t\t\tconst selectedRowIndexes = tableUtils.getRowIndexes( selectedCells );\n\n\t\t\tconst areAllRowsSelected = selectedRowIndexes.first === 0 && selectedRowIndexes.last === lastRowIndex;\n\n\t\t\t// Disallow selecting whole table -> delete whole table should be used instead.\n\t\t\tthis.isEnabled = !areAllRowsSelected;\n\t\t} else {\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst referenceCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst removedRowIndexes = tableUtils.getRowIndexes( referenceCells );\n\n\t\tconst firstCell = referenceCells[ 0 ];\n\t\tconst table = firstCell.findAncestor( 'table' )!;\n\n\t\tconst columnIndexToFocus = tableUtils.getCellLocation( firstCell ).column;\n\n\t\tmodel.change( writer => {\n\t\t\tconst rowsToRemove = removedRowIndexes.last - removedRowIndexes.first + 1;\n\n\t\t\ttableUtils.removeRows( table, {\n\t\t\t\tat: removedRowIndexes.first,\n\t\t\t\trows: rowsToRemove\n\t\t\t} );\n\n\t\t\tconst cellToFocus = getCellToFocus( table, removedRowIndexes.first, columnIndexToFocus, tableUtils.getRows( table ) );\n\n\t\t\twriter.setSelection( writer.createPositionAt( cellToFocus, 0 ) );\n\t\t} );\n\t}\n}\n\n/**\n * Returns a cell that should be focused before removing the row, belonging to the same column as the currently focused cell.\n * - If the row was not the last one, the cell to focus will be in the row that followed it (before removal).\n * - If the row was the last one, the cell to focus will be in the row that preceded it (before removal).\n */\nfunction getCellToFocus( table: Element, removedRowIndex: number, columnToFocus: number, tableRowCount: number ): Node {\n\t// Don't go beyond last row's index.\n\tconst row = table.getChild( Math.min( removedRowIndex, tableRowCount - 1 ) ) as Element;\n\n\t// Default to first table cell.\n\tlet cellToFocus = row.getChild( 0 )!;\n\tlet column = 0;\n\n\tfor ( const tableCell of row.getChildren() ) {\n\t\tif ( column > columnToFocus ) {\n\t\t\treturn cellToFocus;\n\t\t}\n\n\t\tcellToFocus = tableCell;\n\t\tcolumn += parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\t}\n\n\treturn cellToFocus;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/removecolumncommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type {\n\tDocumentSelection,\n\tElement,\n\tSelection\n} from 'ckeditor5/src/engine.js';\n\nimport TableWalker, { type TableSlot } from '../tablewalker.js';\nimport type TableUtils from '../tableutils.js';\n\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n * ```ts\n * editor.execute( 'removeTableColumn' );\n * ```\n */\nexport default class RemoveColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\t\tconst firstCell = selectedCells[ 0 ];\n\n\t\tif ( firstCell ) {\n\t\t\tconst table = firstCell.findAncestor( 'table' )!;\n\t\t\tconst tableColumnCount = tableUtils.getColumns( table );\n\n\t\t\tconst { first, last } = tableUtils.getColumnIndexes( selectedCells );\n\n\t\t\tthis.isEnabled = last - first < ( tableColumnCount - 1 );\n\t\t} else {\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst [ firstCell, lastCell ] = getBoundaryCells( this.editor.model.document.selection, tableUtils );\n\t\tconst table = firstCell.parent!.parent as Element;\n\n\t\t// Cache the table before removing or updating colspans.\n\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t// Store column indexes of removed columns.\n\t\tconst removedColumnIndexes = {\n\t\t\tfirst: tableMap.find( value => value.cell === firstCell )!.column,\n\t\t\tlast: tableMap.find( value => value.cell === lastCell )!.column\n\t\t};\n\n\t\tconst cellToFocus = getCellToFocus( tableMap, firstCell, lastCell, removedColumnIndexes )!;\n\n\t\tthis.editor.model.change( writer => {\n\t\t\tconst columnsToRemove = removedColumnIndexes.last - removedColumnIndexes.first + 1;\n\n\t\t\ttableUtils.removeColumns( table, {\n\t\t\t\tat: removedColumnIndexes.first,\n\t\t\t\tcolumns: columnsToRemove\n\t\t\t} );\n\n\t\t\twriter.setSelection( writer.createPositionAt( cellToFocus, 0 ) );\n\t\t} );\n\t}\n}\n\n/**\n * Returns a proper table cell to focus after removing a column.\n * - selection is on last table cell it will return previous cell.\n */\nfunction getCellToFocus(\n\ttableMap: Array<TableSlot>,\n\tfirstCell: Element,\n\tlastCell: Element,\n\tremovedColumnIndexes: {\n\t\tfirst: number;\n\t\tlast: number;\n\t}\n) {\n\tconst colspan = parseInt( lastCell.getAttribute( 'colspan' ) as string || '1' );\n\n\t// If the table cell is spanned over 2+ columns - it will be truncated so the selection should\n\t// stay in that cell.\n\tif ( colspan > 1 ) {\n\t\treturn lastCell;\n\t}\n\t// Normally, look for the cell in the same row that precedes the first cell to put selection there (\"column on the left\").\n\t// If the deleted column is the first column of the table, there will be no predecessor: use the cell\n\t// from the column that follows then (also in the same row).\n\telse if ( firstCell.previousSibling || lastCell.nextSibling ) {\n\t\treturn lastCell.nextSibling || firstCell.previousSibling;\n\t}\n\t// It can happen that table cells have no siblings in a row, for instance, when there are row spans\n\t// in the table (in the previous row). Then just look for the closest cell that is in a column\n\t// that will not be removed to put the selection there.\n\telse {\n\t\t// Look for any cell in a column that precedes the first removed column.\n\t\tif ( removedColumnIndexes.first ) {\n\t\t\treturn tableMap.reverse().find( ( { column } ) => {\n\t\t\t\treturn column < removedColumnIndexes.first;\n\t\t\t} )!.cell;\n\t\t}\n\t\t// If the first removed column is the first column of the table, then\n\t\t// look for any cell that is in a column that follows the last removed column.\n\t\telse {\n\t\t\treturn tableMap.reverse().find( ( { column } ) => {\n\t\t\t\treturn column > removedColumnIndexes.last;\n\t\t\t} )!.cell;\n\t\t}\n\t}\n}\n\n/**\n * Returns helper object returning the first and the last cell contained in given selection, based on DOM order.\n */\nfunction getBoundaryCells( selection: Selection | DocumentSelection, tableUtils: TableUtils ) {\n\tconst referenceCells = tableUtils.getSelectionAffectedTableCells( selection );\n\tconst firstCell = referenceCells[ 0 ];\n\tconst lastCell = referenceCells.pop()!;\n\n\tconst returnValue = [ firstCell, lastCell ];\n\n\treturn firstCell.isBefore( lastCell ) ? returnValue : returnValue.reverse();\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/setheaderrowcommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport type TableUtils from '../tableutils.js';\n\nimport { updateNumericAttribute } from '../utils/common.js';\nimport { getVerticallyOverlappingCells, splitHorizontally } from '../utils/structure.js';\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n * ```ts\n * editor.execute( 'setTableRowHeader' );\n * ```\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n */\nexport default class SetHeaderRowCommand extends Command {\n\t/**\n\t * Flag indicating whether the command is active. The command is active when the\n\t * {@link module:engine/model/selection~Selection} is in a header row.\n\t *\n\t * @observable\n\t */\n\tpublic declare value: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst isInTable = selectedCells.length > 0;\n\n\t\tthis.isEnabled = isInTable;\n\t\tthis.value = isInTable && selectedCells.every( cell => this._isInHeading( cell, cell.parent!.parent as Element ) );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n\t *\n\t * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n\t *\n\t * @fires execute\n\t * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header rows according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst table = selectedCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tconst { first, last } = tableUtils.getRowIndexes( selectedCells );\n\t\tconst headingRowsToSet = this.value ? first : last + 1;\n\t\tconst currentHeadingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRowsToSet ) {\n\t\t\t\t// Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n\t\t\t\t// Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n\t\t\t\tconst startRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n\t\t\t\tconst overlappingCells = getVerticallyOverlappingCells( table, headingRowsToSet, startRow );\n\n\t\t\t\tfor ( const { cell } of overlappingCells ) {\n\t\t\t\t\tsplitHorizontally( cell, headingRowsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingRows', headingRowsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t */\n\tprivate _isInHeading( tableCell: Element, table: Element ): boolean {\n\t\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) as string || '0' );\n\n\t\treturn !!headingRows && ( tableCell.parent as Element ).index! < headingRows;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type TableUtils from '../tableutils.js';\n\nimport {\n\tisHeadingColumnCell,\n\tupdateNumericAttribute\n} from '../utils/common.js';\nimport { getHorizontallyOverlappingCells, splitVertically } from '../utils/structure.js';\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n * ```ts\n * editor.execute( 'setTableColumnHeader' );\n * ```\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n */\nexport default class SetHeaderColumnCommand extends Command {\n\t/**\n\t * Flag indicating whether the command is active. The command is active when the\n\t * {@link module:engine/model/selection~Selection} is in a header column.\n\t *\n\t * @observable\n\t */\n\tpublic declare value: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst isInTable = selectedCells.length > 0;\n\n\t\tthis.isEnabled = isInTable;\n\t\tthis.value = isInTable && selectedCells.every( cell => isHeadingColumnCell( tableUtils, cell ) );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t * @param options.forceValue If set, the command will set (`true`) or unset (`false`) the header columns according to\n\t * the `forceValue` parameter instead of the current model state.\n\t */\n\tpublic override execute( options: { forceValue?: boolean } = {} ): void {\n\t\tif ( options.forceValue === this.value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst table = selectedCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tconst { first, last } = tableUtils.getColumnIndexes( selectedCells );\n\t\tconst headingColumnsToSet = this.value ? first : last + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingColumnsToSet ) {\n\t\t\t\t// Changing heading columns requires to check if any of a heading cell is overlapping horizontally the table head.\n\t\t\t\t// Any table cell that has a colspan attribute > 1 will not exceed the table head so we need to fix it in columns before.\n\t\t\t\tconst overlappingCells = getHorizontallyOverlappingCells( table, headingColumnsToSet );\n\n\t\t\t\tfor ( const { cell, column } of overlappingCells ) {\n\t\t\t\t\tsplitVertically( cell, column, headingColumnsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingColumns', headingColumnsToSet, table, writer, 0 );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/constants\n */\n\n/**\n * The minimum column width given as a percentage value. Used in situations when the table is not yet rendered, so it is impossible to\n * calculate how many percentage of the table width would be {@link ~COLUMN_MIN_WIDTH_IN_PIXELS minimum column width in pixels}.\n */\nexport const COLUMN_MIN_WIDTH_AS_PERCENTAGE = 5;\n\n/**\n * The minimum column width in pixels when the maximum table width is known.\n */\nexport const COLUMN_MIN_WIDTH_IN_PIXELS = 40;\n\n/**\n * Determines how many digits after the decimal point are used to store the column width as a percentage value.\n */\nexport const COLUMN_WIDTH_PRECISION = 2;\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/utils\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element, Model, ViewElement, ViewNode, Writer } from 'ckeditor5/src/engine.js';\nimport { global } from 'ckeditor5/src/utils.js';\nimport type TableUtils from '../tableutils.js';\nimport {\n\tCOLUMN_WIDTH_PRECISION,\n\tCOLUMN_MIN_WIDTH_AS_PERCENTAGE,\n\tCOLUMN_MIN_WIDTH_IN_PIXELS\n} from './constants.js';\n\n/**\n * Returns all the inserted or changed table model elements in a given change set. Only the tables\n * with 'columnsWidth' attribute are taken into account. The returned set may be empty.\n *\n * Most notably if an entire table is removed it will not be included in returned set.\n *\n * @param model The model to collect the affected elements from.\n * @returns A set of table model elements.\n */\nexport function getChangedResizedTables( model: Model ): Set<Element> {\n\tconst affectedTables: Set<Element> = new Set();\n\n\tfor ( const change of model.document.differ.getChanges() ) {\n\t\tlet referencePosition = null;\n\n\t\t// Checks if the particular change from the differ is:\n\t\t// - an insertion or removal of a table, a row or a cell,\n\t\t// - an attribute change on a table, a row or a cell.\n\t\tswitch ( change.type ) {\n\t\t\tcase 'insert':\n\t\t\t\treferencePosition = [ 'table', 'tableRow', 'tableCell' ].includes( change.name ) ?\n\t\t\t\t\tchange.position :\n\t\t\t\t\tnull;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'remove':\n\t\t\t\t// If the whole table is removed, there's no need to update its column widths (#12201).\n\t\t\t\treferencePosition = [ 'tableRow', 'tableCell' ].includes( change.name ) ?\n\t\t\t\t\tchange.position :\n\t\t\t\t\tnull;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'attribute':\n\t\t\t\tif ( change.range.start.nodeAfter ) {\n\t\t\t\t\treferencePosition = [ 'table', 'tableRow', 'tableCell' ].includes( ( change.range.start.nodeAfter as Element ).name ) ?\n\t\t\t\t\t\tchange.range.start :\n\t\t\t\t\t\tnull;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( !referencePosition ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst tableNode = ( referencePosition.nodeAfter && referencePosition.nodeAfter.is( 'element', 'table' ) ) ?\n\t\t\treferencePosition.nodeAfter : referencePosition.findAncestor( 'table' )!;\n\n\t\t// We iterate over the whole table looking for the nested tables that are also affected.\n\t\tfor ( const node of model.createRangeOn( tableNode ).getItems() ) {\n\t\t\tif ( !node.is( 'element', 'table' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( !getColumnGroupElement( node ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\taffectedTables.add( node );\n\t\t}\n\t}\n\n\treturn affectedTables;\n}\n\n/**\n * Calculates the percentage of the minimum column width given in pixels for a given table.\n *\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The minimal column width in percentage.\n */\nexport function getColumnMinWidthAsPercentage( modelTable: Element, editor: Editor ): number {\n\treturn COLUMN_MIN_WIDTH_IN_PIXELS * 100 / getTableWidthInPixels( modelTable, editor );\n}\n\n/**\n * Calculates the table width in pixels.\n *\n * @param modelTable A table model element.\n * @param editor The editor instance.\n * @returns The width of the table in pixels.\n */\nexport function getTableWidthInPixels( modelTable: Element, editor: Editor ): number {\n\t// It is possible for a table to not have a <tbody> element - see #11878.\n\tconst referenceElement = getChildrenViewElement( modelTable, 'tbody', editor ) || getChildrenViewElement( modelTable, 'thead', editor );\n\tconst domReferenceElement = editor.editing.view.domConverter.mapViewToDom( referenceElement! )!;\n\n\treturn getElementWidthInPixels( domReferenceElement );\n}\n\n/**\n * Returns the a view element with a given name that is nested directly in a `<table>` element\n * related to a given `modelTable`.\n *\n * @param elementName Name of a view to be looked for, e.g. `'colgroup`', `'thead`'.\n * @returns Matched view or `undefined` otherwise.\n */\nfunction getChildrenViewElement( modelTable: Element, elementName: string, editor: Editor ) {\n\tconst viewFigure = editor.editing.mapper.toViewElement( modelTable )!;\n\tconst viewTable = [ ...viewFigure.getChildren() ]\n\t\t.find( ( node: ViewNode ): node is ViewElement & { name: 'table' } => node.is( 'element', 'table' ) )!;\n\n\treturn [ ...viewTable.getChildren() ]\n\t\t.find( ( node: ViewNode ): node is ViewElement => node.is( 'element', elementName ) );\n}\n\n/**\n * Returns the computed width (in pixels) of the DOM element without padding and borders.\n *\n * @param domElement A DOM element.\n * @returns The width of the DOM element in pixels.\n */\nexport function getElementWidthInPixels( domElement: HTMLElement ): number {\n\tconst styles = global.window.getComputedStyle( domElement );\n\n\t// In the 'border-box' box sizing algorithm, the element's width\n\t// already includes the padding and border width (#12335).\n\tif ( styles.boxSizing === 'border-box' ) {\n\t\treturn parseFloat( styles.width ) -\n\t\t\tparseFloat( styles.paddingLeft ) -\n\t\t\tparseFloat( styles.paddingRight ) -\n\t\t\tparseFloat( styles.borderLeftWidth ) -\n\t\t\tparseFloat( styles.borderRightWidth );\n\t} else {\n\t\treturn parseFloat( styles.width );\n\t}\n}\n\n/**\n * Returns the column indexes on the left and right edges of a cell. They differ if the cell spans\n * across multiple columns.\n *\n * @param cell A table cell model element.\n * @param tableUtils The Table Utils plugin instance.\n * @returns An object containing the indexes of the left and right edges of the cell.\n */\nexport function getColumnEdgesIndexes( cell: Element, tableUtils: TableUtils ): { leftEdge: number; rightEdge: number } {\n\tconst cellColumnIndex = tableUtils.getCellLocation( cell ).column;\n\tconst cellWidth = cell.getAttribute( 'colspan' ) as number || 1;\n\n\treturn {\n\t\tleftEdge: cellColumnIndex,\n\t\trightEdge: cellColumnIndex + cellWidth - 1\n\t};\n}\n\n/**\n * Rounds the provided value to a fixed-point number with defined number of digits after the decimal point.\n *\n * @param value A number to be rounded.\n * @returns The rounded number.\n */\nexport function toPrecision( value: number | string ): number {\n\tconst multiplier = Math.pow( 10, COLUMN_WIDTH_PRECISION );\n\tconst number = typeof value === 'number' ? value : parseFloat( value );\n\n\treturn Math.round( number * multiplier ) / multiplier;\n}\n\n/**\n * Clamps the number within the inclusive lower (min) and upper (max) bounds. Returned number is rounded using the\n * {@link ~toPrecision `toPrecision()`} function.\n *\n * @param number A number to be clamped.\n * @param min A lower bound.\n * @param max An upper bound.\n * @returns The clamped number.\n */\nexport function clamp( number: number, min: number, max: number ): number {\n\tif ( number <= min ) {\n\t\treturn toPrecision( min );\n\t}\n\n\tif ( number >= max ) {\n\t\treturn toPrecision( max );\n\t}\n\n\treturn toPrecision( number );\n}\n\n/**\n * Creates an array with defined length and fills all elements with defined value.\n *\n * @param length The length of the array.\n * @param value The value to fill the array with.\n * @returns An array with defined length and filled with defined value.\n */\nexport function createFilledArray<T>( length: number, value: T ): Array<T> {\n\treturn Array( length ).fill( value );\n}\n\n/**\n * Sums all array values that can be parsed to a float.\n *\n * @param array An array of numbers.\n * @returns The sum of all array values.\n */\nexport function sumArray( array: Array<number | string> ): number {\n\treturn array\n\t\t.map( value => typeof value === 'number' ? value : parseFloat( value ) )\n\t\t.filter( value => !Number.isNaN( value ) )\n\t\t.reduce( ( result, item ) => result + item, 0 );\n}\n\n/**\n * Makes sure that the sum of the widths from all columns is 100%. If the sum of all the widths is not equal 100%, all the widths are\n * changed proportionally so that they all sum back to 100%. If there are columns without specified width, the amount remaining\n * after assigning the known widths will be distributed equally between them.\n *\n * @param columnWidths An array of column widths.\n * @returns An array of column widths guaranteed to sum up to 100%.\n */\nexport function normalizeColumnWidths( columnWidths: Array<string> ): Array<string> {\n\tconst widths: Array<number | 'auto'> = columnWidths.map( width => {\n\t\tif ( width === 'auto' ) {\n\t\t\treturn width;\n\t\t}\n\n\t\treturn parseFloat( width.replace( '%', '' ) );\n\t} );\n\n\tlet normalizedWidths: Array<number> = calculateMissingColumnWidths( widths );\n\tconst totalWidth = sumArray( normalizedWidths );\n\n\tif ( totalWidth !== 100 ) {\n\t\tnormalizedWidths = normalizedWidths\n\t\t\t// Adjust all the columns proportionally.\n\t\t\t.map( width => toPrecision( width * 100 / totalWidth ) )\n\t\t\t// Due to rounding of numbers it may happen that the sum of the widths of all columns will not be exactly 100%.\n\t\t\t// Therefore, the width of the last column is explicitly adjusted (narrowed or expanded), since all the columns\n\t\t\t// have been proportionally changed already.\n\t\t\t.map( ( columnWidth, columnIndex, width ) => {\n\t\t\t\tconst isLastColumn = columnIndex === width.length - 1;\n\n\t\t\t\tif ( !isLastColumn ) {\n\t\t\t\t\treturn columnWidth;\n\t\t\t\t}\n\n\t\t\t\tconst totalWidth = sumArray( width );\n\n\t\t\t\treturn toPrecision( columnWidth + 100 - totalWidth );\n\t\t\t} );\n\t}\n\n\treturn normalizedWidths.map( width => width + '%' );\n}\n\n/**\n * Initializes the column widths by parsing the attribute value and calculating the uninitialized column widths. The special value 'auto'\n * indicates that width for the column must be calculated. The width of such uninitialized column is calculated as follows:\n * - If there is enough free space in the table for all uninitialized columns to have at least the minimum allowed width for all of them,\n *   then set this width equally for all uninitialized columns.\n * - Otherwise, just set the minimum allowed width for all uninitialized columns. The sum of all column widths will be greater than 100%,\n *   but then it will be adjusted proportionally to 100% in {@link #normalizeColumnWidths `normalizeColumnWidths()`}.\n *\n * @param columnWidths An array of column widths.\n * @returns An array with 'auto' values replaced with calculated widths.\n */\nfunction calculateMissingColumnWidths( columnWidths: Array<number | string> ): Array<number> {\n\tconst numberOfUninitializedColumns = columnWidths.filter( columnWidth => columnWidth === 'auto' ).length;\n\n\tif ( numberOfUninitializedColumns === 0 ) {\n\t\treturn columnWidths.map( columnWidth => toPrecision( columnWidth ) );\n\t}\n\n\tconst totalWidthOfInitializedColumns = sumArray( columnWidths );\n\n\tconst widthForUninitializedColumn = Math.max(\n\t\t( 100 - totalWidthOfInitializedColumns ) / numberOfUninitializedColumns,\n\t\tCOLUMN_MIN_WIDTH_AS_PERCENTAGE\n\t);\n\n\treturn columnWidths\n\t\t.map( columnWidth => columnWidth === 'auto' ? widthForUninitializedColumn : columnWidth )\n\t\t.map( columnWidth => toPrecision( columnWidth ) );\n}\n\n/**\n * Calculates the total horizontal space taken by the cell. That includes:\n *  * width,\n *  * left and red padding,\n *  * border width.\n *\n * @param domCell A DOM cell element.\n * @returns Width in pixels without `px` at the end.\n */\nexport function getDomCellOuterWidth( domCell: HTMLElement ): number {\n\tconst styles = global.window.getComputedStyle( domCell );\n\n\t// In the 'border-box' box sizing algorithm, the element's width\n\t// already includes the padding and border width (#12335).\n\tif ( styles.boxSizing === 'border-box' ) {\n\t\treturn parseInt( styles.width );\n\t} else {\n\t\treturn parseFloat( styles.width ) +\n\t\t\tparseFloat( styles.paddingLeft ) +\n\t\t\tparseFloat( styles.paddingRight ) +\n\t\t\tparseFloat( styles.borderWidth );\n\t}\n}\n\n/**\n * Updates column elements to match columns widths.\n *\n * @param columns\n * @param tableColumnGroup\n * @param normalizedWidths\n * @param writer\n */\nexport function updateColumnElements(\n\tcolumns: Array<Element>,\n\ttableColumnGroup: Element,\n\tnormalizedWidths: Array<string>,\n\twriter: Writer\n): void {\n\tfor ( let i = 0; i < Math.max( normalizedWidths.length, columns.length ); i++ ) {\n\t\tconst column = columns[ i ];\n\t\tconst columnWidth = normalizedWidths[ i ];\n\n\t\tif ( !columnWidth ) {\n\t\t\t// Number of `<tableColumn>` elements exceeds actual number of columns.\n\t\t\twriter.remove( column );\n\t\t} else if ( !column ) {\n\t\t\t// There is fewer `<tableColumn>` elements than actual columns.\n\t\t\twriter.appendElement( 'tableColumn', { columnWidth }, tableColumnGroup );\n\t\t} else {\n\t\t\t// Update column width.\n\t\t\twriter.setAttribute( 'columnWidth', columnWidth, column );\n\t\t}\n\t}\n}\n\n/**\n * Returns a 'tableColumnGroup' element from the 'table'.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns A 'tableColumnGroup' element.\n */\nexport function getColumnGroupElement( element: Element ): Element {\n\tif ( element.is( 'element', 'tableColumnGroup' ) ) {\n\t\treturn element;\n\t}\n\n\tconst children = element.getChildren()!;\n\n\treturn Array\n\t\t.from( children )\n\t\t.find( element => element.is( 'element', 'tableColumnGroup' ) )! as Element;\n}\n\n/**\n * Returns an array of 'tableColumn' elements. It may be empty if there's no `tableColumnGroup` element.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of 'tableColumn' elements.\n */\nexport function getTableColumnElements( element: Element ): Array<Element> {\n\tconst columnGroupElement = getColumnGroupElement( element );\n\n\tif ( !columnGroupElement ) {\n\t\treturn [];\n\t}\n\n\treturn Array.from( columnGroupElement.getChildren() as IterableIterator<Element> );\n}\n\n/**\n * Returns an array of table column widths.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @returns An array of table column widths.\n */\nexport function getTableColumnsWidths( element: Element ): Array<string> {\n\treturn getTableColumnElements( element ).map( column => column.getAttribute( 'columnWidth' ) as string );\n}\n\n/**\n * Translates the `colSpan` model attribute into additional column widths and returns the resulting array.\n *\n * @internal\n * @param element A 'table' or 'tableColumnGroup' element.\n * @param writer A writer instance.\n * @returns An array of table column widths.\n */\nexport function translateColSpanAttribute( element: Element, writer: Writer ): Array<string> {\n\tconst tableColumnElements = getTableColumnElements( element );\n\n\treturn tableColumnElements.reduce( ( acc: Array<string>, element ) => {\n\t\tconst columnWidth = element.getAttribute( 'columnWidth' ) as string;\n\t\tconst colSpan = element.getAttribute( 'colSpan' ) as number | undefined;\n\n\t\tif ( !colSpan ) {\n\t\t\tacc.push( columnWidth );\n\t\t\treturn acc;\n\t\t}\n\n\t\t// Translate the `colSpan` model attribute on to the proper number of column widths\n\t\t// and remove it from the element.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n\t\tfor ( let i = 0; i < colSpan; i++ ) {\n\t\t\tacc.push( columnWidth );\n\t\t}\n\n\t\twriter.removeAttribute( 'colSpan', element );\n\n\t\treturn acc;\n\t}, [] );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableutils\n */\n\nimport { CKEditorError } from 'ckeditor5/src/utils.js';\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport type {\n\tDocumentSelection,\n\tElement,\n\tNode,\n\tPosition,\n\tRange,\n\tSelection,\n\tWriter\n} from 'ckeditor5/src/engine.js';\n\nimport TableWalker, { type TableWalkerOptions } from './tablewalker.js';\nimport { createEmptyTableCell, updateNumericAttribute } from './utils/common.js';\nimport { removeEmptyColumns, removeEmptyRows } from './utils/structure.js';\nimport { getTableColumnElements } from './tablecolumnresize/utils.js';\n\ntype Cell = { cell: Element; rowspan: number };\ntype CellsToMove = Map<number, Cell>;\ntype CellsToTrim = Array<Cell>;\n\ntype IndexesObject = { first: number; last: number };\n\n/**\n * The table utilities plugin.\n */\nexport default class TableUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableUtils' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tthis.decorate( 'insertColumns' );\n\t\tthis.decorate( 'insertRows' );\n\t}\n\n\t/**\n\t * Returns the table cell location as an object with table row and table column indexes.\n\t *\n\t * For instance, in the table below:\n\t *\n\t *      0   1   2   3\n\t *    +---+---+---+---+\n\t *  0 | a     | b | c |\n\t *    +       +   +---+\n\t *  1 |       |   | d |\n\t *    +---+---+   +---+\n\t *  2 | e     |   | f |\n\t *    +---+---+---+---+\n\t *\n\t * the method will return:\n\t *\n\t * ```ts\n\t * const cellA = table.getNodeByPath( [ 0, 0 ] );\n\t * editor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n\t * // will return { row: 0, column: 0 }\n\t *\n\t * const cellD = table.getNodeByPath( [ 1, 0 ] );\n\t * editor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n\t * // will return { row: 1, column: 3 }\n\t * ```\n\t *\n\t * @returns Returns a `{row, column}` object.\n\t */\n\tpublic getCellLocation( tableCell: Element ): { row: number; column: number } {\n\t\tconst tableRow = tableCell.parent!;\n\t\tconst table = tableRow.parent as Element;\n\n\t\tconst rowIndex = table.getChildIndex( tableRow as Node );\n\n\t\tconst tableWalker = new TableWalker( table, { row: rowIndex } );\n\n\t\tfor ( const { cell, row, column } of tableWalker ) {\n\t\t\tif ( cell === tableCell ) {\n\t\t\t\treturn { row, column };\n\t\t\t}\n\t\t}\n\n\t\t// Should be unreachable code.\n\t\t/* istanbul ignore next -- @preserve */\n\t\treturn undefined as any;\n\t}\n\n\t/**\n\t * Creates an empty table with a proper structure. The table needs to be inserted into the model,\n\t * for example, by using the {@link module:engine/model/model~Model#insertContent} function.\n\t *\n\t * ```ts\n\t * model.change( ( writer ) => {\n\t *   // Create a table of 2 rows and 7 columns:\n\t *   const table = tableUtils.createTable( writer, { rows: 2, columns: 7 } );\n\t *\n\t *   // Insert a table to the model at the best position taking the current selection:\n\t *   model.insertContent( table );\n\t * }\n\t * ```\n\t *\n\t * @param writer The model writer.\n\t * @param options.rows The number of rows to create. Default value is 2.\n\t * @param options.columns The number of columns to create. Default value is 2.\n\t * @param options.headingRows The number of heading rows. Default value is 0.\n\t * @param options.headingColumns The number of heading columns. Default value is 0.\n\t * @returns The created table element.\n\t */\n\tpublic createTable(\n\t\twriter: Writer,\n\t\toptions: {\n\t\t\trows?: number;\n\t\t\tcolumns?: number;\n\t\t\theadingRows?: number;\n\t\t\theadingColumns?: number;\n\t\t}\n\t): Element {\n\t\tconst table = writer.createElement( 'table' );\n\n\t\tconst rows = options.rows || 2;\n\t\tconst columns = options.columns || 2;\n\n\t\tcreateEmptyRows( writer, table, 0, rows, columns );\n\n\t\tif ( options.headingRows ) {\n\t\t\tupdateNumericAttribute( 'headingRows', Math.min( options.headingRows, rows ), table, writer, 0 );\n\t\t}\n\n\t\tif ( options.headingColumns ) {\n\t\t\tupdateNumericAttribute( 'headingColumns', Math.min( options.headingColumns, columns ), table, writer, 0 );\n\t\t}\n\n\t\treturn table;\n\t}\n\n\t/**\n\t * Inserts rows into a table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n\t * ```\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *  row index\n\t *    0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n\t *      | a | b | c |       `rows` = 2,    | a | b | c |\n\t *    1 +   +---+---+   <-- insert here    +   +---+---+ 1\n\t *      |   | d | e |                      |   |   |   |\n\t *    2 +   +---+---+       will give:     +   +---+---+ 2\n\t *      |   | f | g |                      |   |   |   |\n\t *    3 +---+---+---+                      +   +---+---+ 3\n\t *                                         |   | d | e |\n\t *                                         +   +---+---+ 4\n\t *                                         +   + f | g |\n\t *                                         +---+---+---+ 5\n\t *\n\t * @param table The table model element where the rows will be inserted.\n\t * @param options.at The row index at which the rows will be inserted.  Default value is 0.\n\t * @param options.rows The number of rows to insert.  Default value is 1.\n\t * @param options.copyStructureFromAbove The flag for copying row structure. Note that\n\t * the row structure will not be copied if this option is not provided.\n\t */\n\tpublic insertRows( table: Element, options: { at?: number; rows?: number; copyStructureFromAbove?: boolean } = {} ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst rowsToInsert = options.rows || 1;\n\t\tconst isCopyStructure = options.copyStructureFromAbove !== undefined;\n\t\tconst copyStructureFrom = options.copyStructureFromAbove ? insertAt - 1 : insertAt;\n\n\t\tconst rows = this.getRows( table );\n\t\tconst columns = this.getColumns( table );\n\n\t\tif ( insertAt > rows ) {\n\t\t\t/**\n\t\t\t * The `options.at` points at a row position that does not exist.\n\t\t\t *\n\t\t\t * @error tableutils-insertrows-insert-out-of-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'tableutils-insertrows-insert-out-of-range',\n\t\t\t\tthis,\n\t\t\t\t{ options }\n\t\t\t);\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\t\t\t// Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n\t\t\tif ( headingRows > insertAt ) {\n\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows + rowsToInsert, table, writer, 0 );\n\t\t\t}\n\n\t\t\t// Inserting at the end or at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( !isCopyStructure && ( insertAt === 0 || insertAt === rows ) ) {\n\t\t\t\tcreateEmptyRows( writer, table, insertAt, rowsToInsert, columns );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iterate over all the rows above the inserted rows in order to check for the row-spanned cells.\n\t\t\tconst walkerEndRow = isCopyStructure ? Math.max( insertAt, copyStructureFrom ) : insertAt;\n\t\t\tconst tableIterator = new TableWalker( table, { endRow: walkerEndRow } );\n\n\t\t\t// Store spans of the reference row to reproduce it's structure. This array is column number indexed.\n\t\t\tconst rowColSpansMap = new Array( columns ).fill( 1 );\n\n\t\t\tfor ( const { row, column, cellHeight, cellWidth, cell } of tableIterator ) {\n\t\t\t\tconst lastCellRow = row + cellHeight - 1;\n\n\t\t\t\tconst isOverlappingInsertedRow = row < insertAt && insertAt <= lastCellRow;\n\t\t\t\tconst isReferenceRow = row <= copyStructureFrom && copyStructureFrom <= lastCellRow;\n\n\t\t\t\t// If the cell is row-spanned and overlaps the inserted row, then reserve space for it in the row map.\n\t\t\t\tif ( isOverlappingInsertedRow ) {\n\t\t\t\t\t// This cell overlaps the inserted rows so we need to expand it further.\n\t\t\t\t\twriter.setAttribute( 'rowspan', cellHeight + rowsToInsert, cell );\n\n\t\t\t\t\t// Mark this cell with negative number to indicate how many cells should be skipped when adding the new cells.\n\t\t\t\t\trowColSpansMap[ column ] = -cellWidth;\n\t\t\t\t}\n\t\t\t\t// Store the colspan from reference row.\n\t\t\t\telse if ( isCopyStructure && isReferenceRow ) {\n\t\t\t\t\trowColSpansMap[ column ] = cellWidth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( let rowIndex = 0; rowIndex < rowsToInsert; rowIndex++ ) {\n\t\t\t\tconst tableRow = writer.createElement( 'tableRow' );\n\n\t\t\t\twriter.insert( tableRow, table, insertAt );\n\n\t\t\t\tfor ( let cellIndex = 0; cellIndex < rowColSpansMap.length; cellIndex++ ) {\n\t\t\t\t\tconst colspan = rowColSpansMap[ cellIndex ];\n\t\t\t\t\tconst insertPosition = writer.createPositionAt( tableRow, 'end' );\n\n\t\t\t\t\t// Insert the empty cell only if this slot is not row-spanned from any other cell.\n\t\t\t\t\tif ( colspan > 0 ) {\n\t\t\t\t\t\tcreateEmptyTableCell( writer, insertPosition, colspan > 1 ? { colspan } : undefined );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Skip the col-spanned slots, there won't be any cells.\n\t\t\t\t\tcellIndex += Math.abs( colspan ) - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Inserts columns into a table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n\t * ```\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *  0   1   2   3                   0   1   2   3   4   5\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *  | a     | b |                   | a             | b |\n\t *  +       +---+                   +               +---+\n\t *  |       | c |                   |               | c |\n\t *  +---+---+---+     will give:    +---+---+---+---+---+\n\t *  | d | e | f |                   | d |   |   | e | f |\n\t *  +---+   +---+                   +---+---+---+   +---+\n\t *  | g |   | h |                   | g |   |   |   | h |\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *  | i         |                   | i                 |\n\t *  +---+---+---+                   +---+---+---+---+---+\n\t *      ^---- insert here, `at` = 1, `columns` = 2\n\t *\n\t * @param table The table model element where the columns will be inserted.\n\t * @param options.at The column index at which the columns will be inserted. Default value is 0.\n\t * @param options.columns The number of columns to insert. Default value is 1.\n\t */\n\tpublic insertColumns( table: Element, options: { at?: number; columns?: number } = {} ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst columnsToInsert = options.columns || 1;\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number;\n\n\t\t\t// Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n\t\t\tif ( insertAt < headingColumns ) {\n\t\t\t\twriter.setAttribute( 'headingColumns', headingColumns + columnsToInsert, table );\n\t\t\t}\n\n\t\t\tconst tableColumns = this.getColumns( table );\n\n\t\t\t// Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( insertAt === 0 || tableColumns === insertAt ) {\n\t\t\t\tfor ( const tableRow of table.getChildren() ) {\n\t\t\t\t\t// Ignore non-row elements inside the table (e.g. caption).\n\t\t\t\t\tif ( !tableRow.is( 'element', 'tableRow' ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tcreateCells( columnsToInsert, writer, writer.createPositionAt( tableRow, insertAt ? 'end' : 0 ) );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableWalker = new TableWalker( table, { column: insertAt, includeAllSlots: true } );\n\n\t\t\tfor ( const tableSlot of tableWalker ) {\n\t\t\t\tconst { row, cell, cellAnchorColumn, cellAnchorRow, cellWidth, cellHeight } = tableSlot;\n\n\t\t\t\t// When iterating over column the table walker outputs either:\n\t\t\t\t// - cells at given column index (cell \"e\" from method docs),\n\t\t\t\t// - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeAllSlots: true`),\n\t\t\t\t// - or a cell from the same row which spans over this column (cell \"a\").\n\n\t\t\t\tif ( cellAnchorColumn < insertAt ) {\n\t\t\t\t\t// If cell is anchored in previous column, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n\t\t\t\t\t// For such cells expand them by a number of columns inserted.\n\t\t\t\t\twriter.setAttribute( 'colspan', cellWidth + columnsToInsert, cell );\n\n\t\t\t\t\t// This cell will overlap cells in rows below so skip them (because of `includeAllSlots` option) - (cell \"a\")\n\t\t\t\t\tconst lastCellRow = cellAnchorRow + cellHeight - 1;\n\n\t\t\t\t\tfor ( let i = row; i <= lastCellRow; i++ ) {\n\t\t\t\t\t\ttableWalker.skipRow( i );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// It's either cell at this column index or spanned cell by a row-spanned cell from row above.\n\t\t\t\t\t// In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n\t\t\t\t\tcreateCells( columnsToInsert, writer, tableSlot.getPositionBefore() );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Removes rows from the given `table`.\n\t *\n\t * This method re-calculates the table geometry including `rowspan` attribute of table cells overlapping removed rows\n\t * and table headings values.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).removeRows( table, { at: 1, rows: 2 } );\n\t * ```\n\t *\n\t * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n\t *\n\t *  row index\n\t *      ┌───┬───┬───┐        `at` = 1        ┌───┬───┬───┐\n\t *    0 │ a │ b │ c │        `rows` = 2      │ a │ b │ c │ 0\n\t *      │   ├───┼───┤                        │   ├───┼───┤\n\t *    1 │   │ d │ e │  <-- remove from here  │   │ d │ g │ 1\n\t *      │   │   ├───┤        will give:      ├───┼───┼───┤\n\t *    2 │   │   │ f │                        │ h │ i │ j │ 2\n\t *      │   │   ├───┤                        └───┴───┴───┘\n\t *    3 │   │   │ g │\n\t *      ├───┼───┼───┤\n\t *    4 │ h │ i │ j │\n\t *      └───┴───┴───┘\n\t *\n\t * @param options.at The row index at which the removing rows will start.\n\t * @param options.rows The number of rows to remove. Default value is 1.\n\t */\n\tpublic removeRows( table: Element, options: { at: number; rows?: number } ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst rowsToRemove = options.rows || 1;\n\t\tconst rowCount = this.getRows( table );\n\t\tconst first = options.at;\n\t\tconst last = first + rowsToRemove - 1;\n\n\t\tif ( last > rowCount - 1 ) {\n\t\t\t/**\n\t\t\t * The `options.at` param must point at existing row and `options.rows` must not exceed the rows in the table.\n\t\t\t *\n\t\t\t * @error tableutils-removerows-row-index-out-of-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'tableutils-removerows-row-index-out-of-range',\n\t\t\t\tthis,\n\t\t\t\t{ table, options }\n\t\t\t);\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tconst indexesObject = { first, last };\n\n\t\t\t// Removing rows from the table require that most calculations to be done prior to changing table structure.\n\t\t\t// Preparations must be done in the same enqueueChange callback to use the current table structure.\n\n\t\t\t// 1. Preparation - get row-spanned cells that have to be modified after removing rows.\n\t\t\tconst { cellsToMove, cellsToTrim } = getCellsToMoveAndTrimOnRemoveRow( table, indexesObject );\n\n\t\t\t// 2. Execution\n\n\t\t\t// 2a. Move cells from removed rows that extends over a removed section - must be done before removing rows.\n\t\t\t// This will fill any gaps in a rows below that previously were empty because of row-spanned cells.\n\t\t\tif ( cellsToMove.size ) {\n\t\t\t\tconst rowAfterRemovedSection = last + 1;\n\t\t\t\tmoveCellsToRow( table, rowAfterRemovedSection, cellsToMove, writer );\n\t\t\t}\n\n\t\t\t// 2b. Remove all required rows.\n\t\t\tfor ( let i = last; i >= first; i-- ) {\n\t\t\t\twriter.remove( table.getChild( i )! );\n\t\t\t}\n\n\t\t\t// 2c. Update cells from rows above that overlap removed section. Similar to step 2 but does not involve moving cells.\n\t\t\tfor ( const { rowspan, cell } of cellsToTrim ) {\n\t\t\t\tupdateNumericAttribute( 'rowspan', rowspan, cell, writer );\n\t\t\t}\n\n\t\t\t// 2d. Adjust heading rows if removed rows were in a heading section.\n\t\t\tupdateHeadingRows( table, indexesObject, writer );\n\n\t\t\t// 2e. Remove empty columns (without anchored cells) if there are any.\n\t\t\tif ( !removeEmptyColumns( table, this ) ) {\n\t\t\t\t// If there wasn't any empty columns then we still need to check if this wasn't called\n\t\t\t\t// because of cleaning empty rows and we only removed one of them.\n\t\t\t\tremoveEmptyRows( table, this );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Removes columns from the given `table`.\n\t *\n\t * This method re-calculates the table geometry including the `colspan` attribute of table cells overlapping removed columns\n\t * and table headings values.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).removeColumns( table, { at: 1, columns: 2 } );\n\t * ```\n\t *\n\t * Executing the above code in the context of the table on the left will transform its structure as presented on the right:\n\t *\n\t *    0   1   2   3   4                       0   1   2\n\t *  ┌───────────────┬───┐                   ┌───────┬───┐\n\t *  │ a             │ b │                   │ a     │ b │\n\t *  │               ├───┤                   │       ├───┤\n\t *  │               │ c │                   │       │ c │\n\t *  ├───┬───┬───┬───┼───┤     will give:    ├───┬───┼───┤\n\t *  │ d │ e │ f │ g │ h │                   │ d │ g │ h │\n\t *  ├───┼───┼───┤   ├───┤                   ├───┤   ├───┤\n\t *  │ i │ j │ k │   │ l │                   │ i │   │ l │\n\t *  ├───┴───┴───┴───┴───┤                   ├───┴───┴───┤\n\t *  │ m                 │                   │ m         │\n\t *  └───────────────────┘                   └───────────┘\n\t *        ^---- remove from here, `at` = 1, `columns` = 2\n\t *\n\t * @param options.at The row index at which the removing columns will start.\n\t * @param options.columns The number of columns to remove.\n\t */\n\tpublic removeColumns( table: Element, options: { at: number; columns?: number } ): void {\n\t\tconst model = this.editor.model;\n\t\tconst first = options.at;\n\t\tconst columnsToRemove = options.columns || 1;\n\t\tconst last = options.at + columnsToRemove - 1;\n\n\t\tmodel.change( writer => {\n\t\t\tadjustHeadingColumns( table, { first, last }, writer );\n\t\t\tconst tableColumns = getTableColumnElements( table );\n\n\t\t\tfor ( let removedColumnIndex = last; removedColumnIndex >= first; removedColumnIndex-- ) {\n\t\t\t\tfor ( const { cell, column, cellWidth } of [ ...new TableWalker( table ) ] ) {\n\t\t\t\t\t// If colspaned cell overlaps removed column decrease its span.\n\t\t\t\t\tif ( column <= removedColumnIndex && cellWidth > 1 && column + cellWidth > removedColumnIndex ) {\n\t\t\t\t\t\tupdateNumericAttribute( 'colspan', cellWidth - 1, cell, writer );\n\t\t\t\t\t} else if ( column === removedColumnIndex ) {\n\t\t\t\t\t\t// The cell in removed column has colspan of 1.\n\t\t\t\t\t\twriter.remove( cell );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If table has `tableColumn` elements, we need to update it manually.\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for details.\n\t\t\t\tif ( tableColumns[ removedColumnIndex ] ) {\n\t\t\t\t\t// If the removed column is the first one then we need to add its width to the next column.\n\t\t\t\t\t// Otherwise we add it to the previous column.\n\t\t\t\t\tconst adjacentColumn = removedColumnIndex === 0 ? tableColumns[ 1 ] : tableColumns[ removedColumnIndex - 1 ];\n\n\t\t\t\t\tconst removedColumnWidth = parseFloat( tableColumns[ removedColumnIndex ].getAttribute( 'columnWidth' ) as string );\n\t\t\t\t\tconst adjacentColumnWidth = parseFloat( adjacentColumn.getAttribute( 'columnWidth' ) as string );\n\n\t\t\t\t\twriter.remove( tableColumns[ removedColumnIndex ] );\n\n\t\t\t\t\t// Add the removed column width (in %) to the adjacent column.\n\t\t\t\t\twriter.setAttribute( 'columnWidth', removedColumnWidth + adjacentColumnWidth + '%', adjacentColumn );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove empty rows that could appear after removing columns.\n\t\t\tif ( !removeEmptyRows( table, this ) ) {\n\t\t\t\t// If there wasn't any empty rows then we still need to check if this wasn't called\n\t\t\t\t// because of cleaning empty columns and we only removed one of them.\n\t\t\t\tremoveEmptyColumns( table, this );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell vertically into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating colspans of other cells in a column\n\t * and inserting cells (columns) after that cell.\n\t *\n\t * In the table below, if cell \"a\" is split into 3 cells:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * it will result in the table below:\n\t *\n\t *  +---+---+---+---+---+\n\t *  | a |   |   | b | c |\n\t *  +---+---+---+---+---+\n\t *  | d         | e | f |\n\t *  +---+---+---+---+---+\n\t *\n\t * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n\t *\n\t * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *  +---+---+---+\n\t *  | a         |\n\t *  +---+---+---+\n\t *  | b | c | d |\n\t *  +---+---+---+\n\t *\n\t * Splitting cell \"a\" with `colspan=3` into 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n\t *\n\t *  +---+---+---+\n\t *  | a     |   |\n\t *  +---+---+---+\n\t *  | b | c | d |\n\t *  +---+---+---+\n\t */\n\tpublic splitCellVertically( tableCell: Element, numberOfCells = 2 ): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableRow = tableCell.parent!;\n\t\tconst table = tableRow.parent as Element;\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( colspan > 1 ) {\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( colspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'colspan', updatedSpan, tableCell, writer );\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes: { colspan?: number; rowspan?: number } = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tconst cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\t\t\t}\n\n\t\t\t// Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n\t\t\tif ( colspan < numberOfCells ) {\n\t\t\t\tconst cellsToInsert = numberOfCells - colspan;\n\n\t\t\t\t// First step: expand cells on the same column as split cell.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t\t\t// Get the column index of split cell.\n\t\t\t\tconst { column: splitCellColumn } = tableMap.find( ( { cell } ) => cell === tableCell )!;\n\n\t\t\t\t// Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n\t\t\t\tconst cellsToUpdate = tableMap.filter( ( { cell, cellWidth, column } ) => {\n\t\t\t\t\tconst isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n\t\t\t\t\tconst spansOverColumn = ( column < splitCellColumn && column + cellWidth > splitCellColumn );\n\n\t\t\t\t\treturn isOnSameColumn || spansOverColumn;\n\t\t\t\t} );\n\n\t\t\t\t// Expand cells vertically.\n\t\t\t\tfor ( const { cell, cellWidth } of cellsToUpdate ) {\n\t\t\t\t\twriter.setAttribute( 'colspan', cellWidth + cellsToInsert, cell );\n\t\t\t\t}\n\n\t\t\t\t// Second step: create columns after split cell.\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes: { rowspan?: number } = {};\n\n\t\t\t\t// Do not store default value in the model.\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\n\t\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number || 0;\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tif ( headingColumns > splitCellColumn ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingColumns', headingColumns + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell horizontally into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n\t * below.\n\t *\n\t * If in the table below cell \"b\" is split into 3 cells:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * It will result in the table below:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+   +\n\t *  |   |   |   |\n\t *  +   +---+   +\n\t *  |   |   |   |\n\t *  +---+---+---+\n\t *  | d | e | f |\n\t *  +---+---+---+\n\t *\n\t * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n\t *\n\t * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+---+\n\t *  |   | d | e |\n\t *  +   +---+---+\n\t *  |   | f | g |\n\t *  +   +---+---+\n\t *  |   | h | i |\n\t *  +---+---+---+\n\t *\n\t * Splitting cell \"a\" with `rowspan=4` into 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n\t *\n\t *  +---+---+---+\n\t *  | a | b | c |\n\t *  +   +---+---+\n\t *  |   | d | e |\n\t *  +---+---+---+\n\t *  |   | f | g |\n\t *  +---+---+---+\n\t *  |   | h | i |\n\t *  +---+---+---+\n\t */\n\tpublic splitCellHorizontally( tableCell: Element, numberOfCells = 2 ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst tableRow = tableCell.parent as Node;\n\t\tconst table = tableRow.parent! as Element;\n\t\tconst splitCellRow = table.getChildIndex( tableRow )!;\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string || '1' );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string || '1' );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t// Cache table map before updating table.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, {\n\t\t\t\t\tstartRow: splitCellRow,\n\t\t\t\t\tendRow: splitCellRow + rowspan - 1,\n\t\t\t\t\tincludeAllSlots: true\n\t\t\t\t} ) ];\n\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( rowspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'rowspan', updatedSpan, tableCell, writer );\n\n\t\t\t\tconst { column: cellColumn } = tableMap.find( ( { cell } ) => cell === tableCell )!;\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes: { rowspan?: number; colspan?: number } = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\t// Accumulator that stores distance from the last inserted cell span.\n\t\t\t\t// It helps with evenly splitting larger cell spans (for example 10 cells collapsing into 3 cells).\n\t\t\t\t// We split these cells into 3, 3, 4 cells and we have to call `createCells` only when distance between\n\t\t\t\t// these cells is equal or greater than the new cells span size.\n\t\t\t\tlet distanceFromLastCellSpan = 0;\n\n\t\t\t\tfor ( const tableSlot of tableMap ) {\n\t\t\t\t\tconst { column, row } = tableSlot;\n\n\t\t\t\t\t// As both newly created cells and the split cell might have rowspan,\n\t\t\t\t\t// the insertion of new cells must go to appropriate rows:\n\t\t\t\t\t//\n\t\t\t\t\t// 1. It's a row after split cell + it's height.\n\t\t\t\t\tconst isAfterSplitCell = row >= splitCellRow + updatedSpan;\n\n\t\t\t\t\t// 2. Is on the same column.\n\t\t\t\t\tconst isOnSameColumn = column === cellColumn;\n\n\t\t\t\t\t// Reset distance from the last cell span if we are on the same column and we exceeded the new cells span size.\n\t\t\t\t\tif ( distanceFromLastCellSpan >= newCellsSpan && isOnSameColumn ) {\n\t\t\t\t\t\tdistanceFromLastCellSpan = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isAfterSplitCell && isOnSameColumn ) {\n\t\t\t\t\t\t// Create new cells only if the distance from the last cell span is equal or greater than the new cells span.\n\t\t\t\t\t\tif ( !distanceFromLastCellSpan ) {\n\t\t\t\t\t\t\tcreateCells( 1, writer, tableSlot.getPositionBefore(), newCellsAttributes );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Increase the distance from the last cell span.\n\t\t\t\t\t\tdistanceFromLastCellSpan++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n\t\t\tif ( rowspan < numberOfCells ) {\n\t\t\t\t// We already split the cell in check one so here we split to the remaining number of cells only.\n\t\t\t\tconst cellsToInsert = numberOfCells - rowspan;\n\n\t\t\t\t// This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, { startRow: 0, endRow: splitCellRow } ) ];\n\n\t\t\t\t// First step: expand cells.\n\t\t\t\tfor ( const { cell, cellHeight, row } of tableMap ) {\n\t\t\t\t\t// Expand rowspan of cells that are either:\n\t\t\t\t\t// - on the same row as current cell,\n\t\t\t\t\t// - or are below split cell row and overlaps that row.\n\t\t\t\t\tif ( cell !== tableCell && row + cellHeight > splitCellRow ) {\n\t\t\t\t\t\tconst rowspanToSet = cellHeight + cellsToInsert;\n\n\t\t\t\t\t\twriter.setAttribute( 'rowspan', rowspanToSet, cell );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Second step: create rows with single cell below split cell.\n\t\t\t\tconst newCellsAttributes: { colspan?: number } = {};\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\tcreateEmptyRows( writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes );\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\t\t\t\tif ( headingRows > splitCellRow ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the number of columns for a given table.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).getColumns( table );\n\t * ```\n\t *\n\t * @param table The table to analyze.\n\t */\n\tpublic getColumns( table: Element ): number {\n\t\t// Analyze first row only as all the rows should have the same width.\n\t\t// Using the first row without checking if it's a tableRow because we expect\n\t\t// that table will have only tableRow model elements at the beginning.\n\t\tconst row = table.getChild( 0 ) as Element;\n\n\t\treturn [ ...row.getChildren() ]\n\t\t\t// $marker elements can also be children of a row too (when TrackChanges is on). Don't include them in the count.\n\t\t\t.filter( node => node.is( 'element', 'tableCell' ) )\n\t\t\t.reduce( ( columns, row ) => {\n\t\t\t\tconst columnWidth = parseInt( row.getAttribute( 'colspan' ) as string || '1' );\n\n\t\t\t\treturn columns + columnWidth;\n\t\t\t}, 0 );\n\t}\n\n\t/**\n\t * Returns the number of rows for a given table. Any other element present in the table model is omitted.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'TableUtils' ).getRows( table );\n\t * ```\n\t *\n\t * @param table The table to analyze.\n\t */\n\tpublic getRows( table: Element ): number {\n\t\t// Rowspan not included due to #6427.\n\t\treturn Array.from( table.getChildren() )\n\t\t\t.reduce( ( rowCount, child ) => child.is( 'element', 'tableRow' ) ? rowCount + 1 : rowCount, 0 );\n\t}\n\n\t/**\n\t * Creates an instance of the table walker.\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the options.\n\t * By default it will output only the locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeAllSlots` option.\n\t *\n\t * @internal\n\t * @param table A table over which the walker iterates.\n\t * @param options An object with configuration.\n\t */\n\tpublic createTableWalker( table: Element, options: TableWalkerOptions = {} ): TableWalker {\n\t\treturn new TableWalker( table, options );\n\t}\n\n\t/**\n\t * Returns all model table cells that are fully selected (from the outside)\n\t * within the provided model selection's ranges.\n\t *\n\t * To obtain the cells selected from the inside, use\n\t * {@link #getTableCellsContainingSelection}.\n\t */\n\tpublic getSelectedTableCells( selection: Selection | DocumentSelection ): Array<Element> {\n\t\tconst cells = [];\n\n\t\tfor ( const range of this.sortRanges( selection.getRanges() ) ) {\n\t\t\tconst element = range.getContainedElement();\n\n\t\t\tif ( element && element.is( 'element', 'tableCell' ) ) {\n\t\t\t\tcells.push( element );\n\t\t\t}\n\t\t}\n\n\t\treturn cells;\n\t}\n\n\t/**\n\t * Returns all model table cells that the provided model selection's ranges\n\t * {@link module:engine/model/range~Range#start} inside.\n\t *\n\t * To obtain the cells selected from the outside, use\n\t * {@link #getSelectedTableCells}.\n\t */\n\tpublic getTableCellsContainingSelection( selection: Selection | DocumentSelection ): Array<Element> {\n\t\tconst cells = [];\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tconst cellWithSelection = range.start.findAncestor( 'tableCell' );\n\n\t\t\tif ( cellWithSelection ) {\n\t\t\t\tcells.push( cellWithSelection );\n\t\t\t}\n\t\t}\n\n\t\treturn cells;\n\t}\n\n\t/**\n\t * Returns all model table cells that are either completely selected\n\t * by selection ranges or host selection range\n\t * {@link module:engine/model/range~Range#start start positions} inside them.\n\t *\n\t * Combines {@link #getTableCellsContainingSelection} and\n\t * {@link #getSelectedTableCells}.\n\t */\n\tpublic getSelectionAffectedTableCells( selection: Selection | DocumentSelection ): Array<Element> {\n\t\tconst selectedCells = this.getSelectedTableCells( selection );\n\n\t\tif ( selectedCells.length ) {\n\t\t\treturn selectedCells;\n\t\t}\n\n\t\treturn this.getTableCellsContainingSelection( selection );\n\t}\n\n\t/**\n\t * Returns an object with the `first` and `last` row index contained in the given `tableCells`.\n\t *\n\t * ```ts\n\t * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n\t *\n\t * const { first, last } = getRowIndexes( selectedTableCells );\n\t *\n\t * console.log( `Selected rows: ${ first } to ${ last }` );\n\t * ```\n\t *\n\t * @returns Returns an object with the `first` and `last` table row indexes.\n\t */\n\tpublic getRowIndexes( tableCells: Array<Element> ): IndexesObject {\n\t\tconst indexes = tableCells.map( cell => ( cell.parent as Element ).index! );\n\n\t\treturn this._getFirstLastIndexesObject( indexes );\n\t}\n\n\t/**\n\t * Returns an object with the `first` and `last` column index contained in the given `tableCells`.\n\t *\n\t * ```ts\n\t * const selectedTableCells = getSelectedTableCells( editor.model.document.selection );\n\t *\n\t * const { first, last } = getColumnIndexes( selectedTableCells );\n\t *\n\t * console.log( `Selected columns: ${ first } to ${ last }` );\n\t * ```\n\t *\n\t * @returns Returns an object with the `first` and `last` table column indexes.\n\t */\n\tpublic getColumnIndexes( tableCells: Array<Element> ): IndexesObject {\n\t\tconst table = tableCells[ 0 ].findAncestor( 'table' )!;\n\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\tconst indexes = tableMap\n\t\t\t.filter( entry => tableCells.includes( entry.cell ) )\n\t\t\t.map( entry => entry.column );\n\n\t\treturn this._getFirstLastIndexesObject( indexes );\n\t}\n\n\t/**\n\t * Checks if the selection contains cells that do not exceed rectangular selection.\n\t *\n\t * In a table below:\n\t *\n\t *  ┌───┬───┬───┬───┐\n\t *  │ a │ b │ c │ d │\n\t *  ├───┴───┼───┤   │\n\t *  │ e     │ f │   │\n\t *  │       ├───┼───┤\n\t *  │       │ g │ h │\n\t *  └───────┴───┴───┘\n\t *\n\t * Valid selections are these which create a solid rectangle (without gaps), such as:\n\t *   - a, b (two horizontal cells)\n\t *   - c, f (two vertical cells)\n\t *   - a, b, e (cell \"e\" spans over four cells)\n\t *   - c, d, f (cell d spans over a cell in the row below)\n\t *\n\t * While an invalid selection would be:\n\t *   - a, c (the unselected cell \"b\" creates a gap)\n\t *   - f, g, h (cell \"d\" spans over a cell from the row of \"f\" cell - thus creates a gap)\n\t */\n\tpublic isSelectionRectangular( selectedTableCells: Array<Element> ): boolean {\n\t\tif ( selectedTableCells.length < 2 || !this._areCellInTheSameTableSection( selectedTableCells ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// A valid selection is a fully occupied rectangle composed of table cells.\n\t\t// Below we will calculate the area of a selected table cells and the area of valid selection.\n\t\t// The area of a valid selection is defined by top-left and bottom-right cells.\n\t\tconst rows: Set<number> = new Set();\n\t\tconst columns: Set<number> = new Set();\n\n\t\tlet areaOfSelectedCells = 0;\n\n\t\tfor ( const tableCell of selectedTableCells ) {\n\t\t\tconst { row, column } = this.getCellLocation( tableCell );\n\t\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) as string ) || 1;\n\t\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) as string ) || 1;\n\n\t\t\t// Record row & column indexes of current cell.\n\t\t\trows.add( row );\n\t\t\tcolumns.add( column );\n\n\t\t\t// For cells that spans over multiple rows add also the last row that this cell spans over.\n\t\t\tif ( rowspan > 1 ) {\n\t\t\t\trows.add( row + rowspan - 1 );\n\t\t\t}\n\n\t\t\t// For cells that spans over multiple columns add also the last column that this cell spans over.\n\t\t\tif ( colspan > 1 ) {\n\t\t\t\tcolumns.add( column + colspan - 1 );\n\t\t\t}\n\n\t\t\tareaOfSelectedCells += ( rowspan * colspan );\n\t\t}\n\n\t\t// We can only merge table cells that are in adjacent rows...\n\t\tconst areaOfValidSelection = getBiggestRectangleArea( rows, columns );\n\n\t\treturn areaOfValidSelection == areaOfSelectedCells;\n\t}\n\n\t/**\n\t * Returns array of sorted ranges.\n\t */\n\tpublic sortRanges( ranges: Iterable<Range> ): Array<Range> {\n\t\treturn Array.from( ranges ).sort( compareRangeOrder );\n\t}\n\n\t/**\n\t * Helper method to get an object with `first` and `last` indexes from an unsorted array of indexes.\n\t */\n\tprivate _getFirstLastIndexesObject( indexes: Array<number> ): IndexesObject {\n\t\tconst allIndexesSorted = indexes.sort( ( indexA, indexB ) => indexA - indexB );\n\n\t\tconst first = allIndexesSorted[ 0 ];\n\t\tconst last = allIndexesSorted[ allIndexesSorted.length - 1 ];\n\n\t\treturn { first, last };\n\t}\n\n\t/**\n\t * Checks if the selection does not mix a header (column or row) with other cells.\n\t *\n\t * For instance, in the table below valid selections consist of cells with the same letter only.\n\t * So, a-a (same heading row and column) or d-d (body cells) are valid while c-d or a-b are not.\n\t *\n\t * header columns\n\t *    ↓   ↓\n\t *  ┌───┬───┬───┬───┐\n\t *  │ a │ a │ b │ b │  ← header row\n\t *  ├───┼───┼───┼───┤\n\t *  │ c │ c │ d │ d │\n\t *  ├───┼───┼───┼───┤\n\t *  │ c │ c │ d │ d │\n\t *  └───┴───┴───┴───┘\n\t */\n\tprivate _areCellInTheSameTableSection( tableCells: Array<Element> ): boolean {\n\t\tconst table = tableCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tconst rowIndexes = this.getRowIndexes( tableCells );\n\t\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) as string ) || 0;\n\n\t\t// Calculating row indexes is a bit cheaper so if this check fails we can't merge.\n\t\tif ( !this._areIndexesInSameSection( rowIndexes, headingRows ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst columnIndexes = this.getColumnIndexes( tableCells );\n\t\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) as string ) || 0;\n\n\t\t// Similarly cells must be in same column section.\n\t\treturn this._areIndexesInSameSection( columnIndexes, headingColumns );\n\t}\n\n\t/**\n\t * Unified check if table rows/columns indexes are in the same heading/body section.\n\t */\n\tprivate _areIndexesInSameSection( { first, last }: IndexesObject, headingSectionSize: number ): boolean {\n\t\tconst firstCellIsInHeading = first < headingSectionSize;\n\t\tconst lastCellIsInHeading = last < headingSectionSize;\n\n\t\treturn firstCellIsInHeading === lastCellIsInHeading;\n\t}\n}\n\n/**\n * Creates empty rows at the given index in an existing table.\n *\n * @param insertAt The row index of row insertion.\n * @param rows The number of rows to create.\n * @param tableCellToInsert The number of cells to insert in each row.\n */\nfunction createEmptyRows( writer: Writer, table: Element, insertAt: number, rows: number, tableCellToInsert: number, attributes = {} ) {\n\tfor ( let i = 0; i < rows; i++ ) {\n\t\tconst tableRow = writer.createElement( 'tableRow' );\n\n\t\twriter.insert( tableRow, table, insertAt );\n\n\t\tcreateCells( tableCellToInsert, writer, writer.createPositionAt( tableRow, 'end' ), attributes );\n\t}\n}\n\n/**\n * Creates cells at a given position.\n *\n * @param cells The number of cells to create\n */\nfunction createCells( cells: number, writer: Writer, insertPosition: Position, attributes = {} ) {\n\tfor ( let i = 0; i < cells; i++ ) {\n\t\tcreateEmptyTableCell( writer, insertPosition, attributes );\n\t}\n}\n\n/**\n * Evenly distributes the span of a cell to a number of provided cells.\n * The resulting spans will always be integer values.\n *\n * For instance breaking a span of 7 into 3 cells will return:\n *\n * ```ts\n * { newCellsSpan: 2, updatedSpan: 3 }\n * ```\n *\n * as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n *\n * @param span The span value do break.\n * @param numberOfCells The number of resulting spans.\n */\nfunction breakSpanEvenly( span: number, numberOfCells: number ): { newCellsSpan: number; updatedSpan: number } {\n\tif ( span < numberOfCells ) {\n\t\treturn { newCellsSpan: 1, updatedSpan: 1 };\n\t}\n\n\tconst newCellsSpan = Math.floor( span / numberOfCells );\n\tconst updatedSpan = ( span - newCellsSpan * numberOfCells ) + newCellsSpan;\n\n\treturn { newCellsSpan, updatedSpan };\n}\n\n/**\n * Updates heading columns attribute if removing a row from head section.\n */\nfunction adjustHeadingColumns( table: Element, removedColumnIndexes: IndexesObject, writer: Writer ) {\n\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number || 0;\n\n\tif ( headingColumns && removedColumnIndexes.first < headingColumns ) {\n\t\tconst headingsRemoved = Math.min( headingColumns - 1 /* Other numbers are 0-based */, removedColumnIndexes.last ) -\n\t\t\tremovedColumnIndexes.first + 1;\n\n\t\twriter.setAttribute( 'headingColumns', headingColumns - headingsRemoved, table );\n\t}\n}\n\n/**\n * Calculates a new heading rows value for removing rows from heading section.\n */\nfunction updateHeadingRows( table: Element, { first, last }: IndexesObject, writer: Writer ) {\n\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\tif ( first < headingRows ) {\n\t\tconst newRows = last < headingRows ? headingRows - ( last - first + 1 ) : first;\n\n\t\tupdateNumericAttribute( 'headingRows', newRows, table, writer, 0 );\n\t}\n}\n\n/**\n * Finds cells that will be:\n * - trimmed - Cells that are \"above\" removed rows sections and overlap the removed section - their rowspan must be trimmed.\n * - moved - Cells from removed rows section might stick out of. These cells are moved to the next row after a removed section.\n *\n * Sample table with overlapping & sticking out cells:\n *\n *      +----+----+----+----+----+\n *      | 00 | 01 | 02 | 03 | 04 |\n *      +----+    +    +    +    +\n *      | 10 |    |    |    |    |\n *      +----+----+    +    +    +\n *      | 20 | 21 |    |    |    | <-- removed row\n *      +    +    +----+    +    +\n *      |    |    | 32 |    |    | <-- removed row\n *      +----+    +    +----+    +\n *      | 40 |    |    | 43 |    |\n *      +----+----+----+----+----+\n *\n * In a table above:\n * - cells to trim: '02', '03' & '04'.\n * - cells to move: '21' & '32'.\n */\nfunction getCellsToMoveAndTrimOnRemoveRow( table: Element, { first, last }: IndexesObject ) {\n\tconst cellsToMove: CellsToMove = new Map();\n\tconst cellsToTrim: CellsToTrim = [];\n\n\tfor ( const { row, column, cellHeight, cell } of new TableWalker( table, { endRow: last } ) ) {\n\t\tconst lastRowOfCell = row + cellHeight - 1;\n\n\t\tconst isCellStickingOutFromRemovedRows = row >= first && row <= last && lastRowOfCell > last;\n\n\t\tif ( isCellStickingOutFromRemovedRows ) {\n\t\t\tconst rowspanInRemovedSection = last - row + 1;\n\t\t\tconst rowSpanToSet = cellHeight - rowspanInRemovedSection;\n\n\t\t\tcellsToMove.set( column, {\n\t\t\t\tcell,\n\t\t\t\trowspan: rowSpanToSet\n\t\t\t} );\n\t\t}\n\n\t\tconst isCellOverlappingRemovedRows = row < first && lastRowOfCell >= first;\n\n\t\tif ( isCellOverlappingRemovedRows ) {\n\t\t\tlet rowspanAdjustment;\n\n\t\t\t// Cell fully covers removed section - trim it by removed rows count.\n\t\t\tif ( lastRowOfCell >= last ) {\n\t\t\t\trowspanAdjustment = last - first + 1;\n\t\t\t}\n\t\t\t// Cell partially overlaps removed section - calculate cell's span that is in removed section.\n\t\t\telse {\n\t\t\t\trowspanAdjustment = lastRowOfCell - first + 1;\n\t\t\t}\n\n\t\t\tcellsToTrim.push( {\n\t\t\t\tcell,\n\t\t\t\trowspan: cellHeight - rowspanAdjustment\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn { cellsToMove, cellsToTrim };\n}\n\nfunction moveCellsToRow( table: Element, targetRowIndex: number, cellsToMove: CellsToMove, writer: Writer ) {\n\tconst tableWalker = new TableWalker( table, {\n\t\tincludeAllSlots: true,\n\t\trow: targetRowIndex\n\t} );\n\n\tconst tableRowMap = [ ...tableWalker ];\n\tconst row = table.getChild( targetRowIndex )!;\n\n\tlet previousCell;\n\n\tfor ( const { column, cell, isAnchor } of tableRowMap ) {\n\t\tif ( cellsToMove.has( column ) ) {\n\t\t\tconst { cell: cellToMove, rowspan } = cellsToMove.get( column )!;\n\n\t\t\tconst targetPosition = previousCell ?\n\t\t\t\twriter.createPositionAfter( previousCell ) :\n\t\t\t\twriter.createPositionAt( row, 0 );\n\n\t\t\twriter.move( writer.createRangeOn( cellToMove ), targetPosition );\n\t\t\tupdateNumericAttribute( 'rowspan', rowspan, cellToMove, writer );\n\n\t\t\tpreviousCell = cellToMove;\n\t\t} else if ( isAnchor ) {\n\t\t\t// If cell is spanned then `cell` holds reference to overlapping cell. See ckeditor/ckeditor5#6502.\n\t\t\tpreviousCell = cell;\n\t\t}\n\t}\n}\n\nfunction compareRangeOrder( rangeA: Range, rangeB: Range ) {\n\t// Since table cell ranges are disjoint, it's enough to check their start positions.\n\tconst posA = rangeA.start;\n\tconst posB = rangeB.start;\n\n\t// Checking for equal position (returning 0) is not needed because this would be either:\n\t// a. Intersecting range (not allowed by model)\n\t// b. Collapsed range on the same position (allowed by model but should not happen).\n\treturn posA.isBefore( posB ) ? -1 : 1;\n}\n\n/**\n * Calculates the area of a maximum rectangle that can span over the provided row & column indexes.\n */\nfunction getBiggestRectangleArea( rows: Set<number>, columns: Set<number> ): number {\n\tconst rowsIndexes = Array.from( rows.values() );\n\tconst columnIndexes = Array.from( columns.values() );\n\n\tconst lastRow = Math.max( ...rowsIndexes );\n\tconst firstRow = Math.min( ...rowsIndexes );\n\tconst lastColumn = Math.max( ...columnIndexes );\n\tconst firstColumn = Math.min( ...columnIndexes );\n\n\treturn ( lastRow - firstRow + 1 ) * ( lastColumn - firstColumn + 1 );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/mergecellscommand\n */\n\nimport type {\n\tElement,\n\tWriter\n} from 'ckeditor5/src/engine.js';\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport TableUtils from '../tableutils.js';\nimport { updateNumericAttribute } from '../utils/common.js';\nimport { removeEmptyRowsColumns } from '../utils/structure.js';\n\n/**\n * The merge cells command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'mergeTableCells'` editor command.\n *\n * For example, to merge selected table cells:\n *\n * ```ts\n * editor.execute( 'mergeTableCells' );\n * ```\n */\nexport default class MergeCellsCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\tconst selectedTableCells = tableUtils.getSelectedTableCells( this.editor.model.document.selection );\n\t\tthis.isEnabled = tableUtils.isSelectionRectangular( selectedTableCells );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\tmodel.change( writer => {\n\t\t\tconst selectedTableCells = tableUtils.getSelectedTableCells( model.document.selection );\n\n\t\t\t// All cells will be merged into the first one.\n\t\t\tconst firstTableCell = selectedTableCells.shift()!;\n\n\t\t\t// Update target cell dimensions.\n\t\t\tconst { mergeWidth, mergeHeight } = getMergeDimensions( firstTableCell, selectedTableCells, tableUtils );\n\t\t\tupdateNumericAttribute( 'colspan', mergeWidth, firstTableCell, writer );\n\t\t\tupdateNumericAttribute( 'rowspan', mergeHeight, firstTableCell, writer );\n\n\t\t\tfor ( const tableCell of selectedTableCells ) {\n\t\t\t\tmergeTableCells( tableCell, firstTableCell, writer );\n\t\t\t}\n\n\t\t\tconst table = firstTableCell.findAncestor( 'table' )!;\n\n\t\t\t// Remove rows and columns that become empty (have no anchored cells).\n\t\t\tremoveEmptyRowsColumns( table, tableUtils );\n\n\t\t\twriter.setSelection( firstTableCell, 'in' );\n\t\t} );\n\t}\n}\n\n/**\n *  Merges two table cells. It will ensure that after merging cells with empty paragraphs the resulting table cell will only have one\n * paragraph. If one of the merged table cells is empty, the merged table cell will have contents of the non-empty table cell.\n * If both are empty, the merged table cell will have only one empty paragraph.\n */\nfunction mergeTableCells( cellBeingMerged: Element, targetCell: Element, writer: Writer ) {\n\tif ( !isEmpty( cellBeingMerged ) ) {\n\t\tif ( isEmpty( targetCell ) ) {\n\t\t\twriter.remove( writer.createRangeIn( targetCell ) );\n\t\t}\n\n\t\twriter.move( writer.createRangeIn( cellBeingMerged ), writer.createPositionAt( targetCell, 'end' ) );\n\t}\n\n\t// Remove merged table cell.\n\twriter.remove( cellBeingMerged );\n}\n\n/**\n * Checks if the passed table cell contains an empty paragraph.\n */\nfunction isEmpty( tableCell: Element ): boolean {\n\tconst firstTableChild = tableCell.getChild( 0 );\n\n\treturn tableCell.childCount == 1 && firstTableChild!.is( 'element', 'paragraph' ) && firstTableChild.isEmpty;\n}\n\nfunction getMergeDimensions( firstTableCell: Element, selectedTableCells: Array<Element>, tableUtils: TableUtils ) {\n\tlet maxWidthOffset = 0;\n\tlet maxHeightOffset = 0;\n\n\tfor ( const tableCell of selectedTableCells ) {\n\t\tconst { row, column } = tableUtils.getCellLocation( tableCell );\n\n\t\tmaxWidthOffset = getMaxOffset( tableCell, column, maxWidthOffset, 'colspan' );\n\t\tmaxHeightOffset = getMaxOffset( tableCell, row, maxHeightOffset, 'rowspan' );\n\t}\n\n\t// Update table cell span attribute and merge set selection on a merged contents.\n\tconst { row: firstCellRow, column: firstCellColumn } = tableUtils.getCellLocation( firstTableCell );\n\n\tconst mergeWidth = maxWidthOffset - firstCellColumn;\n\tconst mergeHeight = maxHeightOffset - firstCellRow;\n\n\treturn { mergeWidth, mergeHeight };\n}\n\nfunction getMaxOffset( tableCell: Element, start: number, currentMaxOffset: number, which: string ) {\n\tconst dimensionValue = parseInt( tableCell.getAttribute( which ) as string || '1' );\n\n\treturn Math.max( currentMaxOffset, start + dimensionValue );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/selectrowcommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { Range, Element } from 'ckeditor5/src/engine.js';\nimport type TableUtils from '../tableutils.js';\n\n/**\n * The select row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableRow'` editor command.\n *\n * To select the rows containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableRow' );\n * ```\n */\nexport default class SelectRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t// It does not affect data so should be enabled in read-only mode.\n\t\tthis.affectsData = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = selectedCells.length > 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst referenceCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst rowIndexes = tableUtils.getRowIndexes( referenceCells );\n\n\t\tconst table = referenceCells[ 0 ].findAncestor( 'table' )!;\n\t\tconst rangesToSelect: Array<Range> = [];\n\n\t\tfor ( let rowIndex = rowIndexes.first; rowIndex <= rowIndexes.last; rowIndex++ ) {\n\t\t\tfor ( const cell of ( table.getChild( rowIndex ) as Element ).getChildren() ) {\n\t\t\t\trangesToSelect.push( model.createRangeOn( cell ) );\n\t\t\t}\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( rangesToSelect );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/commands/selectcolumncommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { Range } from 'ckeditor5/src/engine.js';\nimport type TableUtils from '../tableutils.js';\n\nimport TableWalker from '../tablewalker.js';\n\n/**\n * The select column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as the `'selectTableColumn'` editor command.\n *\n * To select the columns containing the selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'selectTableColumn' );\n * ```\n */\nexport default class SelectColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\t// It does not affect data so should be enabled in read-only mode.\n\t\tthis.affectsData = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedCells = tableUtils.getSelectionAffectedTableCells( this.editor.model.document.selection );\n\n\t\tthis.isEnabled = selectedCells.length > 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override execute(): void {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst model = this.editor.model;\n\t\tconst referenceCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst firstCell = referenceCells[ 0 ];\n\t\tconst lastCell = referenceCells.pop()!;\n\t\tconst table = firstCell.findAncestor( 'table' )!;\n\n\t\tconst startLocation = tableUtils.getCellLocation( firstCell );\n\t\tconst endLocation = tableUtils.getCellLocation( lastCell );\n\n\t\tconst startColumn = Math.min( startLocation.column, endLocation.column );\n\t\tconst endColumn = Math.max( startLocation.column, endLocation.column );\n\n\t\tconst rangesToSelect: Array<Range> = [];\n\n\t\tfor ( const cellInfo of new TableWalker( table, { startColumn, endColumn } ) ) {\n\t\t\trangesToSelect.push( model.createRangeOn( cellInfo.cell ) );\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( rangesToSelect );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-layout-post-fixer\n */\n\nimport type {\n\tElement,\n\tModel,\n\tWriter,\n\tDiffItem,\n\tDiffItemAttribute\n} from 'ckeditor5/src/engine.js';\n\nimport TableWalker from './../tablewalker.js';\nimport { createEmptyTableCell, updateNumericAttribute } from '../utils/common.js';\n\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of the table cells extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as a child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extend beyond their section.\n * 2. It will add empty table cells to the rows that are narrower than the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or a part of a table) to the editor from external sources.\n *\n * For example, see the following table which has a cell (FOO) with the rowspan attribute (2):\n *\n * ```xml\n * <table headingRows=\"1\">\n *   <tableRow>\n *     <tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *     <tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *   </tableRow>\n *   <tableRow>\n *     <tableCell><paragraph>BAZ</paragraph></tableCell>\n *     <tableCell><paragraph>XYZ</paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * It will be rendered in the view as:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * In the above example the table will be rendered as a table with two rows: one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would extend from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is the default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ in the content will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table row sizes (the number of columns).\n * The size of a table row is calculated by counting column spans of table cells, both horizontal (from the same row) and\n * vertical (from the rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header: it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and the second with colspan (2).\n * The table cell (FOO) does not extend beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n * ```xml\n * <table>\n *   <thead>\n *     <tr>\n *       <td rowspan=\"2\">FOO</td>\n *       <td colspan=\"2\">BAR</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>BAZ</td>\n *       <td>XYZ</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * ## Collaboration and undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without a deeper analysis of the nature of the change. As such, it might lead\n * to a structure which was not intended by the user. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which the editor content might not return to the original state.\n *\n * This will usually happen when one or more users change the size of the table.\n *\n * As an example see the table below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * and the user actions:\n *\n * 1. Both users have a table with two rows and two columns.\n * 2. User A adds a column at the end of the table. This will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table. This will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * The last row is shorter then others so the table post-fixer will add an empty row to the last row:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by A)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by the post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * Unfortunately undo does not know the nature of the changes and depending on which user applies the post-fixer changes, undoing them\n * might lead to a broken table. If User B undoes inserting the column to the table, the undo engine will undo only the operations of\n * inserting empty cells to rows from the initial table state (row 1 and 2) but the cell in the post-fixed row will remain:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n *\n * After undo, the table post-fixer will detect that two rows are shorter than others and will fix the table to:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>\n *       <td>11</td>\n *       <td>12</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>21</td>\n *       <td>22</td>\n *       <td>(empty, inserted by a post-fixer after undo)</td>\n *     </tr>\n *     <tr>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by B)</td>\n *       <td>(empty, inserted by a post-fixer)</td>\n *     </tr>\n *   </tbody>\n * </table>\n * ```\n */\nexport default function injectTableLayoutPostFixer( model: Model ): void {\n\tmodel.document.registerPostFixer( writer => tableLayoutPostFixer( writer, model ) );\n}\n\n/**\n * The table layout post-fixer.\n */\nfunction tableLayoutPostFixer( writer: Writer, model: Model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\t// Do not analyze the same table more then once - may happen for multiple changes in the same table.\n\tconst analyzedTables = new Set();\n\n\tfor ( const entry of changes ) {\n\t\tlet table: Element | null = null;\n\n\t\tif ( entry.type == 'insert' && entry.name == 'table' ) {\n\t\t\ttable = entry.position.nodeAfter as Element;\n\t\t}\n\n\t\t// Fix table on adding/removing table cells and rows.\n\t\tif ( ( entry.type == 'insert' || entry.type == 'remove' ) && ( entry.name == 'tableRow' || entry.name == 'tableCell' ) ) {\n\t\t\ttable = entry.position.findAncestor( 'table' );\n\t\t}\n\n\t\t// Fix table on any table's attribute change - including attributes of table cells.\n\t\tif ( isTableAttributeEntry( entry ) ) {\n\t\t\ttable = entry.range.start.findAncestor( 'table' );\n\t\t}\n\n\t\tif ( table && !analyzedTables.has( table ) ) {\n\t\t\t// Step 1: correct rowspans of table cells if necessary.\n\t\t\t// The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n\t\t\twasFixed = fixTableCellsRowspan( table, writer ) || wasFixed;\n\t\t\t// Step 2: fix table rows sizes.\n\t\t\twasFixed = fixTableRowsSizes( table, writer ) || wasFixed;\n\n\t\t\tanalyzedTables.add( table );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Fixes the invalid value of the `rowspan` attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n *\n * @returns Returns `true` if the table was fixed.\n */\nfunction fixTableCellsRowspan( table: Element, writer: Writer ) {\n\tlet wasFixed = false;\n\n\tconst cellsToTrim = findCellsToTrim( table );\n\n\tif ( cellsToTrim.length ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( `Post-fixing table: trimming cells row-spans (${ cellsToTrim.length }).` );\n\n\t\twasFixed = true;\n\n\t\tfor ( const data of cellsToTrim ) {\n\t\t\tupdateNumericAttribute( 'rowspan', data.rowspan, data.cell, writer, 1 );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Makes all table rows in a table the same size.\n *\n * @returns Returns `true` if the table was fixed.\n */\nfunction fixTableRowsSizes( table: Element, writer: Writer ) {\n\tlet wasFixed = false;\n\n\tconst childrenLengths = getChildrenLengths( table );\n\tconst rowsToRemove = [];\n\n\t// Find empty rows.\n\tfor ( const [ rowIndex, size ] of childrenLengths.entries() ) {\n\t\t// Ignore all non-row models.\n\t\tif ( !size && table.getChild( rowIndex )!.is( 'element', 'tableRow' ) ) {\n\t\t\trowsToRemove.push( rowIndex );\n\t\t}\n\t}\n\n\t// Remove empty rows.\n\tif ( rowsToRemove.length ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( `Post-fixing table: remove empty rows (${ rowsToRemove.length }).` );\n\n\t\twasFixed = true;\n\n\t\tfor ( const rowIndex of rowsToRemove.reverse() ) {\n\t\t\twriter.remove( table.getChild( rowIndex )! );\n\t\t\tchildrenLengths.splice( rowIndex, 1 );\n\t\t}\n\t}\n\n\t// Filter out everything that's not a table row.\n\tconst rowsLengths = childrenLengths.filter( ( row, rowIndex ) => table.getChild( rowIndex )!.is( 'element', 'tableRow' ) );\n\n\t// Verify if all the rows have the same number of columns.\n\tconst tableSize = rowsLengths[ 0 ];\n\tconst isValid = rowsLengths.every( length => length === tableSize );\n\n\tif ( !isValid ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: adding missing cells.' );\n\n\t\t// Find the maximum number of columns.\n\t\tconst maxColumns = rowsLengths.reduce( ( prev, current ) => current > prev ? current : prev, 0 );\n\n\t\tfor ( const [ rowIndex, size ] of rowsLengths.entries() ) {\n\t\t\tconst columnsToInsert = maxColumns - size;\n\n\t\t\tif ( columnsToInsert ) {\n\t\t\t\tfor ( let i = 0; i < columnsToInsert; i++ ) {\n\t\t\t\t\tcreateEmptyTableCell( writer, writer.createPositionAt( table.getChild( rowIndex )!, 'end' ) );\n\t\t\t\t}\n\n\t\t\t\twasFixed = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Searches for table cells that extend beyond the table section to which they belong to. It will return an array of objects\n * that stores table cells to be trimmed and the correct value of the `rowspan` attribute to set.\n */\nfunction findCellsToTrim( table: Element ) {\n\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) as string || '0' );\n\tconst maxRows = Array.from( table.getChildren() )\n\t\t.reduce( ( count, row ) => row.is( 'element', 'tableRow' ) ? count + 1 : count, 0 );\n\n\tconst cellsToTrim = [];\n\n\tfor ( const { row, cell, cellHeight } of new TableWalker( table ) ) {\n\t\t// Skip cells that do not expand over its row.\n\t\tif ( cellHeight < 2 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst isInHeader = row < headingRows;\n\n\t\t// Row limit is either end of header section or whole table as table body is after the header.\n\t\tconst rowLimit = isInHeader ? headingRows : maxRows;\n\n\t\t// If table cell expands over its limit reduce it height to proper value.\n\t\tif ( row + cellHeight > rowLimit ) {\n\t\t\tconst newRowspan = rowLimit - row;\n\n\t\t\tcellsToTrim.push( { cell, rowspan: newRowspan } );\n\t\t}\n\t}\n\n\treturn cellsToTrim;\n}\n\n/**\n * Returns an array with lengths of rows assigned to the corresponding row index.\n */\nfunction getChildrenLengths( table: Element ) {\n\t// TableWalker will not provide items for the empty rows, we need to pre-fill this array.\n\tconst lengths = new Array( table.childCount ).fill( 0 );\n\n\tfor ( const { rowIndex } of new TableWalker( table, { includeAllSlots: true } ) ) {\n\t\tlengths[ rowIndex ]++;\n\t}\n\n\treturn lengths;\n}\n\n/**\n * Checks if the differ entry for an attribute change is one of the table's attributes.\n */\nfunction isTableAttributeEntry( entry: DiffItem ): entry is DiffItemAttribute {\n\tif ( entry.type !== 'attribute' ) {\n\t\treturn false;\n\t}\n\n\tconst key = entry.attributeKey;\n\n\treturn key === 'headingRows' || key === 'colspan' || key === 'rowspan';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-cell-paragraph-post-fixer\n */\n\nimport type { Model, Writer, Element, DiffItemInsert, DiffItemRemove } from 'ckeditor5/src/engine.js';\n\n/**\n * Injects a table cell post-fixer into the model which inserts a `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have an empty `paragraph` as a child.\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell></tableCell>\n *   </tableRow>\n * </table>\n * ```\n *\n * Will be fixed to:\n *\n * ```xml\n * <table>\n *   <tableRow>\n *      <tableCell><paragraph></paragraph></tableCell>\n *   </tableRow>\n * </table>\n * ```\n */\nexport default function injectTableCellParagraphPostFixer( model: Model ): void {\n\tmodel.document.registerPostFixer( writer => tableCellContentsPostFixer( writer, model ) );\n}\n\n/**\n * The table cell contents post-fixer.\n */\nfunction tableCellContentsPostFixer( writer: Writer, model: Model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'table' ) {\n\t\t\twasFixed = fixTable( entry.position.nodeAfter as Element, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableRow' ) {\n\t\t\twasFixed = fixTableRow( entry.position.nodeAfter as Element, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( entry.type == 'insert' && entry.name == 'tableCell' ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.nodeAfter as Element, writer ) || wasFixed;\n\t\t}\n\n\t\tif ( ( entry.type == 'remove' || entry.type == 'insert' ) && checkTableCellChange( entry ) ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.parent as Element, writer ) || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Fixes all table cells in a table.\n */\nfunction fixTable( table: Element, writer: Writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const row of table.getChildren() ) {\n\t\tif ( row.is( 'element', 'tableRow' ) ) {\n\t\t\twasFixed = fixTableRow( row, writer ) || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Fixes all table cells in a table row.\n */\nfunction fixTableRow( tableRow: Element, writer: Writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const tableCell of tableRow.getChildren() as IterableIterator<Element> ) {\n\t\twasFixed = fixTableCellContent( tableCell, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n/**\n * Fixes all table cell content by:\n * - Adding a paragraph to a table cell without any child.\n * - Wrapping direct $text in a `<paragraph>`.\n */\nfunction fixTableCellContent( tableCell: Element, writer: Writer ) {\n\t// Insert paragraph to an empty table cell.\n\tif ( tableCell.childCount == 0 ) {\n\t\t// @if CK_DEBUG_TABLE // console.log( 'Post-fixing table: insert paragraph in empty cell.' );\n\n\t\twriter.insertElement( 'paragraph', tableCell );\n\n\t\treturn true;\n\t}\n\n\t// Check table cell children for directly placed text nodes.\n\t// Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n\tconst textNodes = Array.from( tableCell.getChildren() ).filter( child => child.is( '$text' ) );\n\n\t// @if CK_DEBUG_TABLE // textNodes.length && console.log( 'Post-fixing table: wrap cell content with paragraph.' );\n\n\tfor ( const child of textNodes ) {\n\t\twriter.wrap( writer.createRangeOn( child ), 'paragraph' );\n\t}\n\n\t// Return true when there were text nodes to fix.\n\treturn !!textNodes.length;\n}\n\n/**\n * Checks if a differ change should fix the table cell. This happens on:\n * - Removing content from the table cell (i.e. `tableCell` can be left empty).\n * - Adding a text node directly into a table cell.\n */\nfunction checkTableCellChange( entry: DiffItemInsert | DiffItemRemove ) {\n\tif ( !entry.position.parent.is( 'element', 'tableCell' ) ) {\n\t\treturn false;\n\t}\n\n\treturn entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-headings-refresh-handler\n */\n\nimport type {\n\tEditingController,\n\tElement,\n\tModel\n} from 'ckeditor5/src/engine.js';\n\nimport TableWalker from '../tablewalker.js';\n\n/**\n * A table headings refresh handler which marks the table cells or rows in the differ to have it re-rendered\n * if the headings attribute changed.\n *\n * Table heading rows and heading columns are represented in the model by a `headingRows` and `headingColumns` attributes.\n *\n * When table headings attribute changes, all the cells/rows are marked to re-render to change between `<td>` and `<th>`.\n */\nexport default function tableHeadingsRefreshHandler( model: Model, editing: EditingController ): void {\n\tconst differ = model.document.differ;\n\n\tfor ( const change of differ.getChanges() ) {\n\t\tlet table;\n\t\tlet isRowChange = false;\n\n\t\tif ( change.type == 'attribute' ) {\n\t\t\tconst element = change.range.start.nodeAfter;\n\n\t\t\tif ( !element || !element.is( 'element', 'table' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( change.attributeKey != 'headingRows' && change.attributeKey != 'headingColumns' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttable = element;\n\t\t\tisRowChange = change.attributeKey == 'headingRows';\n\t\t} else if ( change.name == 'tableRow' || change.name == 'tableCell' ) {\n\t\t\ttable = change.position.findAncestor( 'table' );\n\t\t\tisRowChange = change.name == 'tableRow';\n\t\t}\n\n\t\tif ( !table ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) as number || 0;\n\n\t\tconst tableWalker = new TableWalker( table );\n\n\t\tfor ( const tableSlot of tableWalker ) {\n\t\t\tconst isHeading = tableSlot.row < headingRows || tableSlot.column < headingColumns;\n\t\t\tconst expectedElementName = isHeading ? 'th' : 'td';\n\n\t\t\tconst viewElement = editing.mapper.toViewElement( tableSlot.cell );\n\n\t\t\tif ( viewElement && viewElement.is( 'element' ) && viewElement.name != expectedElementName ) {\n\t\t\t\tediting.reconvertItem( ( isRowChange ? tableSlot.cell.parent : tableSlot.cell ) as Element );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-cell-refresh-handler\n */\n\nimport type {\n\tEditingController,\n\tElement,\n\tMapper,\n\tModel\n} from 'ckeditor5/src/engine.js';\n\nimport { isSingleParagraphWithoutAttributes } from './downcast.js';\n\n/**\n * A table cell refresh handler which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it does not have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added, we need to ensure that the first `paragraph` is\n * re-rendered so it changes from `<span>` to `<p>`. The easiest way to do it is to re-render the entire table cell.\n */\nexport default function tableCellRefreshHandler( model: Model, editing: EditingController ): void {\n\tconst differ = model.document.differ;\n\n\t// Stores cells to be refreshed, so the table cell will be refreshed once for multiple changes.\n\tconst cellsToCheck = new Set();\n\n\tfor ( const change of differ.getChanges() ) {\n\t\tconst parent = change.type == 'attribute' ? change.range.start.parent : change.position.parent;\n\n\t\tif ( parent.is( 'element', 'tableCell' ) ) {\n\t\t\tcellsToCheck.add( parent );\n\t\t}\n\t}\n\n\tfor ( const tableCell of cellsToCheck.values() as Iterable<Element> ) {\n\t\tconst paragraphsToRefresh = Array.from( tableCell.getChildren() )\n\t\t\t.filter( child => shouldRefresh( child as Element, editing.mapper ) );\n\n\t\tfor ( const paragraph of paragraphsToRefresh ) {\n\t\t\tediting.reconvertItem( paragraph );\n\t\t}\n\t}\n}\n\n/**\n * Check if given model element needs refreshing.\n */\nfunction shouldRefresh( child: Element, mapper: Mapper ) {\n\tif ( !child.is( 'element', 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\tconst viewElement = mapper.toViewElement( child );\n\n\tif ( !viewElement ) {\n\t\treturn false;\n\t}\n\n\treturn isSingleParagraphWithoutAttributes( child ) !== viewElement.is( 'element', 'span' );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport type { PositionOffset, ViewElement, SlotFilter } from 'ckeditor5/src/engine.js';\n\nimport upcastTable, { ensureParagraphInTableCell, skipEmptyTableRow, upcastTableFigure } from './converters/upcasttable.js';\nimport { convertParagraphInTableCell, downcastCell, downcastRow, downcastTable } from './converters/downcast.js';\n\nimport InsertTableCommand from './commands/inserttablecommand.js';\nimport InsertRowCommand from './commands/insertrowcommand.js';\nimport InsertColumnCommand from './commands/insertcolumncommand.js';\nimport SplitCellCommand from './commands/splitcellcommand.js';\nimport MergeCellCommand from './commands/mergecellcommand.js';\nimport RemoveRowCommand from './commands/removerowcommand.js';\nimport RemoveColumnCommand from './commands/removecolumncommand.js';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand.js';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand.js';\nimport MergeCellsCommand from './commands/mergecellscommand.js';\nimport SelectRowCommand from './commands/selectrowcommand.js';\nimport SelectColumnCommand from './commands/selectcolumncommand.js';\nimport TableUtils from '../src/tableutils.js';\n\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer.js';\nimport injectTableCellParagraphPostFixer from './converters/table-cell-paragraph-post-fixer.js';\n\nimport tableHeadingsRefreshHandler from './converters/table-headings-refresh-handler.js';\nimport tableCellRefreshHandler from './converters/table-cell-refresh-handler.js';\n\nimport '../theme/tableediting.css';\n\n/**\n * The table editing feature.\n */\nexport default class TableEditing extends Plugin {\n\t/**\n\t * Handlers for creating additional slots in the table.\n\t */\n\tprivate _additionalSlots: Array<AdditionalSlot>;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._additionalSlots = [];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst tableUtils = editor.plugins.get( TableUtils );\n\n\t\tschema.register( 'table', {\n\t\t\tinheritAllFrom: '$blockObject',\n\t\t\tallowAttributes: [ 'headingRows', 'headingColumns' ]\n\t\t} );\n\n\t\tschema.register( 'tableRow', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.register( 'tableCell', {\n\t\t\tallowContentOf: '$container',\n\t\t\tallowIn: 'tableRow',\n\t\t\tallowAttributes: [ 'colspan', 'rowspan' ],\n\t\t\tisLimit: true,\n\t\t\tisSelectable: true\n\t\t} );\n\n\t\t// Figure conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTableFigure() );\n\n\t\t// Table conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTable() );\n\n\t\tconversion.for( 'editingDowncast' ).elementToStructure( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tattributes: [ 'headingRows' ]\n\t\t\t},\n\t\t\tview: downcastTable( tableUtils, {\n\t\t\t\tasWidget: true,\n\t\t\t\tadditionalSlots: this._additionalSlots\n\t\t\t} )\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToStructure( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tattributes: [ 'headingRows' ]\n\t\t\t},\n\t\t\tview: downcastTable( tableUtils, {\n\t\t\t\tadditionalSlots: this._additionalSlots\n\t\t\t} )\n\t\t} );\n\n\t\t// Table row conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableRow', view: 'tr' } );\n\t\tconversion.for( 'upcast' ).add( skipEmptyTableRow() );\n\n\t\tconversion.for( 'downcast' ).elementToElement( {\n\t\t\tmodel: 'tableRow',\n\t\t\tview: downcastRow()\n\t\t} );\n\n\t\t// Table cell conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableCell', view: 'td' } );\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableCell', view: 'th' } );\n\t\tconversion.for( 'upcast' ).add( ensureParagraphInTableCell( 'td' ) );\n\t\tconversion.for( 'upcast' ).add( ensureParagraphInTableCell( 'th' ) );\n\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'tableCell',\n\t\t\tview: downcastCell( { asWidget: true } )\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'tableCell',\n\t\t\tview: downcastCell()\n\t\t} );\n\n\t\t// Duplicates code - needed to properly refresh paragraph inside a table cell.\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'paragraph',\n\t\t\tview: convertParagraphInTableCell( { asWidget: true } ),\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'paragraph',\n\t\t\tview: convertParagraphInTableCell(),\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\t\t// Table attributes conversion.\n\t\tconversion.for( 'downcast' ).attributeToAttribute( { model: 'colspan', view: 'colspan' } );\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: { key: 'colspan', value: upcastCellSpan( 'colspan' ) },\n\t\t\tview: 'colspan'\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToAttribute( { model: 'rowspan', view: 'rowspan' } );\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tmodel: { key: 'rowspan', value: upcastCellSpan( 'rowspan' ) },\n\t\t\tview: 'rowspan'\n\t\t} );\n\n\t\t// Define the config.\n\t\teditor.config.define( 'table.defaultHeadings.rows', 0 );\n\t\teditor.config.define( 'table.defaultHeadings.columns', 0 );\n\n\t\t// Define all the commands.\n\t\teditor.commands.add( 'insertTable', new InsertTableCommand( editor ) );\n\t\teditor.commands.add( 'insertTableRowAbove', new InsertRowCommand( editor, { order: 'above' } ) );\n\t\teditor.commands.add( 'insertTableRowBelow', new InsertRowCommand( editor, { order: 'below' } ) );\n\t\teditor.commands.add( 'insertTableColumnLeft', new InsertColumnCommand( editor, { order: 'left' } ) );\n\t\teditor.commands.add( 'insertTableColumnRight', new InsertColumnCommand( editor, { order: 'right' } ) );\n\n\t\teditor.commands.add( 'removeTableRow', new RemoveRowCommand( editor ) );\n\t\teditor.commands.add( 'removeTableColumn', new RemoveColumnCommand( editor ) );\n\n\t\teditor.commands.add( 'splitTableCellVertically', new SplitCellCommand( editor, { direction: 'vertically' } ) );\n\t\teditor.commands.add( 'splitTableCellHorizontally', new SplitCellCommand( editor, { direction: 'horizontally' } ) );\n\n\t\teditor.commands.add( 'mergeTableCells', new MergeCellsCommand( editor ) );\n\n\t\teditor.commands.add( 'mergeTableCellRight', new MergeCellCommand( editor, { direction: 'right' } ) );\n\t\teditor.commands.add( 'mergeTableCellLeft', new MergeCellCommand( editor, { direction: 'left' } ) );\n\t\teditor.commands.add( 'mergeTableCellDown', new MergeCellCommand( editor, { direction: 'down' } ) );\n\t\teditor.commands.add( 'mergeTableCellUp', new MergeCellCommand( editor, { direction: 'up' } ) );\n\n\t\teditor.commands.add( 'setTableColumnHeader', new SetHeaderColumnCommand( editor ) );\n\t\teditor.commands.add( 'setTableRowHeader', new SetHeaderRowCommand( editor ) );\n\n\t\teditor.commands.add( 'selectTableRow', new SelectRowCommand( editor ) );\n\t\teditor.commands.add( 'selectTableColumn', new SelectColumnCommand( editor ) );\n\n\t\tinjectTableLayoutPostFixer( model );\n\t\tinjectTableCellParagraphPostFixer( model );\n\n\t\tthis.listenTo( model.document, 'change:data', () => {\n\t\t\ttableHeadingsRefreshHandler( model, editor.editing );\n\t\t\ttableCellRefreshHandler( model, editor.editing );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers downcast handler for the additional table slot.\n\t */\n\tpublic registerAdditionalSlot( slotHandler: AdditionalSlot ): void {\n\t\tthis._additionalSlots.push( slotHandler );\n\t}\n}\n\n/**\n * Returns fixed colspan and rowspan attrbutes values.\n *\n * @param type colspan or rowspan.\n * @returns conversion value function.\n */\nfunction upcastCellSpan( type: string ) {\n\treturn ( cell: ViewElement ) => {\n\t\tconst span = parseInt( cell.getAttribute( type )! );\n\n\t\tif ( Number.isNaN( span ) || span <= 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn span;\n\t};\n}\n\n/**\n * By default, only the `tableRow` elements from the `table` model are downcast inside the `<table>` and\n * all other elements are pushed outside the table. This handler allows creating additional slots inside\n * the table for other elements.\n *\n * Take this model as an example:\n *\n * ```xml\n * <table>\n *   <tableRow>...</tableRow>\n *   <tableRow>...</tableRow>\n *   <tableColumnGroup>...</tableColumnGroup>\n * </table>\n * ```\n *\n * By default, downcasting result will be:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>...</tr>\n *     <tr>...</tr>\n *   </tbody>\n * </table>\n * <colgroup>...</colgroup>\n * ```\n *\n * To allow the `tableColumnGroup` element at the end of the table, use the following configuration:\n *\n * ```ts\n * const additionalSlot = {\n *   filter: element => element.is( 'element', 'tableColumnGroup' ),\n *   positionOffset: 'end'\n * }\n * ```\n *\n * Now, the downcast result will be:\n *\n * ```xml\n * <table>\n *   <tbody>\n *     <tr>...</tr>\n *     <tr>...</tr>\n *   </tbody>\n *   <colgroup>...</colgroup>\n * </table>\n * ```\n */\nexport interface AdditionalSlot {\n\n\t/**\n\t * Filter for elements that should be placed inside given slot.\n\t */\n\tfilter: SlotFilter;\n\n\t/**\n\t * Position of the slot within the table.\n\t */\n\tpositionOffset: PositionOffset;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/ui/inserttableview\n */\n\nimport { View, ButtonView, addKeyboardHandlingForGrid, type ViewCollection } from 'ckeditor5/src/ui.js';\n\nimport { KeystrokeHandler, FocusTracker, type Locale } from 'ckeditor5/src/utils.js';\n\nimport './../../theme/inserttable.css';\n\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n */\nexport default class InsertTableView extends View {\n\t/**\n\t * A collection of table size box items.\n\t */\n\tpublic readonly items: ViewCollection<ButtonView>;\n\n\t/**\n\t * Listen to `keydown` events fired in this view's main element.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler;\n\n\t/**\n\t * Tracks information about the DOM focus in the grid.\n\t */\n\tpublic readonly focusTracker: FocusTracker;\n\n\t/**\n\t * The currently selected number of rows of the new table.\n\t *\n\t * @observable\n\t */\n\tdeclare public rows: number;\n\n\t/**\n\t * The currently selected number of columns of the new table.\n\t *\n\t * @observable\n\t */\n\tdeclare public columns: number;\n\n\t/**\n\t * The label text displayed under the boxes.\n\t *\n\t * @observable\n\t */\n\tdeclare public label: string;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale: Locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tthis.items = this._createGridCollection();\n\t\tthis.keystrokes = new KeystrokeHandler();\n\t\tthis.focusTracker = new FocusTracker();\n\t\tthis.set( 'rows', 0 );\n\t\tthis.set( 'columns', 0 );\n\t\tthis.bind( 'label' ).to( this, 'columns', this, 'rows', ( columns, rows ) => `${ rows } × ${ columns }` );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck' ]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [ 'ck-insert-table-dropdown__grid' ]\n\t\t\t\t\t},\n\t\t\t\t\ton: {\n\t\t\t\t\t\t'mouseover@.ck-insert-table-dropdown-grid-box': bind.to( 'boxover' )\n\t\t\t\t\t},\n\t\t\t\t\tchildren: this.items\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-insert-table-dropdown__label'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'aria-hidden': true\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'label' )\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( () => {\n\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\n\t\t// #rows and #columns are set via changes to #focusTracker on mouse over.\n\t\tthis.on( 'boxover', ( evt, domEvt ) => {\n\t\t\tconst { row, column } = domEvt.target.dataset;\n\t\t\tthis.items.get( ( parseInt( row, 10 ) - 1 ) * 10 + ( parseInt( column, 10 ) - 1 ) )!.focus();\n\t\t} );\n\n\t\t// This allows the #rows and #columns to be updated when:\n\t\t// * the user navigates the grid using the keyboard,\n\t\t// * the user moves the mouse over grid items.\n\t\tthis.focusTracker.on( 'change:focusedElement', ( evt, name, focusedElement ) => {\n\t\t\tif ( !focusedElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { row, column } = focusedElement.dataset;\n\n\t\t\t// As row & column indexes are zero-based transform it to number of selected rows & columns.\n\t\t\tthis.set( {\n\t\t\t\trows: parseInt( row ),\n\t\t\t\tcolumns: parseInt( column )\n\t\t\t} );\n\t\t} );\n\n\t\tthis.on( 'change:columns', () => this._highlightGridBoxes() );\n\t\tthis.on( 'change:rows', () => this._highlightGridBoxes() );\n\t}\n\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\taddKeyboardHandlingForGrid( {\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tgridItems: this.items,\n\t\t\tnumberOfColumns: 10,\n\t\t\tuiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n\t\t} );\n\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element! );\n\t\t}\n\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * Resets the rows and columns selection.\n\t */\n\tpublic reset(): void {\n\t\tthis.set( {\n\t\t\trows: 1,\n\t\t\tcolumns: 1\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic focus(): void {\n\t\tthis.items.get( 0 )!.focus();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic focusLast(): void {\n\t\tthis.items.get( 0 )!.focus();\n\t}\n\n\t/**\n\t * Highlights grid boxes depending on rows and columns selected.\n\t */\n\tprivate _highlightGridBoxes() {\n\t\tconst rows = this.rows;\n\t\tconst columns = this.columns;\n\n\t\tthis.items.map( ( boxView, index ) => {\n\t\t\t// Translate box index to the row & column index.\n\t\t\tconst itemRow = Math.floor( index / 10 );\n\t\t\tconst itemColumn = index % 10;\n\n\t\t\t// Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n\t\t\tconst isOn = itemRow < rows && itemColumn < columns;\n\n\t\t\tboxView.set( 'isOn', isOn );\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a new Button for the grid.\n\t *\n\t * @param locale The locale instance.\n\t * @param row Row number.\n\t * @param column Column number.\n\t * @param label The grid button label.\n\t */\n\tprivate _createGridButton( locale: Locale, row: number, column: number, label: string ): ButtonView {\n\t\tconst button = new ButtonView( locale );\n\n\t\tbutton.set( {\n\t\t\tlabel,\n\t\t\tclass: 'ck-insert-table-dropdown-grid-box'\n\t\t} );\n\n\t\tbutton.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\t'data-row': row,\n\t\t\t\t'data-column': column\n\t\t\t}\n\t\t} );\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * @returns A view collection containing boxes to be placed in a table grid.\n\t */\n\tprivate _createGridCollection() {\n\t\tconst boxes = [];\n\n\t\t// Add grid boxes to table selection view.\n\t\tfor ( let index = 0; index < 100; index++ ) {\n\t\t\tconst row = Math.floor( index / 10 );\n\t\t\tconst column = index % 10;\n\t\t\tconst label = `${ row + 1 } × ${ column + 1 }`;\n\n\t\t\tboxes.push( this._createGridButton( this.locale!, row + 1, column + 1, label ) );\n\t\t}\n\n\t\treturn this.createCollection( boxes );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableui\n */\n\nimport { icons, Plugin, type Command, type Editor } from 'ckeditor5/src/core.js';\nimport {\n\taddListToDropdown,\n\tcreateDropdown,\n\tViewModel,\n\tSplitButtonView,\n\tSwitchButtonView,\n\ttype DropdownView,\n\ttype ListDropdownItemDefinition,\n\tMenuBarMenuView\n} from 'ckeditor5/src/ui.js';\nimport { Collection, type ObservableChangeEvent, type Locale } from 'ckeditor5/src/utils.js';\n\nimport InsertTableView from './ui/inserttableview.js';\n\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\nimport type InsertTableCommand from './commands/inserttablecommand.js';\nimport type MergeCellsCommand from './commands/mergecellscommand.js';\n\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'menuBar:insertTable'` menu bar menu,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` split button.\n *\n * The `'tableColumn'`, `'tableRow'` and `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n */\nexport default class TableUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = this.editor.t;\n\t\tconst contentLanguageDirection = editor.locale.contentLanguageDirection;\n\t\tconst isContentLtr = contentLanguageDirection === 'ltr';\n\n\t\teditor.ui.componentFactory.add( 'insertTable', locale => {\n\t\t\tconst command: InsertTableCommand = editor.commands.get( 'insertTable' )!;\n\t\t\tconst dropdownView = createDropdown( locale );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\t// Decorate dropdown's button.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\ticon: icons.table,\n\t\t\t\tlabel: t( 'Insert table' ),\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tlet insertTableView: InsertTableView;\n\n\t\t\tdropdownView.on( 'change:isOpen', () => {\n\t\t\t\tif ( insertTableView ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Prepare custom view for dropdown's panel.\n\t\t\t\tinsertTableView = new InsertTableView( locale );\n\t\t\t\tdropdownView.panelView.children.add( insertTableView );\n\n\t\t\t\tinsertTableView.delegate( 'execute' ).to( dropdownView );\n\n\t\t\t\tdropdownView.on( 'execute', () => {\n\t\t\t\t\teditor.execute( 'insertTable', { rows: insertTableView.rows, columns: insertTableView.columns } );\n\t\t\t\t\teditor.editing.view.focus();\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'menuBar:insertTable', locale => {\n\t\t\tconst command: InsertTableCommand = editor.commands.get( 'insertTable' )!;\n\t\t\tconst menuView = new MenuBarMenuView( locale );\n\t\t\tconst insertTableView = new InsertTableView( locale );\n\n\t\t\tinsertTableView.delegate( 'execute' ).to( menuView );\n\n\t\t\tmenuView.on<ObservableChangeEvent<boolean>>( 'change:isOpen', ( event, name, isOpen ) => {\n\t\t\t\tif ( !isOpen ) {\n\t\t\t\t\tinsertTableView.reset();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tinsertTableView.on( 'execute', () => {\n\t\t\t\teditor.execute( 'insertTable', { rows: insertTableView.rows, columns: insertTableView.columns } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\tmenuView.buttonView.set( {\n\t\t\t\tlabel: t( 'Table' ),\n\t\t\t\ticon: icons.table\n\t\t\t} );\n\n\t\t\tmenuView.panelView.children.add( insertTableView );\n\n\t\t\tmenuView.bind( 'isEnabled' ).to( command );\n\n\t\t\treturn menuView;\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'tableColumn', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'switchbutton',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'setTableColumnHeader',\n\t\t\t\t\t\tlabel: t( 'Header column' ),\n\t\t\t\t\t\tbindIsOn: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n\t\t\t\t\t\tlabel: t( 'Insert column left' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n\t\t\t\t\t\tlabel: t( 'Insert column right' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'removeTableColumn',\n\t\t\t\t\t\tlabel: t( 'Delete column' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'selectTableColumn',\n\t\t\t\t\t\tlabel: t( 'Select column' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] as Array<ListDropdownItemDefinition>;\n\n\t\t\treturn this._prepareDropdown( t( 'Column' ), tableColumnIcon, options, locale );\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'tableRow', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'switchbutton',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'setTableRowHeader',\n\t\t\t\t\t\tlabel: t( 'Header row' ),\n\t\t\t\t\t\tbindIsOn: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableRowAbove',\n\t\t\t\t\t\tlabel: t( 'Insert row above' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableRowBelow',\n\t\t\t\t\t\tlabel: t( 'Insert row below' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'removeTableRow',\n\t\t\t\t\t\tlabel: t( 'Delete row' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'selectTableRow',\n\t\t\t\t\t\tlabel: t( 'Select row' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] as Array<ListDropdownItemDefinition>;\n\n\t\t\treturn this._prepareDropdown( t( 'Row' ), tableRowIcon, options, locale );\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'mergeTableCells', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellUp',\n\t\t\t\t\t\tlabel: t( 'Merge cell up' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n\t\t\t\t\t\tlabel: t( 'Merge cell right' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellDown',\n\t\t\t\t\t\tlabel: t( 'Merge cell down' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n\t\t\t\t\t\tlabel: t( 'Merge cell left' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'splitTableCellVertically',\n\t\t\t\t\t\tlabel: t( 'Split cell vertically' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'splitTableCellHorizontally',\n\t\t\t\t\t\tlabel: t( 'Split cell horizontally' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] as Array<ListDropdownItemDefinition>;\n\n\t\t\treturn this._prepareMergeSplitButtonDropdown( t( 'Merge cells' ), tableMergeCellIcon, options, locale );\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a dropdown view from a set of options.\n\t *\n\t * @param label The dropdown button label.\n\t * @param icon An icon for the dropdown button.\n\t * @param options The list of options for the dropdown.\n\t */\n\tprivate _prepareDropdown( label: string, icon: string, options: Array<ListDropdownItemDefinition>, locale: Locale ) {\n\t\tconst editor = this.editor;\n\t\tconst dropdownView = createDropdown( locale );\n\t\tconst commands = this._fillDropdownWithListOptions( dropdownView, options );\n\n\t\t// Decorate dropdown's button.\n\t\tdropdownView.buttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\t// Make dropdown button disabled when all options are disabled.\n\t\tdropdownView.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => {\n\t\t\treturn areEnabled.some( isEnabled => isEnabled );\n\t\t} );\n\n\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\teditor.execute( ( evt.source as any ).commandName );\n\n\t\t\t// Toggling a switch button view should not move the focus to the editable.\n\t\t\tif ( !( evt.source instanceof SwitchButtonView ) ) {\n\t\t\t\teditor.editing.view.focus();\n\t\t\t}\n\t\t} );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Creates a dropdown view with a {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} for\n\t * merge (and split)–related commands.\n\t *\n\t * @param label The dropdown button label.\n\t * @param icon An icon for the dropdown button.\n\t * @param options The list of options for the dropdown.\n\t */\n\tprivate _prepareMergeSplitButtonDropdown( label: string, icon: string, options: Array<ListDropdownItemDefinition>, locale: Locale ) {\n\t\tconst editor = this.editor;\n\t\tconst dropdownView = createDropdown( locale, SplitButtonView );\n\t\tconst mergeCommandName = 'mergeTableCells';\n\n\t\t// Main command.\n\t\tconst mergeCommand: MergeCellsCommand = editor.commands.get( mergeCommandName )!;\n\n\t\t// Subcommands in the dropdown.\n\t\tconst commands = this._fillDropdownWithListOptions( dropdownView, options );\n\n\t\tdropdownView.buttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true,\n\t\t\tisEnabled: true\n\t\t} );\n\n\t\t// Make dropdown button disabled when all options are disabled together with the main command.\n\t\tdropdownView.bind( 'isEnabled' ).toMany( [ mergeCommand, ...commands ], 'isEnabled', ( ...areEnabled ) => {\n\t\t\treturn areEnabled.some( isEnabled => isEnabled );\n\t\t} );\n\n\t\t// Merge selected table cells when the main part of the split button is clicked.\n\t\tthis.listenTo( dropdownView.buttonView, 'execute', () => {\n\t\t\teditor.execute( mergeCommandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\t// Execute commands for events coming from the list in the dropdown panel.\n\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\teditor.execute( ( evt.source as any ).commandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * Injects a {@link module:ui/list/listview~ListView} into the passed dropdown with buttons\n\t * which execute editor commands as configured in passed options.\n\t *\n\t * @param options The list of options for the dropdown.\n\t * @returns Commands the list options are interacting with.\n\t */\n\tprivate _fillDropdownWithListOptions( dropdownView: DropdownView, options: Array<ListDropdownItemDefinition> ) {\n\t\tconst editor = this.editor;\n\t\tconst commands: Array<Command> = [];\n\t\tconst itemDefinitions = new Collection<ListDropdownItemDefinition>();\n\n\t\tfor ( const option of options ) {\n\t\t\taddListOption( option, editor, commands, itemDefinitions );\n\t\t}\n\n\t\taddListToDropdown( dropdownView, itemDefinitions );\n\n\t\treturn commands;\n\t}\n}\n\n/**\n * Adds an option to a list view.\n *\n * @param option A configuration option.\n * @param commands The list of commands to update.\n * @param itemDefinitions A collection of dropdown items to update with the given option.\n */\nfunction addListOption(\n\toption: ListDropdownItemDefinition,\n\teditor: Editor,\n\tcommands: Array<Command>,\n\titemDefinitions: Collection<ListDropdownItemDefinition>\n) {\n\tif ( option.type === 'button' || option.type === 'switchbutton' ) {\n\t\tconst model = option.model = new ViewModel( option.model );\n\t\tconst { commandName, bindIsOn } = option.model;\n\t\tconst command = editor.commands.get( commandName as string )!;\n\n\t\tcommands.push( command );\n\n\t\tmodel.set( { commandName } );\n\n\t\tmodel.bind( 'isEnabled' ).to( command );\n\n\t\tif ( bindIsOn ) {\n\t\t\tmodel.bind( 'isOn' ).to( command, 'value' );\n\t\t}\n\n\t\tmodel.set( {\n\t\t\twithText: true\n\t\t} );\n\t}\n\n\titemDefinitions.add( option );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableselection\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { type EventInfo, first } from 'ckeditor5/src/utils.js';\n\nimport type {\n\tElement,\n\tDocumentFragment,\n\tSelection,\n\tDowncastWriter,\n\tViewElement,\n\tModelDeleteContentEvent\n} from 'ckeditor5/src/engine.js';\n\nimport type {\n\tViewDocumentInsertTextEvent,\n\tInsertTextEventData\n} from 'ckeditor5/src/typing.js';\n\nimport TableWalker from './tablewalker.js';\nimport TableUtils from './tableutils.js';\n\nimport { cropTableToDimensions, adjustLastRowIndex, adjustLastColumnIndex } from './utils/structure.js';\n\nimport '../theme/tableselection.css';\n\n/**\n * This plugin enables the advanced table cells, rows and columns selection.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport default class TableSelection extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableSelection' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableUtils, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\n\t\tthis.listenTo<ModelDeleteContentEvent>(\n\t\t\tmodel,\n\t\t\t'deleteContent',\n\t\t\t( evt, args ) => this._handleDeleteContent( evt, args ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tthis.listenTo<ViewDocumentInsertTextEvent>(\n\t\t\tview.document,\n\t\t\t'insertText',\n\t\t\t( evt, data ) => this._handleInsertTextEvent( evt, data ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tthis._defineSelectionConverter();\n\t\tthis._enablePluginDisabling(); // sic!\n\t}\n\n\t/**\n\t * Returns the currently selected table cells or `null` if it is not a table cells selection.\n\t */\n\tpublic getSelectedTableCells(): Array<Element> | null {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst selectedCells = tableUtils.getSelectedTableCells( selection );\n\n\t\tif ( selectedCells.length == 0 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// This should never happen, but let's know if it ever happens.\n\t\t// @if CK_DEBUG //\tif ( selectedCells.length != selection.rangeCount ) {\n\t\t// @if CK_DEBUG //\t\tconsole.warn( 'Mixed selection warning. The selection contains table cells and some other ranges.' );\n\t\t// @if CK_DEBUG //\t}\n\n\t\treturn selectedCells;\n\t}\n\n\t/**\n\t * Returns the selected table fragment as a document fragment.\n\t */\n\tpublic getSelectionAsFragment(): DocumentFragment | null {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst selectedCells = this.getSelectedTableCells();\n\n\t\tif ( !selectedCells ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.editor.model.change( writer => {\n\t\t\tconst documentFragment = writer.createDocumentFragment();\n\n\t\t\tconst { first: firstColumn, last: lastColumn } = tableUtils.getColumnIndexes( selectedCells );\n\t\t\tconst { first: firstRow, last: lastRow } = tableUtils.getRowIndexes( selectedCells );\n\n\t\t\tconst sourceTable = selectedCells[ 0 ].findAncestor( 'table' )!;\n\n\t\t\tlet adjustedLastRow = lastRow;\n\t\t\tlet adjustedLastColumn = lastColumn;\n\n\t\t\t// If the selection is rectangular there could be a case of all cells in the last row/column spanned over\n\t\t\t// next row/column so the real lastRow/lastColumn should be updated.\n\t\t\tif ( tableUtils.isSelectionRectangular( selectedCells ) ) {\n\t\t\t\tconst dimensions = {\n\t\t\t\t\tfirstColumn,\n\t\t\t\t\tlastColumn,\n\t\t\t\t\tfirstRow,\n\t\t\t\t\tlastRow\n\t\t\t\t};\n\n\t\t\t\tadjustedLastRow = adjustLastRowIndex( sourceTable, dimensions );\n\t\t\t\tadjustedLastColumn = adjustLastColumnIndex( sourceTable, dimensions );\n\t\t\t}\n\n\t\t\tconst cropDimensions = {\n\t\t\t\tstartRow: firstRow,\n\t\t\t\tstartColumn: firstColumn,\n\t\t\t\tendRow: adjustedLastRow,\n\t\t\t\tendColumn: adjustedLastColumn\n\t\t\t};\n\n\t\t\tconst table = cropTableToDimensions( sourceTable, cropDimensions, writer );\n\t\t\twriter.insert( table, documentFragment, 0 );\n\n\t\t\treturn documentFragment;\n\t\t} );\n\t}\n\n\t/**\n\t * Sets the model selection based on given anchor and target cells (can be the same cell).\n\t * Takes care of setting the backward flag.\n\t *\n\t * ```ts\n\t * const modelRoot = editor.model.document.getRoot();\n\t * const firstCell = modelRoot.getNodeByPath( [ 0, 0, 0 ] );\n\t * const lastCell = modelRoot.getNodeByPath( [ 0, 0, 1 ] );\n\t *\n\t * const tableSelection = editor.plugins.get( 'TableSelection' );\n\t * tableSelection.setCellSelection( firstCell, lastCell );\n\t * ```\n\t */\n\tpublic setCellSelection( anchorCell: Element, targetCell: Element ): void {\n\t\tconst cellsToSelect = this._getCellsToSelect( anchorCell, targetCell );\n\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection(\n\t\t\t\tcellsToSelect.cells.map( cell => writer.createRangeOn( cell ) ),\n\t\t\t\t{ backward: cellsToSelect.backward }\n\t\t\t);\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the focus cell from the current selection.\n\t */\n\tpublic getFocusCell(): Element | null {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst focusCellRange = [ ...selection.getRanges() ].pop()!;\n\t\tconst element = focusCellRange.getContainedElement();\n\n\t\tif ( element && element.is( 'element', 'tableCell' ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the anchor cell from the current selection.\n\t */\n\tpublic getAnchorCell(): Element | null {\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst anchorCellRange = first( selection.getRanges() )!;\n\t\tconst element = anchorCellRange.getContainedElement();\n\n\t\tif ( element && element.is( 'element', 'tableCell' ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Defines a selection converter which marks the selected cells with a specific class.\n\t *\n\t * The real DOM selection is put in the last cell. Since the order of ranges is dependent on whether the\n\t * selection is backward or not, the last cell will usually be close to the \"focus\" end of the selection\n\t * (a selection has anchor and focus).\n\t *\n\t * The real DOM selection is then hidden with CSS.\n\t */\n\tprivate _defineSelectionConverter() {\n\t\tconst editor = this.editor;\n\t\tconst highlighted: Set<ViewElement> = new Set();\n\n\t\teditor.conversion.for( 'editingDowncast' ).add( dispatcher => dispatcher.on( 'selection', ( evt, data, conversionApi ) => {\n\t\t\tconst viewWriter = conversionApi.writer;\n\n\t\t\tclearHighlightedTableCells( viewWriter );\n\n\t\t\tconst selectedCells = this.getSelectedTableCells();\n\n\t\t\tif ( !selectedCells ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor ( const tableCell of selectedCells ) {\n\t\t\t\tconst viewElement = conversionApi.mapper.toViewElement( tableCell )!;\n\n\t\t\t\tviewWriter.addClass( 'ck-editor__editable_selected', viewElement );\n\t\t\t\thighlighted.add( viewElement );\n\t\t\t}\n\n\t\t\tconst lastViewCell = conversionApi.mapper.toViewElement( selectedCells[ selectedCells.length - 1 ] );\n\t\t\tviewWriter.setSelection( lastViewCell, 0 );\n\t\t}, { priority: 'lowest' } ) );\n\n\t\tfunction clearHighlightedTableCells( viewWriter: DowncastWriter ) {\n\t\t\tfor ( const previouslyHighlighted of highlighted ) {\n\t\t\t\tviewWriter.removeClass( 'ck-editor__editable_selected', previouslyHighlighted );\n\t\t\t}\n\n\t\t\thighlighted.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Creates a listener that reacts to changes in {@link #isEnabled} and, if the plugin was disabled,\n\t * it collapses the multi-cell selection to a regular selection placed inside a table cell.\n\t *\n\t * This listener helps features that disable the table selection plugin bring the selection\n\t * to a clear state they can work with (for instance, because they don't support multiple cell selection).\n\t */\n\tprivate _enablePluginDisabling() {\n\t\tconst editor = this.editor;\n\n\t\tthis.on( 'change:isEnabled', () => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tconst selectedCells = this.getSelectedTableCells();\n\n\t\t\t\tif ( !selectedCells ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\tconst position = writer.createPositionAt( selectedCells[ 0 ], 0 );\n\t\t\t\t\tconst range = editor.model.schema.getNearestSelectionRange( position );\n\n\t\t\t\t\twriter.setSelection( range );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Overrides the default `model.deleteContent()` behavior over a selected table fragment.\n\t *\n\t * @param args Delete content method arguments.\n\t */\n\tprivate _handleDeleteContent( event: EventInfo, args: Array<unknown> ) {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst selection = args[ 0 ] as Selection;\n\t\tconst options = args[ 1 ] as { direction?: string };\n\t\tconst model = this.editor.model;\n\t\tconst isBackward = !options || options.direction == 'backward';\n\t\tconst selectedTableCells = tableUtils.getSelectedTableCells( selection );\n\n\t\tif ( !selectedTableCells.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tevent.stop();\n\n\t\tmodel.change( writer => {\n\t\t\tconst tableCellToSelect = selectedTableCells[ isBackward ? selectedTableCells.length - 1 : 0 ];\n\n\t\t\tmodel.change( writer => {\n\t\t\t\tfor ( const tableCell of selectedTableCells ) {\n\t\t\t\t\tmodel.deleteContent( writer.createSelection( tableCell, 'in' ) );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tconst rangeToSelect = model.schema.getNearestSelectionRange( writer.createPositionAt( tableCellToSelect, 0 ) );\n\n\t\t\t// Note: we ignore the case where rangeToSelect may be null because deleteContent() will always (unless someone broke it)\n\t\t\t// create an empty paragraph to accommodate the selection.\n\n\t\t\tif ( selection.is( 'documentSelection' ) ) {\n\t\t\t\twriter.setSelection( rangeToSelect );\n\t\t\t} else {\n\t\t\t\tselection.setTo( rangeToSelect );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * This handler makes it possible to remove the content of all selected cells by starting to type.\n\t * If you take a look at {@link #_defineSelectionConverter} you will find out that despite the multi-cell selection being set\n\t * in the model, the view selection is collapsed in the last cell (because most browsers are unable to render multi-cell selections;\n\t * yes, it's a hack).\n\t *\n\t * When multiple cells are selected in the model and the user starts to type, the\n\t * {@link module:engine/view/document~Document#event:insertText} event carries information provided by the\n\t * beforeinput DOM  event, that in turn only knows about this collapsed DOM selection in the last cell.\n\t *\n\t * As a result, the selected cells have no chance to be cleaned up. To fix this, this listener intercepts\n\t * the event and injects the custom view selection in the data that translates correctly to the actual state\n\t * of the multi-cell selection in the model.\n\t *\n\t * @param data Insert text event data.\n\t */\n\tprivate _handleInsertTextEvent( evt: EventInfo, data: InsertTextEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst selectedCells = this.getSelectedTableCells();\n\n\t\tif ( !selectedCells ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst view = editor.editing.view;\n\t\tconst mapper = editor.editing.mapper;\n\t\tconst viewRanges = selectedCells.map( tableCell => view.createRangeOn( mapper.toViewElement( tableCell )! ) );\n\n\t\tdata.selection = view.createSelection( viewRanges );\n\t}\n\n\t/**\n\t * Returns an array of table cells that should be selected based on the\n\t * given anchor cell and target (focus) cell.\n\t *\n\t * The cells are returned in a reverse direction if the selection is backward.\n\t */\n\tprivate _getCellsToSelect( anchorCell: Element, targetCell: Element ) {\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst startLocation = tableUtils.getCellLocation( anchorCell );\n\t\tconst endLocation = tableUtils.getCellLocation( targetCell );\n\n\t\tconst startRow = Math.min( startLocation.row, endLocation.row );\n\t\tconst endRow = Math.max( startLocation.row, endLocation.row );\n\n\t\tconst startColumn = Math.min( startLocation.column, endLocation.column );\n\t\tconst endColumn = Math.max( startLocation.column, endLocation.column );\n\n\t\t// 2-dimensional array of the selected cells to ease flipping the order of cells for backward selections.\n\t\tconst selectionMap: Array<Array<Element>> = new Array( endRow - startRow + 1 ).fill( null ).map( () => [] );\n\n\t\tconst walkerOptions = {\n\t\t\tstartRow,\n\t\t\tendRow,\n\t\t\tstartColumn,\n\t\t\tendColumn\n\t\t};\n\n\t\tfor ( const { row, cell } of new TableWalker( anchorCell.findAncestor( 'table' )!, walkerOptions ) ) {\n\t\t\tselectionMap[ row - startRow ].push( cell );\n\t\t}\n\n\t\tconst flipVertically = endLocation.row < startLocation.row;\n\t\tconst flipHorizontally = endLocation.column < startLocation.column;\n\n\t\tif ( flipVertically ) {\n\t\t\tselectionMap.reverse();\n\t\t}\n\n\t\tif ( flipHorizontally ) {\n\t\t\tselectionMap.forEach( row => row.reverse() );\n\t\t}\n\n\t\treturn {\n\t\t\tcells: selectionMap.flat(),\n\t\t\tbackward: flipVertically || flipHorizontally\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableclipboard\n */\n\nimport type { EventInfo } from 'ckeditor5/src/utils.js';\n\nimport {\n\tClipboardPipeline,\n\tClipboardMarkersUtils,\n\ttype ClipboardEventData,\n\ttype ViewDocumentCopyEvent,\n\ttype ViewDocumentCutEvent,\n\ttype ViewDocumentClipboardOutputEvent\n} from 'ckeditor5/src/clipboard.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport type {\n\tDocumentFragment,\n\tDocumentSelection,\n\tDomEventData,\n\tElement,\n\tItem,\n\tModel,\n\tModelInsertContentEvent,\n\tPosition,\n\tSelection,\n\tWriter\n} from 'ckeditor5/src/engine.js';\n\nimport TableSelection from './tableselection.js';\nimport TableWalker, { type TableSlot } from './tablewalker.js';\nimport TableUtils from './tableutils.js';\nimport {\n\tcropTableToDimensions,\n\tgetHorizontallyOverlappingCells,\n\tgetVerticallyOverlappingCells,\n\tremoveEmptyRowsColumns,\n\tsplitHorizontally,\n\tsplitVertically,\n\ttrimTableCellIfNeeded,\n\tadjustLastRowIndex,\n\tadjustLastColumnIndex\n} from './utils/structure.js';\n\n/**\n * This plugin adds support for copying/cutting/pasting fragments of tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport default class TableClipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableClipboard' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ClipboardMarkersUtils, ClipboardPipeline, TableSelection, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tthis.listenTo<ViewDocumentCopyEvent>( viewDocument, 'copy', ( evt, data ) => this._onCopyCut( evt, data ) );\n\t\tthis.listenTo<ViewDocumentCutEvent>( viewDocument, 'cut', ( evt, data ) => this._onCopyCut( evt, data ) );\n\t\tthis.listenTo<ModelInsertContentEvent>(\n\t\t\teditor.model,\n\t\t\t'insertContent',\n\t\t\t( evt, [ content, selectable ] ) => this._onInsertContent( evt, content, selectable ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\tthis.decorate( '_replaceTableSlotCell' );\n\t}\n\n\t/**\n\t * Copies table content to a clipboard on \"copy\" & \"cut\" events.\n\t *\n\t * @param evt An object containing information about the handled event.\n\t * @param data Clipboard event data.\n\t */\n\tprivate _onCopyCut( evt: EventInfo<'copy' | 'cut'>, data: DomEventData<ClipboardEvent> & ClipboardEventData ) {\n\t\tconst view = this.editor.editing.view;\n\t\tconst tableSelection = this.editor.plugins.get( TableSelection );\n\t\tconst clipboardMarkersUtils = this.editor.plugins.get( ClipboardMarkersUtils );\n\n\t\tif ( !tableSelection.getSelectedTableCells() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( evt.name == 'cut' && !this.editor.model.canEditAt( this.editor.model.document.selection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdata.preventDefault();\n\t\tevt.stop();\n\n\t\tthis.editor.model.enqueueChange( { isUndoable: evt.name === 'cut' }, () => {\n\t\t\tconst documentFragment = clipboardMarkersUtils._copySelectedFragmentWithMarkers(\n\t\t\t\tevt.name,\n\t\t\t\tthis.editor.model.document.selection,\n\t\t\t\t() => tableSelection.getSelectionAsFragment()!\n\t\t\t);\n\n\t\t\tview.document.fire<ViewDocumentClipboardOutputEvent>( 'clipboardOutput', {\n\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\tcontent: this.editor.data.toView( documentFragment ),\n\t\t\t\tmethod: evt.name\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Overrides default {@link module:engine/model/model~Model#insertContent `model.insertContent()`} method to handle pasting table inside\n\t * selected table fragment.\n\t *\n\t * Depending on selected table fragment:\n\t * - If a selected table fragment is smaller than paste table it will crop pasted table to match dimensions.\n\t * - If dimensions are equal it will replace selected table fragment with a pasted table contents.\n\t *\n\t * @param content The content to insert.\n\t * @param selectable The selection into which the content should be inserted.\n\t * If not provided the current model document selection will be used.\n\t */\n\tprivate _onInsertContent( evt: EventInfo, content: DocumentFragment | Item, selectable: Selection | DocumentSelection | undefined ) {\n\t\tif ( selectable && !selectable.is( 'documentSelection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst clipboardMarkersUtils = this.editor.plugins.get( ClipboardMarkersUtils );\n\n\t\t// We might need to crop table before inserting so reference might change.\n\t\tconst pastedTable = this.getTableIfOnlyTableInContent( content, model )!;\n\n\t\tif ( !pastedTable ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectedTableCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\n\t\tif ( !selectedTableCells.length ) {\n\t\t\tremoveEmptyRowsColumns( pastedTable, tableUtils );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Override default model.insertContent() handling at this point.\n\t\tevt.stop();\n\n\t\tif ( content.is( 'documentFragment' ) ) {\n\t\t\tclipboardMarkersUtils._pasteMarkersIntoTransformedElement(\n\t\t\t\tcontent.markers,\n\t\t\t\twriter => this._replaceSelectedCells( pastedTable, selectedTableCells, writer )\n\t\t\t);\n\t\t} else {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tthis._replaceSelectedCells( pastedTable, selectedTableCells, writer );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts provided `selectedTableCells` into `pastedTable`.\n\t */\n\tprivate _replaceSelectedCells( pastedTable: Element, selectedTableCells: Array<Element>, writer: Writer ) {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\tconst pastedDimensions = {\n\t\t\twidth: tableUtils.getColumns( pastedTable ),\n\t\t\theight: tableUtils.getRows( pastedTable )\n\t\t};\n\n\t\t// Prepare the table for pasting.\n\t\tconst selection = prepareTableForPasting( selectedTableCells, pastedDimensions, writer, tableUtils );\n\n\t\t// Beyond this point we operate on a fixed content table with rectangular selection and proper last row/column values.\n\n\t\tconst selectionHeight = selection.lastRow - selection.firstRow + 1;\n\t\tconst selectionWidth = selection.lastColumn - selection.firstColumn + 1;\n\n\t\t// Crop pasted table if:\n\t\t// - Pasted table dimensions exceeds selection area.\n\t\t// - Pasted table has broken layout (ie some cells sticks out by the table dimensions established by the first and last row).\n\t\t//\n\t\t// Note: The table dimensions are established by the width of the first row and the total number of rows.\n\t\t// It is possible to programmatically create a table that has rows which would have cells anchored beyond first row width but\n\t\t// such table will not be created by other editing solutions.\n\t\tconst cropDimensions = {\n\t\t\tstartRow: 0,\n\t\t\tstartColumn: 0,\n\t\t\tendRow: Math.min( selectionHeight, pastedDimensions.height ) - 1,\n\t\t\tendColumn: Math.min( selectionWidth, pastedDimensions.width ) - 1\n\t\t};\n\n\t\tpastedTable = cropTableToDimensions( pastedTable, cropDimensions, writer );\n\n\t\t// Content table to which we insert a pasted table.\n\t\tconst selectedTable = selectedTableCells[ 0 ].findAncestor( 'table' )!;\n\n\t\tconst cellsToSelect = this._replaceSelectedCellsWithPasted( pastedTable, pastedDimensions, selectedTable, selection, writer );\n\n\t\tif ( this.editor.plugins.get( 'TableSelection' ).isEnabled ) {\n\t\t\t// Selection ranges must be sorted because the first and last selection ranges are considered\n\t\t\t// as anchor/focus cell ranges for multi-cell selection.\n\t\t\tconst selectionRanges = tableUtils.sortRanges( cellsToSelect.map( cell => writer.createRangeOn( cell ) ) );\n\n\t\t\twriter.setSelection( selectionRanges );\n\t\t} else {\n\t\t\t// Set selection inside first cell if multi-cell selection is disabled.\n\t\t\twriter.setSelection( cellsToSelect[ 0 ], 0 );\n\t\t}\n\n\t\treturn selectedTable;\n\t}\n\n\t/**\n\t * Replaces the part of selectedTable with pastedTable.\n\t */\n\tprivate _replaceSelectedCellsWithPasted(\n\t\tpastedTable: Element,\n\t\tpastedDimensions: Record<string, number>,\n\t\tselectedTable: Element,\n\t\tselection: Record<string, number>,\n\t\twriter: Writer\n\t) {\n\t\tconst { width: pastedWidth, height: pastedHeight } = pastedDimensions;\n\n\t\t// Holds two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n\t\tconst pastedTableLocationMap = createLocationMap( pastedTable, pastedWidth, pastedHeight );\n\n\t\tconst selectedTableMap = [ ...new TableWalker( selectedTable, {\n\t\t\tstartRow: selection.firstRow,\n\t\t\tendRow: selection.lastRow,\n\t\t\tstartColumn: selection.firstColumn,\n\t\t\tendColumn: selection.lastColumn,\n\t\t\tincludeAllSlots: true\n\t\t} ) ];\n\n\t\t// Selection must be set to pasted cells (some might be removed or new created).\n\t\tconst cellsToSelect: Array<Element> = [];\n\n\t\t// Store next cell insert position.\n\t\tlet insertPosition: Position;\n\n\t\t// Content table replace cells algorithm iterates over a selected table fragment and:\n\t\t//\n\t\t// - Removes existing table cells at current slot (location).\n\t\t// - Inserts cell from a pasted table for a matched slots.\n\t\t//\n\t\t// This ensures proper table geometry after the paste\n\t\tfor ( const tableSlot of selectedTableMap ) {\n\t\t\tconst { row, column } = tableSlot;\n\n\t\t\t// Save the insert position for current row start.\n\t\t\tif ( column === selection.firstColumn ) {\n\t\t\t\tinsertPosition = tableSlot.getPositionBefore();\n\t\t\t}\n\n\t\t\t// Map current table slot location to an pasted table slot location.\n\t\t\tconst pastedRow = row - selection.firstRow;\n\t\t\tconst pastedColumn = column - selection.firstColumn;\n\t\t\tconst pastedCell = pastedTableLocationMap[ pastedRow % pastedHeight ][ pastedColumn % pastedWidth ];\n\n\t\t\t// Clone cell to insert (to duplicate its attributes and children).\n\t\t\t// Cloning is required to support repeating pasted table content when inserting to a bigger selection.\n\t\t\tconst cellToInsert = pastedCell ? writer.cloneElement( pastedCell ) : null;\n\n\t\t\t// Replace the cell from the current slot with new table cell.\n\t\t\tconst newTableCell = this._replaceTableSlotCell( tableSlot, cellToInsert, insertPosition!, writer );\n\n\t\t\t// The cell was only removed.\n\t\t\tif ( !newTableCell ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Trim the cell if it's row/col-spans would exceed selection area.\n\t\t\ttrimTableCellIfNeeded( newTableCell, row, column, selection.lastRow, selection.lastColumn, writer );\n\n\t\t\tcellsToSelect.push( newTableCell );\n\n\t\t\tinsertPosition = writer.createPositionAfter( newTableCell );\n\t\t}\n\n\t\t// If there are any headings, all the cells that overlap from heading must be splitted.\n\t\tconst headingRows = parseInt( selectedTable.getAttribute( 'headingRows' ) as string || '0' );\n\t\tconst headingColumns = parseInt( selectedTable.getAttribute( 'headingColumns' ) as string || '0' );\n\n\t\tconst areHeadingRowsIntersectingSelection = selection.firstRow < headingRows && headingRows <= selection.lastRow;\n\t\tconst areHeadingColumnsIntersectingSelection = selection.firstColumn < headingColumns && headingColumns <= selection.lastColumn;\n\n\t\tif ( areHeadingRowsIntersectingSelection ) {\n\t\t\tconst columnsLimit = { first: selection.firstColumn, last: selection.lastColumn };\n\t\t\tconst newCells = doHorizontalSplit( selectedTable, headingRows, columnsLimit, writer, selection.firstRow ) as Array<Element>;\n\n\t\t\tcellsToSelect.push( ...newCells );\n\t\t}\n\n\t\tif ( areHeadingColumnsIntersectingSelection ) {\n\t\t\tconst rowsLimit = { first: selection.firstRow, last: selection.lastRow };\n\t\t\tconst newCells = doVerticalSplit( selectedTable, headingColumns, rowsLimit, writer ) as Array<Element>;\n\n\t\t\tcellsToSelect.push( ...newCells );\n\t\t}\n\n\t\treturn cellsToSelect;\n\t}\n\n\t/**\n\t * Replaces a single table slot.\n\t *\n\t * @returns Inserted table cell or null if slot should remain empty.\n\t * @private\n\t */\n\tpublic _replaceTableSlotCell(\n\t\ttableSlot: TableSlot,\n\t\tcellToInsert: Element | null,\n\t\tinsertPosition: Position,\n\t\twriter: Writer\n\t): Element | null {\n\t\tconst { cell, isAnchor } = tableSlot;\n\n\t\t// If the slot is occupied by a cell in a selected table - remove it.\n\t\t// The slot of this cell will be either:\n\t\t// - Replaced by a pasted table cell.\n\t\t// - Spanned by a previously pasted table cell.\n\t\tif ( isAnchor ) {\n\t\t\twriter.remove( cell );\n\t\t}\n\n\t\t// There is no cell to insert (might be spanned by other cell in a pasted table) - advance to the next content table slot.\n\t\tif ( !cellToInsert ) {\n\t\t\treturn null;\n\t\t}\n\n\t\twriter.insert( cellToInsert, insertPosition );\n\n\t\treturn cellToInsert;\n\t}\n\n\t/**\n\t * Extracts the table for pasting into a table.\n\t *\n\t * @param content The content to insert.\n\t * @param model The editor model.\n\t */\n\tpublic getTableIfOnlyTableInContent( content: DocumentFragment | Item, model: Model ): Element | null {\n\t\tif ( !content.is( 'documentFragment' ) && !content.is( 'element' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Table passed directly.\n\t\tif ( content.is( 'element', 'table' ) ) {\n\t\t\treturn content;\n\t\t}\n\n\t\t// We do not support mixed content when pasting table into table.\n\t\t// See: https://github.com/ckeditor/ckeditor5/issues/6817.\n\t\tif ( content.childCount == 1 && content.getChild( 0 )!.is( 'element', 'table' ) ) {\n\t\t\treturn content.getChild( 0 ) as Element;\n\t\t}\n\n\t\t// If there are only whitespaces around a table then use that table for pasting.\n\n\t\tconst contentRange = model.createRangeIn( content );\n\n\t\tfor ( const element of contentRange.getItems() ) {\n\t\t\tif ( element.is( 'element', 'table' ) ) {\n\t\t\t\t// Stop checking if there is some content before table.\n\t\t\t\tconst rangeBefore = model.createRange( contentRange.start, model.createPositionBefore( element ) );\n\n\t\t\t\tif ( model.hasContent( rangeBefore, { ignoreWhitespaces: true } ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// Stop checking if there is some content after table.\n\t\t\t\tconst rangeAfter = model.createRange( model.createPositionAfter( element ), contentRange.end );\n\n\t\t\t\tif ( model.hasContent( rangeAfter, { ignoreWhitespaces: true } ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// There wasn't any content neither before nor after.\n\t\t\t\treturn element;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n/**\n * Prepares a table for pasting and returns adjusted selection dimensions.\n */\nfunction prepareTableForPasting(\n\tselectedTableCells: Array<Element>,\n\tpastedDimensions: {\n\t\theight: number;\n\t\twidth: number;\n\t},\n\twriter: Writer,\n\ttableUtils: TableUtils\n) {\n\tconst selectedTable = selectedTableCells[ 0 ].findAncestor( 'table' )!;\n\n\tconst columnIndexes = tableUtils.getColumnIndexes( selectedTableCells );\n\tconst rowIndexes = tableUtils.getRowIndexes( selectedTableCells );\n\n\tconst selection = {\n\t\tfirstColumn: columnIndexes.first,\n\t\tlastColumn: columnIndexes.last,\n\t\tfirstRow: rowIndexes.first,\n\t\tlastRow: rowIndexes.last\n\t};\n\n\t// Single cell selected - expand selection to pasted table dimensions.\n\tconst shouldExpandSelection = selectedTableCells.length === 1;\n\n\tif ( shouldExpandSelection ) {\n\t\tselection.lastRow += pastedDimensions.height - 1;\n\t\tselection.lastColumn += pastedDimensions.width - 1;\n\n\t\texpandTableSize( selectedTable, selection.lastRow + 1, selection.lastColumn + 1, tableUtils );\n\t}\n\n\t// In case of expanding selection we do not reset the selection so in this case we will always try to fix selection\n\t// like in the case of a non-rectangular area. This might be fixed by re-setting selected cells array but this shortcut is safe.\n\tif ( shouldExpandSelection || !tableUtils.isSelectionRectangular( selectedTableCells ) ) {\n\t\t// For a non-rectangular selection (ie in which some cells sticks out from a virtual selection rectangle) we need to create\n\t\t// a table layout that has a rectangular selection. This will split cells so the selection become rectangular.\n\t\t// Beyond this point we will operate on fixed content table.\n\t\tsplitCellsToRectangularSelection( selectedTable, selection, writer );\n\t}\n\t// However a selected table fragment might be invalid if examined alone. Ie such table fragment:\n\t//\n\t//    +---+---+---+---+\n\t//  0 | a | b | c | d |\n\t//    +   +   +---+---+\n\t//  1 |   | e | f | g |\n\t//    +   +---+   +---+\n\t//  2 |   | h |   | i | <- last row, each cell has rowspan = 2,\n\t//    +   +   +   +   +    so we need to return 3, not 2\n\t//  3 |   |   |   |   |\n\t//    +---+---+---+---+\n\t//\n\t// is invalid as the cells \"h\" and \"i\" have rowspans.\n\t// This case needs only adjusting the selection dimension as the rest of the algorithm operates on empty slots also.\n\telse {\n\t\tselection.lastRow = adjustLastRowIndex( selectedTable, selection );\n\t\tselection.lastColumn = adjustLastColumnIndex( selectedTable, selection );\n\t}\n\n\treturn selection;\n}\n\n/**\n * Expand table (in place) to expected size.\n */\nfunction expandTableSize( table: Element, expectedHeight: number, expectedWidth: number, tableUtils: TableUtils ) {\n\tconst tableWidth = tableUtils.getColumns( table );\n\tconst tableHeight = tableUtils.getRows( table );\n\n\tif ( expectedWidth > tableWidth ) {\n\t\ttableUtils.insertColumns( table, {\n\t\t\tat: tableWidth,\n\t\t\tcolumns: expectedWidth - tableWidth\n\t\t} );\n\t}\n\n\tif ( expectedHeight > tableHeight ) {\n\t\ttableUtils.insertRows( table, {\n\t\t\tat: tableHeight,\n\t\t\trows: expectedHeight - tableHeight\n\t\t} );\n\t}\n}\n\n/**\n * Returns two-dimensional array that is addressed by [ row ][ column ] that stores cells anchored at given location.\n *\n * At given row & column location it might be one of:\n *\n * * cell - cell from pasted table anchored at this location.\n * * null - if no cell is anchored at this location.\n *\n * For instance, from a table below:\n *\n *   +----+----+----+----+\n *   | 00 | 01 | 02 | 03 |\n *   +    +----+----+----+\n *   |    | 11      | 13 |\n *   +----+         +----+\n *   | 20 |         | 23 |\n *   +----+----+----+----+\n *\n * The method will return an array (numbers represents cell element):\n *\n * ```ts\n * const map = [\n *   [ '00', '01', '02', '03' ],\n *   [ null, '11', null, '13' ],\n *   [ '20', null, null, '23' ]\n * ]\n * ```\n *\n * This allows for a quick access to table at give row & column. For instance to access table cell \"13\" from pasted table call:\n *\n * ```ts\n * const cell = map[ 1 ][ 3 ]\n * ```\n */\nfunction createLocationMap( table: Element, width: number, height: number ) {\n\t// Create height x width (row x column) two-dimensional table to store cells.\n\tconst map = new Array( height ).fill( null )\n\t\t.map( () => new Array( width ).fill( null ) );\n\n\tfor ( const { column, row, cell } of new TableWalker( table ) ) {\n\t\tmap[ row ][ column ] = cell;\n\t}\n\n\treturn map;\n}\n\n/**\n * Make selected cells rectangular by splitting the cells that stand out from a rectangular selection.\n *\n * In the table below a selection is shown with \"::\" and slots with anchor cells are named.\n *\n * +----+----+----+----+----+                    +----+----+----+----+----+\n * | 00 | 01 | 02 | 03      |                    | 00 | 01 | 02 | 03      |\n * +    +----+    +----+----+                    |    ::::::::::::::::----+\n * |    | 11 |    | 13 | 14 |                    |    ::11 |    | 13:: 14 |    <- first row\n * +----+----+    +    +----+                    +----::---|    |   ::----+\n * | 20 | 21 |    |    | 24 |   select cells:    | 20 ::21 |    |   :: 24 |\n * +----+----+    +----+----+     11 -> 33       +----::---|    |---::----+\n * | 30      |    | 33 | 34 |                    | 30 ::   |    | 33:: 34 |    <- last row\n * +         +    +----+    +                    |    ::::::::::::::::    +\n * |         |    | 43 |    |                    |         |    | 43 |    |\n * +----+----+----+----+----+                    +----+----+----+----+----+\n *                                                      ^          ^\n *                                                     first & last columns\n *\n * Will update table to:\n *\n *                       +----+----+----+----+----+\n *                       | 00 | 01 | 02 | 03      |\n *                       +    +----+----+----+----+\n *                       |    | 11 |    | 13 | 14 |\n *                       +----+----+    +    +----+\n *                       | 20 | 21 |    |    | 24 |\n *                       +----+----+    +----+----+\n *                       | 30 |    |    | 33 | 34 |\n *                       +    +----+----+----+    +\n *                       |    |    |    | 43 |    |\n *                       +----+----+----+----+----+\n *\n * In th example above:\n * - Cell \"02\" which have `rowspan = 4` must be trimmed at first and at after last row.\n * - Cell \"03\" which have `rowspan = 2` and `colspan = 2` must be trimmed at first column and after last row.\n * - Cells \"00\", \"03\" & \"30\" which cannot be cut by this algorithm as they are outside the trimmed area.\n * - Cell \"13\" cannot be cut as it is inside the trimmed area.\n */\nfunction splitCellsToRectangularSelection( table: Element, dimensions: Record<string, number>, writer: Writer ) {\n\tconst { firstRow, lastRow, firstColumn, lastColumn } = dimensions;\n\n\tconst rowIndexes = { first: firstRow, last: lastRow };\n\tconst columnIndexes = { first: firstColumn, last: lastColumn };\n\n\t// 1. Split cells vertically in two steps as first step might create cells that needs to split again.\n\tdoVerticalSplit( table, firstColumn, rowIndexes, writer );\n\tdoVerticalSplit( table, lastColumn + 1, rowIndexes, writer );\n\n\t// 2. Split cells horizontally in two steps as first step might create cells that needs to split again.\n\tdoHorizontalSplit( table, firstRow, columnIndexes, writer );\n\tdoHorizontalSplit( table, lastRow + 1, columnIndexes, writer, firstRow );\n}\n\nfunction doHorizontalSplit( table: Element, splitRow: number, limitColumns: Record<string, number>, writer: Writer, startRow: number = 0 ) {\n\t// If selection starts at first row then no split is needed.\n\tif ( splitRow < 1 ) {\n\t\treturn;\n\t}\n\n\tconst overlappingCells = getVerticallyOverlappingCells( table, splitRow, startRow );\n\n\t// Filter out cells that are not touching insides of the rectangular selection.\n\tconst cellsToSplit = overlappingCells.filter( ( { column, cellWidth } ) => isAffectedBySelection( column, cellWidth, limitColumns ) );\n\n\treturn cellsToSplit.map( ( { cell } ) => splitHorizontally( cell, splitRow, writer ) );\n}\n\nfunction doVerticalSplit( table: Element, splitColumn: number, limitRows: Record<string, number>, writer: Writer ) {\n\t// If selection starts at first column then no split is needed.\n\tif ( splitColumn < 1 ) {\n\t\treturn;\n\t}\n\n\tconst overlappingCells = getHorizontallyOverlappingCells( table, splitColumn );\n\n\t// Filter out cells that are not touching insides of the rectangular selection.\n\tconst cellsToSplit = overlappingCells.filter( ( { row, cellHeight } ) => isAffectedBySelection( row, cellHeight, limitRows ) );\n\n\treturn cellsToSplit.map( ( { cell, column } ) => splitVertically( cell, column, splitColumn, writer ) );\n}\n\n/**\n * Checks if cell at given row (column) is affected by a rectangular selection defined by first/last column (row).\n *\n * The same check is used for row as for column.\n */\nfunction isAffectedBySelection( index: number, span: number, limit: Record<string, number> ) {\n\tconst endIndex = index + span - 1;\n\tconst { first, last } = limit;\n\n\tconst isInsideSelection = index >= first && index <= last;\n\tconst overlapsSelectionFromOutside = index < first && endIndex >= first;\n\n\treturn isInsideSelection || overlapsSelectionFromOutside;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablekeyboard\n */\n\nimport TableSelection from './tableselection.js';\nimport TableWalker from './tablewalker.js';\nimport TableUtils from './tableutils.js';\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\tgetLocalizedArrowKeyCodeDirection,\n\ttype EventInfo,\n\ttype ArrowKeyCodeDirection,\n\ttype KeystrokeInfo\n} from 'ckeditor5/src/utils.js';\n\nimport type {\n\tBubblingEventInfo,\n\tDocumentSelection,\n\tDomEventData,\n\tElement,\n\tSelection,\n\tViewDocumentArrowKeyEvent,\n\tViewDocumentTabEvent\n} from 'ckeditor5/src/engine.js';\n\n/**\n * This plugin enables keyboard navigation for tables.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport default class TableKeyboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableKeyboard' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableSelection, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst t = editor.t;\n\n\t\tthis.listenTo<ViewDocumentArrowKeyEvent>(\n\t\t\tviewDocument,\n\t\t\t'arrowKey',\n\t\t\t( ...args ) => this._onArrowKey( ...args ),\n\t\t\t{ context: 'table' }\n\t\t);\n\n\t\tthis.listenTo<ViewDocumentTabEvent>(\n\t\t\tviewDocument,\n\t\t\t'tab',\n\t\t\t( ...args ) => this._handleTabOnSelectedTable( ...args ),\n\t\t\t{ context: 'figure' }\n\t\t);\n\n\t\tthis.listenTo<ViewDocumentTabEvent>(\n\t\t\tviewDocument,\n\t\t\t'tab',\n\t\t\t( ...args ) => this._handleTab( ...args ),\n\t\t\t{ context: [ 'th', 'td' ] }\n\t\t);\n\n\t\t// Add the information about the keystrokes to the accessibility database.\n\t\teditor.accessibility.addKeystrokeInfoGroup( {\n\t\t\tid: 'table',\n\t\t\tlabel: t( 'Keystrokes that can be used in a table cell' ),\n\t\t\tkeystrokes: [\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move the selection to the next cell' ),\n\t\t\t\t\tkeystroke: 'Tab'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Move the selection to the previous cell' ),\n\t\t\t\t\tkeystroke: 'Shift+Tab'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Insert a new table row (when in the last cell of a table)' ),\n\t\t\t\t\tkeystroke: 'Tab'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: t( 'Navigate through the table' ),\n\t\t\t\t\tkeystroke: [ [ 'arrowup' ], [ 'arrowright' ], [ 'arrowdown' ], [ 'arrowleft' ] ]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:tab tab} events for the <kbd>Tab</kbd> key executed\n\t * when the table widget is selected.\n\t */\n\tprivate _handleTabOnSelectedTable( bubblingEventInfo: BubblingEventInfo, domEventData: DomEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\tif ( !selectedElement || !selectedElement.is( 'element', 'table' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\t\tdomEventData.stopPropagation();\n\t\tbubblingEventInfo.stop();\n\n\t\teditor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeIn( ( selectedElement.getChild( 0 ) as Element ).getChild( 0 ) as Element ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:tab tab} events for the <kbd>Tab</kbd> key executed\n\t * inside table cells.\n\t */\n\tprivate _handleTab( bubblingEventInfo: BubblingEventInfo, domEventData: DomEventData & KeystrokeInfo ) {\n\t\tconst editor = this.editor;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst tableSelection: TableSelection = this.editor.plugins.get( 'TableSelection' );\n\n\t\tconst selection = editor.model.document.selection;\n\t\tconst isForward = !domEventData.shiftKey;\n\n\t\tlet tableCell: Element | null = tableUtils.getTableCellsContainingSelection( selection )[ 0 ];\n\n\t\tif ( !tableCell ) {\n\t\t\ttableCell = tableSelection.getFocusCell();\n\t\t}\n\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\t\tdomEventData.stopPropagation();\n\t\tbubblingEventInfo.stop();\n\n\t\tconst tableRow = tableCell.parent as Element;\n\t\tconst table = tableRow.parent as Element;\n\n\t\tconst currentRowIndex = table.getChildIndex( tableRow )!;\n\t\tconst currentCellIndex = tableRow.getChildIndex( tableCell )!;\n\n\t\tconst isFirstCellInRow = currentCellIndex === 0;\n\n\t\tif ( !isForward && isFirstCellInRow && currentRowIndex === 0 ) {\n\t\t\t// Set the selection over the whole table if the selection was in the first table cell.\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeOn( table ) );\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n\t\tconst isLastRow = currentRowIndex === tableUtils.getRows( table ) - 1;\n\n\t\tif ( isForward && isLastRow && isLastCellInRow ) {\n\t\t\teditor.execute( 'insertTableRowBelow' );\n\n\t\t\t// Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n\t\t\t// or it got overwritten) set the selection over the whole table to mirror the first cell case.\n\t\t\tif ( currentRowIndex === tableUtils.getRows( table ) - 1 ) {\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\twriter.setSelection( writer.createRangeOn( table ) );\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet cellToFocus: Element;\n\n\t\t// Move to the first cell in the next row.\n\t\tif ( isForward && isLastCellInRow ) {\n\t\t\tconst nextRow = table.getChild( currentRowIndex + 1 ) as Element;\n\n\t\t\tcellToFocus = nextRow.getChild( 0 ) as Element;\n\t\t}\n\t\t// Move to the last cell in the previous row.\n\t\telse if ( !isForward && isFirstCellInRow ) {\n\t\t\tconst previousRow = table.getChild( currentRowIndex - 1 ) as Element;\n\n\t\t\tcellToFocus = previousRow.getChild( previousRow.childCount - 1 ) as Element;\n\t\t}\n\t\t// Move to the next/previous cell.\n\t\telse {\n\t\t\tcellToFocus = tableRow.getChild( currentCellIndex + ( isForward ? 1 : -1 ) ) as Element;\n\t\t}\n\n\t\teditor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeIn( cellToFocus ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n\t */\n\tprivate _onArrowKey( eventInfo: EventInfo, domEventData: DomEventData & KeystrokeInfo ) {\n\t\tconst editor = this.editor;\n\t\tconst keyCode = domEventData.keyCode;\n\n\t\tconst direction = getLocalizedArrowKeyCodeDirection( keyCode, editor.locale.contentLanguageDirection )!;\n\t\tconst wasHandled = this._handleArrowKeys( direction, domEventData.shiftKey );\n\n\t\tif ( wasHandled ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\tdomEventData.stopPropagation();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles arrow keys to move the selection around the table.\n\t *\n\t * @param direction The direction of the arrow key.\n\t * @param expandSelection If the current selection should be expanded.\n\t * @returns Returns `true` if key was handled.\n\t */\n\tprivate _handleArrowKeys( direction: ArrowKeyCodeDirection, expandSelection: boolean ) {\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\t\tconst tableSelection: TableSelection = this.editor.plugins.get( 'TableSelection' );\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst isForward = [ 'right', 'down' ].includes( direction );\n\n\t\t// In case one or more table cells are selected (from outside),\n\t\t// move the selection to a cell adjacent to the selected table fragment.\n\t\tconst selectedCells = tableUtils.getSelectedTableCells( selection );\n\n\t\tif ( selectedCells.length ) {\n\t\t\tlet focusCell;\n\n\t\t\tif ( expandSelection ) {\n\t\t\t\tfocusCell = tableSelection.getFocusCell();\n\t\t\t} else {\n\t\t\t\tfocusCell = isForward ? selectedCells[ selectedCells.length - 1 ] : selectedCells[ 0 ];\n\t\t\t}\n\n\t\t\tthis._navigateFromCellInDirection( focusCell!, direction, expandSelection );\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Abort if we're not in a table cell.\n\t\tconst tableCell = selection.focus!.findAncestor( 'tableCell' );\n\n\t\t/* istanbul ignore if: paranoid check -- @preserve */\n\t\tif ( !tableCell ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// When the selection is not collapsed.\n\t\tif ( !selection.isCollapsed ) {\n\t\t\tif ( expandSelection ) {\n\t\t\t\t// Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n\t\t\t\t// Selection for sure will not approach cell edge.\n\t\t\t\t//\n\t\t\t\t// With a special case when all cell content is selected - then selection should expand to the other cell.\n\t\t\t\t// Note: When the entire cell gets selected using CTRL+A, the selection is always forward.\n\t\t\t\tif ( selection.isBackward == isForward && !selection.containsEntireContent( tableCell ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t\t\t// It will collapse for non-object selected so it's not going to move to other cell.\n\t\t\t\tif ( !selectedElement || !model.schema.isObject( selectedElement ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Let's check if the selection is at the beginning/end of the cell.\n\t\tif ( this._isSelectionAtCellEdge( selection, tableCell, isForward ) ) {\n\t\t\tthis._navigateFromCellInDirection( tableCell, direction, expandSelection );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns `true` if the selection is at the boundary of a table cell according to the navigation direction.\n\t *\n\t * @param selection The current selection.\n\t * @param tableCell The current table cell element.\n\t * @param isForward The expected navigation direction.\n\t */\n\tprivate _isSelectionAtCellEdge( selection: Selection | DocumentSelection, tableCell: Element, isForward: boolean ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst focus = isForward ? selection.getLastPosition()! : selection.getFirstPosition()!;\n\n\t\t// If the current limit element is not table cell we are for sure not at the cell edge.\n\t\t// Also `modifySelection` will not let us out of it.\n\t\tif ( !schema.getLimitElement( focus ).is( 'element', 'tableCell' ) ) {\n\t\t\tconst boundaryPosition = model.createPositionAt( tableCell, isForward ? 'end' : 0 );\n\n\t\t\treturn boundaryPosition.isTouching( focus );\n\t\t}\n\n\t\tconst probe = model.createSelection( focus );\n\n\t\tmodel.modifySelection( probe, { direction: isForward ? 'forward' : 'backward' } );\n\n\t\t// If there was no change in the focus position, then it's not possible to move the selection there.\n\t\treturn focus.isEqual( probe.focus! );\n\t}\n\n\t/**\n\t * Moves the selection from the given table cell in the specified direction.\n\t *\n\t * @param focusCell The table cell that is current multi-cell selection focus.\n\t * @param direction Direction in which selection should move.\n\t * @param expandSelection If the current selection should be expanded. Default value is false.\n\t */\n\tprotected _navigateFromCellInDirection( focusCell: Element, direction: ArrowKeyCodeDirection, expandSelection = false ): void {\n\t\tconst model = this.editor.model;\n\n\t\tconst table = focusCell.findAncestor( 'table' )!;\n\t\tconst tableMap = [ ...new TableWalker( table, { includeAllSlots: true } ) ];\n\t\tconst { row: lastRow, column: lastColumn } = tableMap[ tableMap.length - 1 ];\n\n\t\tconst currentCellInfo = tableMap.find( ( { cell } ) => cell == focusCell )!;\n\t\tlet { row, column } = currentCellInfo;\n\n\t\tswitch ( direction ) {\n\t\t\tcase 'left':\n\t\t\t\tcolumn--;\n\t\t\t\tbreak;\n\n\t\t\tcase 'up':\n\t\t\t\trow--;\n\t\t\t\tbreak;\n\n\t\t\tcase 'right':\n\t\t\t\tcolumn += currentCellInfo.cellWidth;\n\t\t\t\tbreak;\n\n\t\t\tcase 'down':\n\t\t\t\trow += currentCellInfo.cellHeight;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst isOutsideVertically = row < 0 || row > lastRow;\n\t\tconst isBeforeFirstCell = column < 0 && row <= 0;\n\t\tconst isAfterLastCell = column > lastColumn && row >= lastRow;\n\n\t\t// Note that if the table cell at the end of a row is row-spanned then isAfterLastCell will never be true.\n\t\t// However, we don't know if user was navigating on the last row or not, so let's stay in the table.\n\n\t\tif ( isOutsideVertically || isBeforeFirstCell || isAfterLastCell ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeOn( table ) );\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( column < 0 ) {\n\t\t\tcolumn = expandSelection ? 0 : lastColumn;\n\t\t\trow--;\n\t\t} else if ( column > lastColumn ) {\n\t\t\tcolumn = expandSelection ? lastColumn : 0;\n\t\t\trow++;\n\t\t}\n\n\t\tconst cellToSelect = tableMap.find( cellInfo => cellInfo.row == row && cellInfo.column == column )!.cell;\n\t\tconst isForward = [ 'right', 'down' ].includes( direction );\n\t\tconst tableSelection: TableSelection = this.editor.plugins.get( 'TableSelection' );\n\n\t\tif ( expandSelection && tableSelection.isEnabled ) {\n\t\t\tconst anchorCell = tableSelection.getAnchorCell() || focusCell;\n\n\t\t\ttableSelection.setCellSelection( anchorCell, cellToSelect );\n\t\t} else {\n\t\t\tconst positionToSelect = model.createPositionAt( cellToSelect, isForward ? 0 : 'end' );\n\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( positionToSelect );\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablemouse/mouseeventsobserver\n */\n\nimport { DomEventObserver, type DomEventData } from 'ckeditor5/src/engine.js';\n\n/**\n * The mouse selection event observer.\n *\n * It registers listeners for the following DOM events:\n *\n * - `'mousemove'`\n * - `'mouseleave'`\n *\n * Note that this observer is disabled by default. To enable this observer, it needs to be added to\n * {@link module:engine/view/view~View} using the {@link module:engine/view/view~View#addObserver} method.\n *\n * The observer is registered by the {@link module:table/tableselection~TableSelection} plugin.\n */\nexport default class MouseEventsObserver extends DomEventObserver<'mousemove' | 'mouseleave'> {\n\tpublic readonly domEventType = [\n\t\t'mousemove', 'mouseleave'\n\t] as const;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic onDomEvent( domEvent: MouseEvent ): void {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when the mouse is moved over one of the editables.\n *\n * Introduced by {@link module:table/tablemouse/mouseeventsobserver~MouseEventsObserver}.\n *\n * Note that this event is not available by default. To make it available,\n * {@link module:table/tablemouse/mouseeventsobserver~MouseEventsObserver} needs to be added\n * to {@link module:engine/view/view~View} using the {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:table/tablemouse/mouseeventsobserver~MouseEventsObserver\n * @eventName module:engine/view/document~Document#mousemove\n * @param data Event data.\n */\nexport type ViewDocumentMouseMoveEvent = {\n\tname: 'mousemove';\n\targs: [ data: DomEventData<MouseEvent> ];\n};\n\n/**\n * Fired when the mouse is moved out of one of the editables.\n *\n * Introduced by {@link module:table/tablemouse/mouseeventsobserver~MouseEventsObserver}.\n *\n * Note that this event is not available by default. To make it available,\n * {@link module:table/tablemouse/mouseeventsobserver~MouseEventsObserver} needs to be added\n * to {@link module:engine/view/view~View} using the {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:table/tablemouse/mouseeventsobserver~MouseEventsObserver\n * @eventName module:engine/view/document~Document#mouseleave\n * @param data Event data.\n */\nexport type ViewDocumentMouseLeaveEvent = {\n\tname: 'mouseleave';\n\targs: [ data: DomEventData<MouseEvent> ];\n};\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablemouse\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport TableSelection from './tableselection.js';\nimport MouseEventsObserver from './tablemouse/mouseeventsobserver.js';\nimport TableUtils from './tableutils.js';\nimport type { DomEventData, Element } from 'ckeditor5/src/engine.js';\n\n/**\n * This plugin enables a table cells' selection with the mouse.\n * It is loaded automatically by the {@link module:table/table~Table} plugin.\n */\nexport default class TableMouse extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableMouse' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableSelection, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Currently the MouseObserver only handles `mousedown` and `mouseup` events.\n\t\t// TODO move to the engine?\n\t\teditor.editing.view.addObserver( MouseEventsObserver );\n\n\t\tthis._enableShiftClickSelection();\n\t\tthis._enableMouseDragSelection();\n\t}\n\n\t/**\n\t * Enables making cells selection by <kbd>Shift</kbd>+click. Creates a selection from the cell which previously held\n\t * the selection to the cell which was clicked. It can be the same cell, in which case it selects a single cell.\n\t */\n\tprivate _enableShiftClickSelection() {\n\t\tconst editor = this.editor;\n\t\tconst tableUtils = editor.plugins.get( TableUtils );\n\t\tlet blockSelectionChange = false;\n\n\t\tconst tableSelection = editor.plugins.get( TableSelection );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mousedown', ( evt, domEventData ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\tif ( !this.isEnabled || !tableSelection.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !domEventData.domEvent.shiftKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst anchorCell = tableSelection.getAnchorCell() || tableUtils.getTableCellsContainingSelection( selection )[ 0 ];\n\n\t\t\tif ( !anchorCell ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst targetCell = this._getModelTableCellFromDomEvent( domEventData );\n\n\t\t\tif ( targetCell && haveSameTableParent( anchorCell, targetCell ) ) {\n\t\t\t\tblockSelectionChange = true;\n\t\t\t\ttableSelection.setCellSelection( anchorCell, targetCell );\n\n\t\t\t\tdomEventData.preventDefault();\n\t\t\t}\n\t\t} );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mouseup', () => {\n\t\t\tblockSelectionChange = false;\n\t\t} );\n\n\t\t// We need to ignore a `selectionChange` event that is fired after we render our new table cells selection.\n\t\t// When downcasting table cells selection to the view, we put the view selection in the last selected cell\n\t\t// in a place that may not be natively a \"correct\" location. This is – we put it directly in the `<td>` element.\n\t\t// All browsers fire the native `selectionchange` event.\n\t\t// However, all browsers except Safari return the selection in the exact place where we put it\n\t\t// (even though it's visually normalized). Safari returns `<td><p>^foo` that makes our selection observer\n\t\t// fire our `selectionChange` event (because the view selection that we set in the first step differs from the DOM selection).\n\t\t// Since `selectionChange` is fired, we automatically update the model selection that moves it that paragraph.\n\t\t// This breaks our dear cells selection.\n\t\t//\n\t\t// Theoretically this issue concerns only Safari that is the only browser that do normalize the selection.\n\t\t// However, to avoid code branching and to have a good coverage for this event blocker, I enabled it for all browsers.\n\t\t//\n\t\t// Note: I'm keeping the `blockSelectionChange` state separately for shift+click and mouse drag (exact same logic)\n\t\t// so I don't have to try to analyze whether they don't overlap in some weird cases. Probably they don't.\n\t\t// But I have other things to do, like writing this comment.\n\t\tthis.listenTo( editor.editing.view.document, 'selectionChange', evt => {\n\t\t\tif ( blockSelectionChange ) {\n\t\t\t\t// @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Enables making cells selection by dragging.\n\t *\n\t * The selection is made only on mousemove. Mouse tracking is started on mousedown.\n\t * However, the cells selection is enabled only after the mouse cursor left the anchor cell.\n\t * Thanks to that normal text selection within one cell works just fine. However, you can still select\n\t * just one cell by leaving the anchor cell and moving back to it.\n\t */\n\tprivate _enableMouseDragSelection() {\n\t\tconst editor = this.editor;\n\t\tlet anchorCell: Element | null, targetCell: Element | null;\n\t\tlet beganCellSelection = false;\n\t\tlet blockSelectionChange = false;\n\n\t\tconst tableSelection = editor.plugins.get( TableSelection );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mousedown', ( evt, domEventData ) => {\n\t\t\tif ( !this.isEnabled || !tableSelection.isEnabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure to not conflict with the shift+click listener and any other possible handler.\n\t\t\tif ( domEventData.domEvent.shiftKey || domEventData.domEvent.ctrlKey || domEventData.domEvent.altKey ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tanchorCell = this._getModelTableCellFromDomEvent( domEventData );\n\t\t} );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mousemove', ( evt, domEventData ) => {\n\t\t\tif ( !domEventData.domEvent.buttons ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !anchorCell ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newTargetCell = this._getModelTableCellFromDomEvent( domEventData );\n\n\t\t\tif ( newTargetCell && haveSameTableParent( anchorCell, newTargetCell ) ) {\n\t\t\t\ttargetCell = newTargetCell;\n\n\t\t\t\t// Switch to the cell selection mode after the mouse cursor left the anchor cell.\n\t\t\t\t// Switch off only on mouseup (makes selecting a single cell possible).\n\t\t\t\tif ( !beganCellSelection && targetCell != anchorCell ) {\n\t\t\t\t\tbeganCellSelection = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Yep, not making a cell selection yet. See method docs.\n\t\t\tif ( !beganCellSelection ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tblockSelectionChange = true;\n\t\t\ttableSelection.setCellSelection( anchorCell, targetCell! );\n\n\t\t\tdomEventData.preventDefault();\n\t\t} );\n\n\t\tthis.listenTo( editor.editing.view.document, 'mouseup', () => {\n\t\t\tbeganCellSelection = false;\n\t\t\tblockSelectionChange = false;\n\t\t\tanchorCell = null;\n\t\t\ttargetCell = null;\n\t\t} );\n\n\t\t// See the explanation in `_enableShiftClickSelection()`.\n\t\tthis.listenTo( editor.editing.view.document, 'selectionChange', evt => {\n\t\t\tif ( blockSelectionChange ) {\n\t\t\t\t// @if CK_DEBUG // console.log( 'Blocked selectionChange to avoid breaking table cells selection.' );\n\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Returns the model table cell element based on the target element of the passed DOM event.\n\t *\n\t * @returns Returns the table cell or `undefined`.\n\t */\n\tprivate _getModelTableCellFromDomEvent( domEventData: DomEventData ) {\n\t\t// Note: Work with positions (not element mapping) because the target element can be an attribute or other non-mapped element.\n\t\tconst viewTargetElement = domEventData.target;\n\t\tconst viewPosition = this.editor.editing.view.createPositionAt( viewTargetElement, 0 );\n\t\tconst modelPosition = this.editor.editing.mapper.toModelPosition( viewPosition );\n\t\tconst modelElement = modelPosition.parent as Element;\n\n\t\treturn modelElement.findAncestor( 'tableCell', { includeSelf: true } );\n\t}\n}\n\nfunction haveSameTableParent( cellA: Element, cellB: Element ) {\n\treturn cellA.parent!.parent == cellB.parent!.parent;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/table\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { Widget } from 'ckeditor5/src/widget.js';\n\nimport TableEditing from './tableediting.js';\nimport TableUI from './tableui.js';\nimport TableSelection from './tableselection.js';\nimport TableClipboard from './tableclipboard.js';\nimport TableKeyboard from './tablekeyboard.js';\nimport TableMouse from './tablemouse.js';\n\nimport '../theme/table.css';\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/tables/tables Table feature documentation}.\n *\n * This is a \"glue\" plugin that loads the following table features:\n *\n * * {@link module:table/tableediting~TableEditing editing feature},\n * * {@link module:table/tableselection~TableSelection selection feature},\n * * {@link module:table/tablekeyboard~TableKeyboard keyboard navigation feature},\n * * {@link module:table/tablemouse~TableMouse mouse selection feature},\n * * {@link module:table/tableclipboard~TableClipboard clipboard feature},\n * * {@link module:table/tableui~TableUI UI feature}.\n */\nexport default class Table extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing, TableUI, TableSelection, TableMouse, TableKeyboard, TableClipboard, Widget ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'Table' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/plaintableoutput\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport type { DowncastWriter, Element, Node, ViewContainerElement } from 'ckeditor5/src/engine.js';\n\nimport Table from './table.js';\n\n/**\n * The plain table output feature.\n */\nexport default class PlainTableOutput extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'PlainTableOutput' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ Table ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\t// Override default table data downcast converter.\n\t\teditor.conversion.for( 'dataDowncast' ).elementToStructure( {\n\t\t\tmodel: 'table',\n\t\t\tview: downcastTableElement,\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\t\t// Make sure table <caption> is downcasted into <caption> in the data pipeline when necessary.\n\t\tif ( editor.plugins.has( 'TableCaption' ) ) {\n\t\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\t\tmodel: 'caption',\n\t\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\t\tif ( modelElement.parent!.name === 'table' ) {\n\t\t\t\t\t\treturn writer.createContainerElement( 'caption' );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tconverterPriority: 'high'\n\t\t\t} );\n\t\t}\n\n\t\t// Handle border-style, border-color, border-width and background-color table attributes.\n\t\tif ( editor.plugins.has( 'TableProperties' ) ) {\n\t\t\tdowncastTableBorderAndBackgroundAttributes( editor );\n\t\t}\n\t}\n}\n\n/**\n * The plain table downcast converter callback.\n *\n * @param table Table model element.\n * @param conversionApi The conversion API object.\n * @returns Created element.\n */\nfunction downcastTableElement( table: Element, { writer }: { writer: DowncastWriter } ) {\n\tconst headingRows = table.getAttribute( 'headingRows' ) as number || 0;\n\n\t// Table head rows slot.\n\tconst headRowsSlot = writer.createSlot( ( element: Node ) =>\n\t\telement.is( 'element', 'tableRow' ) && element.index! < headingRows\n\t);\n\n\t// Table body rows slot.\n\tconst bodyRowsSlot = writer.createSlot( ( element: Node ) =>\n\t\telement.is( 'element', 'tableRow' ) && element.index! >= headingRows\n\t);\n\n\t// Table children slot.\n\tconst childrenSlot = writer.createSlot( ( element: Node ) => !element.is( 'element', 'tableRow' ) );\n\n\t// Table <thead> element with all the heading rows.\n\tconst theadElement = writer.createContainerElement( 'thead', null, headRowsSlot );\n\n\t// Table <tbody> element with all the body rows.\n\tconst tbodyElement = writer.createContainerElement( 'tbody', null, bodyRowsSlot );\n\n\t// Table contents element containing <thead> and <tbody> when necessary.\n\tconst tableContentElements: Array<ViewContainerElement> = [];\n\n\tif ( headingRows ) {\n\t\ttableContentElements.push( theadElement );\n\t}\n\n\tif ( headingRows < table.childCount ) {\n\t\ttableContentElements.push( tbodyElement );\n\t}\n\n\t// Create table structure.\n\t//\n\t// <table>\n\t//    {children-slot-like-caption}\n\t//    <thead>\n\t//        {table-head-rows-slot}\n\t//    </thead>\n\t//    <tbody>\n\t//        {table-body-rows-slot}\n\t//    </tbody>\n\t// </table>\n\treturn writer.createContainerElement( 'table', null, [ childrenSlot, ...tableContentElements ] );\n}\n\n/**\n * Register table border and background attributes converters.\n */\nfunction downcastTableBorderAndBackgroundAttributes( editor: Editor ) {\n\tconst modelAttributes = {\n\t\t'border-width': 'tableBorderWidth',\n\t\t'border-color': 'tableBorderColor',\n\t\t'border-style': 'tableBorderStyle',\n\t\t'background-color': 'tableBackgroundColor'\n\t};\n\n\tfor ( const [ styleName, modelAttribute ] of Object.entries( modelAttributes ) ) {\n\t\teditor.conversion.for( 'dataDowncast' ).add( dispatcher => {\n\t\t\treturn dispatcher.on( `attribute:${ modelAttribute }:table`, ( evt, data, conversionApi ) => {\n\t\t\t\tconst { item, attributeNewValue } = data;\n\t\t\t\tconst { mapper, writer } = conversionApi;\n\n\t\t\t\tif ( !conversionApi.consumable.consume( item, evt.name ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst table = mapper.toViewElement( item );\n\n\t\t\t\tif ( attributeNewValue ) {\n\t\t\t\t\twriter.setStyle( styleName, attributeNewValue, table );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeStyle( styleName, table );\n\t\t\t\t}\n\t\t\t}, { priority: 'high' } );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/ui/widget\n */\n\nimport type { ViewDocumentFragment, ViewDocumentSelection, ViewElement, ViewNode } from 'ckeditor5/src/engine.js';\n\nimport { isWidget } from 'ckeditor5/src/widget.js';\n\n/**\n * Depending on the position of the selection either return the selected table or the table higher in the hierarchy.\n */\nexport function getSelectionAffectedTableWidget( selection: ViewDocumentSelection ): ViewElement | null {\n\tconst selectedTable = getSelectedTableWidget( selection );\n\n\tif ( selectedTable ) {\n\t\treturn selectedTable;\n\t}\n\n\treturn getTableWidgetAncestor( selection );\n}\n\n/**\n * Returns a table widget editing view element if one is selected.\n */\nexport function getSelectedTableWidget( selection: ViewDocumentSelection ): ViewElement | null {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isTableWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a table widget editing view element if one is among the selection's ancestors.\n */\nexport function getTableWidgetAncestor( selection: ViewDocumentSelection ): ViewElement | null {\n\tconst selectionPosition = selection.getFirstPosition();\n\n\tif ( !selectionPosition ) {\n\t\treturn null;\n\t}\n\n\tlet parent: ViewNode | ViewDocumentFragment | null = selectionPosition.parent;\n\n\twhile ( parent ) {\n\t\tif ( parent.is( 'element' ) && isTableWidget( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if a given view element is a table widget.\n */\nfunction isTableWidget( viewElement: ViewElement ): boolean {\n\treturn !!viewElement.getCustomProperty( 'table' ) && isWidget( viewElement );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tabletoolbar\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { WidgetToolbarRepository } from 'ckeditor5/src/widget.js';\nimport { getSelectedTableWidget, getTableWidgetAncestor } from './utils/ui/widget.js';\n\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for the table cell content).\n *\n * The table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/tableconfig~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/tableconfig~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n */\nexport default class TableToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ WidgetToolbarRepository ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableToolbar' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic afterInit(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n\n\t\tconst tableContentToolbarItems = editor.config.get( 'table.contentToolbar' );\n\n\t\tconst tableToolbarItems = editor.config.get( 'table.tableToolbar' );\n\n\t\tif ( tableContentToolbarItems ) {\n\t\t\twidgetToolbarRepository.register( 'tableContent', {\n\t\t\t\tariaLabel: t( 'Table toolbar' ),\n\t\t\t\titems: tableContentToolbarItems,\n\t\t\t\tgetRelatedElement: getTableWidgetAncestor\n\t\t\t} );\n\t\t}\n\n\t\tif ( tableToolbarItems ) {\n\t\t\twidgetToolbarRepository.register( 'table', {\n\t\t\t\tariaLabel: t( 'Table toolbar' ),\n\t\t\t\titems: tableToolbarItems,\n\t\t\t\tgetRelatedElement: getSelectedTableWidget\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/ui/colorinputview\n */\n\nimport {\n\tView,\n\tInputTextView,\n\tcreateDropdown,\n\tFocusCycler,\n\tViewCollection,\n\tColorSelectorView,\n\ttype ColorDefinition,\n\ttype DropdownView,\n\ttype ColorPickerConfig,\n\ttype ColorSelectorExecuteEvent,\n\ttype ColorSelectorColorPickerCancelEvent,\n\ttype FocusableView\n} from 'ckeditor5/src/ui.js';\n\nimport { FocusTracker, KeystrokeHandler, type Locale } from 'ckeditor5/src/utils.js';\n\nimport '../../theme/colorinput.css';\n\nexport type ColorInputViewOptions = {\n\tcolorDefinitions: Array<ColorDefinition>;\n\tcolumns: number;\n\tdefaultColorValue?: string;\n\tcolorPickerConfig: false | ColorPickerConfig;\n};\n\n/**\n * The color input view class. It allows the user to type in a color (hex, rgb, etc.)\n * or choose it from the configurable color palette with a preview.\n *\n * @internal\n */\nexport default class ColorInputView extends View implements FocusableView {\n\t/**\n\t * The value of the input.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public value: string;\n\n\t/**\n\t * Controls whether the input view is in read-only mode.\n\t *\n\t * @observable\n\t * @default false\n\t */\n\tdeclare public isReadOnly: boolean;\n\n\t/**\n\t * An observable flag set to `true` when the input is focused by the user.\n\t * `false` otherwise.\n\t *\n\t * @observable\n\t * @default false\n\t */\n\tdeclare public readonly isFocused: boolean;\n\n\t/**\n\t * An observable flag set to `true` when the input contains no text.\n\t *\n\t * @observable\n\t * @default true\n\t */\n\tdeclare public readonly isEmpty: boolean;\n\n\t/**\n\t * @observable\n\t */\n\tdeclare public hasError: boolean;\n\n\t/**\n\t * A cached reference to the options passed to the constructor.\n\t */\n\tpublic options: ColorInputViewOptions;\n\n\t/**\n\t * Tracks information about the DOM focus in the view.\n\t */\n\tpublic readonly focusTracker: FocusTracker;\n\n\t/**\n\t * Helps cycling over focusable children in the input view.\n\t */\n\tpublic readonly focusCycler: FocusCycler;\n\n\t/**\n\t * A collection of views that can be focused in the view.\n\t */\n\tprotected readonly _focusables: ViewCollection<FocusableView>;\n\n\t/**\n\t * An instance of the dropdown allowing to select a color from a grid.\n\t */\n\tpublic dropdownView: DropdownView;\n\n\t/**\n\t * An instance of the input allowing the user to type a color value.\n\t */\n\tpublic inputView: InputTextView;\n\n\t/**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler;\n\n\t/**\n\t * The flag that indicates whether the user is still typing.\n\t * If set to true, it means that the text input field ({@link #inputView}) still has the focus.\n\t * So, we should interrupt the user by replacing the input's value.\n\t */\n\tprotected _stillTyping: boolean;\n\n\t/**\n\t * Creates an instance of the color input view.\n\t *\n\t * @param locale The locale instance.\n\t * @param options The input options.\n\t * @param options.colorDefinitions The colors to be displayed in the palette inside the input's dropdown.\n\t * @param options.columns The number of columns in which the colors will be displayed.\n\t * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n\t * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n\t */\n\tconstructor( locale: Locale, options: ColorInputViewOptions ) {\n\t\tsuper( locale );\n\n\t\tthis.set( 'value', '' );\n\t\tthis.set( 'isReadOnly', false );\n\t\tthis.set( 'isFocused', false );\n\t\tthis.set( 'isEmpty', true );\n\n\t\tthis.options = options;\n\t\tthis.focusTracker = new FocusTracker();\n\t\tthis._focusables = new ViewCollection();\n\t\tthis.dropdownView = this._createDropdownView();\n\t\tthis.inputView = this._createInputTextView();\n\t\tthis.keystrokes = new KeystrokeHandler();\n\t\tthis._stillTyping = false;\n\n\t\tthis.focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate items forwards using the <kbd>Tab</kbd> key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input-color'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.dropdownView,\n\t\t\t\tthis.inputView\n\t\t\t]\n\t\t} );\n\n\t\tthis.on( 'change:value', ( evt, name, inputValue ) => this._setInputValue( inputValue ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\t[ this.inputView, this.dropdownView.buttonView ].forEach( view => {\n\t\t\tthis.focusTracker.add( view.element! );\n\t\t\tthis._focusables.add( view );\n\t\t} );\n\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * Focuses the view.\n\t */\n\tpublic focus( direction: 1 | -1 ): void {\n\t\tif ( direction === -1 ) {\n\t\t\tthis.focusCycler.focusLast();\n\t\t} else {\n\t\t\tthis.focusCycler.focusFirst();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Creates and configures the {@link #dropdownView}.\n\t */\n\tprivate _createDropdownView() {\n\t\tconst locale = this.locale!;\n\t\tconst t = locale.t;\n\t\tconst bind = this.bindTemplate;\n\t\tconst colorSelector = this._createColorSelector( locale );\n\t\tconst dropdown = createDropdown( locale );\n\t\tconst colorPreview = new View();\n\n\t\tcolorPreview.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input-color__button__preview'\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tbackgroundColor: bind.to( 'value' )\n\t\t\t\t}\n\t\t\t},\n\t\t\tchildren: [ {\n\t\t\t\ttag: 'span',\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [\n\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t'ck-input-color__button__preview__no-color-indicator',\n\t\t\t\t\t\tbind.if( 'value', 'ck-hidden', value => value != '' )\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} ]\n\t\t} );\n\n\t\tdropdown.buttonView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-input-color__button'\n\t\t\t}\n\t\t} );\n\n\t\tdropdown.buttonView.children.add( colorPreview );\n\t\tdropdown.buttonView.label = t( 'Color picker' );\n\t\tdropdown.buttonView.tooltip = true;\n\n\t\tdropdown.panelPosition = locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n\t\tdropdown.panelView.children.add( colorSelector );\n\t\tdropdown.bind( 'isEnabled' ).to( this, 'isReadOnly', value => !value );\n\n\t\tdropdown.on( 'change:isOpen', ( evt, name, isVisible ) => {\n\t\t\tif ( isVisible ) {\n\t\t\t\tcolorSelector.updateSelectedColors();\n\t\t\t\tcolorSelector.showColorGridsFragment();\n\t\t\t}\n\t\t} );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Creates and configures an instance of {@link module:ui/inputtext/inputtextview~InputTextView}.\n\t *\n\t * @returns A configured instance to be set as {@link #inputView}.\n\t */\n\tprivate _createInputTextView(): InputTextView {\n\t\tconst locale = this.locale;\n\t\tconst inputView = new InputTextView( locale );\n\n\t\tinputView.extendTemplate( {\n\t\t\ton: {\n\t\t\t\tblur: inputView.bindTemplate.to( 'blur' )\n\t\t\t}\n\t\t} );\n\n\t\tinputView.value = this.value;\n\t\tinputView.bind( 'isReadOnly', 'hasError' ).to( this );\n\t\tthis.bind( 'isFocused', 'isEmpty' ).to( inputView );\n\n\t\tinputView.on( 'input', () => {\n\t\t\tconst inputValue = inputView.element!.value;\n\t\t\t// Check if the value matches one of our defined colors' label.\n\t\t\tconst mappedColor = this.options.colorDefinitions.find( def => inputValue === def.label );\n\n\t\t\tthis._stillTyping = true;\n\t\t\tthis.value = mappedColor && mappedColor.color || inputValue;\n\t\t} );\n\n\t\tinputView.on( 'blur', () => {\n\t\t\tthis._stillTyping = false;\n\t\t\tthis._setInputValue( inputView.element!.value );\n\t\t} );\n\n\t\tinputView.delegate( 'input' ).to( this );\n\n\t\treturn inputView;\n\t}\n\n\t/**\n\t * Creates and configures the panel with \"color grid\" and \"color picker\" inside the {@link #dropdownView}.\n\t */\n\tprivate _createColorSelector( locale: Locale ) {\n\t\tconst t = locale.t;\n\t\tconst defaultColor = this.options.defaultColorValue || '';\n\t\tconst removeColorButtonLabel = defaultColor ? t( 'Restore default' ) : t( 'Remove color' );\n\n\t\tconst colorSelector = new ColorSelectorView( locale, {\n\t\t\tcolors: this.options.colorDefinitions,\n\t\t\tcolumns: this.options.columns,\n\t\t\tremoveButtonLabel: removeColorButtonLabel,\n\t\t\tcolorPickerLabel: t( 'Color picker' ),\n\t\t\tcolorPickerViewConfig: this.options.colorPickerConfig === false ? false : {\n\t\t\t\t...this.options.colorPickerConfig,\n\t\t\t\thideInput: true\n\t\t\t}\n\t\t} );\n\n\t\tcolorSelector.appendUI();\n\n\t\tcolorSelector.on<ColorSelectorExecuteEvent>( 'execute', ( evt, data ) => {\n\t\t\tif ( data.source === 'colorPickerSaveButton' ) {\n\t\t\t\tthis.dropdownView.isOpen = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.value = data.value || defaultColor;\n\n\t\t\t// Trigger the listener that actually applies the set value.\n\t\t\tthis.fire( 'input' );\n\n\t\t\tif ( data.source !== 'colorPicker' ) {\n\t\t\t\tthis.dropdownView.isOpen = false;\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Color is saved before changes in color picker. In case \"cancel button\" is pressed\n\t\t * this color will be applied.\n\t\t */\n\t\tlet backupColor = this.value;\n\n\t\tcolorSelector.on<ColorSelectorColorPickerCancelEvent>( 'colorPicker:cancel', () => {\n\t\t\t/**\n\t\t\t * Revert color to previous value before changes in color picker.\n\t\t\t */\n\t\t\tthis.value = backupColor;\n\n\t\t\tthis.fire( 'input' );\n\n\t\t\tthis.dropdownView.isOpen = false;\n\t\t} );\n\n\t\tcolorSelector.colorGridsFragmentView.colorPickerButtonView!.on( 'execute', () => {\n\t\t\t/**\n\t\t\t * Save color value before changes in color picker.\n\t\t\t */\n\t\t\tbackupColor = this.value;\n\t\t} );\n\n\t\tcolorSelector.bind( 'selectedColor' ).to( this, 'value' );\n\n\t\treturn colorSelector;\n\t}\n\n\t/**\n\t * Sets {@link #inputView}'s value property to the color value or color label,\n\t * if there is one and the user is not typing.\n\t *\n\t * Handles cases like:\n\t *\n\t * * Someone picks the color in the grid.\n\t * * The color is set from the plugin level.\n\t *\n\t * @param inputValue Color value to be set.\n\t */\n\tprivate _setInputValue( inputValue: string ) {\n\t\tif ( !this._stillTyping ) {\n\t\t\tconst normalizedInputValue = normalizeColor( inputValue );\n\t\t\t// Check if the value matches one of our defined colors.\n\t\t\tconst mappedColor = this.options.colorDefinitions.find( def => normalizedInputValue === normalizeColor( def.color ) );\n\n\t\t\tif ( mappedColor ) {\n\t\t\t\tthis.inputView.value = mappedColor.label;\n\t\t\t} else {\n\t\t\t\tthis.inputView.value = inputValue || '';\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Normalizes color value, by stripping extensive whitespace.\n * For example., transforms:\n * * `   rgb(  25 50    0 )` to `rgb(25 50 0)`,\n * * \"\\t  rgb(  25 ,  50,0 )\t\t\" to `rgb(25 50 0)`.\n *\n * @param colorString The value to be normalized.\n */\nfunction normalizeColor( colorString: string ): string {\n\treturn colorString\n\t\t// Remove any whitespace right after `(` or `,`.\n\t\t.replace( /([(,])\\s+/g, '$1' )\n\t\t// Remove any whitespace at the beginning or right before the end, `)`, `,`, or another whitespace.\n\t\t.replace( /^\\s+|\\s+(?=[),\\s]|$)/g, '' )\n\t\t// Then, replace `,` or whitespace with a single space.\n\t\t.replace( /,|\\s/g, ' ' );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/ui/table-properties\n */\n\nimport {\n\tButtonView,\n\tViewModel,\n\ttype ColorOption,\n\ttype LabeledFieldView,\n\ttype ListDropdownItemDefinition,\n\ttype NormalizedColorOption,\n\ttype ToolbarView,\n\ttype View,\n\ttype ColorPickerConfig\n} from 'ckeditor5/src/ui.js';\n\nimport { Collection, type LocaleTranslate } from 'ckeditor5/src/utils.js';\nimport { isColor, isLength, isPercentage } from 'ckeditor5/src/engine.js';\n\nimport type TableCellPropertiesView from '../../tablecellproperties/ui/tablecellpropertiesview.js';\nimport type TablePropertiesView from '../../tableproperties/ui/tablepropertiesview.js';\n\nimport ColorInputView from '../../ui/colorinputview.js';\n\nconst isEmpty = ( val: string ) => val === '';\n\n/**\n * Returns an object containing pairs of CSS border style values and their localized UI\n * labels. Used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}\n * and {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView}.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getBorderStyleLabels( t: LocaleTranslate ): Record<string, string> {\n\treturn {\n\t\tnone: t( 'None' ),\n\t\tsolid: t( 'Solid' ),\n\t\tdotted: t( 'Dotted' ),\n\t\tdashed: t( 'Dashed' ),\n\t\tdouble: t( 'Double' ),\n\t\tgroove: t( 'Groove' ),\n\t\tridge: t( 'Ridge' ),\n\t\tinset: t( 'Inset' ),\n\t\toutset: t( 'Outset' )\n\t};\n}\n\n/**\n * Returns a localized error string that can be displayed next to color (background, border)\n * fields that have an invalid value.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getLocalizedColorErrorText( t: LocaleTranslate ): string {\n\treturn t( 'The color is invalid. Try \"#FF0000\" or \"rgb(255,0,0)\" or \"red\".' );\n}\n\n/**\n * Returns a localized error string that can be displayed next to length (padding, border width)\n * fields that have an invalid value.\n *\n * @param t The \"t\" function provided by the editor that is used to localize strings.\n */\nexport function getLocalizedLengthErrorText( t: LocaleTranslate ): string {\n\treturn t( 'The value is invalid. Try \"10px\" or \"2em\" or simply \"2\".' );\n}\n\n/**\n * Returns `true` when the passed value is an empty string or a valid CSS color expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isColor}.\n */\nexport function colorFieldValidator( value: string ): boolean {\n\tvalue = value.trim().toLowerCase();\n\n\treturn isEmpty( value ) || isColor( value );\n}\n\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n * See {@link module:engine/view/styles/utils~isPercentage}.\n */\nexport function lengthFieldValidator( value: string ): boolean {\n\tvalue = value.trim();\n\n\treturn isEmpty( value ) || isNumberString( value ) || isLength( value ) || isPercentage( value );\n}\n\n/**\n * Returns `true` when the passed value is an empty string, a number without a unit or a valid CSS length expression.\n * Otherwise, `false` is returned.\n *\n * See {@link module:engine/view/styles/utils~isLength}.\n */\nexport function lineWidthFieldValidator( value: string ): boolean {\n\tvalue = value.trim();\n\n\treturn isEmpty( value ) || isNumberString( value ) || isLength( value );\n}\n\n/**\n * Generates item definitions for a UI dropdown that allows changing the border style of a table or a table cell.\n *\n * @param defaultStyle The default border.\n */\nexport function getBorderStyleDefinitions(\n\tview: TableCellPropertiesView | TablePropertiesView,\n\tdefaultStyle: string\n): Collection<ListDropdownItemDefinition> {\n\tconst itemDefinitions: Collection<ListDropdownItemDefinition> = new Collection();\n\tconst styleLabels = getBorderStyleLabels( view.t! );\n\n\tfor ( const style in styleLabels ) {\n\t\tconst definition: ListDropdownItemDefinition = {\n\t\t\ttype: 'button',\n\t\t\tmodel: new ViewModel( {\n\t\t\t\t_borderStyleValue: style,\n\t\t\t\tlabel: styleLabels[ style ],\n\t\t\t\trole: 'menuitemradio',\n\t\t\t\twithText: true\n\t\t\t} )\n\t\t};\n\n\t\tif ( style === 'none' ) {\n\t\t\tdefinition.model.bind( 'isOn' ).to( view, 'borderStyle', value => {\n\t\t\t\tif ( defaultStyle === 'none' ) {\n\t\t\t\t\treturn !value;\n\t\t\t\t}\n\n\t\t\t\treturn value === style;\n\t\t\t} );\n\t\t} else {\n\t\t\tdefinition.model.bind( 'isOn' ).to( view, 'borderStyle', value => {\n\t\t\t\treturn value === style;\n\t\t\t} );\n\t\t}\n\n\t\titemDefinitions.add( definition );\n\t}\n\n\treturn itemDefinitions;\n}\n\n/**\n * A helper that fills a toolbar with buttons that:\n *\n * * have some labels,\n * * have some icons,\n * * set a certain UI view property value upon execution.\n *\n * @param nameToValue A function that maps a button name to a value. By default names are the same as values.\n */\nexport function fillToolbar<TView extends View, TPropertyName extends keyof TView>(\n\toptions: {\n\t\tview: TView;\n\t\ticons: Record<string, string>;\n\t\ttoolbar: ToolbarView;\n\t\tlabels: Record<number, string>;\n\t\tpropertyName: TPropertyName;\n\t\tnameToValue?: ( name: string ) => string;\n\t\tdefaultValue?: string;\n\t}\n): void {\n\tconst { view, icons, toolbar, labels, propertyName, nameToValue, defaultValue } = options;\n\tfor ( const name in labels ) {\n\t\tconst button = new ButtonView( view.locale );\n\n\t\tbutton.set( {\n\t\t\trole: 'radio',\n\t\t\tisToggleable: true,\n\t\t\tlabel: labels[ name ],\n\t\t\ticon: icons[ name ],\n\t\t\ttooltip: labels[ name ]\n\t\t} );\n\n\t\t// If specified the `nameToValue()` callback, map the value based on the option's name.\n\t\tconst buttonValue = nameToValue ? nameToValue( name ) : name;\n\n\t\tbutton.bind( 'isOn' ).to( view, propertyName, value => {\n\t\t\t// `value` comes from `view[ propertyName ]`.\n\t\t\tlet valueToCompare: unknown = value;\n\n\t\t\t// If it's empty, and the `defaultValue` is specified, use it instead.\n\t\t\tif ( value === '' && defaultValue ) {\n\t\t\t\tvalueToCompare = defaultValue;\n\t\t\t}\n\n\t\t\treturn buttonValue === valueToCompare;\n\t\t} );\n\n\t\tbutton.on( 'execute', () => {\n\t\t\tview[ propertyName ] = buttonValue as any;\n\t\t} );\n\n\t\ttoolbar.items.add( button );\n\t}\n}\n\n/**\n * A default color palette used by various user interfaces related to tables, for instance,\n * by {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI} or\n * {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI}.\n *\n * The color palette follows the {@link module:table/tableconfig~TableColorConfig table color configuration format}\n * and contains the following color definitions:\n *\n * ```ts\n * const defaultColors = [\n *   {\n *     color: 'hsl(0, 0%, 0%)',\n *     label: 'Black'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 30%)',\n *     label: 'Dim grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 60%)',\n *     label: 'Grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 90%)',\n *     label: 'Light grey'\n *   },\n *   {\n *     color: 'hsl(0, 0%, 100%)',\n *     label: 'White',\n *     hasBorder: true\n *   },\n *   {\n *     color: 'hsl(0, 75%, 60%)',\n *     label: 'Red'\n *   },\n *   {\n *     color: 'hsl(30, 75%, 60%)',\n *     label: 'Orange'\n *   },\n *   {\n *     color: 'hsl(60, 75%, 60%)',\n *     label: 'Yellow'\n *   },\n *   {\n *     color: 'hsl(90, 75%, 60%)',\n *     label: 'Light green'\n *   },\n *   {\n *     color: 'hsl(120, 75%, 60%)',\n *     label: 'Green'\n *   },\n *   {\n *     color: 'hsl(150, 75%, 60%)',\n *     label: 'Aquamarine'\n *   },\n *   {\n *     color: 'hsl(180, 75%, 60%)',\n *     label: 'Turquoise'\n *   },\n *   {\n *     color: 'hsl(210, 75%, 60%)',\n *     label: 'Light blue'\n *   },\n *   {\n *     color: 'hsl(240, 75%, 60%)',\n *     label: 'Blue'\n *   },\n *   {\n *     color: 'hsl(270, 75%, 60%)',\n *     label: 'Purple'\n *   }\n * ];\n * ```\n */\nexport const defaultColors: Array<ColorOption> = [\n\t{\n\t\tcolor: 'hsl(0, 0%, 0%)',\n\t\tlabel: 'Black'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 30%)',\n\t\tlabel: 'Dim grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 60%)',\n\t\tlabel: 'Grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 90%)',\n\t\tlabel: 'Light grey'\n\t},\n\t{\n\t\tcolor: 'hsl(0, 0%, 100%)',\n\t\tlabel: 'White',\n\t\thasBorder: true\n\t},\n\t{\n\t\tcolor: 'hsl(0, 75%, 60%)',\n\t\tlabel: 'Red'\n\t},\n\t{\n\t\tcolor: 'hsl(30, 75%, 60%)',\n\t\tlabel: 'Orange'\n\t},\n\t{\n\t\tcolor: 'hsl(60, 75%, 60%)',\n\t\tlabel: 'Yellow'\n\t},\n\t{\n\t\tcolor: 'hsl(90, 75%, 60%)',\n\t\tlabel: 'Light green'\n\t},\n\t{\n\t\tcolor: 'hsl(120, 75%, 60%)',\n\t\tlabel: 'Green'\n\t},\n\t{\n\t\tcolor: 'hsl(150, 75%, 60%)',\n\t\tlabel: 'Aquamarine'\n\t},\n\t{\n\t\tcolor: 'hsl(180, 75%, 60%)',\n\t\tlabel: 'Turquoise'\n\t},\n\t{\n\t\tcolor: 'hsl(210, 75%, 60%)',\n\t\tlabel: 'Light blue'\n\t},\n\t{\n\t\tcolor: 'hsl(240, 75%, 60%)',\n\t\tlabel: 'Blue'\n\t},\n\t{\n\t\tcolor: 'hsl(270, 75%, 60%)',\n\t\tlabel: 'Purple'\n\t}\n];\n\n/**\n * Returns a creator for a color input with a label.\n *\n * For given options, it returns a function that creates an instance of a\n * {@link module:table/ui/colorinputview~ColorInputView color input} logically related to\n * a {@link module:ui/labeledfield/labeledfieldview~LabeledFieldView labeled view} in the DOM.\n *\n * The helper does the following:\n *\n * * It sets the color input `id` and `ariaDescribedById` attributes.\n * * It binds the color input `isReadOnly` to the labeled view.\n * * It binds the color input `hasError` to the labeled view.\n * * It enables a logic that cleans up the error when the user starts typing in the color input.\n *\n * Usage:\n *\n * ```ts\n * const colorInputCreator = getLabeledColorInputCreator( {\n *   colorConfig: [ ... ],\n *   columns: 3,\n * } );\n *\n * const labeledInputView = new LabeledFieldView( locale, colorInputCreator );\n * console.log( labeledInputView.view ); // A color input instance.\n * ```\n *\n * @internal\n * @param options Color input options.\n * @param options.colorConfig The configuration of the color palette displayed in the input's dropdown.\n * @param options.columns The configuration of the number of columns the color palette consists of in the input's dropdown.\n * @param options.defaultColorValue If specified, the color input view will replace the \"Remove color\" button with\n * the \"Restore default\" button. Instead of clearing the input field, the default color value will be set.\n * @param options.colorPickerConfig The configuration of the color picker. You could disable it or define your output format.\n */\nexport function getLabeledColorInputCreator(\n\toptions: {\n\t\tcolorConfig: Array<NormalizedColorOption>;\n\t\tcolumns: number;\n\t\tdefaultColorValue?: string;\n\t\tcolorPickerConfig: false | ColorPickerConfig;\n\t}\n) {\n\treturn ( labeledFieldView: LabeledFieldView, viewUid: string, statusUid: string ): ColorInputView => {\n\t\tconst colorInputView = new ColorInputView( labeledFieldView.locale!, {\n\t\t\tcolorDefinitions: colorConfigToColorGridDefinitions( options.colorConfig ),\n\t\t\tcolumns: options.columns,\n\t\t\tdefaultColorValue: options.defaultColorValue,\n\t\t\tcolorPickerConfig: options.colorPickerConfig\n\t\t} );\n\n\t\tcolorInputView.inputView.set( {\n\t\t\tid: viewUid,\n\t\t\tariaDescribedById: statusUid\n\t\t} );\n\n\t\tcolorInputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n\t\tcolorInputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n\n\t\tcolorInputView.on( 'input', () => {\n\t\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t\t// starts fixing the errors.\n\t\t\tlabeledFieldView.errorText = null;\n\t\t} );\n\n\t\tlabeledFieldView.bind( 'isEmpty', 'isFocused' ).to( colorInputView );\n\n\t\treturn colorInputView;\n\t};\n}\n\n/**\n * A simple helper method to detect number strings.\n * I allows full number notation, so omitting 0 is not allowed:\n */\nfunction isNumberString( value: string ) {\n\tconst parsedValue = parseFloat( value );\n\n\treturn !Number.isNaN( parsedValue ) && value === String( parsedValue );\n}\n\nfunction colorConfigToColorGridDefinitions( colorConfig: Array<NormalizedColorOption> ) {\n\treturn colorConfig.map( item => ( {\n\t\tcolor: item.model,\n\t\tlabel: item.label,\n\t\toptions: {\n\t\t\thasBorder: item.hasBorder\n\t\t}\n\t} ) );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/ui/formrowview\n */\n\nimport { View, type LabelView, type ViewCollection } from 'ckeditor5/src/ui.js';\nimport type { Locale } from 'ckeditor5/src/utils.js';\n\nimport '../../theme/formrow.css';\n\n/**\n * The class representing a single row in a complex form,\n * used by {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView}.\n *\n * **Note**: For now this class is private. When more use cases arrive (beyond ckeditor5-table),\n * it will become a component in ckeditor5-ui.\n *\n * @internal\n */\nexport default class FormRowView extends View {\n\t/**\n\t * An additional CSS class added to the {@link #element}.\n\t *\n\t * @observable\n\t */\n\tpublic declare class: string | null;\n\n\t/**\n\t * A collection of row items (buttons, dropdowns, etc.).\n\t */\n\tpublic readonly children: ViewCollection;\n\n\t/**\n\t * The role property reflected by the `role` DOM attribute of the {@link #element}.\n\t *\n\t * **Note**: Used only when a `labelView` is passed to constructor `options`.\n\t *\n\t * @observable\n\t * @internal\n\t */\n\tpublic declare _role: string | null;\n\n\t/**\n\t * The ARIA property reflected by the `aria-labelledby` DOM attribute of the {@link #element}.\n\t *\n\t * **Note**: Used only when a `labelView` is passed to constructor `options`.\n\t *\n\t * @observable\n\t * @internal\n\t */\n\tpublic declare _ariaLabelledBy: string | null;\n\n\t/**\n\t * Creates an instance of the form row class.\n\t *\n\t * @param locale The locale instance.\n\t * @param options.labelView When passed, the row gets the `group` and `aria-labelledby`\n\t * DOM attributes and gets described by the label.\n\t */\n\tconstructor( locale: Locale, options: { children?: Array<View>; class?: string; labelView?: LabelView } = {} ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.set( 'class', options.class || null );\n\t\tthis.children = this.createCollection();\n\n\t\tif ( options.children ) {\n\t\t\toptions.children.forEach( child => this.children.add( child ) );\n\t\t}\n\n\t\tthis.set( '_role', null );\n\t\tthis.set( '_ariaLabelledBy', null );\n\n\t\tif ( options.labelView ) {\n\t\t\tthis.set( {\n\t\t\t\t_role: 'group',\n\t\t\t\t_ariaLabelledBy: options.labelView.id\n\t\t\t} );\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-form__row',\n\t\t\t\t\tbind.to( 'class' )\n\t\t\t\t],\n\t\t\t\trole: bind.to( '_role' ),\n\t\t\t\t'aria-labelledby': bind.to( '_ariaLabelledBy' )\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/ui/tablecellpropertiesview\n */\n\nimport {\n\taddListToDropdown,\n\tButtonView,\n\tcreateLabeledDropdown,\n\tcreateLabeledInputText,\n\tFocusCycler,\n\tFormHeaderView,\n\tLabeledFieldView,\n\tLabelView,\n\tsubmitHandler,\n\tToolbarView,\n\tView,\n\tViewCollection,\n\ttype FocusableView,\n\ttype NormalizedColorOption,\n\ttype ColorPickerConfig\n} from 'ckeditor5/src/ui.js';\nimport {\n\tKeystrokeHandler,\n\tFocusTracker,\n\ttype Locale,\n\ttype ObservableChangeEvent\n} from 'ckeditor5/src/utils.js';\nimport { icons } from 'ckeditor5/src/core.js';\n\nimport {\n\tfillToolbar,\n\tgetBorderStyleDefinitions,\n\tgetBorderStyleLabels,\n\tgetLabeledColorInputCreator\n} from '../../utils/ui/table-properties.js';\nimport FormRowView from '../../ui/formrowview.js';\nimport type ColorInputView from '../../ui/colorinputview.js';\nimport type { TableCellPropertiesOptions } from '../../tableconfig.js';\n\nimport '../../../theme/form.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tablecellproperties.css';\n\nexport interface TableCellPropertiesViewOptions {\n\tborderColors: Array<NormalizedColorOption>;\n\tbackgroundColors: Array<NormalizedColorOption>;\n\tdefaultTableCellProperties: TableCellPropertiesOptions;\n\tcolorPickerConfig: false | ColorPickerConfig;\n}\n\n/**\n * The class representing a table cell properties form, allowing users to customize\n * certain style aspects of a table cell, for instance, border, padding, text alignment, etc..\n */\nexport default class TableCellPropertiesView extends View {\n\t/**\n\t * The value of the cell border style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare borderStyle: string;\n\n\t/**\n\t * The value of the cell border width style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare borderWidth: string;\n\n\t/**\n\t * The value of the cell border color style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare borderColor: string;\n\n\t/**\n\t * The value of the cell padding style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare padding: string;\n\n\t/**\n\t * The value of the cell background color style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare backgroundColor: string;\n\n\t/**\n\t * The value of the table cell width style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare width: string;\n\n\t/**\n\t * The value of the table cell height style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare height: string;\n\n\t/**\n\t * The value of the horizontal text alignment style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare horizontalAlignment: string;\n\n\t/**\n\t * The value of the vertical text alignment style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tpublic declare verticalAlignment: string;\n\n\t/**\n\t * Options passed to the view. See {@link #constructor} to learn more.\n\t */\n\tpublic readonly options: TableCellPropertiesViewOptions;\n\n\t/**\n\t * Tracks information about the DOM focus in the form.\n\t */\n\tpublic readonly focusTracker: FocusTracker;\n\n\t/**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler;\n\n\t/**\n\t * A collection of child views in the form.\n\t */\n\tpublic readonly children: ViewCollection;\n\n\t/**\n\t * A dropdown that allows selecting the style of the table cell border.\n\t */\n\tpublic readonly borderStyleDropdown: LabeledFieldView<FocusableView>;\n\n\t/**\n\t * An input that allows specifying the width of the table cell border.\n\t */\n\tpublic readonly borderWidthInput: LabeledFieldView<FocusableView>;\n\n\t/**\n\t * An input that allows specifying the color of the table cell border.\n\t */\n\tpublic readonly borderColorInput: LabeledFieldView<ColorInputView>;\n\n\t/**\n\t * An input that allows specifying the table cell background color.\n\t */\n\tpublic readonly backgroundInput: LabeledFieldView<ColorInputView>;\n\n\t/**\n\t * An input that allows specifying the table cell padding.\n\t */\n\tpublic readonly paddingInput: LabeledFieldView;\n\n\t/**\n\t * An input that allows specifying the table cell width.\n\t */\n\tpublic readonly widthInput: LabeledFieldView<FocusableView>;\n\n\t/**\n\t * An input that allows specifying the table cell height.\n\t */\n\tpublic readonly heightInput: LabeledFieldView<FocusableView>;\n\n\t/**\n\t * A toolbar with buttons that allow changing the horizontal text alignment in a table cell.\n\t */\n\tpublic readonly horizontalAlignmentToolbar: ToolbarView;\n\n\t/**\n\t * A toolbar with buttons that allow changing the vertical text alignment in a table cell.\n\t */\n\tpublic readonly verticalAlignmentToolbar: ToolbarView;\n\n\t/**\n\t * The \"Save\" button view.\n\t */\n\tpublic saveButtonView: ButtonView;\n\n\t/**\n\t * The \"Cancel\" button view.\n\t */\n\tpublic cancelButtonView: ButtonView;\n\n\t/**\n\t * A collection of views that can be focused in the form.\n\t */\n\tprotected readonly _focusables: ViewCollection<FocusableView>;\n\n\t/**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */\n\tprotected readonly _focusCycler: FocusCycler;\n\n\t/**\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Additional configuration of the view.\n\t * @param options.borderColors A configuration of the border color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#borderColorInput}.\n\t * @param options.backgroundColors A configuration of the background color palette used by the\n\t * {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView#backgroundInput}.\n\t * @param options.defaultTableCellProperties The default table cell properties.\n\t */\n\tconstructor( locale: Locale, options: TableCellPropertiesViewOptions ) {\n\t\tsuper( locale );\n\n\t\tthis.set( {\n\t\t\tborderStyle: '',\n\t\t\tborderWidth: '',\n\t\t\tborderColor: '',\n\t\t\tpadding: '',\n\t\t\tbackgroundColor: '',\n\t\t\twidth: '',\n\t\t\theight: '',\n\t\t\thorizontalAlignment: '',\n\t\t\tverticalAlignment: ''\n\t\t} );\n\n\t\tthis.options = options;\n\n\t\tconst { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n\t\tconst { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n\t\tconst { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n\t\tconst { horizontalAlignmentToolbar, verticalAlignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n\n\t\tthis.focusTracker = new FocusTracker();\n\t\tthis.keystrokes = new KeystrokeHandler();\n\t\tthis.children = this.createCollection();\n\t\tthis.borderStyleDropdown = borderStyleDropdown;\n\t\tthis.borderWidthInput = borderWidthInput;\n\t\tthis.borderColorInput = borderColorInput;\n\t\tthis.backgroundInput = backgroundInput;\n\t\tthis.paddingInput = this._createPaddingField();\n\t\tthis.widthInput = widthInput;\n\t\tthis.heightInput = heightInput;\n\t\tthis.horizontalAlignmentToolbar = horizontalAlignmentToolbar;\n\t\tthis.verticalAlignmentToolbar = verticalAlignmentToolbar;\n\n\t\t// Defer creating to make sure other fields are present and the Save button can\n\t\t// bind its #isEnabled to their error messages so there's no way to save unless all\n\t\t// fields are valid.\n\t\tconst { saveButtonView, cancelButtonView } = this._createActionButtons();\n\n\t\tthis.saveButtonView = saveButtonView;\n\t\tthis.cancelButtonView = cancelButtonView;\n\t\tthis._focusables = new ViewCollection();\n\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t// Form header.\n\t\tthis.children.add( new FormHeaderView( locale, {\n\t\t\tlabel: this.t!( 'Cell properties' )\n\t\t} ) );\n\n\t\t// Border row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: borderRowLabel,\n\t\t\tchildren: [\n\t\t\t\tborderRowLabel,\n\t\t\t\tborderStyleDropdown,\n\t\t\t\tborderColorInput,\n\t\t\t\tborderWidthInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__border-row'\n\t\t} ) );\n\n\t\t// Background.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: backgroundRowLabel,\n\t\t\tchildren: [\n\t\t\t\tbackgroundRowLabel,\n\t\t\t\tbackgroundInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__background-row'\n\t\t} ) );\n\n\t\t// Dimensions row and padding.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\t// Dimensions row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: dimensionsLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tdimensionsLabel,\n\t\t\t\t\t\twidthInput,\n\t\t\t\t\t\toperatorLabel,\n\t\t\t\t\t\theightInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-form__dimensions-row'\n\t\t\t\t} ),\n\t\t\t\t// Padding row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tthis.paddingInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-cell-properties-form__padding-row'\n\t\t\t\t} )\n\t\t\t]\n\t\t} ) );\n\n\t\t// Text alignment row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: alignmentLabel,\n\t\t\tchildren: [\n\t\t\t\talignmentLabel,\n\t\t\t\thorizontalAlignmentToolbar,\n\t\t\t\tverticalAlignmentToolbar\n\t\t\t],\n\t\t\tclass: 'ck-table-cell-properties-form__alignment-row'\n\t\t} ) );\n\n\t\t// Action row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t],\n\t\t\tclass: 'ck-table-form__action-row'\n\t\t} ) );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-form',\n\t\t\t\t\t'ck-table-form',\n\t\t\t\t\t'ck-table-cell-properties-form'\n\t\t\t\t],\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/90\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\t// Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n\t\t// which is of the \"submit\" DOM \"type\".\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\t// Maintain continuous focus cycling over views that have focusable children and focus cyclers themselves.\n\t\t[ this.borderColorInput, this.backgroundInput ].forEach( view => {\n\t\t\tthis._focusCycler.chain( view.fieldView.focusCycler );\n\t\t} );\n\n\t\t[\n\t\t\tthis.borderStyleDropdown,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.widthInput,\n\t\t\tthis.heightInput,\n\t\t\tthis.paddingInput,\n\t\t\tthis.horizontalAlignmentToolbar,\n\t\t\tthis.verticalAlignmentToolbar,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t].forEach( view => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( view );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( view.element! );\n\t\t} );\n\n\t\t// Mainly for closing using \"Esc\" and navigation using \"Tab\".\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist focusable field in the form.\n\t */\n\tpublic focus(): void {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t */\n\tprivate _createBorderFields(): {\n\t\tborderRowLabel: LabelView;\n\t\tborderStyleDropdown: LabeledFieldView;\n\t\tborderColorInput: LabeledFieldView<ColorInputView>;\n\t\tborderWidthInput: LabeledFieldView;\n\t\t} {\n\t\tconst defaultTableCellProperties = this.options.defaultTableCellProperties;\n\t\tconst defaultBorder = {\n\t\t\tstyle: defaultTableCellProperties.borderStyle,\n\t\t\twidth: defaultTableCellProperties.borderWidth,\n\t\t\tcolor: defaultTableCellProperties.borderColor\n\t\t};\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.borderColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: defaultBorder.color,\n\t\t\tcolorPickerConfig: this.options.colorPickerConfig\n\t\t} );\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\t\tconst accessibleLabel = t( 'Style' );\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst borderRowLabel = new LabelView( locale );\n\t\tborderRowLabel.text = t( 'Border' );\n\n\t\t// -- Style ---------------------------------------------------\n\n\t\tconst styleLabels = getBorderStyleLabels( t );\n\t\tconst borderStyleDropdown = new LabeledFieldView( locale, createLabeledDropdown );\n\t\tborderStyleDropdown.set( {\n\t\t\tlabel: accessibleLabel,\n\t\t\tclass: 'ck-table-form__border-style'\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.set( {\n\t\t\tariaLabel: accessibleLabel,\n\t\t\tariaLabelledBy: undefined,\n\t\t\tisOn: false,\n\t\t\twithText: true,\n\t\t\ttooltip: accessibleLabel\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.bind( 'label' ).to( this, 'borderStyle', value => {\n\t\t\treturn styleLabels[ value ? value : 'none' ];\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.on( 'execute', evt => {\n\t\t\tthis.borderStyle = ( evt.source as Record<string, unknown> )._borderStyleValue as string;\n\t\t} );\n\n\t\tborderStyleDropdown.bind( 'isEmpty' ).to( this, 'borderStyle', value => !value );\n\n\t\taddListToDropdown( borderStyleDropdown.fieldView, getBorderStyleDefinitions( this, defaultBorder.style! ), {\n\t\t\trole: 'menu',\n\t\t\tariaLabel: accessibleLabel\n\t\t} );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst borderWidthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tborderWidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__border-width'\n\t\t} );\n\n\t\tborderWidthInput.fieldView.bind( 'value' ).to( this, 'borderWidth' );\n\t\tborderWidthInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\t\tborderWidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderWidth = borderWidthInput.fieldView.element!.value;\n\t\t} );\n\n\t\t// -- Color ---------------------------------------------------\n\n\t\tconst borderColorInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tborderColorInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-form__border-color'\n\t\t} );\n\n\t\tborderColorInput.fieldView.bind( 'value' ).to( this, 'borderColor' );\n\t\tborderColorInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\n\t\tborderColorInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderColor = borderColorInput.fieldView.value;\n\t\t} );\n\n\t\t// Reset the border color and width fields depending on the `border-style` value.\n\t\tthis.on<ObservableChangeEvent<string>>( 'change:borderStyle', ( evt, name, newValue, oldValue ) => {\n\t\t\t// When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/6227.\n\t\t\tif ( !isBorderStyleSet( newValue ) ) {\n\t\t\t\tthis.borderColor = '';\n\t\t\t\tthis.borderWidth = '';\n\t\t\t}\n\n\t\t\t// When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n\t\t\tif ( !isBorderStyleSet( oldValue ) ) {\n\t\t\t\tthis.borderColor = defaultBorder.color!;\n\t\t\t\tthis.borderWidth = defaultBorder.width!;\n\t\t\t}\n\t\t} );\n\n\t\treturn {\n\t\t\tborderRowLabel,\n\t\t\tborderStyleDropdown,\n\t\t\tborderColorInput,\n\t\t\tborderWidthInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t */\n\tprivate _createBackgroundFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst backgroundRowLabel = new LabelView( locale );\n\t\tbackgroundRowLabel.text = t( 'Background' );\n\n\t\t// -- Background color input -----------------------------------\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.backgroundColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: this.options.defaultTableCellProperties.backgroundColor,\n\t\t\tcolorPickerConfig: this.options.colorPickerConfig\n\t\t} );\n\n\t\tconst backgroundInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tbackgroundInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-cell-properties-form__background'\n\t\t} );\n\n\t\tbackgroundInput.fieldView.bind( 'value' ).to( this, 'backgroundColor' );\n\t\tbackgroundInput.fieldView.on( 'input', () => {\n\t\t\tthis.backgroundColor = backgroundInput.fieldView.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tbackgroundRowLabel,\n\t\t\tbackgroundInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput}.\n\t * * {@link #heightInput}.\n\t */\n\tprivate _createDimensionFields(): {\n\t\tdimensionsLabel: LabelView;\n\t\twidthInput: LabeledFieldView;\n\t\toperatorLabel: View;\n\t\theightInput: LabeledFieldView;\n\t\t} {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst dimensionsLabel = new LabelView( locale );\n\t\tdimensionsLabel.text = t( 'Dimensions' );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst widthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\twidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__width'\n\t\t} );\n\n\t\twidthInput.fieldView.bind( 'value' ).to( this, 'width' );\n\t\twidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.width = widthInput.fieldView.element!.value;\n\t\t} );\n\n\t\t// -- Operator ---------------------------------------------------\n\n\t\tconst operatorLabel = new View( locale );\n\t\toperatorLabel.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-table-form__dimension-operator'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{ text: '×' }\n\t\t\t]\n\t\t} );\n\n\t\t// -- Height ---------------------------------------------------\n\n\t\tconst heightInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\theightInput.set( {\n\t\t\tlabel: t( 'Height' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__height'\n\t\t} );\n\n\t\theightInput.fieldView.bind( 'value' ).to( this, 'height' );\n\t\theightInput.fieldView.on( 'input', () => {\n\t\t\tthis.height = heightInput.fieldView.element!.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tdimensionsLabel,\n\t\t\twidthInput,\n\t\t\toperatorLabel,\n\t\t\theightInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #paddingInput}.\n\t */\n\tprivate _createPaddingField(): LabeledFieldView {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\tconst paddingInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tpaddingInput.set( {\n\t\t\tlabel: t( 'Padding' ),\n\t\t\tclass: 'ck-table-cell-properties-form__padding'\n\t\t} );\n\n\t\tpaddingInput.fieldView.bind( 'value' ).to( this, 'padding' );\n\t\tpaddingInput.fieldView.on( 'input', () => {\n\t\t\tthis.padding = paddingInput.fieldView.element!.value;\n\t\t} );\n\n\t\treturn paddingInput;\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #horizontalAlignmentToolbar},\n\t * * {@link #verticalAlignmentToolbar}.\n\t */\n\tprivate _createAlignmentFields() {\n\t\tconst locale = this.locale!;\n\t\tconst t = this.t!;\n\n\t\tconst alignmentLabel = new LabelView( locale );\n\n\t\tconst ALIGNMENT_ICONS = {\n\t\t\tleft: icons.alignLeft,\n\t\t\tcenter: icons.alignCenter,\n\t\t\tright: icons.alignRight,\n\t\t\tjustify: icons.alignJustify,\n\t\t\ttop: icons.alignTop,\n\t\t\tmiddle: icons.alignMiddle,\n\t\t\tbottom: icons.alignBottom\n\t\t};\n\n\t\talignmentLabel.text = t( 'Table cell text alignment' );\n\n\t\t// -- Horizontal ---------------------------------------------------\n\n\t\tconst horizontalAlignmentToolbar = new ToolbarView( locale );\n\t\tconst isContentRTL = locale.contentLanguageDirection === 'rtl';\n\n\t\thorizontalAlignmentToolbar.set( {\n\t\t\tisCompact: true,\n\t\t\trole: 'radiogroup',\n\t\t\tariaLabel: t( 'Horizontal text alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: ALIGNMENT_ICONS,\n\t\t\ttoolbar: horizontalAlignmentToolbar,\n\t\t\tlabels: this._horizontalAlignmentLabels,\n\t\t\tpropertyName: 'horizontalAlignment',\n\t\t\tnameToValue: name => {\n\t\t\t\t// For the RTL content, we want to swap the buttons \"align to the left\" and \"align to the right\".\n\t\t\t\tif ( isContentRTL ) {\n\t\t\t\t\tif ( name === 'left' ) {\n\t\t\t\t\t\treturn 'right';\n\t\t\t\t\t} else if ( name === 'right' ) {\n\t\t\t\t\t\treturn 'left';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn name;\n\t\t\t},\n\t\t\tdefaultValue: this.options.defaultTableCellProperties.horizontalAlignment\n\t\t} );\n\n\t\t// -- Vertical -----------------------------------------------------\n\n\t\tconst verticalAlignmentToolbar = new ToolbarView( locale );\n\n\t\tverticalAlignmentToolbar.set( {\n\t\t\tisCompact: true,\n\t\t\trole: 'radiogroup',\n\t\t\tariaLabel: t( 'Vertical text alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: ALIGNMENT_ICONS,\n\t\t\ttoolbar: verticalAlignmentToolbar,\n\t\t\tlabels: this._verticalAlignmentLabels,\n\t\t\tpropertyName: 'verticalAlignment',\n\t\t\tdefaultValue: this.options.defaultTableCellProperties.verticalAlignment\n\t\t} );\n\n\t\treturn {\n\t\t\thorizontalAlignmentToolbar,\n\t\t\tverticalAlignmentToolbar,\n\t\t\talignmentLabel\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t */\n\tprivate _createActionButtons() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\t\tconst saveButtonView = new ButtonView( locale );\n\t\tconst cancelButtonView = new ButtonView( locale );\n\t\tconst fieldsThatShouldValidateToSave = [\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.paddingInput\n\t\t];\n\n\t\tsaveButtonView.set( {\n\t\t\tlabel: t( 'Save' ),\n\t\t\ticon: icons.check,\n\t\t\tclass: 'ck-button-save',\n\t\t\ttype: 'submit',\n\t\t\twithText: true\n\t\t} );\n\n\t\tsaveButtonView.bind( 'isEnabled' ).toMany( fieldsThatShouldValidateToSave, 'errorText', ( ...errorTexts ) => {\n\t\t\treturn errorTexts.every( errorText => !errorText );\n\t\t} );\n\n\t\tcancelButtonView.set( {\n\t\t\tlabel: t( 'Cancel' ),\n\t\t\ticon: icons.cancel,\n\t\t\tclass: 'ck-button-cancel',\n\t\t\twithText: true\n\t\t} );\n\n\t\tcancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n\t\treturn {\n\t\t\tsaveButtonView, cancelButtonView\n\t\t};\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #horizontalAlignmentToolbar} buttons.\n\t */\n\tprivate get _horizontalAlignmentLabels(): Record<string, string> {\n\t\tconst locale = this.locale!;\n\t\tconst t = this.t!;\n\n\t\tconst left = t( 'Align cell text to the left' );\n\t\tconst center = t( 'Align cell text to the center' );\n\t\tconst right = t( 'Align cell text to the right' );\n\t\tconst justify = t( 'Justify cell text' );\n\n\t\t// Returns object with a proper order of labels.\n\t\tif ( locale.uiLanguageDirection === 'rtl' ) {\n\t\t\treturn { right, center, left, justify };\n\t\t} else {\n\t\t\treturn { left, center, right, justify };\n\t\t}\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #verticalAlignmentToolbar} buttons.\n\t */\n\tprivate get _verticalAlignmentLabels(): Record<string, string> {\n\t\tconst t = this.t!;\n\n\t\treturn {\n\t\t\ttop: t( 'Align cell text to the top' ),\n\t\t\tmiddle: t( 'Align cell text to the middle' ),\n\t\t\tbottom: t( 'Align cell text to the bottom' )\n\t\t};\n\t}\n}\n\nfunction isBorderStyleSet( value: string ) {\n\treturn value !== 'none';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/ui/contextualballoon\n */\n\nimport { Rect, type PositionOptions } from 'ckeditor5/src/utils.js';\nimport { BalloonPanelView, type ContextualBalloon } from 'ckeditor5/src/ui.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element, Position, Range } from 'ckeditor5/src/engine.js';\n\nimport { getSelectionAffectedTableWidget, getTableWidgetAncestor } from './widget.js';\nimport { getSelectionAffectedTable } from '../common.js';\n\nconst BALLOON_POSITIONS = /* #__PURE__ */ ( () => [\n\tBalloonPanelView.defaultPositions.northArrowSouth,\n\tBalloonPanelView.defaultPositions.northArrowSouthWest,\n\tBalloonPanelView.defaultPositions.northArrowSouthEast,\n\tBalloonPanelView.defaultPositions.southArrowNorth,\n\tBalloonPanelView.defaultPositions.southArrowNorthWest,\n\tBalloonPanelView.defaultPositions.southArrowNorthEast,\n\tBalloonPanelView.defaultPositions.viewportStickyNorth\n] )();\n\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the table in the editor content, if one is selected.\n *\n * @param editor The editor instance.\n * @param target Either \"cell\" or \"table\". Determines the target the balloon will be attached to.\n */\nexport function repositionContextualBalloon( editor: Editor, target: string ): void {\n\tconst balloon: ContextualBalloon = editor.plugins.get( 'ContextualBalloon' );\n\tconst selection = editor.editing.view.document.selection;\n\tlet position;\n\n\tif ( target === 'cell' ) {\n\t\tif ( getTableWidgetAncestor( selection ) ) {\n\t\t\tposition = getBalloonCellPositionData( editor );\n\t\t}\n\t}\n\telse if ( getSelectionAffectedTableWidget( selection ) ) {\n\t\tposition = getBalloonTablePositionData( editor );\n\t}\n\n\tif ( position ) {\n\t\tballoon.updatePosition( position );\n\t}\n}\n\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table in the editor content.\n *\n * @param editor The editor instance.\n */\nexport function getBalloonTablePositionData( editor: Editor ): Partial<PositionOptions> {\n\tconst selection = editor.model.document.selection;\n\tconst modelTable = getSelectionAffectedTable( selection );\n\tconst viewTable = editor.editing.mapper.toViewElement( modelTable )!;\n\n\treturn {\n\t\ttarget: editor.editing.view.domConverter.mapViewToDom( viewTable )!,\n\t\tpositions: BALLOON_POSITIONS\n\t};\n}\n\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected table cell in the editor content.\n *\n * @param editor The editor instance.\n */\nexport function getBalloonCellPositionData( editor: Editor ): Partial<PositionOptions> {\n\tconst mapper = editor.editing.mapper;\n\tconst domConverter = editor.editing.view.domConverter;\n\tconst selection = editor.model.document.selection;\n\n\tif ( selection.rangeCount > 1 ) {\n\t\treturn {\n\t\t\ttarget: () => createBoundingRect( selection.getRanges(), editor ),\n\t\t\tpositions: BALLOON_POSITIONS\n\t\t};\n\t}\n\n\tconst modelTableCell = getTableCellAtPosition( selection.getFirstPosition()! );\n\tconst viewTableCell = mapper.toViewElement( modelTableCell )!;\n\n\treturn {\n\t\ttarget: domConverter.mapViewToDom( viewTableCell ),\n\t\tpositions: BALLOON_POSITIONS\n\t};\n}\n\n/**\n * Returns the first selected table cell from a multi-cell or in-cell selection.\n *\n * @param position Document position.\n */\nfunction getTableCellAtPosition( position: Position ): Element {\n\tconst isTableCellSelected = position.nodeAfter && position.nodeAfter.is( 'element', 'tableCell' );\n\n\treturn isTableCellSelected ? position.nodeAfter : position.findAncestor( 'tableCell' )!;\n}\n\n/**\n * Returns bounding rectangle for given model ranges.\n *\n * @param ranges Model ranges that the bounding rect should be returned for.\n * @param editor The editor instance.\n */\nfunction createBoundingRect( ranges: Iterable<Range>, editor: Editor ): Rect {\n\tconst mapper = editor.editing.mapper;\n\tconst domConverter = editor.editing.view.domConverter;\n\tconst rects = Array.from( ranges ).map( range => {\n\t\tconst modelTableCell = getTableCellAtPosition( range.start );\n\t\tconst viewTableCell = mapper.toViewElement( modelTableCell )!;\n\t\treturn new Rect( domConverter.mapViewToDom( viewTableCell )! );\n\t} );\n\n\treturn Rect.getBoundingRect( rects )!;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/utils/table-properties\n */\n\nimport type { BoxSides } from 'ckeditor5/src/engine.js';\nimport { isObject } from 'lodash-es';\n\n/**\n * Returns a string if all four values of box sides are equal.\n *\n * If a string is passed, it is treated as a single value (pass-through).\n *\n * ```ts\n * // Returns 'foo':\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'foo', left: 'foo' } );\n * getSingleValue( 'foo' );\n *\n * // Returns undefined:\n * getSingleValue( { top: 'foo', right: 'foo', bottom: 'bar', left: 'foo' } );\n * getSingleValue( { top: 'foo', right: 'foo' } );\n * ```\n */\nexport function getSingleValue( objectOrString: BoxSides | string | undefined ): string | undefined {\n\tif ( !objectOrString || !isObject( objectOrString ) ) {\n\t\treturn objectOrString;\n\t}\n\n\tconst { top, right, bottom, left } = objectOrString;\n\n\tif ( top == right && right == bottom && bottom == left ) {\n\t\treturn top!;\n\t}\n}\n\n/**\n * Adds a unit to a value if the value is a number or a string representing a number.\n *\n * **Note**: It does nothing to non-numeric values.\n *\n * ```ts\n * getSingleValue( 25, 'px' ); // '25px'\n * getSingleValue( 25, 'em' ); // '25em'\n * getSingleValue( '25em', 'px' ); // '25em'\n * getSingleValue( 'foo', 'px' ); // 'foo'\n * ```\n *\n * @param defaultUnit A default unit added to a numeric value.\n */\nexport function addDefaultUnitToNumericValue( value: string | number | undefined, defaultUnit: string ): string | number | undefined {\n\tconst numericValue = parseFloat( value as any );\n\n\tif ( Number.isNaN( numericValue ) ) {\n\t\treturn value;\n\t}\n\n\tif ( String( numericValue ) !== String( value ) ) {\n\t\treturn value;\n\t}\n\n\treturn `${ numericValue }${ defaultUnit }`;\n}\n\nexport interface NormalizedDefaultProperties {\n\tborderStyle: string;\n\tborderWidth: string;\n\tborderColor: string;\n\tbackgroundColor: string;\n\twidth: string;\n\theight: string;\n\talignment?: string;\n\tpadding?: string;\n\tverticalAlignment?: string;\n\thorizontalAlignment?: string;\n}\n\n/**\n * Options used to determine which properties should be added to the normalized configuration.\n */\nexport type NormalizeTableDefaultPropertiesOptions = {\n\n\t/**\n\t * Whether the \"alignment\" property should be added.\n\t */\n\tincludeAlignmentProperty?: boolean;\n\n\t/**\n\t * Whether the \"padding\" property should be added.\n\t */\n\tincludePaddingProperty?: boolean;\n\n\t/**\n\t * Whether the \"verticalAlignment\" property should be added.\n\t */\n\tincludeVerticalAlignmentProperty?: boolean;\n\n\t/**\n\t * Whether the \"horizontalAlignment\" property should be added.\n\t */\n\tincludeHorizontalAlignmentProperty?: boolean;\n\n\t/**\n\t * Whether the content is right-to-left.\n\t */\n\tisRightToLeftContent?: boolean;\n};\n\n/**\n * Returns the normalized configuration.\n *\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */\nexport function getNormalizedDefaultProperties(\n\tconfig: Partial<NormalizedDefaultProperties> | undefined,\n\toptions: NormalizeTableDefaultPropertiesOptions = {}\n): NormalizedDefaultProperties {\n\tconst normalizedConfig: NormalizedDefaultProperties = {\n\t\tborderStyle: 'none',\n\t\tborderWidth: '',\n\t\tborderColor: '',\n\t\tbackgroundColor: '',\n\t\twidth: '',\n\t\theight: '',\n\t\t...config\n\t};\n\n\tif ( options.includeAlignmentProperty && !normalizedConfig.alignment ) {\n\t\tnormalizedConfig.alignment = 'center';\n\t}\n\n\tif ( options.includePaddingProperty && !normalizedConfig.padding ) {\n\t\tnormalizedConfig.padding = '';\n\t}\n\n\tif ( options.includeVerticalAlignmentProperty && !normalizedConfig.verticalAlignment ) {\n\t\tnormalizedConfig.verticalAlignment = 'middle';\n\t}\n\n\tif ( options.includeHorizontalAlignmentProperty && !normalizedConfig.horizontalAlignment ) {\n\t\tnormalizedConfig.horizontalAlignment = options.isRightToLeftContent ? 'right' : 'left';\n\t}\n\n\treturn normalizedConfig;\n}\n\n/**\n * Returns the normalized default table properties.\n *\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */\nexport function getNormalizedDefaultTableProperties(\n\tconfig: Partial<NormalizedDefaultProperties> | undefined,\n\toptions?: NormalizeTableDefaultPropertiesOptions\n): NormalizedDefaultProperties {\n\treturn getNormalizedDefaultProperties( {\n\t\t// It adds support for border none in the table element, keep it in sync with the content styles\n\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/6841#issuecomment-1959195608\n\t\tborderStyle: 'double',\n\t\tborderColor: 'hsl(0, 0%, 70%)',\n\t\tborderWidth: '1px',\n\t\t...config\n\t}, options );\n}\n\n/**\n * Returns the normalized default cell properties.\n *\n * @param config The configuration to normalize.\n * @param options Options used to determine which properties should be added.\n */\nexport function getNormalizedDefaultCellProperties(\n\tconfig: Partial<NormalizedDefaultProperties> | undefined,\n\toptions?: NormalizeTableDefaultPropertiesOptions\n): NormalizedDefaultProperties {\n\treturn getNormalizedDefaultProperties( {\n\t\t// It adds support for border none in the table element, keep it in sync with the content styles\n\t\t// See more: https://github.com/ckeditor/ckeditor5/issues/6841#issuecomment-1959195608\n\t\tborderStyle: 'solid',\n\t\tborderColor: 'hsl(0, 0%, 75%)',\n\t\tborderWidth: '1px',\n\t\t...config\n\t}, options );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/tablecellpropertiesui\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport {\n\tButtonView,\n\tclickOutsideHandler,\n\tContextualBalloon,\n\tgetLocalizedColorOptions,\n\tnormalizeColorOptions,\n\ttype View\n} from 'ckeditor5/src/ui.js';\nimport type { Batch } from 'ckeditor5/src/engine.js';\n\nimport TableCellPropertiesView from './ui/tablecellpropertiesview.js';\nimport {\n\tcolorFieldValidator,\n\tgetLocalizedColorErrorText,\n\tgetLocalizedLengthErrorText,\n\tdefaultColors,\n\tlengthFieldValidator,\n\tlineWidthFieldValidator\n} from '../utils/ui/table-properties.js';\nimport { debounce } from 'lodash-es';\nimport { getTableWidgetAncestor } from '../utils/ui/widget.js';\nimport { getBalloonCellPositionData, repositionContextualBalloon } from '../utils/ui/contextualballoon.js';\n\nimport tableCellProperties from './../../theme/icons/table-cell-properties.svg';\nimport { getNormalizedDefaultCellProperties, type NormalizedDefaultProperties } from '../utils/table-properties.js';\nimport type { GetCallback, ObservableChangeEvent } from 'ckeditor5/src/utils.js';\n\nimport type TableCellBorderStyleCommand from './commands/tablecellborderstylecommand.js';\n\nconst ERROR_TEXT_TIMEOUT = 500;\n\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n\tborderStyle: 'tableCellBorderStyle',\n\tborderColor: 'tableCellBorderColor',\n\tborderWidth: 'tableCellBorderWidth',\n\theight: 'tableCellHeight',\n\twidth: 'tableCellWidth',\n\tpadding: 'tableCellPadding',\n\tbackgroundColor: 'tableCellBackgroundColor',\n\thorizontalAlignment: 'tableCellHorizontalAlignment',\n\tverticalAlignment: 'tableCellVerticalAlignment'\n} as const;\n\n/**\n * The table cell properties UI plugin. It introduces the `'tableCellProperties'` button\n * that opens a form allowing to specify the visual styling of a table cell.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport default class TableCellPropertiesUI extends Plugin {\n\t/**\n\t * The default table cell properties.\n\t */\n\tprivate _defaultTableCellProperties!: NormalizedDefaultProperties;\n\n\t/**\n\t * The contextual balloon plugin instance.\n\t */\n\tprivate _balloon?: ContextualBalloon;\n\n\t/**\n\t * The cell properties form view displayed inside the balloon.\n\t */\n\tpublic view?: TableCellPropertiesView | null;\n\n\t/**\n\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t */\n\tprivate _undoStepBatch?: Batch;\n\n\t/**\n\t * Flag used to indicate whether view is ready to execute update commands\n\t * (it finished loading initial data).\n\t */\n\tprivate _isReady?: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ContextualBalloon ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCellPropertiesUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'table.tableCellProperties', {\n\t\t\tborderColors: defaultColors,\n\t\t\tbackgroundColors: defaultColors\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tthis._defaultTableCellProperties = getNormalizedDefaultCellProperties(\n\t\t\teditor.config.get( 'table.tableCellProperties.defaultProperties' )!,\n\t\t\t{\n\t\t\t\tincludeVerticalAlignmentProperty: true,\n\t\t\t\tincludeHorizontalAlignmentProperty: true,\n\t\t\t\tincludePaddingProperty: true,\n\t\t\t\tisRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n\t\t\t}\n\t\t);\n\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\t\tthis.view = null;\n\t\tthis._isReady = false;\n\n\t\teditor.ui.componentFactory.add( 'tableCellProperties', locale => {\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\tlabel: t( 'Cell properties' ),\n\t\t\t\ticon: tableCellProperties,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tthis.listenTo( view, 'execute', () => this._showView() );\n\n\t\t\tconst commands = Object.values( propertyToCommandMap )\n\t\t\t\t.map( commandName => editor.commands.get( commandName )! );\n\n\t\t\tview.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => (\n\t\t\t\tareEnabled.some( isCommandEnabled => isCommandEnabled )\n\t\t\t) );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1341.\n\t\tif ( this.view ) {\n\t\t\tthis.view.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link module:table/tablecellproperties/ui/tablecellpropertiesview~TableCellPropertiesView} instance.\n\t *\n\t * @returns The cell properties form view instance.\n\t */\n\tprivate _createPropertiesView() {\n\t\tconst editor = this.editor;\n\t\tconst config = editor.config.get( 'table.tableCellProperties' )!;\n\t\tconst borderColorsConfig = normalizeColorOptions( config.borderColors! );\n\t\tconst localizedBorderColors = getLocalizedColorOptions( editor.locale, borderColorsConfig );\n\t\tconst backgroundColorsConfig = normalizeColorOptions( config.backgroundColors! );\n\t\tconst localizedBackgroundColors = getLocalizedColorOptions( editor.locale, backgroundColorsConfig );\n\t\tconst hasColorPicker = config.colorPicker !== false;\n\n\t\tconst view = new TableCellPropertiesView( editor.locale, {\n\t\t\tborderColors: localizedBorderColors,\n\t\t\tbackgroundColors: localizedBackgroundColors,\n\t\t\tdefaultTableCellProperties: this._defaultTableCellProperties,\n\t\t\tcolorPickerConfig: hasColorPicker ? ( config.colorPicker || {} ) : false\n\t\t} );\n\t\tconst t = editor.t;\n\n\t\t// Render the view so its #element is available for the clickOutsideHandler.\n\t\tview.render();\n\n\t\tthis.listenTo( view, 'submit', () => {\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\tthis.listenTo( view, 'cancel', () => {\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/6180\n\t\t\tif ( this._undoStepBatch!.operations.length ) {\n\t\t\t\teditor.execute( 'undo', this._undoStepBatch );\n\t\t\t}\n\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\t// Close the balloon on Esc key press.\n\t\tview.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._hideView();\n\t\t\tcancel();\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: view,\n\t\t\tactivator: () => this._isViewInBalloon,\n\t\t\tcontextElements: [ this._balloon!.view.element! ],\n\t\t\tcallback: () => this._hideView()\n\t\t} );\n\n\t\tconst colorErrorText = getLocalizedColorErrorText( t );\n\t\tconst lengthErrorText = getLocalizedLengthErrorText( t );\n\n\t\t// Create the \"UI -> editor data\" binding.\n\t\t// These listeners update the editor data (via table commands) when any observable\n\t\t// property of the view has changed. They also validate the value and display errors in the UI\n\t\t// when necessary. This makes the view live, which means the changes are\n\t\t// visible in the editing as soon as the user types or changes fields' values.\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:borderStyle',\n\t\t\tthis._getPropertyChangeCallback( 'tableCellBorderStyle' )\n\t\t);\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:borderColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderColorInput,\n\t\t\tcommandName: 'tableCellBorderColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:borderWidth', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderWidthInput,\n\t\t\tcommandName: 'tableCellBorderWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lineWidthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:padding', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.paddingInput,\n\t\t\tcommandName: 'tableCellPadding',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:width', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.widthInput,\n\t\t\tcommandName: 'tableCellWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:height', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.heightInput,\n\t\t\tcommandName: 'tableCellHeight',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:backgroundColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.backgroundInput,\n\t\t\tcommandName: 'tableCellBackgroundColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:horizontalAlignment',\n\t\t\tthis._getPropertyChangeCallback( 'tableCellHorizontalAlignment' )\n\t\t);\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:verticalAlignment',\n\t\t\tthis._getPropertyChangeCallback( 'tableCellVerticalAlignment' )\n\t\t);\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected cell property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t */\n\tprivate _fillViewFormFromCommandValues() {\n\t\tconst commands = this.editor.commands;\n\t\tconst borderStyleCommand: TableCellBorderStyleCommand = commands.get( 'tableCellBorderStyle' )!;\n\n\t\tObject.entries( propertyToCommandMap )\n\t\t\t.map( ( [ property, commandName ] ) => {\n\t\t\t\tconst defaultValue = this._defaultTableCellProperties[ property as keyof NormalizedDefaultProperties ] || '';\n\n\t\t\t\treturn [\n\t\t\t\t\tproperty as keyof typeof propertyToCommandMap,\n\t\t\t\t\tcommands.get( commandName )!.value as string || defaultValue\n\t\t\t\t] as const;\n\t\t\t} )\n\t\t\t.forEach( ( [ property, value ] ) => {\n\t\t\t\t// Do not set the `border-color` and `border-width` fields if `border-style:none`.\n\t\t\t\tif ( ( property === 'borderColor' || property === 'borderWidth' ) && borderStyleCommand.value === 'none' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.view!.set( property, value );\n\t\t\t} );\n\n\t\tthis._isReady = true;\n\t}\n\n\t/**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, a new {@link #_undoStepBatch} is created. It contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t */\n\tprotected _showView(): void {\n\t\tconst editor = this.editor;\n\n\t\tif ( !this.view ) {\n\t\t\tthis.view = this._createPropertiesView();\n\t\t}\n\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tthis._updateView();\n\t\t} );\n\n\t\t// Update the view with the model values.\n\t\tthis._fillViewFormFromCommandValues();\n\n\t\tthis._balloon!.add( {\n\t\t\tview: this.view,\n\t\t\tposition: getBalloonCellPositionData( editor )\n\t\t} );\n\n\t\t// Create a new batch. Clicking \"Cancel\" will undo this batch.\n\t\tthis._undoStepBatch = editor.model.createBatch();\n\n\t\t// Basic a11y.\n\t\tthis.view.focus();\n\t}\n\n\t/**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t */\n\tprotected _hideView(): void {\n\t\tconst editor = this.editor;\n\n\t\tthis.stopListening( editor.ui, 'update' );\n\n\t\tthis._isReady = false;\n\n\t\t// Blur any input element before removing it from DOM to prevent issues in some browsers.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1501.\n\t\tthis.view!.saveButtonView.focus();\n\n\t\tthis._balloon!.remove( this.view! );\n\n\t\t// Make sure the focus is not lost in the process by putting it directly\n\t\t// into the editing view.\n\t\tthis.editor.editing.view.focus();\n\t}\n\n\t/**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table cell is no longer selected.\n\t */\n\tprotected _updateView(): void {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tif ( !getTableWidgetAncestor( viewDocument.selection ) ) {\n\t\t\tthis._hideView();\n\t\t} else if ( this._isViewVisible ) {\n\t\t\trepositionContextualBalloon( editor, 'cell' );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is visible in the {@link #_balloon}.\n\t */\n\tprivate get _isViewVisible() {\n\t\treturn !!this.view && this._balloon!.visibleView === this.view;\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t */\n\tprivate get _isViewInBalloon() {\n\t\treturn !!this.view && this._balloon!.hasView( this.view );\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon the {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * @param defaultValue The default value of the command.\n\t */\n\tprivate _getPropertyChangeCallback(\n\t\tcommandName: 'tableCellBorderStyle' | 'tableCellHorizontalAlignment' | 'tableCellVerticalAlignment'\n\t): GetCallback<ObservableChangeEvent<string>> {\n\t\treturn ( evt, propertyName, newValue ) => {\n\t\t\tif ( !this._isReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( commandName, {\n\t\t\t\tvalue: newValue,\n\t\t\t\tbatch: this._undoStepBatch\n\t\t\t} );\n\t\t};\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon the {@link #view view's} property change:\n\t * * Executes a related editor command with the new property value if the value is valid,\n\t * * Or sets the error text next to the invalid field, if the value did not pass the validation.\n\t */\n\tprivate _getValidatedPropertyChangeCallback(\n\t\toptions: {\n\t\t\tcommandName: `tableCell${ 'BorderColor' | 'BorderWidth' | 'Padding' | 'Width' | 'Height' | 'BackgroundColor' }`;\n\t\t\tviewField: View & { errorText?: string | null };\n\t\t\tvalidator: ( arg0: string ) => boolean;\n\t\t\terrorText: string;\n\t\t}\n\t): GetCallback<ObservableChangeEvent<string>> {\n\t\tconst { commandName, viewField, validator, errorText } = options;\n\t\tconst setErrorTextDebounced = debounce( () => {\n\t\t\tviewField.errorText = errorText;\n\t\t}, ERROR_TEXT_TIMEOUT );\n\n\t\treturn ( evt, propertyName, newValue ) => {\n\t\t\tsetErrorTextDebounced.cancel();\n\t\t\t// Do not execute the command on initial call (opening the table properties view).\n\t\t\tif ( !this._isReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( validator( newValue ) ) {\n\t\t\t\tthis.editor.execute( commandName, {\n\t\t\t\t\tvalue: newValue,\n\t\t\t\t\tbatch: this._undoStepBatch\n\t\t\t\t} );\n\n\t\t\t\tviewField.errorText = null;\n\t\t\t} else {\n\t\t\t\tsetErrorTextDebounced();\n\t\t\t}\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellpropertycommand\n */\n\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport type { Element, Batch } from 'ckeditor5/src/engine.js';\nimport type TableUtils from '../../tableutils.js';\n\n/**\n * The table cell attribute command.\n *\n * The command is a base command for other table cell property commands.\n */\nexport default class TableCellPropertyCommand extends Command {\n\t/**\n\t * The attribute that will be set by the command.\n\t */\n\tpublic readonly attributeName: string;\n\n\t/**\n\t * The default value for the attribute.\n\t */\n\tprotected readonly _defaultValue: string;\n\n\t/**\n\t * Creates a new `TableCellPropertyCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param attributeName Table cell attribute name.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, attributeName: string, defaultValue: string ) {\n\t\tsuper( editor );\n\n\t\tthis.attributeName = attributeName;\n\t\tthis._defaultValue = defaultValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst editor = this.editor;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst selectedTableCells = tableUtils.getSelectionAffectedTableCells( editor.model.document.selection );\n\n\t\tthis.isEnabled = !!selectedTableCells.length;\n\t\tthis.value = this._getSingleValue( selectedTableCells );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.value If set, the command will set the attribute on selected table cells.\n\t * If it is not set, the command will remove the attribute from the selected table cells.\n\t * @param options.batch Pass the model batch instance to the command to aggregate changes,\n\t * for example to allow a single undo step for multiple executions.\n\t */\n\tpublic override execute( options: { value?: string | number; batch?: Batch } = {} ): void {\n\t\tconst { value, batch } = options;\n\t\tconst model = this.editor.model;\n\t\tconst tableUtils: TableUtils = this.editor.plugins.get( 'TableUtils' );\n\t\tconst tableCells = tableUtils.getSelectionAffectedTableCells( model.document.selection );\n\t\tconst valueToSet = this._getValueToSet( value );\n\n\t\tmodel.enqueueChange( batch, writer => {\n\t\t\tif ( valueToSet ) {\n\t\t\t\ttableCells.forEach( tableCell => writer.setAttribute( this.attributeName, valueToSet, tableCell ) );\n\t\t\t} else {\n\t\t\t\ttableCells.forEach( tableCell => writer.removeAttribute( this.attributeName, tableCell ) );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the attribute value for a table cell.\n\t */\n\tprotected _getAttribute( tableCell: Element | undefined ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = tableCell.getAttribute( this.attributeName );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t */\n\tprotected _getValueToSet( value: string | number | undefined ): unknown {\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns a single value for all selected table cells. If the value is the same for all cells,\n\t * it will be returned (`undefined` otherwise).\n\t */\n\tprivate _getSingleValue( tableCells: Array<Element> ) {\n\t\tconst firstCellValue = this._getAttribute( tableCells[ 0 ] );\n\n\t\tconst everyCellHasAttribute = tableCells.every( tableCells => this._getAttribute( tableCells ) === firstCellValue );\n\n\t\treturn everyCellHasAttribute ? firstCellValue : undefined;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellwidth/commands/tablecellwidthcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport TableCellPropertyCommand from '../../tablecellproperties/commands/tablecellpropertycommand.js';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell width command.\n *\n * The command is registered by the {@link module:table/tablecellwidth/tablecellwidthediting~TableCellWidthEditing} as\n * the `'tableCellWidth'` editor command.\n *\n * To change the width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds a default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */\nexport default class TableCellWidthCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellWidth', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tvalue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellwidth/tablecellwidthediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport TableEditing from './../tableediting.js';\nimport TableCellWidthCommand from './commands/tablecellwidthcommand.js';\nimport { getNormalizedDefaultCellProperties } from '../utils/table-properties.js';\nimport { enableProperty } from '../utils/common.js';\n\n/**\n * The table cell width editing feature.\n *\n * Introduces `tableCellWidth` table cell model attribute alongside with its converters\n * and a command.\n */\nexport default class TableCellWidthEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCellWidthEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\tconst defaultTableCellProperties = getNormalizedDefaultCellProperties(\n\t\t\teditor.config.get( 'table.tableCellProperties.defaultProperties' )!\n\t\t);\n\n\t\tenableProperty( editor.model.schema, editor.conversion, {\n\t\t\tmodelAttribute: 'tableCellWidth',\n\t\t\tstyleName: 'width',\n\t\t\tdefaultValue: defaultTableCellProperties.width\n\t\t} );\n\n\t\teditor.commands.add( 'tableCellWidth', new TableCellWidthCommand( editor, defaultTableCellProperties.width ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellpaddingcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element } from 'ckeditor5/src/engine.js';\n\nimport TableCellPropertyCommand from './tablecellpropertycommand.js';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell padding command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellPadding'` editor command.\n *\n * To change the padding of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellPadding', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `padding` attribute to `'5px'` in the model.\n */\nexport default class TableCellPaddingCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellPaddingCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellPadding', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getAttribute( tableCell: Element ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( tableCell.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tconst newValue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( newValue === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn newValue;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellheightcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport TableCellPropertyCommand from './tablecellpropertycommand.js';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell height command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHeight'` editor command.\n *\n * To change the height of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */\nexport default class TableCellHeightCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellHeightCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellHeight', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tconst newValue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( newValue === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn newValue;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellbackgroundcolorcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport TableCellPropertyCommand from './tablecellpropertycommand.js';\n\n/**\n * The table cell background color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBackgroundColor'` editor command.\n *\n * To change the background color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport default class TableCellBackgroundColorCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellBackgroundColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellBackgroundColor', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellverticalalignmentcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport TableCellPropertyCommand from './tablecellpropertycommand.js';\n\n/**\n * The table cell vertical alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellVerticalAlignment'` editor command.\n *\n * To change the vertical text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellVerticalAlignment', {\n *   value: 'top'\n * } );\n * ```\n *\n * The following values, corresponding to the\n * [`vertical-align` CSS attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align), are allowed:\n *\n * * `'top'`\n * * `'bottom'`\n *\n * The `'middle'` value is the default one so there is no need to set it.\n */\nexport default class TableCellVerticalAlignmentCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellVerticalAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellVerticalAlignment', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellhorizontalalignmentcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport TableCellPropertyCommand from './tablecellpropertycommand.js';\n\n/**\n * The table cell horizontal alignment command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellHorizontalAlignment'` editor command.\n *\n * To change the horizontal text alignment of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellHorizontalAlignment', {\n *  value: 'right'\n * } );\n * ```\n */\nexport default class TableCellHorizontalAlignmentCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellHorizontalAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellHorizontalAlignment', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellborderstylecommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element } from 'ckeditor5/src/engine.js';\n\nimport TableCellPropertyCommand from './tablecellpropertycommand.js';\nimport { getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell border style command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderStyle'` editor command.\n *\n * To change the border style of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */\nexport default class TableCellBorderStyleCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellBorderStyleCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellBorderStyle', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getAttribute( tableCell: Element ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( tableCell.getAttribute( this.attributeName ) as string | undefined );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellbordercolorcommand\n */\n\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport TableCellPropertyCommand from './tablecellpropertycommand.js';\nimport { getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell border color command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderColor'` editor command.\n *\n * To change the border color of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport default class TableCellBorderColorCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellBorderColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellBorderColor', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getAttribute( tableCell: Element ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( tableCell.getAttribute( this.attributeName ) as string | undefined );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/commands/tablecellborderwidthcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport type { Element } from 'ckeditor5/src/engine.js';\n\nimport TableCellPropertyCommand from './tablecellpropertycommand.js';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table cell border width command.\n *\n * The command is registered by the {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing} as\n * the `'tableCellBorderWidth'` editor command.\n *\n * To change the border width of selected cells, execute the command:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableCellBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */\nexport default class TableCellBorderWidthCommand extends TableCellPropertyCommand {\n\t/**\n\t * Creates a new `TableCellBorderWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableCellBorderWidth', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getAttribute( tableCell: Element ): unknown {\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( tableCell.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tconst newValue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( newValue === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn newValue;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties/tablecellpropertiesediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport {\n\taddBorderRules,\n\taddPaddingRules,\n\taddBackgroundRules,\n\ttype Schema,\n\ttype Conversion,\n\ttype ViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport { downcastAttributeToStyle, upcastBorderStyles } from './../converters/tableproperties.js';\nimport TableEditing from './../tableediting.js';\nimport TableCellWidthEditing from '../tablecellwidth/tablecellwidthediting.js';\nimport TableCellPaddingCommand from './commands/tablecellpaddingcommand.js';\nimport TableCellHeightCommand from './commands/tablecellheightcommand.js';\nimport TableCellBackgroundColorCommand from './commands/tablecellbackgroundcolorcommand.js';\nimport TableCellVerticalAlignmentCommand from './commands/tablecellverticalalignmentcommand.js';\nimport TableCellHorizontalAlignmentCommand from './commands/tablecellhorizontalalignmentcommand.js';\nimport TableCellBorderStyleCommand from './commands/tablecellborderstylecommand.js';\nimport TableCellBorderColorCommand from './commands/tablecellbordercolorcommand.js';\nimport TableCellBorderWidthCommand from './commands/tablecellborderwidthcommand.js';\nimport { getNormalizedDefaultCellProperties } from '../utils/table-properties.js';\nimport { enableProperty } from '../utils/common.js';\n\nconst VALIGN_VALUES_REG_EXP = /^(top|middle|bottom)$/;\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right|justify)$/;\n\n/**\n * The table cell properties editing feature.\n *\n * Introduces table cell model attributes and their conversion:\n *\n * - border: `tableCellBorderStyle`, `tableCellBorderColor` and `tableCellBorderWidth`\n * - background color: `tableCellBackgroundColor`\n * - cell padding: `tableCellPadding`\n * - horizontal and vertical alignment: `tableCellHorizontalAlignment`, `tableCellVerticalAlignment`\n * - cell width and height: `tableCellWidth`, `tableCellHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` commands\n * - background color: the `'tableCellBackgroundColor'` command\n * - cell padding: the `'tableCellPadding'` command\n * - horizontal and vertical alignment: the `'tableCellHorizontalAlignment'` and `'tableCellVerticalAlignment'` commands\n * - width and height: the `'tableCellWidth'` and `'tableCellHeight'` commands\n */\nexport default class TableCellPropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCellPropertiesEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing, TableCellWidthEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\teditor.config.define( 'table.tableCellProperties.defaultProperties', { } );\n\n\t\tconst defaultTableCellProperties = getNormalizedDefaultCellProperties(\n\t\t\teditor.config.get( 'table.tableCellProperties.defaultProperties' )!,\n\t\t\t{\n\t\t\t\tincludeVerticalAlignmentProperty: true,\n\t\t\t\tincludeHorizontalAlignmentProperty: true,\n\t\t\t\tincludePaddingProperty: true,\n\t\t\t\tisRightToLeftContent: editor.locale.contentLanguageDirection === 'rtl'\n\t\t\t}\n\t\t);\n\n\t\teditor.data.addStyleProcessorRules( addBorderRules );\n\t\tenableBorderProperties( schema, conversion, {\n\t\t\tcolor: defaultTableCellProperties.borderColor,\n\t\t\tstyle: defaultTableCellProperties.borderStyle,\n\t\t\twidth: defaultTableCellProperties.borderWidth\n\t\t} );\n\t\teditor.commands.add( 'tableCellBorderStyle', new TableCellBorderStyleCommand( editor, defaultTableCellProperties.borderStyle ) );\n\t\teditor.commands.add( 'tableCellBorderColor', new TableCellBorderColorCommand( editor, defaultTableCellProperties.borderColor ) );\n\t\teditor.commands.add( 'tableCellBorderWidth', new TableCellBorderWidthCommand( editor, defaultTableCellProperties.borderWidth ) );\n\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellHeight',\n\t\t\tstyleName: 'height',\n\t\t\tdefaultValue: defaultTableCellProperties.height\n\t\t} );\n\t\teditor.commands.add( 'tableCellHeight', new TableCellHeightCommand( editor, defaultTableCellProperties.height ) );\n\n\t\teditor.data.addStyleProcessorRules( addPaddingRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellPadding',\n\t\t\tstyleName: 'padding',\n\t\t\treduceBoxSides: true,\n\t\t\tdefaultValue: defaultTableCellProperties.padding!\n\t\t} );\n\t\teditor.commands.add( 'tableCellPadding', new TableCellPaddingCommand( editor, defaultTableCellProperties.padding! ) );\n\n\t\teditor.data.addStyleProcessorRules( addBackgroundRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableCellBackgroundColor',\n\t\t\tstyleName: 'background-color',\n\t\t\tdefaultValue: defaultTableCellProperties.backgroundColor\n\t\t} );\n\t\teditor.commands.add(\n\t\t\t'tableCellBackgroundColor',\n\t\t\tnew TableCellBackgroundColorCommand( editor, defaultTableCellProperties.backgroundColor )\n\t\t);\n\n\t\tenableHorizontalAlignmentProperty( schema, conversion, defaultTableCellProperties.horizontalAlignment! );\n\t\teditor.commands.add(\n\t\t\t'tableCellHorizontalAlignment',\n\t\t\tnew TableCellHorizontalAlignmentCommand( editor, defaultTableCellProperties.horizontalAlignment! )\n\t\t);\n\n\t\tenableVerticalAlignmentProperty( schema, conversion, defaultTableCellProperties.verticalAlignment! );\n\t\teditor.commands.add(\n\t\t\t'tableCellVerticalAlignment',\n\t\t\tnew TableCellVerticalAlignmentCommand( editor, defaultTableCellProperties.verticalAlignment! )\n\t\t);\n\t}\n}\n\n/**\n * Enables the `'tableCellBorderStyle'`, `'tableCellBorderColor'` and `'tableCellBorderWidth'` attributes for table cells.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableCellBorderColor` value.\n * @param defaultBorder.style The default `tableCellBorderStyle` value.\n * @param defaultBorder.width The default `tableCellBorderWidth` value.\n */\nfunction enableBorderProperties( schema: Schema, conversion: Conversion, defaultBorder: { color: string; style: string; width: string } ) {\n\tconst modelAttributes = {\n\t\twidth: 'tableCellBorderWidth',\n\t\tcolor: 'tableCellBorderColor',\n\t\tstyle: 'tableCellBorderStyle'\n\t};\n\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: Object.values( modelAttributes )\n\t} );\n\n\tupcastBorderStyles( conversion, 'td', modelAttributes, defaultBorder );\n\tupcastBorderStyles( conversion, 'th', modelAttributes, defaultBorder );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.style, styleName: 'border-style' } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.color, styleName: 'border-color' } );\n\tdowncastAttributeToStyle( conversion, { modelElement: 'tableCell', modelAttribute: modelAttributes.width, styleName: 'border-width' } );\n}\n\n/**\n * Enables the `'tableCellHorizontalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default horizontal alignment value.\n */\nfunction enableHorizontalAlignmentProperty( schema: Schema, conversion: Conversion, defaultValue: string ) {\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ 'tableCellHorizontalAlignment' ]\n\t} );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'tableCell',\n\t\t\t\tkey: 'tableCellHorizontalAlignment'\n\t\t\t},\n\t\t\tview: alignment => ( {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t'text-align': alignment\n\t\t\t\t}\n\t\t\t} )\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `text-align:*;` CSS definition for the table cell alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\t'text-align': ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellHorizontalAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tconst align = viewElement.getStyle( 'text-align' );\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tattributes: {\n\t\t\t\t\talign: ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellHorizontalAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tconst align = viewElement.getAttribute( 'align' );\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n\n/**\n * Enables the `'verticalAlignment'` attribute for table cells.\n *\n * @param defaultValue The default vertical alignment value.\n */\nfunction enableVerticalAlignmentProperty( schema: Schema, conversion: Conversion, defaultValue: string ) {\n\tschema.extend( 'tableCell', {\n\t\tallowAttributes: [ 'tableCellVerticalAlignment' ]\n\t} );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'tableCell',\n\t\t\t\tkey: 'tableCellVerticalAlignment'\n\t\t\t},\n\t\t\tview: alignment => ( {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t'vertical-align': alignment\n\t\t\t\t}\n\t\t\t} )\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `vertical-align:*;` CSS definition for the table cell alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\t'vertical-align': VALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellVerticalAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tconst align = viewElement.getStyle( 'vertical-align' );\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(td|th)$/,\n\t\t\t\tattributes: {\n\t\t\t\t\tvalign: VALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableCellVerticalAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tconst valign = viewElement.getAttribute( 'valign' );\n\n\t\t\t\t\treturn valign === defaultValue ? null : valign;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecellproperties\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport TableCellPropertiesUI from './tablecellproperties/tablecellpropertiesui.js';\nimport TableCellPropertiesEditing from './tablecellproperties/tablecellpropertiesediting.js';\n\n/**\n * The table cell properties feature. Enables support for setting properties of table cells (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tableproperties~TableProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tablecellproperties/tablecellpropertiesediting~TableCellPropertiesEditing table cell properties editing feature} and\n * the {@link module:table/tablecellproperties/tablecellpropertiesui~TableCellPropertiesUI table cell properties UI feature}.\n */\nexport default class TableCellProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCellProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableCellPropertiesEditing, TableCellPropertiesUI ] as const;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablepropertycommand\n */\n\nimport type { Batch, Element } from 'ckeditor5/src/engine.js';\nimport { Command, type Editor } from 'ckeditor5/src/core.js';\nimport { getSelectionAffectedTable } from '../../utils/common.js';\n\nexport interface TablePropertyCommandExecuteOptions {\n\tbatch?: Batch;\n\tcolumnWidths?: string;\n\ttable?: Element;\n\ttableWidth?: string;\n\tvalue?: string;\n}\n\n/**\n * The table cell attribute command.\n *\n * This command is a base command for other table property commands.\n */\nexport default class TablePropertyCommand extends Command {\n\t/**\n\t * The attribute that will be set by the command.\n\t */\n\tpublic readonly attributeName: string;\n\n\t/**\n\t * The default value for the attribute.\n\t */\n\tprotected readonly _defaultValue: string | undefined;\n\n\t/**\n\t * Creates a new `TablePropertyCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param attributeName Table cell attribute name.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, attributeName: string, defaultValue?: string ) {\n\t\tsuper( editor );\n\n\t\tthis.attributeName = attributeName;\n\t\tthis._defaultValue = defaultValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\tconst table = getSelectionAffectedTable( selection );\n\n\t\tthis.isEnabled = !!table;\n\t\tthis.value = this._getValue( table );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param options.value If set, the command will set the attribute on the selected table.\n\t * If not set, the command will remove the attribute from the selected table.\n\t * @param options.batch Pass the model batch instance to the command to aggregate changes,\n\t * for example, to allow a single undo step for multiple executions.\n\t */\n\tpublic override execute( options: TablePropertyCommandExecuteOptions = {} ): void {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst { value, batch } = options;\n\n\t\tconst table = getSelectionAffectedTable( selection );\n\t\tconst valueToSet = this._getValueToSet( value );\n\n\t\tmodel.enqueueChange( batch, writer => {\n\t\t\tif ( valueToSet ) {\n\t\t\t\twriter.setAttribute( this.attributeName, valueToSet, table );\n\t\t\t} else {\n\t\t\t\twriter.removeAttribute( this.attributeName, table );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the attribute value for a table.\n\t */\n\tprotected _getValue( table: Element ): unknown {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = table.getAttribute( this.attributeName );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns the proper model value. It can be used to add a default unit to numeric values.\n\t */\n\tprotected _getValueToSet( value: string | number | undefined ): unknown {\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablebackgroundcolorcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport TablePropertyCommand from './tablepropertycommand.js';\n\n/**\n * The table background color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBackgroundColor'` editor command.\n *\n * To change the background color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBackgroundColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport default class TableBackgroundColorCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableBackgroundColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableBackgroundColor', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablebordercolorcommand\n */\n\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport TablePropertyCommand from './tablepropertycommand.js';\nimport { getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table border color command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderColor'` editor command.\n *\n * To change the border color of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderColor', {\n *   value: '#f00'\n * } );\n * ```\n */\nexport default class TableBorderColorCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableBorderColorCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableBorderColor', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValue( table: Element ): unknown {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( table.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tableborderstylecommand\n */\n\nimport type { Element } from 'ckeditor5/src/engine.js';\n\nimport TablePropertyCommand from './tablepropertycommand.js';\nimport { getSingleValue } from '../../utils/table-properties.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\n/**\n * The table style border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderStyle'` editor command.\n *\n * To change the border style of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderStyle', {\n *   value: 'dashed'\n * } );\n * ```\n */\nexport default class TableBorderStyleCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableBorderStyleCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableBorderStyle', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValue( table: Element ): unknown {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( table.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tableborderwidthcommand\n */\n\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\nimport TablePropertyCommand from './tablepropertycommand.js';\nimport { addDefaultUnitToNumericValue, getSingleValue } from '../../utils/table-properties.js';\n\n/**\n * The table width border command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableBorderWidth'` editor command.\n *\n * To change the border width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableBorderWidth', {\n *   value: '5'\n * } );\n * ```\n *\n * will set the `borderWidth` attribute to `'5px'` in the model.\n */\nexport default class TableBorderWidthCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableBorderWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableBorderWidth', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValue( table: Element ): string | undefined {\n\t\tif ( !table ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = getSingleValue( table.getAttribute( this.attributeName ) as string );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tconst newValue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( newValue === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn newValue;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablewidthcommand\n */\n\nimport TablePropertyCommand from './tablepropertycommand.js';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\n/**\n * The table width command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableWidth'` editor command.\n *\n * To change the width of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '400px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableWidth', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `width` attribute to `'50px'` in the model.\n */\nexport default class TableWidthCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableWidthCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableWidth', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tvalue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tableheightcommand\n */\n\nimport TablePropertyCommand from './tablepropertycommand.js';\nimport { addDefaultUnitToNumericValue } from '../../utils/table-properties.js';\nimport type { Editor } from 'ckeditor5/src/core.js';\n\n/**\n * The table height command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableHeight'` editor command.\n *\n * To change the height of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '500px'\n * } );\n * ```\n *\n * **Note**: This command adds the default `'px'` unit to numeric values. Executing:\n *\n * ```ts\n * editor.execute( 'tableHeight', {\n *   value: '50'\n * } );\n * ```\n *\n * will set the `height` attribute to `'50px'` in the model.\n */\nexport default class TableHeightCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableHeightCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value of the attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableHeight', defaultValue );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tprotected override _getValueToSet( value: string | number | undefined ): unknown {\n\t\tvalue = addDefaultUnitToNumericValue( value, 'px' );\n\n\t\tif ( value === this._defaultValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/commands/tablealignmentcommand\n */\n\nimport type { Editor } from 'ckeditor5/src/core.js';\nimport TablePropertyCommand from './tablepropertycommand.js';\n\n/**\n * The table alignment command.\n *\n * The command is registered by the {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing} as\n * the `'tableAlignment'` editor command.\n *\n * To change the alignment of the selected table, execute the command:\n *\n * ```ts\n * editor.execute( 'tableAlignment', {\n *   value: 'right'\n * } );\n * ```\n */\nexport default class TableAlignmentCommand extends TablePropertyCommand {\n\t/**\n\t * Creates a new `TableAlignmentCommand` instance.\n\t *\n\t * @param editor An editor in which this command will be used.\n\t * @param defaultValue The default value for the \"alignment\" attribute.\n\t */\n\tconstructor( editor: Editor, defaultValue: string ) {\n\t\tsuper( editor, 'tableAlignment', defaultValue );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/tablepropertiesediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport { addBackgroundRules, addBorderRules, type ViewElement, type Conversion, type Schema } from 'ckeditor5/src/engine.js';\n\nimport TableEditing from '../tableediting.js';\nimport {\n\tdowncastAttributeToStyle,\n\tdowncastTableAttribute,\n\tupcastBorderStyles,\n\tupcastStyleToAttribute\n} from '../converters/tableproperties.js';\nimport TableBackgroundColorCommand from './commands/tablebackgroundcolorcommand.js';\nimport TableBorderColorCommand from './commands/tablebordercolorcommand.js';\nimport TableBorderStyleCommand from './commands/tableborderstylecommand.js';\nimport TableBorderWidthCommand from './commands/tableborderwidthcommand.js';\nimport TableWidthCommand from './commands/tablewidthcommand.js';\nimport TableHeightCommand from './commands/tableheightcommand.js';\nimport TableAlignmentCommand from './commands/tablealignmentcommand.js';\nimport { getNormalizedDefaultTableProperties } from '../utils/table-properties.js';\n\nconst ALIGN_VALUES_REG_EXP = /^(left|center|right)$/;\nconst FLOAT_VALUES_REG_EXP = /^(left|none|right)$/;\n\n/**\n * The table properties editing feature.\n *\n * Introduces table's model attributes and their conversion:\n *\n * - border: `tableBorderStyle`, `tableBorderColor` and `tableBorderWidth`\n * - background color: `tableBackgroundColor`\n * - horizontal alignment: `tableAlignment`\n * - width & height: `tableWidth` & `tableHeight`\n *\n * It also registers commands used to manipulate the above attributes:\n *\n * - border: `'tableBorderStyle'`, `'tableBorderColor'` and `'tableBorderWidth'` commands\n * - background color: `'tableBackgroundColor'`\n * - horizontal alignment: `'tableAlignment'`\n * - width & height: `'tableWidth'` & `'tableHeight'`\n */\nexport default class TablePropertiesEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TablePropertiesEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\teditor.config.define( 'table.tableProperties.defaultProperties', {} );\n\n\t\tconst defaultTableProperties = getNormalizedDefaultTableProperties(\n\t\t\teditor.config.get( 'table.tableProperties.defaultProperties' )!,\n\t\t\t{\n\t\t\t\tincludeAlignmentProperty: true\n\t\t\t}\n\t\t);\n\n\t\teditor.data.addStyleProcessorRules( addBorderRules );\n\t\tenableBorderProperties( schema, conversion, {\n\t\t\tcolor: defaultTableProperties.borderColor,\n\t\t\tstyle: defaultTableProperties.borderStyle,\n\t\t\twidth: defaultTableProperties.borderWidth\n\t\t} );\n\n\t\teditor.commands.add( 'tableBorderColor', new TableBorderColorCommand( editor, defaultTableProperties.borderColor ) );\n\t\teditor.commands.add( 'tableBorderStyle', new TableBorderStyleCommand( editor, defaultTableProperties.borderStyle ) );\n\t\teditor.commands.add( 'tableBorderWidth', new TableBorderWidthCommand( editor, defaultTableProperties.borderWidth ) );\n\n\t\tenableAlignmentProperty( schema, conversion, defaultTableProperties.alignment! );\n\t\teditor.commands.add( 'tableAlignment', new TableAlignmentCommand( editor, defaultTableProperties.alignment! ) );\n\n\t\tenableTableToFigureProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableWidth',\n\t\t\tstyleName: 'width',\n\t\t\tdefaultValue: defaultTableProperties.width\n\t\t} );\n\t\teditor.commands.add( 'tableWidth', new TableWidthCommand( editor, defaultTableProperties.width ) );\n\n\t\tenableTableToFigureProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableHeight',\n\t\t\tstyleName: 'height',\n\t\t\tdefaultValue: defaultTableProperties.height\n\t\t} );\n\t\teditor.commands.add( 'tableHeight', new TableHeightCommand( editor, defaultTableProperties.height ) );\n\n\t\teditor.data.addStyleProcessorRules( addBackgroundRules );\n\t\tenableProperty( schema, conversion, {\n\t\t\tmodelAttribute: 'tableBackgroundColor',\n\t\t\tstyleName: 'background-color',\n\t\t\tdefaultValue: defaultTableProperties.backgroundColor\n\t\t} );\n\t\teditor.commands.add(\n\t\t\t'tableBackgroundColor',\n\t\t\tnew TableBackgroundColorCommand( editor, defaultTableProperties.backgroundColor )\n\t\t);\n\t}\n}\n\n/**\n * Enables `tableBorderStyle'`, `tableBorderColor'` and `tableBorderWidth'` attributes for table.\n *\n * @param defaultBorder The default border values.\n * @param defaultBorder.color The default `tableBorderColor` value.\n * @param defaultBorder.style The default `tableBorderStyle` value.\n * @param defaultBorder.width The default `tableBorderWidth` value.\n */\nfunction enableBorderProperties( schema: Schema, conversion: Conversion, defaultBorder: { color: string; style: string; width: string } ) {\n\tconst modelAttributes = {\n\t\twidth: 'tableBorderWidth',\n\t\tcolor: 'tableBorderColor',\n\t\tstyle: 'tableBorderStyle'\n\t};\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: Object.values( modelAttributes )\n\t} );\n\n\tupcastBorderStyles( conversion, 'table', modelAttributes, defaultBorder );\n\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.color, styleName: 'border-color' } );\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.style, styleName: 'border-style' } );\n\tdowncastTableAttribute( conversion, { modelAttribute: modelAttributes.width, styleName: 'border-width' } );\n}\n\n/**\n * Enables the `'alignment'` attribute for table.\n *\n * @param defaultValue The default alignment value.\n */\nfunction enableAlignmentProperty( schema: Schema, conversion: Conversion, defaultValue: string ) {\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ 'tableAlignment' ]\n\t} );\n\n\tconversion.for( 'downcast' )\n\t\t.attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tkey: 'tableAlignment'\n\t\t\t},\n\t\t\tview: alignment => ( {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t// Model: `alignment:center` => CSS: `float:none`.\n\t\t\t\t\tfloat: alignment === 'center' ? 'none' : alignment\n\t\t\t\t}\n\t\t\t} ),\n\t\t\tconverterPriority: 'high'\n\t\t} );\n\n\tconversion.for( 'upcast' )\n\t\t// Support for the `float:*;` CSS definition for the table alignment.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: /^(table|figure)$/,\n\t\t\t\tstyles: {\n\t\t\t\t\tfloat: FLOAT_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'tableAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tlet align = viewElement.getStyle( 'float' );\n\n\t\t\t\t\t// CSS: `float:none` => Model: `alignment:center`.\n\t\t\t\t\tif ( align === 'none' ) {\n\t\t\t\t\t\talign = 'center';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} )\n\t\t// Support for the `align` attribute as the backward compatibility while pasting from other sources.\n\t\t.attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tattributes: {\n\t\t\t\t\talign: ALIGN_VALUES_REG_EXP\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tkey: 'tableAlignment',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tconst align = viewElement.getAttribute( 'align' );\n\n\t\t\t\t\treturn align === defaultValue ? null : align;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n}\n\n/**\n * Enables conversion for an attribute for simple view-model mappings.\n *\n * @param options.defaultValue The default value for the specified `modelAttribute`.\n */\nfunction enableProperty(\n\tschema: Schema,\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t\tdefaultValue: string;\n\t}\n) {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\tupcastStyleToAttribute( conversion, { viewElement: 'table', ...options } );\n\tdowncastTableAttribute( conversion, options );\n}\n\n/**\n * Enables conversion for an attribute for simple view (figure) to model (table) mappings.\n */\nfunction enableTableToFigureProperty(\n\tschema: Schema,\n\tconversion: Conversion,\n\toptions: {\n\t\tmodelAttribute: string;\n\t\tstyleName: string;\n\t\tdefaultValue: string;\n\t}\n) {\n\tconst { modelAttribute } = options;\n\n\tschema.extend( 'table', {\n\t\tallowAttributes: [ modelAttribute ]\n\t} );\n\n\tupcastStyleToAttribute( conversion, {\n\t\tviewElement: /^(table|figure)$/,\n\t\tshouldUpcast: ( element: ViewElement ) => !( element.name == 'table' && element.parent!.name == 'figure' ),\n\t\t...options\n\t} );\n\n\tdowncastAttributeToStyle( conversion, { modelElement: 'table', ...options } );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/ui/tablepropertiesview\n */\n\nimport {\n\taddListToDropdown,\n\tButtonView,\n\tcreateLabeledDropdown,\n\tcreateLabeledInputText,\n\tFocusCycler,\n\tFormHeaderView,\n\tLabeledFieldView,\n\tLabelView,\n\tsubmitHandler,\n\tToolbarView,\n\tView,\n\tViewCollection,\n\ttype DropdownView,\n\ttype InputTextView,\n\ttype NormalizedColorOption,\n\ttype ColorPickerConfig,\n\ttype FocusableView\n} from 'ckeditor5/src/ui.js';\nimport { FocusTracker, KeystrokeHandler, type ObservableChangeEvent, type Locale } from 'ckeditor5/src/utils.js';\nimport { icons } from 'ckeditor5/src/core.js';\n\nimport {\n\tfillToolbar,\n\tgetBorderStyleDefinitions,\n\tgetBorderStyleLabels,\n\tgetLabeledColorInputCreator\n} from '../../utils/ui/table-properties.js';\nimport FormRowView from '../../ui/formrowview.js';\n\nimport '../../../theme/form.css';\nimport '../../../theme/tableform.css';\nimport '../../../theme/tableproperties.css';\nimport type ColorInputView from '../../ui/colorinputview.js';\nimport type { TablePropertiesOptions } from '../../tableconfig.js';\n\n/**\n * Additional configuration of the view.\n */\nexport interface TablePropertiesViewOptions {\n\n\t/**\n\t * A configuration of the border color palette used by the\n\t * {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView#borderColorInput}.\n\t */\n\tborderColors: Array<NormalizedColorOption>;\n\n\t/**\n\t * A configuration of the background color palette used by the\n\t * {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView#backgroundInput}.\n\t */\n\tbackgroundColors: Array<NormalizedColorOption>;\n\n\t/**\n\t * The default table properties.\n\t */\n\tdefaultTableProperties: TablePropertiesOptions;\n\n\t/**\n\t * The default color picker config.\n\t */\n\tcolorPickerConfig: false | ColorPickerConfig;\n}\n\n/**\n * The class representing a table properties form, allowing users to customize\n * certain style aspects of a table, for instance, border, background color, alignment, etc..\n */\nexport default class TablePropertiesView extends View {\n\t/**\n\t * The value of the border style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public borderStyle: string;\n\n\t/**\n\t * The value of the border width style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public borderWidth: string;\n\n\t/**\n\t * The value of the border color style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public borderColor: string;\n\n\t/**\n\t * The value of the background color style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public backgroundColor: string;\n\n\t/**\n\t * The value of the table width style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public width: string;\n\n\t/**\n\t * The value of the table height style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public height: string;\n\n\t/**\n\t * The value of the table alignment style.\n\t *\n\t * @observable\n\t * @default ''\n\t */\n\tdeclare public alignment: string;\n\n\t/**\n\t * Options passed to the view. See {@link #constructor} to learn more.\n\t */\n\tpublic readonly options: TablePropertiesViewOptions;\n\n\t/**\n\t * Tracks information about the DOM focus in the form.\n\t */\n\tpublic readonly focusTracker: FocusTracker;\n\n\t/**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */\n\tpublic readonly keystrokes: KeystrokeHandler;\n\n\t/**\n\t * A collection of child views in the form.\n\t */\n\tpublic readonly children: ViewCollection;\n\n\t/**\n\t * A dropdown that allows selecting the style of the table border.\n\t */\n\tpublic readonly borderStyleDropdown: LabeledFieldView<DropdownView>;\n\n\t/**\n\t * An input that allows specifying the width of the table border.\n\t */\n\tpublic readonly borderWidthInput: LabeledFieldView<InputTextView>;\n\n\t/**\n\t * An input that allows specifying the color of the table border.\n\t */\n\tpublic readonly borderColorInput: LabeledFieldView<ColorInputView>;\n\n\t/**\n\t * An input that allows specifying the table background color.\n\t */\n\tpublic readonly backgroundInput: LabeledFieldView<ColorInputView>;\n\n\t/**\n\t * An input that allows specifying the table width.\n\t */\n\tpublic readonly widthInput: LabeledFieldView<InputTextView>;\n\n\t/**\n\t * An input that allows specifying the table height.\n\t */\n\tpublic readonly heightInput: LabeledFieldView<InputTextView>;\n\n\t/**\n\t * A toolbar with buttons that allow changing the alignment of an entire table.\n\t */\n\tpublic readonly alignmentToolbar: ToolbarView;\n\n\t/**\n\t * The \"Save\" button view.\n\t */\n\tpublic saveButtonView: ButtonView;\n\n\t/**\n\t * The \"Cancel\" button view.\n\t */\n\tpublic cancelButtonView: ButtonView;\n\n\t/**\n\t * A collection of views that can be focused in the form.\n\t */\n\tprotected readonly _focusables: ViewCollection<FocusableView>;\n\n\t/**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */\n\tprotected readonly _focusCycler: FocusCycler;\n\n\t/**\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param options Additional configuration of the view.\n\t */\n\tconstructor( locale: Locale, options: TablePropertiesViewOptions ) {\n\t\tsuper( locale );\n\n\t\tthis.set( {\n\t\t\tborderStyle: '',\n\t\t\tborderWidth: '',\n\t\t\tborderColor: '',\n\t\t\tbackgroundColor: '',\n\t\t\twidth: '',\n\t\t\theight: '',\n\t\t\talignment: ''\n\t\t} );\n\n\t\tthis.options = options;\n\n\t\tconst { borderStyleDropdown, borderWidthInput, borderColorInput, borderRowLabel } = this._createBorderFields();\n\t\tconst { backgroundRowLabel, backgroundInput } = this._createBackgroundFields();\n\t\tconst { widthInput, operatorLabel, heightInput, dimensionsLabel } = this._createDimensionFields();\n\t\tconst { alignmentToolbar, alignmentLabel } = this._createAlignmentFields();\n\n\t\tthis.focusTracker = new FocusTracker();\n\t\tthis.keystrokes = new KeystrokeHandler();\n\t\tthis.children = this.createCollection();\n\n\t\tthis.borderStyleDropdown = borderStyleDropdown;\n\t\tthis.borderWidthInput = borderWidthInput;\n\t\tthis.borderColorInput = borderColorInput;\n\t\tthis.backgroundInput = backgroundInput;\n\t\tthis.widthInput = widthInput;\n\t\tthis.heightInput = heightInput;\n\t\tthis.alignmentToolbar = alignmentToolbar;\n\n\t\t// Defer creating to make sure other fields are present and the Save button can\n\t\t// bind its #isEnabled to their error messages so there's no way to save unless all\n\t\t// fields are valid.\n\t\tconst { saveButtonView, cancelButtonView } = this._createActionButtons();\n\n\t\tthis.saveButtonView = saveButtonView;\n\t\tthis.cancelButtonView = cancelButtonView;\n\t\tthis._focusables = new ViewCollection();\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this._focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\t// Form header.\n\t\tthis.children.add( new FormHeaderView( locale, {\n\t\t\tlabel: this.t!( 'Table properties' )\n\t\t} ) );\n\n\t\t// Border row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: borderRowLabel,\n\t\t\tchildren: [\n\t\t\t\tborderRowLabel,\n\t\t\t\tborderStyleDropdown,\n\t\t\t\tborderColorInput,\n\t\t\t\tborderWidthInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__border-row'\n\t\t} ) );\n\n\t\t// Background row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tlabelView: backgroundRowLabel,\n\t\t\tchildren: [\n\t\t\t\tbackgroundRowLabel,\n\t\t\t\tbackgroundInput\n\t\t\t],\n\t\t\tclass: 'ck-table-form__background-row'\n\t\t} ) );\n\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\t// Dimensions row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: dimensionsLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tdimensionsLabel,\n\t\t\t\t\t\twidthInput,\n\t\t\t\t\t\toperatorLabel,\n\t\t\t\t\t\theightInput\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-form__dimensions-row'\n\t\t\t\t} ),\n\t\t\t\t// Alignment row.\n\t\t\t\tnew FormRowView( locale, {\n\t\t\t\t\tlabelView: alignmentLabel,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\talignmentLabel,\n\t\t\t\t\t\talignmentToolbar\n\t\t\t\t\t],\n\t\t\t\t\tclass: 'ck-table-properties-form__alignment-row'\n\t\t\t\t} )\n\t\t\t]\n\t\t} ) );\n\n\t\t// Action row.\n\t\tthis.children.add( new FormRowView( locale, {\n\t\t\tchildren: [\n\t\t\t\tthis.saveButtonView,\n\t\t\t\tthis.cancelButtonView\n\t\t\t],\n\t\t\tclass: 'ck-table-form__action-row'\n\t\t} ) );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-form',\n\t\t\t\t\t'ck-table-form',\n\t\t\t\t\t'ck-table-properties-form'\n\t\t\t\t],\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/90\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override render(): void {\n\t\tsuper.render();\n\n\t\t// Enable the \"submit\" event for this view. It can be triggered by the #saveButtonView\n\t\t// which is of the \"submit\" DOM \"type\".\n\t\tsubmitHandler( {\n\t\t\tview: this\n\t\t} );\n\n\t\t// Maintain continuous focus cycling over views that have focusable children and focus cyclers themselves.\n\t\t[ this.borderColorInput, this.backgroundInput ].forEach( view => {\n\t\t\tthis._focusCycler.chain( view.fieldView.focusCycler );\n\t\t} );\n\n\t\t[\n\t\t\tthis.borderStyleDropdown,\n\t\t\tthis.borderColorInput,\n\t\t\tthis.borderWidthInput,\n\t\t\tthis.backgroundInput,\n\t\t\tthis.widthInput,\n\t\t\tthis.heightInput,\n\t\t\tthis.alignmentToolbar,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t].forEach( view => {\n\t\t\t// Register the view as focusable.\n\t\t\tthis._focusables.add( view! );\n\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( view!.element! );\n\t\t} );\n\n\t\t// Mainly for closing using \"Esc\" and navigation using \"Tab\".\n\t\tthis.keystrokes.listenTo( this.element! );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\t/**\n\t * Focuses the fist focusable field in the form.\n\t */\n\tpublic focus(): void {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #borderStyleDropdown},\n\t * * {@link #borderWidthInput},\n\t * * {@link #borderColorInput}.\n\t */\n\tprivate _createBorderFields() {\n\t\tconst defaultTableProperties = this.options.defaultTableProperties;\n\t\tconst defaultBorder = {\n\t\t\tstyle: defaultTableProperties.borderStyle,\n\t\t\twidth: defaultTableProperties.borderWidth,\n\t\t\tcolor: defaultTableProperties.borderColor\n\t\t};\n\n\t\tconst colorInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.borderColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: defaultBorder.color,\n\t\t\tcolorPickerConfig: this.options.colorPickerConfig\n\t\t} );\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\t\tconst accessibleLabel = t( 'Style' );\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst borderRowLabel = new LabelView( locale );\n\t\tborderRowLabel.text = t( 'Border' );\n\n\t\t// -- Style ---------------------------------------------------\n\n\t\tconst styleLabels = getBorderStyleLabels( t );\n\t\tconst borderStyleDropdown = new LabeledFieldView( locale, createLabeledDropdown );\n\t\tborderStyleDropdown.set( {\n\t\t\tlabel: accessibleLabel,\n\t\t\tclass: 'ck-table-form__border-style'\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.set( {\n\t\t\tariaLabel: accessibleLabel,\n\t\t\tariaLabelledBy: undefined,\n\t\t\tisOn: false,\n\t\t\twithText: true,\n\t\t\ttooltip: accessibleLabel\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.buttonView.bind( 'label' ).to( this, 'borderStyle', value => {\n\t\t\treturn styleLabels[ value ? value : 'none' ];\n\t\t} );\n\n\t\tborderStyleDropdown.fieldView.on( 'execute', evt => {\n\t\t\tthis.borderStyle = ( evt.source as any )._borderStyleValue;\n\t\t} );\n\n\t\tborderStyleDropdown.bind( 'isEmpty' ).to( this, 'borderStyle', value => !value );\n\n\t\taddListToDropdown( borderStyleDropdown.fieldView, getBorderStyleDefinitions( this, defaultBorder.style! ), {\n\t\t\trole: 'menu',\n\t\t\tariaLabel: accessibleLabel\n\t\t} );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst borderWidthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\tborderWidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__border-width'\n\t\t} );\n\n\t\tborderWidthInput.fieldView.bind( 'value' ).to( this, 'borderWidth' );\n\t\tborderWidthInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\t\tborderWidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderWidth = borderWidthInput.fieldView.element!.value;\n\t\t} );\n\n\t\t// -- Color ---------------------------------------------------\n\n\t\tconst borderColorInput = new LabeledFieldView( locale, colorInputCreator );\n\n\t\tborderColorInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-form__border-color'\n\t\t} );\n\n\t\tborderColorInput.fieldView.bind( 'value' ).to( this, 'borderColor' );\n\t\tborderColorInput.bind( 'isEnabled' ).to( this, 'borderStyle', isBorderStyleSet );\n\n\t\tborderColorInput.fieldView.on( 'input', () => {\n\t\t\tthis.borderColor = borderColorInput.fieldView.value;\n\t\t} );\n\n\t\t// Reset the border color and width fields depending on the `border-style` value.\n\t\tthis.on<ObservableChangeEvent<string>>( 'change:borderStyle', ( evt, name, newValue, oldValue ) => {\n\t\t\t// When removing the border (`border-style:none`), clear the remaining `border-*` properties.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5/issues/6227.\n\t\t\tif ( !isBorderStyleSet( newValue ) ) {\n\t\t\t\tthis.borderColor = '';\n\t\t\t\tthis.borderWidth = '';\n\t\t\t}\n\n\t\t\t// When setting the `border-style` from `none`, set the default `border-color` and `border-width` properties.\n\t\t\tif ( !isBorderStyleSet( oldValue ) ) {\n\t\t\t\tthis.borderColor = defaultBorder.color!;\n\t\t\t\tthis.borderWidth = defaultBorder.width!;\n\t\t\t}\n\t\t} );\n\n\t\treturn {\n\t\t\tborderRowLabel,\n\t\t\tborderStyleDropdown,\n\t\t\tborderColorInput,\n\t\t\tborderWidthInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #backgroundInput}.\n\t */\n\tprivate _createBackgroundFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Group label ---------------------------------------------\n\n\t\tconst backgroundRowLabel = new LabelView( locale );\n\t\tbackgroundRowLabel.text = t( 'Background' );\n\n\t\t// -- Background color input -----------------------------------\n\n\t\tconst backgroundInputCreator = getLabeledColorInputCreator( {\n\t\t\tcolorConfig: this.options.backgroundColors,\n\t\t\tcolumns: 5,\n\t\t\tdefaultColorValue: this.options.defaultTableProperties.backgroundColor,\n\t\t\tcolorPickerConfig: this.options.colorPickerConfig\n\t\t} );\n\n\t\tconst backgroundInput = new LabeledFieldView( locale, backgroundInputCreator );\n\n\t\tbackgroundInput.set( {\n\t\t\tlabel: t( 'Color' ),\n\t\t\tclass: 'ck-table-properties-form__background'\n\t\t} );\n\n\t\tbackgroundInput.fieldView.bind( 'value' ).to( this, 'backgroundColor' );\n\t\tbackgroundInput.fieldView.on( 'input', () => {\n\t\t\tthis.backgroundColor = backgroundInput.fieldView.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tbackgroundRowLabel,\n\t\t\tbackgroundInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #widthInput},\n\t * * {@link #heightInput}.\n\t */\n\tprivate _createDimensionFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst dimensionsLabel = new LabelView( locale );\n\t\tdimensionsLabel.text = t( 'Dimensions' );\n\n\t\t// -- Width ---------------------------------------------------\n\n\t\tconst widthInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\twidthInput.set( {\n\t\t\tlabel: t( 'Width' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__width'\n\t\t} );\n\n\t\twidthInput.fieldView.bind( 'value' ).to( this, 'width' );\n\t\twidthInput.fieldView.on( 'input', () => {\n\t\t\tthis.width = widthInput.fieldView.element!.value;\n\t\t} );\n\n\t\t// -- Operator ---------------------------------------------------\n\n\t\tconst operatorLabel = new View( locale );\n\t\toperatorLabel.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-table-form__dimension-operator'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{ text: '×' }\n\t\t\t]\n\t\t} );\n\n\t\t// -- Height ---------------------------------------------------\n\n\t\tconst heightInput = new LabeledFieldView( locale, createLabeledInputText );\n\n\t\theightInput.set( {\n\t\t\tlabel: t( 'Height' ),\n\t\t\tclass: 'ck-table-form__dimensions-row__height'\n\t\t} );\n\n\t\theightInput.fieldView.bind( 'value' ).to( this, 'height' );\n\t\theightInput.fieldView.on( 'input', () => {\n\t\t\tthis.height = heightInput.fieldView.element!.value;\n\t\t} );\n\n\t\treturn {\n\t\t\tdimensionsLabel,\n\t\t\twidthInput,\n\t\t\toperatorLabel,\n\t\t\theightInput\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form fields:\n\t *\n\t * * {@link #alignmentToolbar}.\n\t */\n\tprivate _createAlignmentFields() {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\t// -- Label ---------------------------------------------------\n\n\t\tconst alignmentLabel = new LabelView( locale );\n\t\talignmentLabel.text = t( 'Alignment' );\n\n\t\t// -- Toolbar ---------------------------------------------------\n\n\t\tconst alignmentToolbar = new ToolbarView( locale! );\n\t\talignmentToolbar.set( {\n\t\t\trole: 'radiogroup',\n\t\t\tisCompact: true,\n\t\t\tariaLabel: t( 'Table alignment toolbar' )\n\t\t} );\n\n\t\tfillToolbar( {\n\t\t\tview: this,\n\t\t\ticons: {\n\t\t\t\tleft: icons.objectLeft,\n\t\t\t\tcenter: icons.objectCenter,\n\t\t\t\tright: icons.objectRight\n\t\t\t},\n\t\t\ttoolbar: alignmentToolbar,\n\t\t\tlabels: this._alignmentLabels,\n\t\t\tpropertyName: 'alignment',\n\t\t\tdefaultValue: this.options.defaultTableProperties.alignment!\n\t\t} );\n\n\t\treturn {\n\t\t\talignmentLabel,\n\t\t\talignmentToolbar\n\t\t};\n\t}\n\n\t/**\n\t * Creates the following form controls:\n\t *\n\t * * {@link #saveButtonView},\n\t * * {@link #cancelButtonView}.\n\t */\n\tprivate _createActionButtons(): {\n\t\tsaveButtonView: ButtonView;\n\t\tcancelButtonView: ButtonView;\n\t\t} {\n\t\tconst locale = this.locale;\n\t\tconst t = this.t!;\n\n\t\tconst saveButtonView = new ButtonView( locale );\n\t\tconst cancelButtonView = new ButtonView( locale );\n\t\tconst fieldsThatShouldValidateToSave = [\n\t\t\tthis.borderWidthInput!,\n\t\t\tthis.borderColorInput!,\n\t\t\tthis.backgroundInput!,\n\t\t\tthis.widthInput!,\n\t\t\tthis.heightInput!\n\t\t];\n\n\t\tsaveButtonView.set( {\n\t\t\tlabel: t( 'Save' ),\n\t\t\ticon: icons.check,\n\t\t\tclass: 'ck-button-save',\n\t\t\ttype: 'submit',\n\t\t\twithText: true\n\t\t} );\n\n\t\tsaveButtonView.bind( 'isEnabled' ).toMany( fieldsThatShouldValidateToSave, 'errorText', ( ...errorTexts ) => {\n\t\t\treturn errorTexts.every( errorText => !errorText );\n\t\t} );\n\n\t\tcancelButtonView.set( {\n\t\t\tlabel: t( 'Cancel' ),\n\t\t\ticon: icons.cancel,\n\t\t\tclass: 'ck-button-cancel',\n\t\t\twithText: true\n\t\t} );\n\n\t\tcancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n\t\treturn {\n\t\t\tsaveButtonView, cancelButtonView\n\t\t};\n\t}\n\n\t/**\n\t * Provides localized labels for {@link #alignmentToolbar} buttons.\n\t */\n\tprivate get _alignmentLabels() {\n\t\tconst locale = this.locale!;\n\t\tconst t = this.t!;\n\n\t\tconst left = t( 'Align table to the left' );\n\t\tconst center = t( 'Center table' );\n\t\tconst right = t( 'Align table to the right' );\n\n\t\t// Returns object with a proper order of labels.\n\t\tif ( locale.uiLanguageDirection === 'rtl' ) {\n\t\t\treturn { right, center, left };\n\t\t} else {\n\t\t\treturn { left, center, right };\n\t\t}\n\t}\n}\n\nfunction isBorderStyleSet( value: string ) {\n\treturn value !== 'none';\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties/tablepropertiesui\n */\n\nimport { type Editor, Plugin } from 'ckeditor5/src/core.js';\nimport {\n\tButtonView,\n\tContextualBalloon,\n\tclickOutsideHandler,\n\tgetLocalizedColorOptions,\n\tnormalizeColorOptions,\n\ttype LabeledFieldView\n} from 'ckeditor5/src/ui.js';\n\nimport { debounce } from 'lodash-es';\n\nimport TablePropertiesView from './ui/tablepropertiesview.js';\nimport tableProperties from './../../theme/icons/table-properties.svg';\nimport {\n\tcolorFieldValidator,\n\tgetLocalizedColorErrorText,\n\tgetLocalizedLengthErrorText,\n\tlengthFieldValidator,\n\tlineWidthFieldValidator,\n\tdefaultColors\n} from '../utils/ui/table-properties.js';\nimport { getSelectionAffectedTableWidget } from '../utils/ui/widget.js';\nimport { getBalloonTablePositionData, repositionContextualBalloon } from '../utils/ui/contextualballoon.js';\nimport { getNormalizedDefaultTableProperties, type NormalizedDefaultProperties } from '../utils/table-properties.js';\nimport type { Batch } from 'ckeditor5/src/engine.js';\nimport type { EventInfo, ObservableChangeEvent } from 'ckeditor5/src/utils.js';\n\nimport type TableBorderStyleCommand from './commands/tableborderstylecommand.js';\n\nconst ERROR_TEXT_TIMEOUT = 500;\n\n// Map of view properties and related commands.\nconst propertyToCommandMap = {\n\tborderStyle: 'tableBorderStyle',\n\tborderColor: 'tableBorderColor',\n\tborderWidth: 'tableBorderWidth',\n\tbackgroundColor: 'tableBackgroundColor',\n\twidth: 'tableWidth',\n\theight: 'tableHeight',\n\talignment: 'tableAlignment'\n};\n\n/**\n * The table properties UI plugin. It introduces the `'tableProperties'` button\n * that opens a form allowing to specify visual styling of an entire table.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */\nexport default class TablePropertiesUI extends Plugin {\n\t/**\n\t * The default table properties.\n\t */\n\tprivate _defaultTableProperties!: NormalizedDefaultProperties;\n\n\t/**\n\t * The contextual balloon plugin instance.\n\t */\n\tprivate _balloon!: ContextualBalloon;\n\n\t/**\n\t * The properties form view displayed inside the balloon.\n\t */\n\tpublic view: TablePropertiesView | null = null;\n\n\t/**\n\t * The batch used to undo all changes made by the form (which are live, as the user types)\n\t * when \"Cancel\" was pressed. Each time the view is shown, a new batch is created.\n\t */\n\tprivate _undoStepBatch?: Batch;\n\n\t/**\n\t * Flag used to indicate whether view is ready to execute update commands\n\t * (it finished loading initial data).\n\t */\n\tprivate _isReady?: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ ContextualBalloon ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TablePropertiesUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'table.tableProperties', {\n\t\t\tborderColors: defaultColors,\n\t\t\tbackgroundColors: defaultColors\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\tthis._defaultTableProperties = getNormalizedDefaultTableProperties(\n\t\t\teditor.config.get( 'table.tableProperties.defaultProperties' )!,\n\t\t\t{\n\t\t\t\tincludeAlignmentProperty: true\n\t\t\t}\n\t\t);\n\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\n\t\teditor.ui.componentFactory.add( 'tableProperties', locale => {\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\tlabel: t( 'Table properties' ),\n\t\t\t\ticon: tableProperties,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tthis.listenTo( view, 'execute', () => this._showView() );\n\n\t\t\tconst commands = Object.values( propertyToCommandMap )\n\t\t\t\t.map( commandName => editor.commands.get( commandName )! );\n\n\t\t\tview.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => (\n\t\t\t\tareEnabled.some( isCommandEnabled => isCommandEnabled )\n\t\t\t) );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1341.\n\t\tif ( this.view ) {\n\t\t\tthis.view.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link module:table/tableproperties/ui/tablepropertiesview~TablePropertiesView} instance.\n\t *\n\t * @returns The table properties form view instance.\n\t */\n\tprivate _createPropertiesView() {\n\t\tconst editor = this.editor;\n\t\tconst config = editor.config.get( 'table.tableProperties' )!;\n\t\tconst borderColorsConfig = normalizeColorOptions( config.borderColors! );\n\t\tconst localizedBorderColors = getLocalizedColorOptions( editor.locale, borderColorsConfig );\n\t\tconst backgroundColorsConfig = normalizeColorOptions( config.backgroundColors! );\n\t\tconst localizedBackgroundColors = getLocalizedColorOptions( editor.locale, backgroundColorsConfig );\n\t\tconst hasColorPicker = config.colorPicker !== false;\n\n\t\tconst view = new TablePropertiesView( editor.locale, {\n\t\t\tborderColors: localizedBorderColors,\n\t\t\tbackgroundColors: localizedBackgroundColors,\n\t\t\tdefaultTableProperties: this._defaultTableProperties,\n\t\t\tcolorPickerConfig: hasColorPicker ? ( config.colorPicker || {} ) : false\n\t\t} );\n\t\tconst t = editor.t;\n\n\t\t// Render the view so its #element is available for the clickOutsideHandler.\n\t\tview.render();\n\n\t\tthis.listenTo( view, 'submit', () => {\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\tthis.listenTo( view, 'cancel', () => {\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/6180\n\t\t\tif ( this._undoStepBatch!.operations.length ) {\n\t\t\t\teditor.execute( 'undo', this._undoStepBatch );\n\t\t\t}\n\n\t\t\tthis._hideView();\n\t\t} );\n\n\t\t// Close the balloon on Esc key press.\n\t\tview.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._hideView();\n\t\t\tcancel();\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: view,\n\t\t\tactivator: () => this._isViewInBalloon,\n\t\t\tcontextElements: [ this._balloon.view.element! ],\n\t\t\tcallback: () => this._hideView()\n\t\t} );\n\n\t\tconst colorErrorText = getLocalizedColorErrorText( t );\n\t\tconst lengthErrorText = getLocalizedLengthErrorText( t );\n\n\t\t// Create the \"UI -> editor data\" binding.\n\t\t// These listeners update the editor data (via table commands) when any observable\n\t\t// property of the view has changed. They also validate the value and display errors in the UI\n\t\t// when necessary. This makes the view live, which means the changes are\n\t\t// visible in the editing as soon as the user types or changes fields' values.\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:borderStyle',\n\t\t\tthis._getPropertyChangeCallback( 'tableBorderStyle' )\n\t\t);\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:borderColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderColorInput,\n\t\t\tcommandName: 'tableBorderColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:borderWidth', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.borderWidthInput,\n\t\t\tcommandName: 'tableBorderWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lineWidthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:backgroundColor', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.backgroundInput,\n\t\t\tcommandName: 'tableBackgroundColor',\n\t\t\terrorText: colorErrorText,\n\t\t\tvalidator: colorFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:width', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.widthInput,\n\t\t\tcommandName: 'tableWidth',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>( 'change:height', this._getValidatedPropertyChangeCallback( {\n\t\t\tviewField: view.heightInput,\n\t\t\tcommandName: 'tableHeight',\n\t\t\terrorText: lengthErrorText,\n\t\t\tvalidator: lengthFieldValidator\n\t\t} ) );\n\n\t\tview.on<ObservableChangeEvent<string>>(\n\t\t\t'change:alignment',\n\t\t\tthis._getPropertyChangeCallback( 'tableAlignment' )\n\t\t);\n\n\t\treturn view;\n\t}\n\n\t/**\n\t * In this method the \"editor data -> UI\" binding is happening.\n\t *\n\t * When executed, this method obtains selected table property values from various table commands\n\t * and passes them to the {@link #view}.\n\t *\n\t * This way, the UI stays up–to–date with the editor data.\n\t */\n\tprivate _fillViewFormFromCommandValues() {\n\t\tconst commands = this.editor.commands;\n\t\tconst borderStyleCommand: TableBorderStyleCommand = commands.get( 'tableBorderStyle' )!;\n\n\t\tObject.entries( propertyToCommandMap )\n\t\t\t.map( ( [ property, commandName ] ) => {\n\t\t\t\tconst propertyKey = property as keyof typeof propertyToCommandMap;\n\t\t\t\tconst defaultValue = this._defaultTableProperties[ propertyKey ] || '';\n\n\t\t\t\treturn [ propertyKey, ( commands.get( commandName )!.value || defaultValue ) as string ] as const;\n\t\t\t} )\n\t\t\t.forEach( ( [ property, value ] ) => {\n\t\t\t\t// Do not set the `border-color` and `border-width` fields if `border-style:none`.\n\t\t\t\tif ( ( property === 'borderColor' || property === 'borderWidth' ) && borderStyleCommand.value === 'none' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.view!.set( property, value );\n\t\t\t} );\n\n\t\tthis._isReady = true;\n\t}\n\n\t/**\n\t * Shows the {@link #view} in the {@link #_balloon}.\n\t *\n\t * **Note**: Each time a view is shown, the new {@link #_undoStepBatch} is created that contains\n\t * all changes made to the document when the view is visible, allowing a single undo step\n\t * for all of them.\n\t */\n\tprotected _showView(): void {\n\t\tconst editor = this.editor;\n\n\t\tif ( !this.view ) {\n\t\t\tthis.view = this._createPropertiesView();\n\t\t}\n\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tthis._updateView();\n\t\t} );\n\n\t\t// Update the view with the model values.\n\t\tthis._fillViewFormFromCommandValues();\n\n\t\tthis._balloon.add( {\n\t\t\tview: this.view,\n\t\t\tposition: getBalloonTablePositionData( editor )\n\t\t} );\n\n\t\t// Create a new batch. Clicking \"Cancel\" will undo this batch.\n\t\tthis._undoStepBatch = editor.model.createBatch();\n\n\t\t// Basic a11y.\n\t\tthis.view.focus();\n\t}\n\n\t/**\n\t * Removes the {@link #view} from the {@link #_balloon}.\n\t */\n\tprotected _hideView(): void {\n\t\tconst editor = this.editor;\n\n\t\tthis.stopListening( editor.ui, 'update' );\n\n\t\tthis._isReady = false;\n\n\t\t// Blur any input element before removing it from DOM to prevent issues in some browsers.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/1501.\n\t\tthis.view!.saveButtonView.focus();\n\n\t\tthis._balloon.remove( this.view! );\n\n\t\t// Make sure the focus is not lost in the process by putting it directly\n\t\t// into the editing view.\n\t\tthis.editor.editing.view.focus();\n\t}\n\n\t/**\n\t * Repositions the {@link #_balloon} or hides the {@link #view} if a table is no longer selected.\n\t */\n\tprotected _updateView(): void {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tif ( !getSelectionAffectedTableWidget( viewDocument.selection ) ) {\n\t\t\tthis._hideView();\n\t\t} else if ( this._isViewVisible ) {\n\t\t\trepositionContextualBalloon( editor, 'table' );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is the visible in the {@link #_balloon}.\n\t */\n\tprivate get _isViewVisible(): boolean {\n\t\treturn !!this.view && this._balloon.visibleView === this.view;\n\t}\n\n\t/**\n\t * Returns `true` when the {@link #view} is in the {@link #_balloon}.\n\t */\n\tprivate get _isViewInBalloon(): boolean {\n\t\treturn !!this.view && this._balloon.hasView( this.view );\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon {@link #view view's} property change\n\t * executes a related editor command with the new property value.\n\t *\n\t * If new value will be set to the default value, the command will not be executed.\n\t *\n\t * @param commandName The command that will be executed.\n\t */\n\tprivate _getPropertyChangeCallback( commandName: 'tableBorderStyle' | 'tableAlignment' ) {\n\t\treturn ( evt: EventInfo, propertyName: string, newValue: string ) => {\n\t\t\t// Do not execute the command on initial call (opening the table properties view).\n\t\t\tif ( !this._isReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( commandName, {\n\t\t\t\tvalue: newValue,\n\t\t\t\tbatch: this._undoStepBatch\n\t\t\t} );\n\t\t};\n\t}\n\n\t/**\n\t * Creates a callback that when executed upon {@link #view view's} property change:\n\t * * executes a related editor command with the new property value if the value is valid,\n\t * * or sets the error text next to the invalid field, if the value did not pass the validation.\n\t */\n\tprivate _getValidatedPropertyChangeCallback(\n\t\toptions: {\n\t\t\tcommandName: 'tableBorderColor' | 'tableBorderWidth' | 'tableBackgroundColor' | 'tableWidth' | 'tableHeight';\n\t\t\tviewField: LabeledFieldView;\n\t\t\tvalidator: ( value: string ) => boolean;\n\t\t\terrorText: string;\n\t\t}\n\t) {\n\t\tconst { commandName, viewField, validator, errorText } = options;\n\t\tconst setErrorTextDebounced = debounce( () => {\n\t\t\tviewField.errorText = errorText;\n\t\t}, ERROR_TEXT_TIMEOUT );\n\n\t\treturn ( evt: EventInfo, propertyName: string, newValue: string ) => {\n\t\t\tsetErrorTextDebounced.cancel();\n\n\t\t\t// Do not execute the command on initial call (opening the table properties view).\n\t\t\tif ( !this._isReady ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( validator( newValue ) ) {\n\t\t\t\tthis.editor.execute( commandName, {\n\t\t\t\t\tvalue: newValue,\n\t\t\t\t\tbatch: this._undoStepBatch\n\t\t\t\t} );\n\n\t\t\t\tviewField.errorText = null;\n\t\t\t} else {\n\t\t\t\tsetErrorTextDebounced();\n\t\t\t}\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tableproperties\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\n\nimport TablePropertiesEditing from './tableproperties/tablepropertiesediting.js';\nimport TablePropertiesUI from './tableproperties/tablepropertiesui.js';\n\n/**\n * The table properties feature. Enables support for setting properties of tables (size, border, background, etc.).\n *\n * Read more in the {@glink features/tables/tables-styling Table and cell styling tools} section.\n * See also the {@link module:table/tablecellproperties~TableCellProperties} plugin.\n *\n * This is a \"glue\" plugin that loads the\n * {@link module:table/tableproperties/tablepropertiesediting~TablePropertiesEditing table properties editing feature} and\n * the {@link module:table/tableproperties/tablepropertiesui~TablePropertiesUI table properties UI feature}.\n */\nexport default class TableProperties extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableProperties' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TablePropertiesEditing, TablePropertiesUI ] as const;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/converters/table-caption-post-fixer\n */\n\nimport type { Model, Writer, Element, Node } from 'ckeditor5/src/engine.js';\n\n/**\n * Injects a table caption post-fixer into the model.\n *\n * The role of the table caption post-fixer is to ensure that the table with caption have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * If there are many caption model element, they are merged into one model.\n * * A final, merged caption model is placed at the end of the table.\n */\nexport default function injectTableCaptionPostFixer( model: Model ): void {\n\tmodel.document.registerPostFixer( writer => tableCaptionPostFixer( writer, model ) );\n}\n\n/**\n * The table caption post-fixer.\n */\nfunction tableCaptionPostFixer( writer: Writer, model: Model ) {\n\tconst changes = model.document.differ.getChanges();\n\tlet wasFixed = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type != 'insert' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst positionParent = entry.position.parent;\n\n\t\tif ( positionParent.is( 'element', 'table' ) || entry.name == 'table' ) {\n\t\t\tconst table = ( entry.name == 'table' ? entry.position.nodeAfter : positionParent ) as Element;\n\t\t\tconst captionsToMerge = Array.from( table.getChildren() )\n\t\t\t\t.filter( ( child: Node ): child is Element => child.is( 'element', 'caption' ) );\n\t\t\tconst firstCaption = captionsToMerge.shift();\n\n\t\t\tif ( !firstCaption ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move all the contents of the captions to the first one.\n\t\t\tfor ( const caption of captionsToMerge ) {\n\t\t\t\twriter.move( writer.createRangeIn( caption ), firstCaption, 'end' );\n\t\t\t\twriter.remove( caption );\n\t\t\t}\n\n\t\t\t// Make sure the final caption is at the end of the table.\n\t\t\tif ( firstCaption.nextSibling ) {\n\t\t\t\twriter.move( writer.createRangeOn( firstCaption ), table, 'end' );\n\t\t\t\twasFixed = true;\n\t\t\t}\n\n\t\t\t// Do we merged captions and/or moved the single caption to the end of the table?\n\t\t\twasFixed = !!captionsToMerge.length || wasFixed;\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecaption/utils\n */\n\nimport type {\n\tDocumentFragment,\n\tDocumentSelection,\n\tElement,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\n\nimport { getSelectionAffectedTable } from '../utils/common.js';\n\n/**\n * Checks if the provided model element is a `table`.\n *\n * @param modelElement Element to check if it is a table.\n */\nexport function isTable( modelElement: Element | DocumentFragment | null ): boolean {\n\treturn !!modelElement && modelElement.is( 'element', 'table' );\n}\n\n/**\n * Returns the caption model element from a given table element. Returns `null` if no caption is found.\n *\n * @param tableModelElement Table element in which we will try to find a caption element.\n */\nexport function getCaptionFromTableModelElement( tableModelElement: Element ): Element | null {\n\tfor ( const node of tableModelElement.getChildren() ) {\n\t\tif ( node.is( 'element', 'caption' ) ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns the caption model element for a model selection. Returns `null` if the selection has no caption element ancestor.\n *\n * @param selection The selection checked for caption presence.\n */\nexport function getCaptionFromModelSelection( selection: DocumentSelection ): Element | null {\n\tconst tableElement = getSelectionAffectedTable( selection );\n\n\tif ( !tableElement ) {\n\t\treturn null;\n\t}\n\n\treturn getCaptionFromTableModelElement( tableElement );\n}\n\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a caption.\n *\n * There are two possible forms of the valid caption:\n *  - A `<figcaption>` element inside a `<figure class=\"table\">` element.\n *  - A `<caption>` inside a <table>.\n *\n * @returns Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element cannot be matched.\n */\nexport function matchTableCaptionViewElement( element: ViewElement ): { name: true } | null {\n\tconst parent = element.parent;\n\n\tif ( element.name == 'figcaption' && parent && parent.is( 'element', 'figure' ) && parent.hasClass( 'table' ) ) {\n\t\treturn { name: true };\n\t}\n\n\tif ( element.name == 'caption' && parent && parent.is( 'element', 'table' ) ) {\n\t\treturn { name: true };\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n* @module table/tablecaption/toggletablecaptioncommand\n*/\n\nimport { Command } from 'ckeditor5/src/core.js';\nimport type { Writer } from 'ckeditor5/src/engine.js';\nimport type TableCaptionEditing from './tablecaptionediting.js';\n\nimport { getCaptionFromTableModelElement } from './utils.js';\nimport { getSelectionAffectedTable } from '../utils/common.js';\n\n/**\n * The toggle table caption command.\n *\n * This command is registered by {@link module:table/tablecaption/tablecaptionediting~TableCaptionEditing} as the\n * `'toggleTableCaption'` editor command.\n *\n * Executing this command:\n *\n * * either adds or removes the table caption of a selected table (depending on whether the caption is present or not),\n * * removes the table caption if the selection is anchored in one.\n *\n * ```ts\n * // Toggle the presence of the caption.\n * editor.execute( 'toggleTableCaption' );\n * ```\n *\n * **Note**: You can move the selection to the caption right away as it shows up upon executing this command by using\n * the `focusCaptionOnShow` option:\n *\n * ```ts\n * editor.execute( 'toggleTableCaption', { focusCaptionOnShow: true } );\n * ```\n */\nexport default class ToggleTableCaptionCommand extends Command {\n\tdeclare public value: boolean;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\tconst editor = this.editor;\n\t\tconst tableElement = getSelectionAffectedTable( editor.model.document.selection );\n\n\t\tthis.isEnabled = !!tableElement;\n\n\t\tif ( !this.isEnabled ) {\n\t\t\tthis.value = false;\n\t\t} else {\n\t\t\tthis.value = !!getCaptionFromTableModelElement( tableElement );\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * ```ts\n\t * editor.execute( 'toggleTableCaption' );\n\t * ```\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.focusCaptionOnShow When true and the caption shows up, the selection will be moved into it straight away.\n\t * @fires execute\n\t */\n\tpublic override execute( { focusCaptionOnShow = false }: { focusCaptionOnShow?: boolean } = {} ): void {\n\t\tthis.editor.model.change( writer => {\n\t\t\tif ( this.value ) {\n\t\t\t\tthis._hideTableCaption( writer );\n\t\t\t} else {\n\t\t\t\tthis._showTableCaption( writer, focusCaptionOnShow );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Shows the table caption. Also:\n\t *\n\t * * it attempts to restore the caption content from the `TableCaptionEditing` caption registry,\n\t * * it moves the selection to the caption right away, it the `focusCaptionOnShow` option was set.\n\t *\n\t * @param focusCaptionOnShow Default focus behavior when showing the caption.\n\t */\n\tprivate _showTableCaption( writer: Writer, focusCaptionOnShow: boolean ) {\n\t\tconst model = this.editor.model;\n\t\tconst tableElement = getSelectionAffectedTable( model.document.selection );\n\t\tconst tableCaptionEditing: TableCaptionEditing = this.editor.plugins.get( 'TableCaptionEditing' );\n\t\tconst savedCaptionElement = tableCaptionEditing._getSavedCaption( tableElement );\n\n\t\t// Try restoring the caption from the TableCaptionEditing plugin storage.\n\t\tconst newCaptionElement = savedCaptionElement || writer.createElement( 'caption' );\n\n\t\tmodel.insertContent( newCaptionElement, tableElement, 'end' );\n\n\t\tif ( focusCaptionOnShow ) {\n\t\t\twriter.setSelection( newCaptionElement, 'in' );\n\t\t}\n\t}\n\n\t/**\n\t * Hides the caption of a selected table (or an table caption the selection is anchored to).\n\t *\n\t * The content of the caption is stored in the `TableCaptionEditing` caption registry to make this\n\t * a reversible action.\n\t */\n\tprivate _hideTableCaption( writer: Writer ) {\n\t\tconst model = this.editor.model;\n\t\tconst tableElement = getSelectionAffectedTable( model.document.selection );\n\t\tconst tableCaptionEditing: TableCaptionEditing = this.editor.plugins.get( 'TableCaptionEditing' );\n\t\tconst captionElement = getCaptionFromTableModelElement( tableElement )!;\n\n\t\t// Store the caption content so it can be restored quickly if the user changes their mind.\n\t\ttableCaptionEditing._saveCaption( tableElement, captionElement );\n\n\t\tmodel.deleteContent( writer.createSelection( captionElement, 'on' ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecaption/tablecaptionediting\n */\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\nimport { Element, enablePlaceholder } from 'ckeditor5/src/engine.js';\nimport { toWidgetEditable } from 'ckeditor5/src/widget.js';\n\nimport injectTableCaptionPostFixer from '../converters/table-caption-post-fixer.js';\nimport ToggleTableCaptionCommand from './toggletablecaptioncommand.js';\nimport { isTable, matchTableCaptionViewElement } from './utils.js';\n\n/**\n * The table caption editing plugin.\n */\nexport default class TableCaptionEditing extends Plugin {\n\t/**\n\t * A map that keeps saved JSONified table captions and table model elements they are\n\t * associated with.\n\t *\n\t * To learn more about this system, see {@link #_saveCaption}.\n\t */\n\tprivate _savedCaptionsMap: WeakMap<Element, unknown>;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCaptionEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._savedCaptionsMap = new WeakMap();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst view = editor.editing.view;\n\t\tconst t = editor.t;\n\n\t\tif ( !schema.isRegistered( 'caption' ) ) {\n\t\t\tschema.register( 'caption', {\n\t\t\t\tallowIn: 'table',\n\t\t\t\tallowContentOf: '$block',\n\t\t\t\tisLimit: true\n\t\t\t} );\n\t\t} else {\n\t\t\tschema.extend( 'caption', {\n\t\t\t\tallowIn: 'table'\n\t\t\t} );\n\t\t}\n\n\t\teditor.commands.add( 'toggleTableCaption', new ToggleTableCaptionCommand( this.editor ) );\n\n\t\t// View -> model converter for the data pipeline.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: matchTableCaptionViewElement,\n\t\t\tmodel: 'caption'\n\t\t} );\n\n\t\t// Model -> view converter for the data pipeline.\n\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'caption',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\tif ( !isTable( modelElement.parent ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn writer.createContainerElement( 'figcaption' );\n\t\t\t}\n\t\t} );\n\n\t\t// Model -> view converter for the editing pipeline.\n\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'caption',\n\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\tif ( !isTable( modelElement.parent ) ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst figcaptionElement = writer.createEditableElement( 'figcaption' );\n\t\t\t\twriter.setCustomProperty( 'tableCaption', true, figcaptionElement );\n\n\t\t\t\tfigcaptionElement.placeholder = t( 'Enter table caption' );\n\n\t\t\t\tenablePlaceholder( {\n\t\t\t\t\tview,\n\t\t\t\t\telement: figcaptionElement,\n\t\t\t\t\tkeepOnFocus: true\n\t\t\t\t} );\n\n\t\t\t\treturn toWidgetEditable( figcaptionElement, writer );\n\t\t\t}\n\t\t} );\n\n\t\tinjectTableCaptionPostFixer( editor.model );\n\t}\n\n\t/**\n\t * Returns the saved {@link module:engine/model/element~Element#toJSON JSONified} caption\n\t * of a table model element.\n\t *\n\t * See {@link #_saveCaption}.\n\t *\n\t * @internal\n\t * @param tableModelElement The model element the caption should be returned for.\n\t * @returns The model caption element or `null` if there is none.\n\t */\n\tpublic _getSavedCaption( tableModelElement: Element ): Element | null {\n\t\tconst jsonObject = this._savedCaptionsMap.get( tableModelElement );\n\n\t\treturn jsonObject ? Element.fromJSON( jsonObject ) : null;\n\t}\n\n\t/**\n\t * Saves a {@link module:engine/model/element~Element#toJSON JSONified} caption for\n\t * a table element to allow restoring it in the future.\n\t *\n\t * A caption is saved every time it gets hidden. The\n\t * user should be able to restore it on demand.\n\t *\n\t * **Note**: The caption cannot be stored in the table model element attribute because,\n\t * for instance, when the model state propagates to collaborators, the attribute would get\n\t * lost (mainly because it does not convert to anything when the caption is hidden) and\n\t * the states of collaborators' models would de-synchronize causing numerous issues.\n\t *\n\t * See {@link #_getSavedCaption}.\n\t *\n\t * @internal\n\t * @param tableModelElement The model element the caption is saved for.\n\t * @param caption The caption model element to be saved.\n\t */\n\tpublic _saveCaption( tableModelElement: Element, caption: Element ): void {\n\t\tthis._savedCaptionsMap.set( tableModelElement, caption.toJSON() );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n* @module table/tablecaption/tablecaptionui\n*/\n\nimport { Plugin, icons } from 'ckeditor5/src/core.js';\nimport { ButtonView } from 'ckeditor5/src/ui.js';\nimport type ToggleTableCaptionCommand from './toggletablecaptioncommand.js';\n\nimport { getCaptionFromModelSelection } from './utils.js';\n\n/**\n  * The table caption UI plugin. It introduces the `'toggleTableCaption'` UI button.\n  */\nexport default class TableCaptionUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCaptionUI' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst t = editor.t;\n\n\t\teditor.ui.componentFactory.add( 'toggleTableCaption', locale => {\n\t\t\tconst command: ToggleTableCaptionCommand = editor.commands.get( 'toggleTableCaption' )!;\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\ticon: icons.caption,\n\t\t\t\ttooltip: true,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\tview.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\t\t\tview.bind( 'label' ).to( command, 'value', value => value ? t( 'Toggle caption off' ) : t( 'Toggle caption on' ) );\n\n\t\t\tthis.listenTo( view, 'execute', () => {\n\t\t\t\teditor.execute( 'toggleTableCaption', { focusCaptionOnShow: true } );\n\n\t\t\t\t// Scroll to the selection and highlight the caption if the caption showed up.\n\t\t\t\tif ( command.value ) {\n\t\t\t\t\tconst modelCaptionElement = getCaptionFromModelSelection( editor.model.document.selection )!;\n\t\t\t\t\tconst figcaptionElement = editor.editing.mapper.toViewElement( modelCaptionElement );\n\n\t\t\t\t\tif ( !figcaptionElement ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\teditingView.scrollToTheSelection();\n\t\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t\twriter.addClass( 'table__caption_highlighted', figcaptionElement );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecaption\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport TableCaptionEditing from './tablecaption/tablecaptionediting.js';\nimport TableCaptionUI from './tablecaption/tablecaptionui.js';\n\nimport '../theme/tablecaption.css';\n\n/**\n * The table caption plugin.\n */\nexport default class TableCaption extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableCaption' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableCaptionEditing, TableCaptionUI ] as const;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/tablewidthscommand\n */\n\nimport type { Element } from 'ckeditor5/src/engine.js';\nimport { Command } from 'ckeditor5/src/core.js';\nimport { normalizeColumnWidths } from './utils.js';\n\n/**\n * Command used by the {@link module:table/tablecolumnresize~TableColumnResize Table column resize feature} that\n * updates the width of the whole table as well as its individual columns.\n */\nexport default class TableWidthsCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override refresh(): void {\n\t\t// The command is always enabled as it doesn't care about the actual selection - table can be resized\n\t\t// even if the selection is elsewhere.\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Updated the `tableWidth` attribute of the table and the `columnWidth` attribute of the columns of that table.\n\t */\n\tpublic override execute( options: TableWidthsCommandOptions = {} ): void {\n\t\tconst { model, plugins } = this.editor;\n\t\tlet {\n\t\t\ttable = model.document.selection.getSelectedElement()!,\n\t\t\tcolumnWidths,\n\t\t\ttableWidth\n\t\t} = options;\n\n\t\tif ( columnWidths ) {\n\t\t\t// For backwards compatibility, columnWidths might be an array or a string of comma-separated values.\n\t\t\tcolumnWidths = Array.isArray( columnWidths ) ?\n\t\t\t\tcolumnWidths :\n\t\t\t\tcolumnWidths.split( ',' );\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\tif ( tableWidth ) {\n\t\t\t\twriter.setAttribute( 'tableWidth', tableWidth, table );\n\t\t\t} else {\n\t\t\t\twriter.removeAttribute( 'tableWidth', table );\n\t\t\t}\n\n\t\t\tconst tableColumnGroup = plugins\n\t\t\t\t.get( 'TableColumnResizeEditing' )\n\t\t\t\t.getColumnGroupElement( table )!;\n\n\t\t\tif ( !columnWidths && !tableColumnGroup ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( !columnWidths ) {\n\t\t\t\treturn writer.remove( tableColumnGroup );\n\t\t\t}\n\n\t\t\tconst widths = normalizeColumnWidths( columnWidths as Array<string> );\n\n\t\t\tif ( !tableColumnGroup ) {\n\t\t\t\tconst colGroupElement = writer.createElement( 'tableColumnGroup' );\n\n\t\t\t\twidths.forEach( columnWidth => writer.appendElement( 'tableColumn', { columnWidth }, colGroupElement ) );\n\t\t\t\twriter.append( colGroupElement, table );\n\t\t\t} else {\n\t\t\t\tArray\n\t\t\t\t\t.from( tableColumnGroup.getChildren() )\n\t\t\t\t\t.forEach( ( column, index ) => writer.setAttribute( 'columnWidth', widths[ index ], column ) );\n\t\t\t}\n\t\t} );\n\t}\n}\n\nexport interface TableWidthsCommandOptions {\n\n\t/**\n\t * New value of the `columnWidths` attribute. Must be array of strings or string with comma-separated values.\n\t * If skipped, the column widths information will be deleted.\n\t */\n\tcolumnWidths?: Array<string> | string;\n\n\t/**\n\t * The new table width. If skipped, the model attribute will be removed.\n\t */\n\ttableWidth?: string;\n\n\t/**\n\t * The table that is having the columns resized.\n\t */\n\ttable?: Element;\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/converters\n */\n\nimport type {\n\tDowncastDispatcher,\n\tDowncastInsertEvent,\n\tElement,\n\tUpcastDispatcher,\n\tUpcastElementEvent,\n\tViewElement\n} from 'ckeditor5/src/engine.js';\nimport type TableUtils from '../tableutils.js';\nimport {\n\tnormalizeColumnWidths,\n\tupdateColumnElements,\n\tgetColumnGroupElement,\n\tgetTableColumnElements,\n\ttranslateColSpanAttribute\n} from './utils.js';\n\n/**\n * Returns a upcast helper that ensures the number of `<tableColumn>` elements corresponds to the actual number of columns in the table,\n * because the input data might have too few or too many <col> elements.\n */\nexport function upcastColgroupElement( tableUtilsPlugin: TableUtils ): ( dispatcher: UpcastDispatcher ) => void {\n\treturn dispatcher => dispatcher.on<UpcastElementEvent>( 'element:colgroup', ( evt, data, conversionApi ) => {\n\t\tconst modelTable = data.modelCursor.findAncestor( 'table' )!;\n\t\tconst tableColumnGroup = getColumnGroupElement( modelTable );\n\n\t\tif ( !tableColumnGroup ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst columnElements = getTableColumnElements( tableColumnGroup );\n\t\tconst columnsCount = tableUtilsPlugin.getColumns( modelTable );\n\t\tlet columnWidths = translateColSpanAttribute( tableColumnGroup, conversionApi.writer );\n\n\t\t// Fill the array with 'auto' values if the number of columns is higher than number of declared values.\n\t\tcolumnWidths = Array.from( { length: columnsCount }, ( _, index ) => columnWidths[ index ] || 'auto' );\n\n\t\tif ( columnWidths.length != columnElements.length || columnWidths.includes( 'auto' ) ) {\n\t\t\tupdateColumnElements( columnElements, tableColumnGroup, normalizeColumnWidths( columnWidths ), conversionApi.writer );\n\t\t}\n\t}, { priority: 'low' } );\n}\n\n/**\n * Returns downcast helper for adding `ck-table-resized` class if there is a `<tableColumnGroup>` element inside the table.\n */\nexport function downcastTableResizedClass(): ( dispatcher: DowncastDispatcher ) => void {\n\treturn dispatcher => dispatcher.on<DowncastInsertEvent>( 'insert:table', ( evt, data, conversionApi ) => {\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst modelTable = data.item as Element;\n\t\tconst viewElement: ViewElement = conversionApi.mapper.toViewElement( modelTable )!;\n\n\t\tconst viewTable = viewElement.is( 'element', 'table' ) ?\n\t\t\tviewElement :\n\t\t\tArray.from( viewElement.getChildren() ).find( viewChild => viewChild.is( 'element', 'table' ) )!;\n\n\t\tconst tableColumnGroup = getColumnGroupElement( modelTable );\n\n\t\tif ( tableColumnGroup ) {\n\t\t\tviewWriter.addClass( 'ck-table-resized', viewTable as ViewElement );\n\t\t} else {\n\t\t\tviewWriter.removeClass( 'ck-table-resized', viewTable as ViewElement );\n\t\t}\n\t}, { priority: 'low' } );\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize/tablecolumnresizeediting\n */\n\nimport { throttle, isEqual } from 'lodash-es';\n\nimport {\n\tglobal,\n\tDomEmitterMixin,\n\ttype EventInfo,\n\ttype DomEmitter,\n\ttype ObservableChangeEvent\n} from 'ckeditor5/src/utils.js';\n\nimport { Plugin, type Editor } from 'ckeditor5/src/core.js';\n\nimport type {\n\tDiffer,\n\tDomEventData,\n\tDowncastInsertEvent,\n\tDowncastWriter,\n\tElement,\n\tViewElement,\n\tViewNode\n} from 'ckeditor5/src/engine.js';\n\nimport MouseEventsObserver from '../../src/tablemouse/mouseeventsobserver.js';\nimport TableEditing from '../tableediting.js';\nimport TableUtils from '../tableutils.js';\nimport TableWalker from '../tablewalker.js';\n\nimport TableWidthsCommand from './tablewidthscommand.js';\n\nimport { downcastTableResizedClass, upcastColgroupElement } from './converters.js';\n\nimport {\n\tclamp,\n\tcreateFilledArray,\n\tsumArray,\n\tgetColumnEdgesIndexes,\n\tgetChangedResizedTables,\n\tgetColumnMinWidthAsPercentage,\n\tgetElementWidthInPixels,\n\tgetTableWidthInPixels,\n\tnormalizeColumnWidths,\n\ttoPrecision,\n\tgetDomCellOuterWidth,\n\tupdateColumnElements,\n\tgetColumnGroupElement,\n\tgetTableColumnElements,\n\tgetTableColumnsWidths\n} from './utils.js';\n\nimport { COLUMN_MIN_WIDTH_IN_PIXELS } from './constants.js';\nimport type TableColumnResize from '../tablecolumnresize.js';\n\ntype ResizingData = {\n\tcolumnPosition: number;\n\tflags: {\n\t\tisRightEdge: boolean;\n\t\tisTableCentered: boolean;\n\t\tisLtrContent: boolean;\n\t};\n\telements: {\n\t\tviewResizer: ViewElement;\n\t\tmodelTable: Element;\n\t\tviewFigure: ViewElement;\n\t\tviewColgroup: ViewElement;\n\t\tviewLeftColumn: ViewElement;\n\t\tviewRightColumn?: ViewElement;\n\t};\n\twidths: {\n\t\tviewFigureParentWidth: number;\n\t\tviewFigureWidth: number;\n\t\ttableWidth: number;\n\t\tleftColumnWidth: number;\n\t\trightColumnWidth?: number;\n\t};\n};\n\n/**\n * The table column resize editing plugin.\n */\nexport default class TableColumnResizeEditing extends Plugin {\n\t/**\n\t * A flag indicating if the column resizing is in progress.\n\t */\n\tprivate _isResizingActive: boolean;\n\n\t/**\n\t * A flag indicating if the column resizing is allowed. It is not allowed if the editor is in read-only\n\t * or comments-only mode or the `TableColumnResize` plugin is disabled.\n\t *\n\t * @observable\n\t * @internal\n\t */\n\tpublic declare _isResizingAllowed: boolean;\n\n\t/**\n\t * A temporary storage for the required data needed to correctly calculate the widths of the resized columns. This storage is\n\t * initialized when column resizing begins, and is purged upon completion.\n\t */\n\tprivate _resizingData: ResizingData | null;\n\n\t/**\n\t * DOM emitter.\n\t */\n\tprivate _domEmitter: DomEmitter;\n\n\t/**\n\t * A local reference to the {@link module:table/tableutils~TableUtils} plugin.\n\t */\n\tprivate _tableUtilsPlugin: TableUtils;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get requires() {\n\t\treturn [ TableEditing, TableUtils ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static get pluginName() {\n\t\treturn 'TableColumnResizeEditing' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor: Editor ) {\n\t\tsuper( editor );\n\n\t\tthis._isResizingActive = false;\n\t\tthis.set( '_isResizingAllowed', true );\n\t\tthis._resizingData = null;\n\t\tthis._domEmitter = new ( DomEmitterMixin() )();\n\t\tthis._tableUtilsPlugin = editor.plugins.get( 'TableUtils' );\n\n\t\tthis.on<ObservableChangeEvent<boolean>>( 'change:_isResizingAllowed', ( evt, name, value ) => {\n\t\t\t// Toggling the `ck-column-resize_disabled` class shows and hides the resizers through CSS.\n\t\t\tconst classAction = value ? 'removeClass' : 'addClass';\n\n\t\t\teditor.editing.view.change( writer => {\n\t\t\t\tfor ( const root of editor.editing.view.document.roots ) {\n\t\t\t\t\twriter[ classAction ]( 'ck-column-resize_disabled', editor.editing.view.document.getRoot( root.rootName )! );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic init(): void {\n\t\tthis._extendSchema();\n\t\tthis._registerPostFixer();\n\t\tthis._registerConverters();\n\t\tthis._registerResizingListeners();\n\t\tthis._registerResizerInserter();\n\n\t\tconst editor = this.editor;\n\t\tconst columnResizePlugin: TableColumnResize = editor.plugins.get( 'TableColumnResize' );\n\t\tconst tableEditing: TableEditing = editor.plugins.get( 'TableEditing' );\n\n\t\ttableEditing.registerAdditionalSlot( {\n\t\t\tfilter: element => element.is( 'element', 'tableColumnGroup' ),\n\t\t\tpositionOffset: 0\n\t\t} );\n\n\t\tconst tableWidthsCommand = new TableWidthsCommand( editor );\n\n\t\t// For backwards compatibility we have two commands that perform exactly the same operation.\n\t\teditor.commands.add( 'resizeTableWidth', tableWidthsCommand );\n\t\teditor.commands.add( 'resizeColumnWidths', tableWidthsCommand );\n\n\t\t// Currently the states of column resize and table resize (which is actually the last column resize) features\n\t\t// are bound together. They can be separated in the future by adding distinct listeners and applying\n\t\t// different CSS classes (e.g. `ck-column-resize_disabled` and `ck-table-resize_disabled`) to the editor root.\n\t\t// See #12148 for the details.\n\t\tthis.bind( '_isResizingAllowed' ).to(\n\t\t\teditor, 'isReadOnly',\n\t\t\tcolumnResizePlugin, 'isEnabled',\n\t\t\ttableWidthsCommand, 'isEnabled',\n\t\t\t( isEditorReadOnly, isPluginEnabled, isTableWidthsCommandCommandEnabled ) =>\n\t\t\t\t!isEditorReadOnly && isPluginEnabled && isTableWidthsCommandCommandEnabled\n\t\t);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic override destroy(): void {\n\t\tthis._domEmitter.stopListening();\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Returns a 'tableColumnGroup' element from the 'table'.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns A 'tableColumnGroup' element.\n\t */\n\tpublic getColumnGroupElement( element: Element ): Element | undefined {\n\t\treturn getColumnGroupElement( element );\n\t}\n\n\t/**\n\t * Returns an array of 'tableColumn' elements.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns An array of 'tableColumn' elements.\n\t */\n\tpublic getTableColumnElements( element: Element ): Array<Element> {\n\t\treturn getTableColumnElements( element );\n\t}\n\n\t/**\n\t * Returns an array of table column widths.\n\t *\n\t * @param element A 'table' or 'tableColumnGroup' element.\n\t * @returns An array of table column widths.\n\t */\n\tpublic getTableColumnsWidths( element: Element ): Array<string> {\n\t\treturn getTableColumnsWidths( element );\n\t}\n\n\t/**\n\t * Registers new attributes for a table model element.\n\t */\n\tprivate _extendSchema() {\n\t\tthis.editor.model.schema.extend( 'table', {\n\t\t\tallowAttributes: [ 'tableWidth' ]\n\t\t} );\n\n\t\tthis.editor.model.schema.register( 'tableColumnGroup', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tthis.editor.model.schema.register( 'tableColumn', {\n\t\t\tallowIn: 'tableColumnGroup',\n\t\t\tallowAttributes: [ 'columnWidth', 'colSpan' ],\n\t\t\tisLimit: true\n\t\t} );\n\t}\n\n\t/**\n\t * Registers table column resize post-fixer.\n\t *\n\t * It checks if the change from the differ concerns a table-related element or attribute. For detected changes it:\n\t *  * Adjusts the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n\t *  * Checks if the `columnWidths` attribute gets updated accordingly after columns have been added or removed.\n\t */\n\tprivate _registerPostFixer() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tmodel.document.registerPostFixer( writer => {\n\t\t\tlet changed = false;\n\n\t\t\tfor ( const table of getChangedResizedTables( model ) ) {\n\t\t\t\tconst tableColumnGroup = this.getColumnGroupElement( table )!;\n\t\t\t\tconst columns = this.getTableColumnElements( tableColumnGroup );\n\t\t\t\tconst columnWidths = this.getTableColumnsWidths( tableColumnGroup );\n\n\t\t\t\t// Adjust the `columnWidths` attribute to guarantee that the sum of the widths from all columns is 100%.\n\t\t\t\tlet normalizedWidths = normalizeColumnWidths( columnWidths );\n\n\t\t\t\t// If the number of columns has changed, then we need to adjust the widths of the affected columns.\n\t\t\t\tnormalizedWidths = adjustColumnWidths( normalizedWidths, table, this );\n\n\t\t\t\tif ( isEqual( columnWidths, normalizedWidths ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateColumnElements( columns, tableColumnGroup, normalizedWidths, writer );\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\n\t\t/**\n\t\t * Adjusts if necessary the `columnWidths` in case if the number of column has changed.\n\t\t *\n\t\t * @param columnWidths Note: this array **may be modified** by the function.\n\t\t * @param table Table to be checked.\n\t\t */\n\t\tfunction adjustColumnWidths( columnWidths: Array<string>, table: Element, plugin: TableColumnResizeEditing ): Array<string> {\n\t\t\tconst newTableColumnsCount = plugin._tableUtilsPlugin.getColumns( table );\n\t\t\tconst columnsCountDelta = newTableColumnsCount - columnWidths.length;\n\n\t\t\tif ( columnsCountDelta === 0 ) {\n\t\t\t\treturn columnWidths;\n\t\t\t}\n\n\t\t\tconst widths: Array<number> = columnWidths.map( width => Number( width.replace( '%', '' ) ) );\n\n\t\t\t// Collect all cells that are affected by the change.\n\t\t\tconst cellSet = getAffectedCells( plugin.editor.model.document.differ, table ) as Set<Element>;\n\n\t\t\tfor ( const cell of cellSet ) {\n\t\t\t\tconst currentColumnsDelta = newTableColumnsCount - widths.length;\n\n\t\t\t\tif ( currentColumnsDelta === 0 ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If the column count in the table changed, adjust the widths of the affected columns.\n\t\t\t\tconst hasMoreColumns = currentColumnsDelta > 0;\n\t\t\t\tconst currentColumnIndex = plugin._tableUtilsPlugin.getCellLocation( cell ).column;\n\n\t\t\t\tif ( hasMoreColumns ) {\n\t\t\t\t\tconst columnMinWidthAsPercentage = getColumnMinWidthAsPercentage( table, plugin.editor );\n\t\t\t\t\tconst columnWidthsToInsert = createFilledArray( currentColumnsDelta, columnMinWidthAsPercentage );\n\n\t\t\t\t\twidths.splice( currentColumnIndex, 0, ...columnWidthsToInsert );\n\t\t\t\t} else {\n\t\t\t\t\t// Moves the widths of the removed columns to the preceding one.\n\t\t\t\t\t// Other editors either reduce the width of the whole table or adjust the widths\n\t\t\t\t\t// proportionally, so change of this behavior can be considered in the future.\n\t\t\t\t\tconst removedColumnWidths = widths.splice( currentColumnIndex, Math.abs( currentColumnsDelta ) );\n\n\t\t\t\t\twidths[ currentColumnIndex ] += sumArray( removedColumnWidths );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn widths.map( width => width + '%' );\n\t\t}\n\n\t\t/**\n\t\t * Returns a set of cells that have been changed in a given table.\n\t\t */\n\t\tfunction getAffectedCells( differ: Differ, table: Element ): Set<Element> {\n\t\t\tconst cellSet = new Set<Element>();\n\n\t\t\tfor ( const change of differ.getChanges() ) {\n\t\t\t\tif (\n\t\t\t\t\tchange.type == 'insert' &&\n\t\t\t\t\tchange.position.nodeAfter &&\n\t\t\t\t\t( change.position.nodeAfter as Element ).name == 'tableCell' &&\n\t\t\t\t\tchange.position.nodeAfter.getAncestors().includes( table )\n\t\t\t\t) {\n\t\t\t\t\tcellSet.add( change.position.nodeAfter as Element );\n\t\t\t\t} else if ( change.type == 'remove' ) {\n\t\t\t\t\t// If the first cell was removed, use the node after the change position instead.\n\t\t\t\t\tconst referenceNode = ( change.position.nodeBefore || change.position.nodeAfter ) as Element;\n\n\t\t\t\t\tif ( referenceNode.name == 'tableCell' && referenceNode.getAncestors().includes( table ) ) {\n\t\t\t\t\t\tcellSet.add( referenceNode );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn cellSet;\n\t\t}\n\t}\n\n\t/**\n\t * Registers table column resize converters.\n\t */\n\tprivate _registerConverters() {\n\t\tconst editor = this.editor;\n\t\tconst conversion = editor.conversion;\n\n\t\t// Table width style\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'figure',\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\twidth: /[\\s\\S]+/\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tkey: 'tableWidth',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => viewElement.getStyle( 'width' )\n\t\t\t}\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'table',\n\t\t\t\tkey: 'tableWidth'\n\t\t\t},\n\t\t\tview: ( width: string ) => ( {\n\t\t\t\tname: 'figure',\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\twidth\n\t\t\t\t}\n\t\t\t} )\n\t\t} );\n\n\t\tconversion.elementToElement( { model: 'tableColumnGroup', view: 'colgroup' } );\n\t\tconversion.elementToElement( { model: 'tableColumn', view: 'col' } );\n\t\tconversion.for( 'downcast' ).add( downcastTableResizedClass() );\n\t\tconversion.for( 'upcast' ).add( upcastColgroupElement( this._tableUtilsPlugin ) );\n\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'col',\n\t\t\t\tstyles: {\n\t\t\t\t\twidth: /.*/\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'columnWidth',\n\t\t\t\tvalue: ( viewElement: ViewElement ) => {\n\t\t\t\t\tconst viewColWidth = viewElement.getStyle( 'width' );\n\n\t\t\t\t\t// 'pt' is the default unit for table column width pasted from MS Office.\n\t\t\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n\t\t\t\t\tif ( !viewColWidth || ( !viewColWidth.endsWith( '%' ) && !viewColWidth.endsWith( 'pt' ) ) ) {\n\t\t\t\t\t\treturn 'auto';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn viewColWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// The `col[span]` attribute is present in tables pasted from MS Excel. We use it to set the temporary `colSpan` model attribute,\n\t\t// which is consumed during the `colgroup` element upcast.\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/14521#issuecomment-1662102889 for more details.\n\t\tconversion.for( 'upcast' ).attributeToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'col',\n\t\t\t\tkey: 'span'\n\t\t\t},\n\t\t\tmodel: 'colSpan'\n\t\t} );\n\n\t\tconversion.for( 'downcast' ).attributeToAttribute( {\n\t\t\tmodel: {\n\t\t\t\tname: 'tableColumn',\n\t\t\t\tkey: 'columnWidth'\n\t\t\t},\n\t\t\tview: width => ( { key: 'style', value: { width } } )\n\t\t} );\n\t}\n\n\t/**\n\t * Registers listeners to handle resizing process.\n\t */\n\tprivate _registerResizingListeners() {\n\t\tconst editingView = this.editor.editing.view;\n\n\t\teditingView.addObserver( MouseEventsObserver );\n\t\teditingView.document.on( 'mousedown', this._onMouseDownHandler.bind( this ), { priority: 'high' } );\n\n\t\tthis._domEmitter.listenTo( global.window.document, 'mousemove', throttle( this._onMouseMoveHandler.bind( this ), 50 ) );\n\t\tthis._domEmitter.listenTo( global.window.document, 'mouseup', this._onMouseUpHandler.bind( this ) );\n\t}\n\n\t/**\n\t * Handles the `mousedown` event on column resizer element:\n\t *  * calculates the initial column pixel widths,\n\t *  * inserts the `<colgroup>` element if it is not present in the `<table>`,\n\t *  * puts the necessary data in the temporary storage,\n\t *  * applies the attributes to the `<table>` view element.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param domEventData The data related to the DOM event.\n\t */\n\tprivate _onMouseDownHandler( eventInfo: EventInfo, domEventData: DomEventData ) {\n\t\tconst target = domEventData.target;\n\n\t\tif ( !target.hasClass( 'ck-table-column-resizer' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this._isResizingAllowed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst modelTable = editor.editing.mapper.toModelElement( target.findAncestor( 'figure' )! )!;\n\n\t\t// Do not resize if table model is in non-editable place.\n\t\tif ( !editor.model.canEditAt( modelTable ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\t\teventInfo.stop();\n\n\t\t// The column widths are calculated upon mousedown to allow lazy applying the `columnWidths` attribute on the table.\n\t\tconst columnWidthsInPx = _calculateDomColumnWidths( modelTable, this._tableUtilsPlugin, editor );\n\t\tconst viewTable = target.findAncestor( 'table' )!;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// Insert colgroup for the table that is resized for the first time.\n\t\tif ( !Array.from( viewTable.getChildren() ).find( viewCol => viewCol.is( 'element', 'colgroup' ) ) ) {\n\t\t\teditingView.change( viewWriter => {\n\t\t\t\t_insertColgroupElement( viewWriter, columnWidthsInPx, viewTable );\n\t\t\t} );\n\t\t}\n\n\t\tthis._isResizingActive = true;\n\t\tthis._resizingData = this._getResizingData( domEventData, columnWidthsInPx );\n\n\t\t// At this point we change only the editor view - we don't want other users to see our changes yet,\n\t\t// so we can't apply them in the model.\n\t\teditingView.change( writer => _applyResizingAttributesToTable( writer, viewTable, this._resizingData! ) );\n\n\t\t/**\n\t\t * Calculates the DOM columns' widths. It is done by taking the width of the widest cell\n\t\t * from each table column (we rely on the  {@link module:table/tablewalker~TableWalker}\n\t\t * to determine which column the cell belongs to).\n\t\t *\n\t\t * @param modelTable A table which columns should be measured.\n\t\t * @param tableUtils The Table Utils plugin instance.\n\t\t * @param editor The editor instance.\n\t\t * @returns Columns' widths expressed in pixels (without unit).\n\t\t */\n\t\tfunction _calculateDomColumnWidths( modelTable: Element, tableUtilsPlugin: TableUtils, editor: Editor ) {\n\t\t\tconst columnWidthsInPx = Array( tableUtilsPlugin.getColumns( modelTable ) );\n\t\t\tconst tableWalker = new TableWalker( modelTable );\n\n\t\t\tfor ( const cellSlot of tableWalker ) {\n\t\t\t\tconst viewCell = editor.editing.mapper.toViewElement( cellSlot.cell )!;\n\t\t\t\tconst domCell = editor.editing.view.domConverter.mapViewToDom( viewCell )!;\n\t\t\t\tconst domCellWidth = getDomCellOuterWidth( domCell );\n\n\t\t\t\tif ( !columnWidthsInPx[ cellSlot.column ] || domCellWidth < columnWidthsInPx[ cellSlot.column ] ) {\n\t\t\t\t\tcolumnWidthsInPx[ cellSlot.column ] = toPrecision( domCellWidth );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn columnWidthsInPx;\n\t\t}\n\n\t\t/**\n\t\t * Creates a `<colgroup>` element with `<col>`s and inserts it into a given view table.\n\t\t *\n\t\t * @param viewWriter A writer instance.\n\t\t * @param columnWidthsInPx Column widths.\n\t\t * @param viewTable A table view element.\n\t\t */\n\t\tfunction _insertColgroupElement( viewWriter: DowncastWriter, columnWidthsInPx: Array<number>, viewTable: ViewElement ) {\n\t\t\tconst colgroup = viewWriter.createContainerElement( 'colgroup' );\n\n\t\t\tfor ( let i = 0; i < columnWidthsInPx.length; i++ ) {\n\t\t\t\tconst viewColElement = viewWriter.createEmptyElement( 'col' );\n\t\t\t\tconst columnWidthInPc = `${ toPrecision( columnWidthsInPx[ i ] / sumArray( columnWidthsInPx ) * 100 ) }%`;\n\n\t\t\t\tviewWriter.setStyle( 'width', columnWidthInPc, viewColElement );\n\t\t\t\tviewWriter.insert( viewWriter.createPositionAt( colgroup, 'end' ), viewColElement );\n\t\t\t}\n\n\t\t\tviewWriter.insert( viewWriter.createPositionAt( viewTable, 0 ), colgroup );\n\t\t}\n\n\t\t/**\n\t\t * Applies the style and classes to the view table as the resizing begun.\n\t\t *\n\t\t * @param viewWriter A writer instance.\n\t\t * @param viewTable A table containing the clicked resizer.\n\t\t * @param resizingData Data related to the resizing.\n\t\t */\n\t\tfunction _applyResizingAttributesToTable( viewWriter: DowncastWriter, viewTable: ViewElement, resizingData: ResizingData ) {\n\t\t\tconst figureInitialPcWidth = resizingData.widths.viewFigureWidth / resizingData.widths.viewFigureParentWidth;\n\n\t\t\tviewWriter.addClass( 'ck-table-resized', viewTable );\n\t\t\tviewWriter.addClass( 'ck-table-column-resizer__active', resizingData.elements.viewResizer );\n\t\t\tviewWriter.setStyle( 'width', `${ toPrecision( figureInitialPcWidth * 100 ) }%`, viewTable.findAncestor( 'figure' )! );\n\t\t}\n\t}\n\n\t/**\n\t * Handles the `mousemove` event.\n\t *  * If resizing process is not in progress, it does nothing.\n\t *  * If resizing is active but not allowed, it stops the resizing process instantly calling the `mousedown` event handler.\n\t *  * Otherwise it dynamically updates the widths of the resized columns.\n\t *\n\t * @param eventInfo An object containing information about the fired event.\n\t * @param mouseEventData The native DOM event.\n\t */\n\tprivate _onMouseMoveHandler( eventInfo: EventInfo, mouseEventData: MouseEvent ) {\n\t\tif ( !this._isResizingActive ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this._isResizingAllowed ) {\n\t\t\tthis._onMouseUpHandler();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\tcolumnPosition,\n\t\t\tflags: {\n\t\t\t\tisRightEdge,\n\t\t\t\tisTableCentered,\n\t\t\t\tisLtrContent\n\t\t\t},\n\t\t\telements: {\n\t\t\t\tviewFigure,\n\t\t\t\tviewLeftColumn,\n\t\t\t\tviewRightColumn\n\t\t\t},\n\t\t\twidths: {\n\t\t\t\tviewFigureParentWidth,\n\t\t\t\ttableWidth,\n\t\t\t\tleftColumnWidth,\n\t\t\t\trightColumnWidth\n\t\t\t}\n\t\t} = this._resizingData!;\n\n\t\tconst dxLowerBound = -leftColumnWidth + COLUMN_MIN_WIDTH_IN_PIXELS;\n\n\t\tconst dxUpperBound = isRightEdge ?\n\t\t\tviewFigureParentWidth - tableWidth :\n\t\t\trightColumnWidth! - COLUMN_MIN_WIDTH_IN_PIXELS;\n\n\t\t// The multiplier is needed for calculating the proper movement offset:\n\t\t// - it should negate the sign if content language direction is right-to-left,\n\t\t// - it should double the offset if the table edge is resized and table is centered.\n\t\tconst multiplier = ( isLtrContent ? 1 : -1 ) * ( isRightEdge && isTableCentered ? 2 : 1 );\n\n\t\tconst dx = clamp(\n\t\t\t( mouseEventData.clientX - columnPosition ) * multiplier,\n\t\t\tMath.min( dxLowerBound, 0 ),\n\t\t\tMath.max( dxUpperBound, 0 )\n\t\t);\n\n\t\tif ( dx === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editor.editing.view.change( writer => {\n\t\t\tconst leftColumnWidthAsPercentage = toPrecision( ( leftColumnWidth + dx ) * 100 / tableWidth );\n\n\t\t\twriter.setStyle( 'width', `${ leftColumnWidthAsPercentage }%`, viewLeftColumn );\n\n\t\t\tif ( isRightEdge ) {\n\t\t\t\tconst tableWidthAsPercentage = toPrecision( ( tableWidth + dx ) * 100 / viewFigureParentWidth );\n\n\t\t\t\twriter.setStyle( 'width', `${ tableWidthAsPercentage }%`, viewFigure );\n\t\t\t} else {\n\t\t\t\tconst rightColumnWidthAsPercentage = toPrecision( ( rightColumnWidth! - dx ) * 100 / tableWidth );\n\n\t\t\t\twriter.setStyle( 'width', `${ rightColumnWidthAsPercentage }%`, viewRightColumn! );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Handles the `mouseup` event.\n\t *  * If resizing process is not in progress, it does nothing.\n\t *  * If resizing is active but not allowed, it cancels the resizing process restoring the original widths.\n\t *  * Otherwise it propagates the changes from view to the model by executing the adequate commands.\n\t */\n\tprivate _onMouseUpHandler() {\n\t\tif ( !this._isResizingActive ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\tviewResizer,\n\t\t\tmodelTable,\n\t\t\tviewFigure,\n\t\t\tviewColgroup\n\t\t} = this._resizingData!.elements;\n\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tconst tableColumnGroup = this.getColumnGroupElement( modelTable );\n\t\tconst viewColumns: Array<ViewElement> = Array\n\t\t\t.from( viewColgroup.getChildren() )\n\t\t\t.filter( ( column: ViewNode ): column is ViewElement => column.is( 'view:element' ) );\n\n\t\tconst columnWidthsAttributeOld = tableColumnGroup ?\n\t\t\tthis.getTableColumnsWidths( tableColumnGroup )! :\n\t\t\tnull;\n\n\t\tconst columnWidthsAttributeNew = viewColumns.map( column => column.getStyle( 'width' ) );\n\n\t\tconst isColumnWidthsAttributeChanged = !isEqual( columnWidthsAttributeOld, columnWidthsAttributeNew );\n\n\t\tconst tableWidthAttributeOld = modelTable.getAttribute( 'tableWidth' ) as string;\n\t\tconst tableWidthAttributeNew = viewFigure.getStyle( 'width' )!;\n\n\t\tconst isTableWidthAttributeChanged = tableWidthAttributeOld !== tableWidthAttributeNew;\n\n\t\tif ( isColumnWidthsAttributeChanged || isTableWidthAttributeChanged ) {\n\t\t\tif ( this._isResizingAllowed ) {\n\t\t\t\teditor.execute( 'resizeTableWidth', {\n\t\t\t\t\ttable: modelTable,\n\t\t\t\t\ttableWidth: `${ toPrecision( tableWidthAttributeNew ) }%`,\n\t\t\t\t\tcolumnWidths: columnWidthsAttributeNew\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\t// In read-only mode revert all changes in the editing view. The model is not touched so it does not need to be restored.\n\t\t\t\t// This case can occur if the read-only mode kicks in during the resizing process.\n\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t// If table had resized columns before, restore the previous column widths.\n\t\t\t\t\t// Otherwise clean up the view from the temporary column resizing markup.\n\t\t\t\t\tif ( columnWidthsAttributeOld ) {\n\t\t\t\t\t\tfor ( const viewCol of viewColumns ) {\n\t\t\t\t\t\t\twriter.setStyle( 'width', columnWidthsAttributeOld.shift()!, viewCol );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.remove( viewColgroup );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isTableWidthAttributeChanged ) {\n\t\t\t\t\t\t// If the whole table was already resized before, restore the previous table width.\n\t\t\t\t\t\t// Otherwise clean up the view from the temporary table resizing markup.\n\t\t\t\t\t\tif ( tableWidthAttributeOld ) {\n\t\t\t\t\t\t\twriter.setStyle( 'width', tableWidthAttributeOld, viewFigure );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriter.removeStyle( 'width', viewFigure );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If a table and its columns weren't resized before,\n\t\t\t\t\t// prune the remaining common resizing markup.\n\t\t\t\t\tif ( !columnWidthsAttributeOld && !tableWidthAttributeOld ) {\n\t\t\t\t\t\twriter.removeClass(\n\t\t\t\t\t\t\t'ck-table-resized',\n\t\t\t\t\t\t\t[ ... viewFigure.getChildren() as IterableIterator<ViewElement> ].find( element => element.name === 'table' )!\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\teditingView.change( writer => {\n\t\t\twriter.removeClass( 'ck-table-column-resizer__active', viewResizer );\n\t\t} );\n\n\t\tthis._isResizingActive = false;\n\t\tthis._resizingData = null;\n\t}\n\n\t/**\n\t * Retrieves and returns required data needed for the resizing process.\n\t *\n\t * @param domEventData The data of the `mousedown` event.\n\t * @param columnWidths The current widths of the columns.\n\t * @returns The data needed for the resizing process.\n\t */\n\tprivate _getResizingData( domEventData: DomEventData, columnWidths: Array<number> ): ResizingData {\n\t\tconst editor = this.editor;\n\n\t\tconst columnPosition = ( domEventData.domEvent as Event & { clientX: number } ).clientX;\n\n\t\tconst viewResizer = domEventData.target;\n\t\tconst viewLeftCell = viewResizer.findAncestor( 'td' )! || viewResizer.findAncestor( 'th' )!;\n\t\tconst modelLeftCell = editor.editing.mapper.toModelElement( viewLeftCell )!;\n\t\tconst modelTable = modelLeftCell.findAncestor( 'table' )!;\n\n\t\tconst leftColumnIndex = getColumnEdgesIndexes( modelLeftCell, this._tableUtilsPlugin ).rightEdge;\n\t\tconst lastColumnIndex = this._tableUtilsPlugin.getColumns( modelTable ) - 1;\n\n\t\tconst isRightEdge = leftColumnIndex === lastColumnIndex;\n\t\tconst isTableCentered = !modelTable.hasAttribute( 'tableAlignment' );\n\t\tconst isLtrContent = editor.locale.contentLanguageDirection !== 'rtl';\n\n\t\tconst viewTable = viewLeftCell.findAncestor( 'table' )!;\n\t\tconst viewFigure = viewTable.findAncestor( 'figure' ) as ViewElement;\n\t\tconst viewColgroup = [ ...viewTable.getChildren() as IterableIterator<ViewElement> ]\n\t\t\t.find( viewCol => viewCol.is( 'element', 'colgroup' ) )!;\n\t\tconst viewLeftColumn = viewColgroup.getChild( leftColumnIndex ) as ViewElement;\n\t\tconst viewRightColumn = isRightEdge ? undefined : viewColgroup.getChild( leftColumnIndex + 1 ) as ViewElement;\n\n\t\tconst viewFigureParentWidth = getElementWidthInPixels(\n\t\t\teditor.editing.view.domConverter.mapViewToDom( viewFigure.parent! ) as HTMLElement\n\t\t);\n\t\tconst viewFigureWidth = getElementWidthInPixels( editor.editing.view.domConverter.mapViewToDom( viewFigure )! );\n\t\tconst tableWidth = getTableWidthInPixels( modelTable, editor );\n\t\tconst leftColumnWidth = columnWidths[ leftColumnIndex ];\n\t\tconst rightColumnWidth = isRightEdge ? undefined : columnWidths[ leftColumnIndex + 1 ];\n\n\t\treturn {\n\t\t\tcolumnPosition,\n\t\t\tflags: {\n\t\t\t\tisRightEdge,\n\t\t\t\tisTableCentered,\n\t\t\t\tisLtrContent\n\t\t\t},\n\t\t\telements: {\n\t\t\t\tviewResizer,\n\t\t\t\tmodelTable,\n\t\t\t\tviewFigure,\n\t\t\t\tviewColgroup,\n\t\t\t\tviewLeftColumn,\n\t\t\t\tviewRightColumn\n\t\t\t},\n\t\t\twidths: {\n\t\t\t\tviewFigureParentWidth,\n\t\t\t\tviewFigureWidth,\n\t\t\t\ttableWidth,\n\t\t\t\tleftColumnWidth,\n\t\t\t\trightColumnWidth\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Registers a listener ensuring that each resizable cell have a resizer handle.\n\t */\n\tprivate _registerResizerInserter() {\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( dispatcher => {\n\t\t\tdispatcher.on<DowncastInsertEvent<Element>>( 'insert:tableCell', ( evt, data, conversionApi ) => {\n\t\t\t\tconst modelElement = data.item;\n\t\t\t\tconst viewElement = conversionApi.mapper.toViewElement( modelElement );\n\t\t\t\tconst viewWriter = conversionApi.writer;\n\n\t\t\t\tviewWriter.insert(\n\t\t\t\t\tviewWriter.createPositionAt( viewElement!, 'end' ),\n\t\t\t\t\tviewWriter.createUIElement( 'div', { class: 'ck-table-column-resizer' } )\n\t\t\t\t);\n\t\t\t}, { priority: 'lowest' } );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options\n */\n\n/**\n * @module table/tablecolumnresize\n */\n\nimport { Plugin } from 'ckeditor5/src/core.js';\nimport TableColumnResizeEditing from './tablecolumnresize/tablecolumnresizeediting.js';\nimport TableCellWidthEditing from './tablecellwidth/tablecellwidthediting.js';\n\nimport '../theme/tablecolumnresize.css';\n\n/**\n * The table column resize feature.\n *\n * It provides the possibility to set the width of each column in a table using a resize handler.\n */\nexport default class TableColumnResize extends Plugin {\n\t/**\n\t * @inheritDoc\n \t */\n\tpublic static get requires() {\n\t\treturn [ TableColumnResizeEditing, TableCellWidthEditing ] as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n \t */\n\tpublic static get pluginName() {\n\t\treturn 'TableColumnResize' as const;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static override get isOfficialPlugin(): true {\n\t\treturn true;\n\t}\n}\n"],"names":["upcastStyleToAttribute","conversion","options","modelAttribute","styleName","viewElement","defaultValue","reduceBoxSides","shouldUpcast","for","attributeToAttribute","view","name","styles","model","key","value","normalized","getNormalizedStyle","reduceBoxSidesValue","upcastBorderStyles","viewElementName","modelAttributes","defaultBorder","add","dispatcher","on","evt","data","conversionApi","modelRange","stylesToConsume","filter","viewItem","hasStyle","length","matcherPattern","consumable","test","modelElement","getItems","shallow","pop","consume","normalizedBorder","style","color","width","reducedBorder","writer","setAttribute","downcastAttributeToStyle","modelAttributeValue","downcastTableAttribute","item","attributeNewValue","mapper","table","toViewElement","getChildren","find","child","is","setStyle","removeStyle","sides","allSidesDefined","every","side","topSideStyle","top","allSidesEqual","updateNumericAttribute","undefined","removeAttribute","createEmptyTableCell","insertPosition","attributes","tableCell","createElement","insertElement","insert","isHeadingColumnCell","tableUtils","parent","headingColumns","parseInt","getAttribute","column","getCellLocation","enableProperty","schema","extend","allowAttributes","getSelectionAffectedTable","selection","selectedElement","getSelectedElement","getFirstPosition","findAncestor","upcastTableFigure","classes","viewTable","getViewTableFromFigure","conversionResult","convertItem","modelCursor","modelTable","first","revert","convertChildren","createPositionAt","updateConversionResult","upcastTable","rows","headingRows","scanTable","safeInsert","forEach","row","isEmpty","skipEmptyTableRow","index","stop","priority","ensureParagraphInTableCell","elementName","start","nodeAfter","childNodes","Array","from","node","paragraph","move","createRangeOn","figureView","figureChild","headRows","bodyRows","firstTheadElement","tableChild","trs","el","maxPrevColumns","tr","trColumns","e","push","headingCols","scanRowForHeadingColumns","Math","max","children","th","colspan","TableWalker","_jumpedToStartRow","constructor","_table","_startRow","startRow","_endRow","endRow","_startColumn","startColumn","_endColumn","endColumn","_includeAllSlots","includeAllSlots","_skipRows","Set","_row","_rowIndex","_column","_cellIndex","_spannedCells","Map","_nextCellAtColumn","Symbol","iterator","_canJumpToStartRow","_jumpToNonSpannedRowClosestToStartRow","getChild","_isOverEndRow","done","next","_isOverEndColumn","_advanceToNextRow","outValue","spanData","_getSpanned","_shouldSkipSlot","_formatOutValue","cell","rowspan","_recordSpans","skipRow","anchorRow","anchorColumn","TableSlot","rowIsMarkedAsSkipped","has","rowIsBeforeStartRow","columnIsBeforeStartColumn","columnIsAfterEndColumn","rowMap","get","rowToUpdate","columnToUpdate","_markSpannedCell","set","rowSpans","firstRowLength","_getRowLength","i","rowIndex","reduce","cols","tableWalker","cellAnchorRow","cellAnchorColumn","isAnchor","cellWidth","cellHeight","root","document","downcastTable","tableElement","createContainerElement","figureElement","class","createSlot","element","getRows","positionOffset","additionalSlots","some","asWidget","toTableWidget","downcastRow","tableRow","createEmptyElement","downcastCell","getChildIndex","result","tableSlot","isHeading","cellElementName","toWidgetEditable","createEditableElement","convertParagraphInTableCell","isSingleParagraphWithoutAttributes","setCustomProperty","isSingleParagraph","childCount","hasAnyAttribute","toWidget","hasSelectionHandle","attributeKey","getAttributeKeys","startsWith","InsertTableCommand","Command","editor","isEnabled","isAllowedInParent","execute","plugins","defaultRows","config","defaultColumns","change","createTable","insertObject","findOptimalPosition","setSelection","getNodeByPath","positionParent","validParent","checkChild","InsertRowCommand","order","isAnyCellSelected","getSelectionAffectedTableCells","insertAbove","affectedTableCells","rowIndexes","getRowIndexes","last","insertRows","at","copyStructureFromAbove","InsertColumnCommand","insertBefore","columnIndexes","getColumnIndexes","insertColumns","columns","SplitCellCommand","direction","selectedCells","isHorizontal","splitCellHorizontally","splitCellVertically","cropTableToDimensions","sourceTable","cropDimensions","croppedTable","cropHeight","tableMap","sourceRow","sourceColumn","rowInCroppedTable","tableCellCopy","cloneElement","append","trimTableCellIfNeeded","addHeadingsToCroppedTable","getVerticallyOverlappingCells","overlapRow","cells","slotInfo","cellEndRow","splitHorizontally","splitRow","newRowspan","newCellAttributes","newCellRowSpan","newCell","columnIndex","getPositionBefore","getHorizontallyOverlappingCells","overlapColumn","cellsToSplit","cellEndColumn","splitVertically","splitColumn","newColspan","newCellColSpan","createPositionAfter","cellRow","cellColumn","limitRow","limitColumn","trimmedSpan","headingRowsInCrop","headingColumnsInCrop","removeEmptyColumns","getColumns","columnsMap","fill","emptyColumns","cellsCount","emptyColumn","removeColumns","removeEmptyRows","emptyRows","tableRowCount","emptyRow","removeRows","removeEmptyRowsColumns","removedColumns","adjustLastRowIndex","dimensions","lastRowMap","firstColumn","lastColumn","lastRow","everyCellHasSingleRowspan","rowspanAdjustment","adjustLastColumnIndex","lastColumnMap","firstRow","everyCellHasSingleColspan","colspanAdjustment","MergeCellCommand","cellToMerge","_getMergeableCell","doc","getTableCellsContainingSelection","isMergeNext","cellToExpand","cellToRemove","removedTableCellRow","mergeTableCells","spanAttribute","cellSpan","cellToMergeSpan","createRangeIn","getHorizontalCell","getVerticalCell","span","horizontalCell","nextSibling","previousSibling","hasHeadingColumns","cellOnLeft","cellOnRight","leftCellColumn","rightCellColumn","leftCellSpan","isCellOnLeftInHeadingColumn","isCellOnRightInHeadingColumn","cellsAreTouching","isMergeWithBodyCell","isMergeWithHeadCell","currentCellRowSpan","rowOfCellToMerge","currentCellData","mergeColumn","cellToMergeData","remove","firstTableChild","RemoveRowCommand","firstCell","lastRowIndex","selectedRowIndexes","areAllRowsSelected","referenceCells","removedRowIndexes","columnIndexToFocus","rowsToRemove","cellToFocus","getCellToFocus","removedRowIndex","columnToFocus","min","RemoveColumnCommand","tableColumnCount","lastCell","getBoundaryCells","removedColumnIndexes","columnsToRemove","reverse","returnValue","isBefore","SetHeaderRowCommand","isInTable","_isInHeading","forceValue","headingRowsToSet","currentHeadingRows","overlappingCells","SetHeaderColumnCommand","headingColumnsToSet","COLUMN_MIN_WIDTH_AS_PERCENTAGE","COLUMN_MIN_WIDTH_IN_PIXELS","COLUMN_WIDTH_PRECISION","getChangedResizedTables","affectedTables","differ","getChanges","referencePosition","type","includes","position","range","tableNode","getColumnGroupElement","getColumnMinWidthAsPercentage","getTableWidthInPixels","referenceElement","getChildrenViewElement","domReferenceElement","editing","domConverter","mapViewToDom","getElementWidthInPixels","viewFigure","domElement","global","window","getComputedStyle","boxSizing","parseFloat","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","getColumnEdgesIndexes","cellColumnIndex","leftEdge","rightEdge","toPrecision","multiplier","pow","number","round","clamp","createFilledArray","sumArray","array","map","Number","isNaN","normalizeColumnWidths","columnWidths","widths","replace","normalizedWidths","calculateMissingColumnWidths","totalWidth","columnWidth","isLastColumn","numberOfUninitializedColumns","totalWidthOfInitializedColumns","widthForUninitializedColumn","getDomCellOuterWidth","domCell","borderWidth","updateColumnElements","tableColumnGroup","appendElement","getTableColumnElements","columnGroupElement","getTableColumnsWidths","translateColSpanAttribute","tableColumnElements","acc","colSpan","TableUtils","Plugin","pluginName","isOfficialPlugin","decorate","createEmptyRows","insertAt","rowsToInsert","isCopyStructure","copyStructureFrom","CKEditorError","walkerEndRow","tableIterator","rowColSpansMap","lastCellRow","isOverlappingInsertedRow","isReferenceRow","cellIndex","abs","columnsToInsert","tableColumns","createCells","rowCount","indexesObject","cellsToMove","cellsToTrim","getCellsToMoveAndTrimOnRemoveRow","size","rowAfterRemovedSection","moveCellsToRow","updateHeadingRows","adjustHeadingColumns","removedColumnIndex","adjacentColumn","removedColumnWidth","adjacentColumnWidth","numberOfCells","newCellsSpan","updatedSpan","breakSpanEvenly","newCellsAttributes","cellsToInsert","splitCellColumn","cellsToUpdate","isOnSameColumn","spansOverColumn","splitCellRow","distanceFromLastCellSpan","isAfterSplitCell","rowspanToSet","getSelectedTableCells","sortRanges","getRanges","getContainedElement","cellWithSelection","tableCells","indexes","_getFirstLastIndexesObject","entry","isSelectionRectangular","selectedTableCells","_areCellInTheSameTableSection","areaOfSelectedCells","areaOfValidSelection","getBiggestRectangleArea","ranges","sort","compareRangeOrder","allIndexesSorted","indexA","indexB","_areIndexesInSameSection","headingSectionSize","firstCellIsInHeading","lastCellIsInHeading","tableCellToInsert","floor","headingsRemoved","newRows","lastRowOfCell","isCellStickingOutFromRemovedRows","rowspanInRemovedSection","rowSpanToSet","isCellOverlappingRemovedRows","targetRowIndex","tableRowMap","previousCell","cellToMove","targetPosition","rangeA","rangeB","posA","posB","rowsIndexes","values","MergeCellsCommand","firstTableCell","shift","mergeWidth","mergeHeight","getMergeDimensions","cellBeingMerged","targetCell","maxWidthOffset","maxHeightOffset","getMaxOffset","firstCellRow","firstCellColumn","currentMaxOffset","which","dimensionValue","SelectRowCommand","affectsData","rangesToSelect","SelectColumnCommand","startLocation","endLocation","cellInfo","injectTableLayoutPostFixer","registerPostFixer","tableLayoutPostFixer","changes","wasFixed","analyzedTables","isTableAttributeEntry","fixTableCellsRowspan","fixTableRowsSizes","findCellsToTrim","childrenLengths","getChildrenLengths","entries","splice","rowsLengths","tableSize","isValid","maxColumns","prev","current","maxRows","count","isInHeader","rowLimit","lengths","injectTableCellParagraphPostFixer","tableCellContentsPostFixer","fixTable","fixTableRow","fixTableCellContent","checkTableCellChange","textNodes","wrap","tableHeadingsRefreshHandler","isRowChange","expectedElementName","reconvertItem","tableCellRefreshHandler","cellsToCheck","paragraphsToRefresh","shouldRefresh","TableEditing","requires","_additionalSlots","register","inheritAllFrom","allowIn","isLimit","allowContentOf","isSelectable","elementToStructure","elementToElement","converterPriority","upcastCellSpan","define","commands","listenTo","registerAdditionalSlot","slotHandler","InsertTableView","View","locale","bind","bindTemplate","items","_createGridCollection","keystrokes","KeystrokeHandler","focusTracker","FocusTracker","to","setTemplate","tag","text","mousedown","preventDefault","click","fire","domEvt","target","dataset","focus","focusedElement","_highlightGridBoxes","render","addKeyboardHandlingForGrid","keystrokeHandler","gridItems","numberOfColumns","uiLanguageDirection","boxView","itemRow","itemColumn","isOn","_createGridButton","label","button","ButtonView","extendTemplate","boxes","createCollection","TableUI","t","contentLanguageDirection","isContentLtr","ui","componentFactory","command","dropdownView","createDropdown","buttonView","icon","icons","tooltip","insertTableView","panelView","delegate","menuView","MenuBarMenuView","event","isOpen","reset","commandName","bindIsOn","_prepareDropdown","tableColumnIcon","tableRowIcon","_prepareMergeSplitButtonDropdown","tableMergeCellIcon","_fillDropdownWithListOptions","toMany","areEnabled","source","SwitchButtonView","SplitButtonView","mergeCommandName","mergeCommand","itemDefinitions","Collection","option","addListOption","addListToDropdown","ViewModel","withText","TableSelection","args","_handleDeleteContent","_handleInsertTextEvent","_defineSelectionConverter","_enablePluginDisabling","documentFragment","createDocumentFragment","adjustedLastRow","adjustedLastColumn","setCellSelection","anchorCell","cellsToSelect","_getCellsToSelect","backward","focusCellRange","anchorCellRange","highlighted","viewWriter","clearHighlightedTableCells","addClass","lastViewCell","previouslyHighlighted","removeClass","clear","getNearestSelectionRange","isBackward","tableCellToSelect","deleteContent","createSelection","rangeToSelect","setTo","viewRanges","selectionMap","walkerOptions","flipVertically","flipHorizontally","flat","TableClipboard","ClipboardMarkersUtils","ClipboardPipeline","viewDocument","_onCopyCut","content","selectable","_onInsertContent","tableSelection","clipboardMarkersUtils","canEditAt","enqueueChange","isUndoable","_copySelectedFragmentWithMarkers","getSelectionAsFragment","dataTransfer","toView","method","pastedTable","getTableIfOnlyTableInContent","_pasteMarkersIntoTransformedElement","markers","_replaceSelectedCells","pastedDimensions","height","prepareTableForPasting","selectionHeight","selectionWidth","selectedTable","_replaceSelectedCellsWithPasted","selectionRanges","pastedWidth","pastedHeight","pastedTableLocationMap","createLocationMap","selectedTableMap","pastedRow","pastedColumn","pastedCell","cellToInsert","newTableCell","_replaceTableSlotCell","areHeadingRowsIntersectingSelection","areHeadingColumnsIntersectingSelection","columnsLimit","newCells","doHorizontalSplit","rowsLimit","doVerticalSplit","contentRange","rangeBefore","createRange","createPositionBefore","hasContent","ignoreWhitespaces","rangeAfter","end","shouldExpandSelection","expandTableSize","splitCellsToRectangularSelection","expectedHeight","expectedWidth","tableWidth","tableHeight","limitColumns","isAffectedBySelection","limitRows","limit","endIndex","isInsideSelection","overlapsSelectionFromOutside","TableKeyboard","_onArrowKey","context","_handleTabOnSelectedTable","_handleTab","accessibility","addKeystrokeInfoGroup","id","keystroke","bubblingEventInfo","domEventData","stopPropagation","isForward","shiftKey","getFocusCell","currentRowIndex","currentCellIndex","isFirstCellInRow","isLastCellInRow","isLastRow","nextRow","previousRow","eventInfo","keyCode","getLocalizedArrowKeyCodeDirection","wasHandled","_handleArrowKeys","expandSelection","focusCell","_navigateFromCellInDirection","isCollapsed","containsEntireContent","isObject","_isSelectionAtCellEdge","getLastPosition","getLimitElement","boundaryPosition","isTouching","probe","modifySelection","isEqual","currentCellInfo","isOutsideVertically","isBeforeFirstCell","isAfterLastCell","cellToSelect","getAnchorCell","positionToSelect","MouseEventsObserver","DomEventObserver","domEventType","onDomEvent","domEvent","TableMouse","addObserver","_enableShiftClickSelection","_enableMouseDragSelection","blockSelectionChange","_getModelTableCellFromDomEvent","haveSameTableParent","beganCellSelection","ctrlKey","altKey","buttons","newTargetCell","viewTargetElement","viewPosition","modelPosition","toModelPosition","includeSelf","cellA","cellB","Table","Widget","PlainTableOutput","downcastTableElement","downcastTableBorderAndBackgroundAttributes","headRowsSlot","bodyRowsSlot","childrenSlot","theadElement","tbodyElement","tableContentElements","Object","getSelectionAffectedTableWidget","getSelectedTableWidget","getTableWidgetAncestor","isTableWidget","selectionPosition","getCustomProperty","isWidget","TableToolbar","WidgetToolbarRepository","widgetToolbarRepository","tableContentToolbarItems","tableToolbarItems","ariaLabel","getRelatedElement","ColorInputView","_focusables","ViewCollection","_createDropdownView","inputView","_createInputTextView","_stillTyping","focusCycler","FocusCycler","focusables","actions","focusPrevious","focusNext","inputValue","_setInputValue","focusLast","focusFirst","destroy","colorSelector","_createColorSelector","dropdown","colorPreview","backgroundColor","if","panelPosition","isVisible","updateSelectedColors","showColorGridsFragment","InputTextView","blur","mappedColor","colorDefinitions","def","defaultColor","defaultColorValue","removeColorButtonLabel","ColorSelectorView","colors","removeButtonLabel","colorPickerLabel","colorPickerViewConfig","colorPickerConfig","hideInput","appendUI","backupColor","colorGridsFragmentView","colorPickerButtonView","normalizedInputValue","normalizeColor","colorString","val","getBorderStyleLabels","none","solid","dotted","dashed","double","groove","ridge","inset","outset","getLocalizedColorErrorText","getLocalizedLengthErrorText","colorFieldValidator","trim","toLowerCase","isColor","lengthFieldValidator","isNumberString","isLength","isPercentage","lineWidthFieldValidator","getBorderStyleDefinitions","defaultStyle","styleLabels","definition","_borderStyleValue","role","fillToolbar","toolbar","labels","propertyName","nameToValue","isToggleable","buttonValue","valueToCompare","defaultColors","hasBorder","getLabeledColorInputCreator","labeledFieldView","viewUid","statusUid","colorInputView","colorConfigToColorGridDefinitions","colorConfig","ariaDescribedById","errorText","parsedValue","String","FormRowView","labelView","_role","_ariaLabelledBy","TableCellPropertiesView","borderStyle","borderColor","padding","horizontalAlignment","verticalAlignment","borderStyleDropdown","borderWidthInput","borderColorInput","borderRowLabel","_createBorderFields","backgroundRowLabel","backgroundInput","_createBackgroundFields","widthInput","operatorLabel","heightInput","dimensionsLabel","_createDimensionFields","horizontalAlignmentToolbar","verticalAlignmentToolbar","alignmentLabel","_createAlignmentFields","paddingInput","_createPaddingField","saveButtonView","cancelButtonView","_createActionButtons","_focusCycler","FormHeaderView","tabindex","submitHandler","chain","fieldView","defaultTableCellProperties","colorInputCreator","borderColors","accessibleLabel","LabelView","LabeledFieldView","createLabeledDropdown","ariaLabelledBy","createLabeledInputText","isBorderStyleSet","newValue","oldValue","backgroundColors","ALIGNMENT_ICONS","left","alignLeft","center","alignCenter","right","alignRight","justify","alignJustify","alignTop","middle","alignMiddle","bottom","alignBottom","ToolbarView","isContentRTL","isCompact","_horizontalAlignmentLabels","_verticalAlignmentLabels","fieldsThatShouldValidateToSave","check","errorTexts","cancel","BALLOON_POSITIONS","BalloonPanelView","defaultPositions","northArrowSouth","northArrowSouthWest","northArrowSouthEast","southArrowNorth","southArrowNorthWest","southArrowNorthEast","viewportStickyNorth","repositionContextualBalloon","balloon","getBalloonCellPositionData","getBalloonTablePositionData","updatePosition","positions","rangeCount","createBoundingRect","modelTableCell","getTableCellAtPosition","viewTableCell","isTableCellSelected","rects","Rect","getBoundingRect","getSingleValue","objectOrString","addDefaultUnitToNumericValue","defaultUnit","numericValue","getNormalizedDefaultProperties","normalizedConfig","includeAlignmentProperty","alignment","includePaddingProperty","includeVerticalAlignmentProperty","includeHorizontalAlignmentProperty","isRightToLeftContent","getNormalizedDefaultTableProperties","getNormalizedDefaultCellProperties","ERROR_TEXT_TIMEOUT","propertyToCommandMap","TableCellPropertiesUI","ContextualBalloon","_defaultTableCellProperties","_balloon","_isReady","tableCellProperties","_showView","isCommandEnabled","borderColorsConfig","normalizeColorOptions","localizedBorderColors","getLocalizedColorOptions","backgroundColorsConfig","localizedBackgroundColors","hasColorPicker","colorPicker","_hideView","_undoStepBatch","operations","clickOutsideHandler","emitter","activator","_isViewInBalloon","contextElements","callback","colorErrorText","lengthErrorText","_getPropertyChangeCallback","_getValidatedPropertyChangeCallback","viewField","validator","borderStyleCommand","property","_createPropertiesView","_updateView","_fillViewFormFromCommandValues","createBatch","stopListening","_isViewVisible","visibleView","hasView","batch","setErrorTextDebounced","debounce","TableCellPropertyCommand","attributeName","_defaultValue","_getSingleValue","valueToSet","_getValueToSet","_getAttribute","firstCellValue","everyCellHasAttribute","TableCellWidthCommand","TableCellWidthEditing","TableCellPaddingCommand","TableCellHeightCommand","TableCellBackgroundColorCommand","TableCellVerticalAlignmentCommand","TableCellHorizontalAlignmentCommand","TableCellBorderStyleCommand","TableCellBorderColorCommand","TableCellBorderWidthCommand","VALIGN_VALUES_REG_EXP","ALIGN_VALUES_REG_EXP","TableCellPropertiesEditing","addStyleProcessorRules","addBorderRules","enableBorderProperties","addPaddingRules","addBackgroundRules","enableHorizontalAlignmentProperty","enableVerticalAlignmentProperty","align","getStyle","valign","TableCellProperties","TablePropertyCommand","_getValue","TableBackgroundColorCommand","TableBorderColorCommand","TableBorderStyleCommand","TableBorderWidthCommand","TableWidthCommand","TableHeightCommand","TableAlignmentCommand","FLOAT_VALUES_REG_EXP","TablePropertiesEditing","defaultTableProperties","enableAlignmentProperty","enableTableToFigureProperty","float","TablePropertiesView","alignmentToolbar","backgroundInputCreator","objectLeft","objectCenter","objectRight","_alignmentLabels","TablePropertiesUI","_defaultTableProperties","tableProperties","propertyKey","TableProperties","injectTableCaptionPostFixer","tableCaptionPostFixer","captionsToMerge","firstCaption","caption","isTable","getCaptionFromTableModelElement","tableModelElement","getCaptionFromModelSelection","matchTableCaptionViewElement","hasClass","ToggleTableCaptionCommand","focusCaptionOnShow","_hideTableCaption","_showTableCaption","tableCaptionEditing","savedCaptionElement","_getSavedCaption","newCaptionElement","insertContent","captionElement","_saveCaption","TableCaptionEditing","_savedCaptionsMap","WeakMap","isRegistered","figcaptionElement","placeholder","enablePlaceholder","keepOnFocus","jsonObject","Element","fromJSON","toJSON","TableCaptionUI","editingView","modelCaptionElement","scrollToTheSelection","TableCaption","TableWidthsCommand","isArray","split","colGroupElement","upcastColgroupElement","tableUtilsPlugin","columnElements","columnsCount","_","downcastTableResizedClass","viewChild","TableColumnResizeEditing","_isResizingActive","_resizingData","_domEmitter","DomEmitterMixin","_tableUtilsPlugin","classAction","roots","getRoot","rootName","_extendSchema","_registerPostFixer","_registerConverters","_registerResizingListeners","_registerResizerInserter","columnResizePlugin","tableEditing","tableWidthsCommand","isEditorReadOnly","isPluginEnabled","isTableWidthsCommandCommandEnabled","changed","adjustColumnWidths","plugin","newTableColumnsCount","columnsCountDelta","cellSet","getAffectedCells","currentColumnsDelta","hasMoreColumns","currentColumnIndex","columnMinWidthAsPercentage","columnWidthsToInsert","removedColumnWidths","getAncestors","referenceNode","nodeBefore","viewColWidth","endsWith","_onMouseDownHandler","throttle","_onMouseMoveHandler","_onMouseUpHandler","_isResizingAllowed","toModelElement","columnWidthsInPx","_calculateDomColumnWidths","viewCol","_insertColgroupElement","_getResizingData","_applyResizingAttributesToTable","cellSlot","viewCell","domCellWidth","colgroup","viewColElement","columnWidthInPc","resizingData","figureInitialPcWidth","viewFigureWidth","viewFigureParentWidth","elements","viewResizer","mouseEventData","columnPosition","flags","isRightEdge","isTableCentered","isLtrContent","viewLeftColumn","viewRightColumn","leftColumnWidth","rightColumnWidth","dxLowerBound","dxUpperBound","dx","clientX","leftColumnWidthAsPercentage","tableWidthAsPercentage","rightColumnWidthAsPercentage","viewColgroup","viewColumns","columnWidthsAttributeOld","columnWidthsAttributeNew","isColumnWidthsAttributeChanged","tableWidthAttributeOld","tableWidthAttributeNew","isTableWidthAttributeChanged","viewLeftCell","modelLeftCell","leftColumnIndex","lastColumnIndex","hasAttribute","createUIElement","TableColumnResize"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79]}},
    {"offset": {"line": 11499, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}